//
//
[0.x.0] 
[0.x.1] 
[0.x.2] 
[0.x.3] 
[0.x.4] 
[0.x.5] 
[0.x.6] 
[0.x.7] 
[0.x.8] 
[0.x.9] 
[0.x.10] 
[0.x.11] 
[0.x.12] 
[0.x.13] 
//
[0.x.14] 
//[2.x.0] 
//
// 库中最基本的类是Triangulation类，它在这里声明。
//
[0.x.15] 
//
// 这里有一些生成标准网格的函数。
//
[0.x.16] 
//
// 输出各种图形格式的网格。
//
[0.x.17] 
//
// 这对于C++输出来说是需要的。
//
[0.x.18] 
[0.x.19] 

// 这是对[2.x.1]和[2.x.2]函数声明的说明。
//
[0.x.20] 
//
//导入deal.II的最后一步是这样的。所有deal.II的函数和类都在一个命名空间[2.x.3]中，以确保它们不会与你可能想和deal.II一起使用的其他库的符号发生冲突。我们可以在使用这些函数和类时，在每个名字前加上[2.x.4]的前缀，但这很快就会变得繁琐和令人厌烦。相反，我们只是简单地导入整个deal.II的名字空间，以供一般使用。
//
[0.x.21] 
//[2.x.5] 
//
// 在下面的第一个函数中，我们简单地使用单位方格作为域，并从中产生一个全局细化网格。
//
[0.x.22] 
[0.x.23] 
//
// 首先要做的是为二维域的三角化定义一个对象。
//
[0.x.24] 
//
// 在这里和下面的许多情况下，类名后面的字符串"<2>"表示这是一个在两个空间维度上工作的对象。同样，也有一些三角形类的版本是在一个（"<1>"）和三个（"<3>"）空间维度上工作的。这种工作方式是通过一些模板魔法实现的，我们将在后面的示例程序中详细研究；在那里，我们也将看到如何以一种基本独立于维度的方式编写程序。
//
// 接下来，我们要用一个正方形领域的单个单元来填充三角结构。三角形被细化了四次，总共得到[2.x.6]个单元。
//
[0.x.25] 
[0.x.26] 
//
// 现在我们要将网格的图形表示写到输出文件中。deal.II的GridOut类可以用多种不同的输出格式来实现；在这里，我们选择可扩展矢量图（SVG）格式，你可以用你选择的网络浏览器来进行可视化。
//
[0.x.27] 
[0.x.28] 
[0.x.29] 
[0.x.30] 
[0.x.31] 
//
// [2.x.7] 
//
// 下面第二个函数中的网格略微复杂一些，因为我们使用了一个环形域，并对结果进行了一次全局细化。
//
[0.x.32] 
[0.x.33] 
//
// 我们再次开始定义一个二维域的三角化对象。
//
[0.x.34] 
//
// 然后我们用一个环形域来填充它。环的中心应是点(1,0)，内半径和外半径应是0.5和1。圆周单元的数量可以由这个函数自动调整，但我们选择在最后一个参数中明确设置为10。
//
[0.x.35] 
[0.x.36] 
[0.x.37] 
[0.x.38] 
//
// 默认情况下，三角测量假定所有边界都是直线，所有单元都是双线性四边形或三线性六边形，并且它们是由粗略网格（我们刚刚创建的）的单元定义的。除非我们做一些特别的事情，否则当需要引入新的点时，域被假定为由粗网格的直线划定，而新的点将简单地位于周围的中间。然而，在这里，我们知道领域是弯曲的，我们想让三角法根据底层的几何形状来放置新的点。幸运的是，一些优秀的灵魂实现了一个描述球状域的对象，而环是球状域的一个部分；它只需要环的中心，并自动计算出如何指示三角计算在哪里放置新的点。这在deal.II中的工作方式是，你用一个通常被称为 "流形指标 "的数字来标记你想要弯曲的三角形部分，然后告诉三角形在所有有这个流形指标的地方使用一个特定的 "流形对象"。具体如何操作在此并不重要（你可以在[2.x.8]和[2.x.9]中阅读）。GridGenerator中的函数在大多数情况下为我们处理这个问题：它们将正确的流形附加到一个域上，这样当三角形被细化时，新的单元就会被放置在正确的位置上。在目前的情况下，[2.x.10]为所有的单元格附加了一个球形流形：这将导致单元格在球面坐标的计算下被细化（因此新的单元格的边缘要么是径向的，要么是位于原点周围的同心圆）。
//
// 默认情况下（即对于手工创建的三角图或未调用GridGenerator函数（如[2.x.11]或[2.x.12]），三角图的所有单元格和面都将其manifold_id设置为[2.x.13]，如果您想要一个产生直线边缘的流形，这是默认的，但您可以为个别单元格和面改变这个数字。在这种情况下，因此与数字0相关的曲面流形将不适用于那些流形指标为非零的部分，但其他流形描述对象可以与这些非零指标相关联。如果没有流形描述与特定的流形指标相关联，则暗示产生直角边缘的流形。(流形指标是一个略微复杂的话题；如果你对这里到底发生了什么感到困惑，你可能想看看[2.x.14]"关于这个话题的词汇表条目")。既然[2.x.15]选择的默认值是合理的，我们就不去管它。
//
// 为了演示如何在所有单元格上写一个循环，我们将分五个步骤向域的内圈细化网格。
//
[0.x.39] 
[0.x.40] 
//
// 接下来，我们需要对三角形的活动单元进行循环。你可以把三角形看作一个单元格的集合。如果它是一个数组，你只需要得到一个指针，用操作符`++`从一个元素递增到下一个元素。三角形的单元不是作为一个简单的数组来存储的，但是[1.x.0]的概念将指针的工作方式概括为任意的对象集合（更多信息见[1.x.1]）。通常情况下，C++中的任何容器类型都会返回一个迭代器，指向集合的开始，方法称为`begin'，而迭代器则指向集合结束后的1，方法称为`end'。我们可以用操作符`++it`来增加一个迭代器`it`，用`*it`来解除引用以获得底层数据，并通过比较`it != collection.end()`来检查我们是否完成。
//
// 第二个重要的部分是我们只需要活动单元。活动单元是那些没有被进一步细化的单元，也是唯一可以被标记为进一步细化的单元。deal.II提供了迭代器类别，允许我们在[1.x.2]单元（包括活动单元的父单元）或只在活动单元上迭代。因为我们要的是后者，所以我们需要调用方法[2.x.16] 。
//
//把所有这些放在一起，我们可以用[1.x.3]在一个三角形的所有活动单元上循环。 在这个循环的初始化器中，我们使用了`auto`关键字作为迭代器`it`的类型。`auto`关键字意味着被声明的对象的类型将从上下文中推断出来。当实际的类型名称很长，甚至可能是多余的时候，这个关键字很有用。如果你不确定类型是什么，想查一下结果支持什么操作，你可以去看方法的文档 [2.x.17] 在这个例子中，`it`的类型是 [2.x.18] 。
//
// 虽然`auto`关键字可以让我们不用输入长长的数据类型名称，但我们仍然要输入大量冗余的关于开始和结束迭代器以及如何递增的声明。与其这样，我们不如使用[1.x.4]，它将上面显示的所有语法包成一个更短的形式。
//
[0.x.41] 
[0.x.42] 
//[2.x.19] 关于deal.II中使用的迭代器类的更多信息，见[2.x.20]，关于基于范围的for循环和`auto`关键字的更多信息，见[2.x.21]。
//
// 接下来，我们在单元格的所有顶点上循环。为此，我们查询一个顶点索引的迭代器（在2D中，这是一个包含元素`{0,1,2,3}`的数组，但是由于`cell->vertex_indices()`知道单元格所处的维度，因此返回的数组在所有维度上都是正确的，这使得无论我们在2D还是3D中运行这段代码都是正确的，也就是说，它实现了 "维度无关的编程" - 我们将在 [2.x.22] 中讨论一个重要部分）。
//
[0.x.43] 
[0.x.44] 
//
// 如果这个单元格位于内边界，那么它至少有一个顶点必须位于内环上，因此与中心的径向距离正好是0.5，达到浮点精度。所以我们计算这个距离，如果我们发现一个顶点具有这个属性，我们就标记这个单元，以便以后进行细化。然后我们也可以打破所有顶点的循环，转到下一个单元。        因为离中心的距离是以浮点数计算的，所以我们必须期望我们所计算的东西只能精确到[round-off](https:en.wikipedia.org/wiki/Round-off_error)以内。因此，我们永远不能指望通过平等的方式来比较距离和内半径。诸如 "if (distance_from_center == inner_radius) "这样的语句将会失败，除非我们运气特别好。相反，我们需要以一定的容忍度进行比较，通常的方法是写成`if [2.x.23] 。
//
// - inner_radius) <= tolerance)`，其中`tolerance'是比四舍五入大的某个小数字。问题是如何选择它。我们可以直接选择，比如说，`1e-10'，但这只适合于我们比较的对象是大小为1的情况。如果我们创建了一个单元大小为`1e+10'的网格，那么`1e-10'将远远低于四舍五入，就像以前一样，只有在我们特别幸运的情况下，比较才会成功。相反，使公差*相对于被比较对象的典型 "比例 "几乎总是有用的。在这里，"尺度 "是指内半径，或者是细胞的直径。我们选择前者，并将公差设置为[2.x.24]倍环形物的内半径。
//
[0.x.45] 
[0.x.46] 
//
[0.x.47] 
[0.x.48] 
[0.x.49] 
[0.x.50] 
[0.x.51] 
[0.x.52] 
[0.x.53] 
[0.x.54] 
//
// 现在我们已经标记了所有我们想要细化的单元格，我们让三角化实际做这个细化。这样做的函数的名字很长，因为我们也可以标记单元格进行粗化，该函数一次完成粗化和细化。
//
[0.x.55] 
[0.x.56] 
//
// 最后，在这五次细化迭代之后，我们要再次将得到的网格写入文件，同样是SVG格式。这和上面的工作一样。
//
[0.x.57] 
[0.x.58] 
[0.x.59] 
//
[0.x.60] 
[0.x.61] 
//
// [2.x.25] 
//
// 最后是主函数。这里没有什么可做的，只是调用两个子函数，产生两个网格。
//
[0.x.62] 
[0.x.63] 
[0.x.64] 
[0.x.65] 
[0.x.66] 
[0.x.67] 
[0.x.68] 
[0.x.69] 
[0.x.70] 
[0.x.71] 
[0.x.72] 
[0.x.73] 
[0.x.74] 
[0.x.75] 
[0.x.76] 
[0.x.77] 
[0.x.78] 
[0.x.79] 
[0.x.80] 
//
[0.x.81] 
[0.x.82] 
[0.x.83] 
//
// 以下第一个include文件现在可能已经众所周知，不需要进一步解释。
//
[0.x.84] 
[0.x.85] 
[0.x.86] 
[0.x.87] 
[0.x.88] 
[0.x.89] 
[0.x.90] 
[0.x.91] 
//
// 这个包含文件是新的。即使我们在本教程中不求解PDE，我们也要使用FE_Nothing类提供的自由度为零的假有限元。
//
[0.x.92] 
//
// 下面的头文件也是新的：在其中，我们声明了MappingQ类，我们将使用该类来处理任意阶的多项式映射。
//
[0.x.93] 
//
// 这又是一个C++的文件。
//
[0.x.94] 
[0.x.95] 
[0.x.96] 
//
// 最后一步和以前的程序一样。
//
[0.x.97] 
[0.x.98] 
[0.x.99] 
//
// 现在，由于我们要计算[2.x.26]的值，我们必须与一些东西进行比较。这些是[2.x.27]的前几个数字，我们事先定义好，以便以后使用。由于我们想计算两个数字的差值，而这两个数字是相当精确的，计算出的[2.x.28]的近似值的精度在一个双数变量可以容纳的数字范围内，所以我们宁可将参考值声明为[2.x.29]，并给它增加一些数字。
//
[0.x.100] 
//
// 然后，第一个任务将是生成一些输出。由于这个程序非常小，我们在其中没有采用面向对象的技术，也没有声明类（当然，我们使用了库的面向对象的功能）。相反，我们只是将功能打包成独立的函数。我们使这些函数成为空间维数的模板，以符合使用deal.II时的通常做法，尽管我们只对两个空间维数使用这些函数，当试图对任何其他空间维数使用时，会出现异常。
//
// 这些函数中的第一个只是生成一个圆的三角形（hyperball），并输出[2.x.30]的不同值的单元的映射。然后，我们细化一次网格，再做一次。
//
[0.x.101] 
[0.x.102] 
[0.x.103] 
[0.x.104] 
[0.x.105] 
//因此，
//首先生成一个圆的粗略三角剖分，并将一个合适的边界描述与之关联。默认情况下，[2.x.32]将SphericalManifold附加到边界上（内部使用FlatManifold），所以我们简单地调用该函数并继续前进。
//
[0.x.106] 
[0.x.107] 
//
// 然后在当前网格上交替生成[2.x.33]、[2.x.34]和[2.x.35]映射的输出，以及（在循环体的末端）对网格进行一次全局细化。
//
[0.x.108] 
[0.x.109] 
[0.x.110] 
//
[0.x.111] 
//
[0.x.112] 
[0.x.113] 
[0.x.114] 
//
// 为此，首先建立一个描述映射的对象。这是用MappingQ类来完成的，该类在构造函数中采用了它应使用的多项式程度作为参数。
//
[0.x.115] 
//
// 顺便提一下，对于一个片状线性映射，你可以给MappingQ的构造函数一个[2.x.36]的值，但也有一个MappingQ1类可以达到同样的效果。历史上，它以比MappingQ更简单的方式做了很多事情，但今天只是后者的一个包装。然而，如果你没有明确指定另一个映射，它仍然是库中许多地方隐含使用的类。
//
// 为了真正用这个映射写出现在的网格，我们设置了一个对象，我们将用它来输出。我们将生成Gnuplot输出，它由一组描述映射的三角图的线条组成。默认情况下，三角剖分的每个面只画一条线，但由于我们想明确地看到映射的效果，所以我们想更详细地了解这些面。这可以通过传递给输出对象一个包含一些标志的结构来实现。在目前的情况下，由于Gnuplot只能画直线，我们在面孔上输出了一些额外的点，这样每个面孔就由30条小线来画，而不是只有一条。这足以让我们看到一条弯曲的线，而不是一组直线的印象。
//
[0.x.116] 
[0.x.117] 
[0.x.118] 
//
// 最后，生成一个文件名和一个用于输出的文件。
//
[0.x.119] 
[0.x.120] 
[0.x.121] 
//
// 然后把三角图写到这个文件里。该函数的最后一个参数是一个指向映射对象的指针。这个参数有一个默认值，如果没有给出值，就会取一个简单的MappingQ1对象，我们在上面简单介绍过。这样就会在输出中产生一个真实边界的片状线性近似。
//
[0.x.122] 
[0.x.123] 
[0.x.124] 
//
// 在循环结束时，对网格进行全局细化。
//
[0.x.125] 
[0.x.126] 
[0.x.127] 
//
// 现在我们进行代码的主要部分，即[2.x.37]的近似。圆的面积当然是由[2.x.38]给出的，所以有一个半径为1的圆，面积代表的只是被搜索的数字。面积的数值计算是通过在整个计算域中积分值为1的常数函数来进行的，即通过计算面积[2.x.39]，其中总和延伸到三角形中所有活动单元上的所有正交点，[2.x.40]是正交点的重量[2.x.41]。每个单元上的积分都是通过数字正交来逼近的，因此我们唯一需要的额外成分是建立一个FEValues对象，提供每个单元的相应`JxW`值。注意`JxW`是指[1.x.5]的缩写；因为在数字正交中，两个因子总是出现在相同的地方，所以我们只提供合并的数量，而不是两个单独的数量）。我们注意到，在这里我们不会在其最初的目的中使用FEValues对象，即用于计算特定正交点上的特定有限元的基函数值。相反，我们只用它来获得正交点的 "JxW"，而不考虑我们将给FEValues对象的构造者的（假）有限元。给予FEValues对象的实际有限元根本不使用，所以我们可以给任何。
//
[0.x.128] 
[0.x.129] 
[0.x.130] 
[0.x.131] 
[0.x.132] 
//
// 对于所有单元的数字正交，我们采用足够高的正交规则。我们选择8阶的QGauss（4点），以确保数字正交引起的误差比由于边界近似的阶数，即所采用的映射的阶数（最大6）要高。请注意，积分，雅各布行列式，不是一个多项式函数（相反，它是一个有理函数），所以我们不使用高斯正交来获得积分的精确值，就像在有限元计算中经常做的那样，但也可以使用任何类似阶数的正交公式来代替。
//
[0.x.133] 
//
// 现在开始在多项式映射度=1...4的基础上进行循环。
//
[0.x.134] 
[0.x.135] 
[0.x.136] 
//
// 首先生成三角形、边界和映射对象，正如已经看到的那样。
//
[0.x.137] 
[0.x.138] 
//
[0.x.139] 
//
// 我们现在创建一个有限元。与其他的例子程序不同，我们实际上不需要用形状函数做任何计算；我们只需要FEValues对象的`JxW`值。因此，我们使用特殊的有限元类FE_Nothing，它的每个单元的自由度正好为零（顾名思义，每个单元的局部基础为空集）。FE_Nothing的一个比较典型的用法见 [2.x.42] 。
//
[0.x.140] 
//
// 同样地，我们需要创建一个DoFHandler对象。我们实际上并没有使用它，但是它将为我们提供`active_cell_iterators'，这是重新初始化三角形的每个单元上的FEValues对象所需要的。
//
[0.x.141] 
//
// 现在我们设置FEValues对象，向构造函数提供Mapping、假有限元和正交对象，以及要求只在正交点提供`JxW`值的更新标志。这告诉FEValues对象在调用[2.x.43]函数时不需要计算其他数量，从而节省计算时间。
//
// 与之前的例子程序相比，FEValues对象的构造最重要的区别是，我们传递了一个映射对象作为第一个参数，它将被用于计算从单元到实数单元的映射。在以前的例子中，这个参数被省略了，结果是隐含地使用了MappingQ1类型的对象。
//
[0.x.142] 
//
// 我们使用一个ConvergenceTable类的对象来存储所有重要的数据，如[2.x.44]的近似值和与[2.x.45]的真实值相比的误差。我们还将使用ConvergenceTable类提供的函数来计算[2.x.46]的近似值的收敛率。
//
[0.x.143] 
//
// 现在我们在三角形的几个细化步骤上循环。
//
[0.x.144] 
[0.x.145] 
[0.x.146] 
//
// 在这个循环中，我们首先将当前三角形的活动单元的数量添加到表格中。这个函数会自动创建一个上标为 "cells "的表格列，以防这个列之前没有被创建。
//
[0.x.147] 
//
// 然后我们为虚拟有限元分配自由度。严格来说，在我们的特殊情况下，我们不需要这个函数的调用，但我们调用它是为了让DoFHandler高兴 -- 否则它将在下面的[2.x.47]函数中抛出一个断言。
//
[0.x.148] 
//
// 我们将变量面积定义为 "长双"，就像我们之前为 "pi "变量所做的那样。
//
[0.x.149] 
//
// 现在我们循环所有的单元格，重新初始化每个单元格的FEValues对象，并将该单元格的所有`JxW`值加到`area`上......
//
[0.x.150] 
[0.x.151] 
[0.x.152] 
[0.x.153] 
[0.x.154] 
[0.x.155] 
//
// ...并将得到的区域值和错误存储在表中。我们需要静态转换为双数，因为没有实现add_value(string, long double)函数。请注意，这也涉及到第二个调用，因为[2.x.49]命名空间中的[2.x.48]函数在其参数类型上是重载的，所以存在一个获取并返回[2.x.50]的版本，而全局命名空间中只有一个这样的函数被声明（获取并返回一个双数）。
//
[0.x.156] 
[0.x.157] 
[0.x.158] 
//
// 我们想计算`error`列的收敛率。因此我们需要在调用`evaluate_all_convergence_rates`之前，将其他列从收敛率评估中省略。
//
[0.x.159] 
[0.x.160] 
[0.x.161] 
[0.x.162] 
//
// 最后我们设置一些量的输出精度和科学模式...
//
[0.x.163] 
[0.x.164] 
//
// ...并将整个表格写到 [2.x.51] 。
[0.x.165] 
//
[0.x.166] 
[0.x.167] 
[0.x.168] 
//
// 下面的第二个函数也是计算[2.x.52]的近似值，但这次是通过域的周长[2.x.53]而不是面积。这个函数只是前一个函数的一个变体。因此，我们主要是给出不同之处的文件。
//
[0.x.169] 
[0.x.170] 
[0.x.171] 
[0.x.172] 
[0.x.173] 
//
// 我们采取同样的正交顺序，但这次是`dim-1`维正交，因为我们将在（边界）线上而不是在单元上积分。
//
[0.x.174] 
//
// 我们在所有度数上循环，创建三角形、边界、映射、假有限元和DoFHandler对象，如之前所见。
//
[0.x.175] 
[0.x.176] 
[0.x.177] 
[0.x.178] 
[0.x.179] 
//
[0.x.180] 
[0.x.181] 
//
[0.x.182] 
//
// 然后我们创建一个FEFaceValues对象，而不是像前一个函数中的FEValues对象。同样，我们传递一个映射作为第一个参数。
//
[0.x.183] 
[0.x.184] 
[0.x.185] 
[0.x.186] 
[0.x.187] 
//
[0.x.188] 
[0.x.189] 
[0.x.190] 
[0.x.191] 
//
[0.x.192] 
//
// 现在我们在所有单元和每个单元的所有面上运行。只有边界面上的`JxW`值的贡献被添加到长双变量`周长`中。
//
[0.x.193] 
[0.x.194] 
[0.x.195] 
[0.x.196] 
[0.x.197] 
//
// 我们用单元格迭代器和面的编号重新启动FEFaceValues对象。
//
[0.x.198] 
[0.x.199] 
[0.x.200] 
[0.x.201] 
[0.x.202] 
[0.x.203] 
[0.x.204] 
//
// 然后将评估后的数值存储在表中...
//
[0.x.205] 
[0.x.206] 
[0.x.207] 
[0.x.208] 
//
// ......然后像前一个函数那样结束这个函数。
//
[0.x.209] 
[0.x.210] 
[0.x.211] 
[0.x.212] 
//
[0.x.213] 
[0.x.214] 
//
[0.x.215] 
//
[0.x.216] 
[0.x.217] 
[0.x.218] 
[0.x.219] 
//
// 下面的主函数只是按照上述函数的出现顺序来调用它们。除此以外，它看起来就像以前的教程程序的主函数一样。
//
[0.x.220] 
[0.x.221] 
[0.x.222] 
[0.x.223] 
[0.x.224] 
//
[0.x.225] 
//
[0.x.226] 
//
[0.x.227] 
[0.x.228] 
[0.x.229] 
[0.x.230] 
[0.x.231] 
[0.x.232] 
[0.x.233] 
[0.x.234] 
[0.x.235] 
[0.x.236] 
[0.x.237] 
[0.x.238] 
[0.x.239] 
[0.x.240] 
//
[0.x.241] 
[0.x.242] 
[0.x.243] 
[0.x.244] 
[0.x.245] 
[0.x.246] 
[0.x.247] 
[0.x.248] 
[0.x.249] 
[0.x.250] 
[0.x.251] 
[0.x.252] 
[0.x.253] 
[0.x.254] 
//
[0.x.255] 
[0.x.256] 
[0.x.257] 
[0.x.258] 
[0.x.259] 
[0.x.260] 
[0.x.261] 
[0.x.262] 
[0.x.263] 
[0.x.264] 
[0.x.265] 
[0.x.266] 
[0.x.267] 
[0.x.268] 
[0.x.269] 
[0.x.270] 
//
[0.x.271] 
[0.x.272] 
[0.x.273] 
//
// 像往常一样，程序以一个相当长的包含文件列表开始，你现在可能已经习惯了。
//
[0.x.274] 
[0.x.275] 
[0.x.276] 
[0.x.277] 
[0.x.278] 
[0.x.279] 
[0.x.280] 
[0.x.281] 
[0.x.282] 
[0.x.283] 
[0.x.284] 
[0.x.285] 
[0.x.286] 
[0.x.287] 
[0.x.288] 
[0.x.289] 
[0.x.290] 
[0.x.291] 
[0.x.292] 
//
// 只有这一条是新的：它声明了一个动态稀疏模式（DynamicSparsityPattern）类，我们将在下面进一步使用和解释。
//
[0.x.293] 
//
// 我们将使用C++标准库中的[2.x.54]算法，所以我们必须包括以下文件来声明它。
//
[0.x.294] 
[0.x.295] 
[0.x.296] 
[0.x.297] 
//
// 最后一步和以前所有的程序一样。
//
[0.x.298] 
[0.x.299] 
[0.x.300] 
//
// 然后我们声明一个表示拉普拉斯问题解决方案的类。由于这个例子程序是基于[2.x.55]，这个类看起来相当相同，唯一的结构区别是函数[2.x.56]本身，因此被称为[2.x.57]，而且输出函数被删除，因为解函数非常无聊，不值得查看。
//
// 其他唯一值得注意的变化是，构造函数取一个值，代表以后要使用的映射的多项式程度，而且它还有一个成员变量，正好代表这个映射。一般来说，这个变量在实际应用中会出现在声明或使用有限元的相同地方。
//
[0.x.301] 
[0.x.302] 
[0.x.303] 
[0.x.304] 
[0.x.305] 
[0.x.306] 
//
[0.x.307] 
[0.x.308] 
[0.x.309] 
[0.x.310] 
[0.x.311] 
//
[0.x.312] 
[0.x.313] 
[0.x.314] 
[0.x.315] 
//
[0.x.316] 
[0.x.317] 
[0.x.318] 
//
[0.x.319] 
[0.x.320] 
//
[0.x.321] 
[0.x.322] 
//
// 构建这样一个对象，通过初始化变量。这里，我们使用线性有限元（[2.x.58]变量的参数表示多项式的度数），以及给定阶数的映射。将我们要做的事情打印到屏幕上。
//
[0.x.323] 
[0.x.324] 
[0.x.325] 
[0.x.326] 
[0.x.327] 
[0.x.328] 
[0.x.329] 
[0.x.330] 
[0.x.331] 
[0.x.332] 
//
// 第一个任务是为这个问题设置变量。这包括生成一个有效的[2.x.59]对象，以及矩阵的稀疏模式，和代表边界上自由度平均值为零的约束条件的对象。
//
[0.x.333] 
[0.x.334] 
[0.x.335] 
//
// 第一个任务很简单：生成一个自由度的枚举，并将解和右手向量初始化为正确的大小。
//
[0.x.336] 
[0.x.337] 
[0.x.338] 
//
// 下一个任务是构建代表约束的对象，即边界上自由度的平均值应该是零。为此，我们首先需要一个实际在边界上的节点的列表。[2.x.60]命名空间有一个函数可以返回一个IndexSet对象，该对象包含所有在边界上的自由度的指数。
//
// 一旦我们有了这个索引集，我们想知道哪个是对应于边界上的自由度的第一个索引。我们需要这个，因为我们想通过边界上所有其他自由度的值来约束边界上的一个节点。使用IndexSet类很容易得到这个 "第一个 "自由度的索引。
//
[0.x.339] 
//
[0.x.340] 
[0.x.341] 
//
// 然后生成一个只有这一个约束的约束对象。首先清除所有以前的内容（这些内容可能来自以前在更粗的网格上的计算），然后添加这一行，将[2.x.61]约束到其他边界DoF的总和，每一个权重为-1。最后，关闭约束对象，也就是说，对它做一些内部记录，以便更快地处理后面的内容。
//
[0.x.342] 
[0.x.343] 
[0.x.344] 
[0.x.345] 
[0.x.346] 
[0.x.347] 
//
// 下一个任务是生成一个稀疏模式。这的确是一个棘手的任务。通常情况下，我们只需调用[2.x.62]并使用悬挂节点约束来浓缩结果。我们在这里没有悬挂节点约束（因为我们在这个例子中只进行全局细化），但是我们在边界上有这个全局约束。在这种情况下，这带来了一个严重的问题：[2.x.63]类希望我们事先说明每行的最大条目数，可以是所有行的，也可以是每行单独的。在库中有一些函数可以告诉你这个数字，如果你只有悬空的节点约束的话（即[2.x.64]，但这对现在的情况来说是怎样的？困难的出现是因为消除约束的自由度需要在矩阵中增加一些条目，而这些条目的位置并不那么容易确定。因此，如果我们在这里给出每行的最大条目数，我们就会有一个问题。
//
// 由于这可能非常困难，以至于无法给出合理的答案，只能分配合理的内存量，所以有一个DynamicSparsityPattern类，它可以帮助我们解决这个问题。它不要求我们事先知道行可以有多少个条目，而是允许任何长度。因此，在你对行的长度没有很好的估计的情况下，它明显更灵活，但是代价是建立这样一个模式也比建立一个你事先有信息的模式要昂贵得多。尽管如此，由于我们在这里没有其他选择，我们将建立这样一个对象，用矩阵的尺寸初始化它，并调用另一个函数[2.x.65]来获得由于微分算子引起的稀疏模式，然后用约束对象浓缩它，在稀疏模式中增加那些消除约束所需的位置。
//
[0.x.348] 
[0.x.349] 
[0.x.350] 
//
// 最后，一旦我们有了完整的模式，我们就可以从中初始化一个[2.x.66]类型的对象，并反过来用它初始化矩阵。请注意，这实际上是必要的，因为与[2.x.67]类相比，DynamicSparsityPattern的效率非常低，因为它必须使用更灵活的数据结构，所以我们不可能将稀疏矩阵类建立在它的基础上，而是需要一个[2.x.68]类型的对象，我们通过复制中间对象产生这个对象。
//
// 作为进一步的附带说明，你会注意到我们在这里没有明确的 [2.x.69] 稀疏模式。当然，这是由于[2.x.70]函数从一开始就生成了一个压缩对象，你不能再向其添加新的条目。因此，[2.x.71]的调用是隐含在[2.x.72]的调用中的。
//
[0.x.351] 
[0.x.352] 
[0.x.353] 
//
// 下一个函数接着组装线性方程组，对其进行求解，并对解进行评估。这样就有了三个动作，我们将把它们放到八个真实的语句中（不包括变量的声明，以及临时向量的处理）。因此，这个函数是为非常懒惰的人准备的。尽管如此，所调用的函数是相当强大的，通过它们，这个函数使用了整个库的大量内容。但让我们来看看每一个步骤。
//
[0.x.354] 
[0.x.355] 
[0.x.356] 
//
// 首先，我们要把矩阵和右手边的内容组合起来。在之前的所有例子中，我们已经研究了如何手动完成这一工作的各种方法。然而，由于拉普拉斯矩阵和简单的右手边在应用中出现的频率很高，库中提供的函数实际上是为你做这件事的，也就是说，它们在所有单元格上进行循环，设置局部的矩阵和向量，并将它们放在一起，得到最终结果。
//
// 以下是两个最常用的函数：创建拉普拉斯矩阵和创建来自体或边界力的右侧向量。它们需要映射对象、代表自由度和使用中的有限元的[2.x.73]对象、要使用的正交公式以及输出对象。创建右手向量的函数还必须接受一个描述（连续）右手向量函数的函数对象。
//
// 让我们来看看矩阵和体力的集成方式。
//
[0.x.357] 
[0.x.358] 
[0.x.359] 
[0.x.360] 
[0.x.361] 
[0.x.362] 
[0.x.363] 
[0.x.364] 
[0.x.365] 
[0.x.366] 
[0.x.367] 
[0.x.368] 
[0.x.369] 
//
// 这很简单，对吗？
//
// 不过，有两点需要注意。首先，这些函数在很多情况下都会用到。也许你想为一个矢量值有限元创建一个拉普拉斯或质量矩阵；或者你想使用默认的Q1映射；或者你想用拉普拉斯算子的一个系数来装配矩阵。由于这个原因，在[2.x.74]和[2.x.75]命名空间中有相当多的这些函数的变种。每当你需要这些函数的一个与上面调用的略有不同的版本时，当然值得看一下文档，并检查一些东西是否适合你的需要。
//
// 第二点是关于我们使用的正交公式：我们想对双线性形状函数进行积分，所以我们知道我们至少要使用二阶高斯正交公式。另一方面，我们希望正交规则至少有边界近似的阶数。因为有[2.x.76]点的高斯规则的阶数是[2.x.77] ，而使用[2.x.78]度的多项式的边界近似的阶数是[2.x.79]，我们知道[2.x.80] 。由于r必须是一个整数，并且（如上所述）必须至少是[2.x.81]，这就弥补了上述公式计算[2.x.82]。
//
// 由于对右侧向量的体力贡献的生成是如此简单，我们对边界力也要重新做一遍：分配一个合适大小的向量并调用合适的函数。边界函数有常量值，所以我们可以从库中快速生成一个对象，我们使用与上面相同的正交公式，但这次的维度较低，因为我们现在是在面上而不是在单元上积分。
//
[0.x.370] 
[0.x.371] 
[0.x.372] 
[0.x.373] 
[0.x.374] 
[0.x.375] 
[0.x.376] 
//
// 然后将边界的贡献与域内部的贡献相加。
//
[0.x.377] 
//
// 在组装右手边时，我们必须使用两个不同的矢量对象，然后将它们加在一起。我们不得不这样做的原因是，[2.x.83]和[2.x.84]函数首先清除输出向量，而不是将它们的结果与之前的内容相加。这可以合理地称为库在起步阶段的设计缺陷，但不幸的是，事情现在已经是这样了，很难改变这种无声地破坏现有代码的事情，所以我们不得不接受。
//
// 现在，线性系统已经建立起来了，所以我们可以从矩阵和右手向量中消除我们约束到边界上其他DoF的一个自由度的均值约束，并解决这个系统。之后，再次分配约束，在这种情况下，这意味着将被约束的自由度设置为适当的值
//
[0.x.378] 
[0.x.379] 
//
[0.x.380] 
[0.x.381] 
//
// 最后，评估我们得到的解决方案。正如在介绍中所说，我们对解决方案的H1半正态感兴趣。在这里，我们在库中也有一个函数可以做到这一点，尽管是以一种稍微不明显的方式：[2.x.85]函数整合了一个有限元函数和一个连续函数之间的差值的规范。因此，如果我们想要一个有限元场的规范，我们只需将连续函数设为零。请注意，这个函数，就像库中的许多其他函数一样，至少有两个版本，一个是以映射为参数的（我们在这里使用），另一个是我们在以前的例子中使用的隐含的[2.x.86] 。 还要注意的是，我们采用的是高一级的正交公式，以避免出现超融合效应，即在某些点上的解特别接近精确解（我们不知道这里是否会出现这种情况，但有已知的案例，我们只是想确认一下）。
//
[0.x.382] 
[0.x.383] 
[0.x.384] 
[0.x.385] 
[0.x.386] 
[0.x.387] 
[0.x.388] 
[0.x.389] 
//
// 然后，刚刚调用的函数将其结果作为一个值的向量返回，每个值表示一个单元格上的法线。为了得到全局法线，我们要做以下工作。
//
[0.x.390] 
[0.x.391] 
[0.x.392] 
[0.x.393] 
//
// 最后一项任务--生成输出。
//
[0.x.394] 
[0.x.395] 
[0.x.396] 
[0.x.397] 
[0.x.398] 
//
// 下面这个解线性方程组的函数是从[2.x.87]中复制过来的，在那里有详细的解释。
//
[0.x.399] 
[0.x.400] 
[0.x.401] 
[0.x.402] 
[0.x.403] 
//
[0.x.404] 
[0.x.405] 
//
[0.x.406] 
[0.x.407] 
//
// 接下来，我们把解决方案以及材料ID写到一个VTU文件中。这与其他许多教程程序中的做法相似。这个教程程序中提出的新内容是，我们要确保写到文件中用于可视化的数据实际上是deal.II内部使用的数据的忠实代表。这是因为大多数可视化数据格式只用顶点坐标表示单元，但没有办法表示deal.II中使用高阶映射时的曲线边界--换句话说，你在可视化工具中看到的东西实际上不是你正在计算的东西。顺带一提，在使用高阶形状函数时也是如此。大多数可视化工具只呈现双线性/三线性的表示。这在[2.x.88]中有详细的讨论。
//
// 所以我们需要确保高阶表示被写入文件中。我们需要考虑两个特别的话题。首先，我们通过[2.x.89]告诉DataOut对象，我们打算将元素的细分解释为高阶拉格朗日多项式，而不是双线性斑块的集合。最近的可视化程序，如ParaView 5.5版或更新版，然后可以呈现高阶解决方案（更多细节见[1.x.6]）。其次，我们需要确保映射被传递给[2.x.90]方法。最后，DataOut类默认只打印[1.x.7]单元的曲面，所以我们需要确保通过映射将内部单元也打印成曲面。
//
[0.x.408] 
[0.x.409] 
[0.x.410] 
[0.x.411] 
//
[0.x.412] 
[0.x.413] 
[0.x.414] 
//
[0.x.415] 
[0.x.416] 
//
[0.x.417] 
[0.x.418] 
[0.x.419] 
//
[0.x.420] 
[0.x.421] 
//
[0.x.422] 
[0.x.423] 
//
// 最后是控制要执行的不同步骤的主要函数。它的内容相当简单，生成一个圆的三角形，给它关联一个边界，然后在随后的更细的网格上做几个循环。请注意，我们将网格细化放到了循环头中；这对测试程序来说可能是件好事，但对实际应用来说，你应该考虑到这意味着网格是在循环最后一次执行后被细化的，因为增量子句（三部分循环头的最后一部分）是在比较部分（第二部分）之前执行的，如果网格已经相当细化了，这可能是相当昂贵的。在这种情况下，你应该安排代码，使网格在最后一次循环运行后不再被进一步细化（或者你应该在每次运行的开始就这样做，除了第一次）。
//
[0.x.424] 
[0.x.425] 
[0.x.426] 
[0.x.427] 
//
[0.x.428] 
[0.x.429] 
[0.x.430] 
[0.x.431] 
[0.x.432] 
//
[0.x.433] 
[0.x.434] 
//
// 在所有的数据生成之后，将结果的表格写到屏幕上。
//
[0.x.435] 
[0.x.436] 
[0.x.437] 
[0.x.438] 
[0.x.439] 
[0.x.440] 
//
// 最后是主函数。它的结构与前面几个例子中使用的结构相同，所以可能不需要更多解释。
//
[0.x.441] 
[0.x.442] 
[0.x.443] 
[0.x.444] 
[0.x.445] 
//
// 这是主循环，用线性到立方的映射做计算。注意，由于我们只需要一次[2.x.91]类型的对象，我们甚至不给它命名，而是创建一个未命名的这样的对象，并调用它的[2.x.92]函数，随后它又立即被销毁。
//
[0.x.446] 
[0.x.447] 
[0.x.448] 
[0.x.449] 
[0.x.450] 
[0.x.451] 
[0.x.452] 
[0.x.453] 
[0.x.454] 
[0.x.455] 
[0.x.456] 
[0.x.457] 
[0.x.458] 
[0.x.459] 
[0.x.460] 
[0.x.461] 
[0.x.462] 
[0.x.463] 
[0.x.464] 
[0.x.465] 
[0.x.466] 
[0.x.467] 
[0.x.468] 
[0.x.469] 
[0.x.470] 
[0.x.471] 
[0.x.472] 
[0.x.473] 
[0.x.474] 
//
[0.x.475] 
[0.x.476] 
[0.x.477] 
[0.x.478] 
[0.x.479] 
[0.x.480] 
[0.x.481] 
[0.x.482] 
[0.x.483] 
[0.x.484] 
[0.x.485] 
[0.x.486] 
[0.x.487] 
[0.x.488] 
[0.x.489] 
[0.x.490] 
//
[0.x.491] 
[0.x.492] 
[0.x.493] 
[0.x.494] 
//
// 前面几个文件已经在前面的例子中讲过了，因此不再做进一步的评论。
//
[0.x.495] 
[0.x.496] 
[0.x.497] 
[0.x.498] 
[0.x.499] 
[0.x.500] 
[0.x.501] 
[0.x.502] 
[0.x.503] 
[0.x.504] 
[0.x.505] 
[0.x.506] 
[0.x.507] 
[0.x.508] 
[0.x.509] 
//
// 这里定义了不连续的有限元。它们的使用方式与所有其他有限元相同，不过--正如你在以前的教程程序中所看到的--用户与有限元类的交互根本不多：它们被传递给[2.x.93]和[2.x.94]对象，仅此而已。
//
[0.x.510] 
//
// FEInterfaceValues需要这个头来计算界面上的积分。
//
[0.x.511] 
//
// 我们将使用最简单的求解器，称为Richardson迭代，它代表了一个简单的缺陷修正。这与一个块状SSOR预处理器（定义在precondition_block.h中）相结合，该预处理器使用DG离散产生的系统矩阵的特殊块状结构。
//
[0.x.512] 
[0.x.513] 
//
// 我们将使用梯度作为细化指标。
//
[0.x.514] 
//
// 最后，新的包含文件用于使用MeshWorker框架中的Mesh_loop。
//
[0.x.515] 
//
// 像所有的程序一样，我们在完成这一部分时，要包括所需的C++头文件，并声明我们要使用dealii命名空间中的对象，不含前缀。
//
[0.x.516] 
[0.x.517] 
//
[0.x.518] 
[0.x.519] 
[0.x.520] 
//[2.x.95] 
//
// 首先，我们定义一个描述不均匀边界数据的类。由于只使用它的值，我们实现value_list()，但不定义Function的所有其他函数。
//
[0.x.521] 
[0.x.522] 
[0.x.523] 
[0.x.524] 
[0.x.525] 
[0.x.526] 
[0.x.527] 
[0.x.528] 
[0.x.529] 
//
// 考虑到流动方向，单位方块[2.x.96]的流入边界是右边界和下边界。我们在x轴上规定了不连续的边界值1和0，在右边界上规定了值0。该函数在流出边界上的值将不会在DG方案中使用。
//
[0.x.530] 
[0.x.531] 
[0.x.532] 
[0.x.533] 
[0.x.534]  
[0.x.535] 
[0.x.536] 
[0.x.537] 
[0.x.538] 
//
[0.x.539] 
[0.x.540] 
[0.x.541]  
[0.x.542] 
[0.x.543] 
[0.x.544] 
[0.x.545] 
[0.x.546] 
//
// 最后，一个计算并返回风场的函数 [2.x.97] 。正如在介绍中所解释的，在2D中我们将使用一个围绕原点的旋转场。在3D中，我们只需不设置[2.x.98]分量（即为零），而这个函数在目前的实现中不能用于1D。
//
[0.x.547] 
[0.x.548] 
[0.x.549] 
[0.x.550] 
//
[0.x.551] 
[0.x.552] 
[0.x.553] 
//
[0.x.554] 
[0.x.555] 
//
[0.x.556] 
[0.x.557] 
//[2.x.99] 
//
// 以下对象是我们在调用[2.x.100]时使用的抓取和复制对象 新对象是FEInterfaceValues对象，它的工作原理类似于FEValues或FEFacesValues，只是它作用于两个单元格之间的接口，并允许我们以我们的弱形式组装接口条款。
//
[0.x.558] 
[0.x.559] 
[0.x.560] 
[0.x.561] 
[0.x.562] 
[0.x.563] 
[0.x.564] 
[0.x.565] 
[0.x.566] 
[0.x.567] 
[0.x.568] 
[0.x.569] 
[0.x.570] 
[0.x.571] 
[0.x.572] 
[0.x.573] 
[0.x.574] 
[0.x.575] 
[0.x.576] 
[0.x.577] 
//
[0.x.578] 
[0.x.579] 
[0.x.580] 
[0.x.581] 
[0.x.582] 
[0.x.583] 
[0.x.584] 
[0.x.585] 
[0.x.586] 
[0.x.587] 
//
[0.x.588] 
[0.x.589] 
[0.x.590] 
//
[0.x.591] 
[0.x.592] 
[0.x.593] 
[0.x.594] 
[0.x.595] 
//
[0.x.596] 
[0.x.597] 
[0.x.598] 
[0.x.599] 
[0.x.600] 
[0.x.601] 
//
[0.x.602] 
[0.x.603] 
[0.x.604] 
[0.x.605] 
[0.x.606] 
//
[0.x.607] 
[0.x.608] 
[0.x.609] 
[0.x.610] 
//[2.x.101] 
//
// 在这个准备工作之后，我们继续进行这个程序的主类，称为AdvectionProblem。
//
// 这对你来说应该是非常熟悉的。有趣的细节只有在实现集合函数的时候才会出现。
//
[0.x.611] 
[0.x.612] 
[0.x.613] 
[0.x.614] 
[0.x.615] 
[0.x.616] 
//
[0.x.617] 
[0.x.618] 
[0.x.619] 
[0.x.620] 
[0.x.621] 
[0.x.622] 
//
[0.x.623] 
[0.x.624] 
//
// 此外，我们要使用DG元素。
//
[0.x.625] 
[0.x.626] 
//
[0.x.627] 
[0.x.628] 
//
// 接下来的四个成员代表要解决的线性系统。 [2.x.102]是由[2.x.103]产生的，在[2.x.104]中计算，用于确定[2.x.105]中非零元素的位置。
//
[0.x.629] 
[0.x.630] 
//
[0.x.631] 
[0.x.632] 
[0.x.633] 
//
// 我们从构造函数开始。[2.x.106]的构造器调用中的1是多项式的度数。
//
[0.x.634] 
[0.x.635] 
[0.x.636] 
[0.x.637] 
[0.x.638] 
[0.x.639] 
[0.x.640] 
[0.x.641] 
//
[0.x.642] 
[0.x.643] 
[0.x.644] 
//
// 在设置通常的有限元数据结构的函数中，我们首先需要分配DoF。
//
[0.x.645] 
//
// 我们从生成稀疏模式开始。为此，我们首先用系统中出现的耦合物填充一个动态稀疏模式（DynamicSparsityPattern）类型的中间对象。在建立模式之后，这个对象被复制到[2.x.107]并可以被丢弃。
//
// 为了建立DG离散的稀疏模式，我们可以调用类似于[2.x.108]的函数，该函数被称为[2.x.109] 。
[0.x.646] 
[0.x.647] 
[0.x.648] 
//
// 最后，我们设置了线性系统的所有组成部分的结构。
//
[0.x.649] 
[0.x.650] 
[0.x.651] 
[0.x.652] 
//[2.x.110] 
//
// 这里我们看到了与手工组装的主要区别。我们不需要在单元格和面上写循环，而是在调用[2.x.111]时包含逻辑，我们只需要指定在每个单元格、每个边界面和每个内部面应该发生什么。这三个任务是由下面的函数里面的lambda函数处理的。
//
[0.x.653] 
[0.x.654] 
[0.x.655] 
[0.x.656] 
[0.x.657] 
//
// 这是将对每个单元格执行的函数。
//
[0.x.658] 
[0.x.659] 
[0.x.660] 
[0.x.661] 
[0.x.662] 
[0.x.663] 
[0.x.664] 
//
[0.x.665] 
//
[0.x.666] 
[0.x.667] 
//
// 我们解决的是一个同质方程，因此在单元项中没有显示出右手。 剩下的就是整合矩阵条目。
//
[0.x.668] 
[0.x.669] 
[0.x.670] 
[0.x.671] 
[0.x.672] 
[0.x.673] 
[0.x.674] 
[0.x.675] 
[0.x.676] 
[0.x.677] 
[0.x.678] 
[0.x.679] 
[0.x.680] 
[0.x.681] 
//
// 这是为边界面调用的函数，包括使用FEFaceValues的正常积分。新的逻辑是决定该术语是进入系统矩阵（流出）还是进入右手边（流入）。
//
[0.x.682] 
[0.x.683] 
[0.x.684] 
[0.x.685] 
[0.x.686] 
[0.x.687] 
[0.x.688] 
//
[0.x.689] 
//
[0.x.690] 
[0.x.691] 
[0.x.692] 
//
[0.x.693] 
[0.x.694] 
//
[0.x.695] 
[0.x.696] 
[0.x.697] 
//
[0.x.698] 
[0.x.699] 
[0.x.700] 
[0.x.701] 
[0.x.702] 
[0.x.703] 
[0.x.704] 
[0.x.705] 
[0.x.706] 
[0.x.707] 
[0.x.708] 
[0.x.709] 
[0.x.710] 
[0.x.711] 
[0.x.712] 
[0.x.713] 
[0.x.714] 
[0.x.715] 
//
// 这是在内部面调用的函数。参数指定了单元格、面和子面的指数（用于自适应细化）。我们只是将它们传递给FEInterfaceValues的reinit()函数。
//
[0.x.716] 
[0.x.717] 
[0.x.718] 
[0.x.719] 
[0.x.720] 
[0.x.721] 
[0.x.722] 
[0.x.723] 
[0.x.724] 
[0.x.725] 
[0.x.726] 
//
[0.x.727] 
[0.x.728] 
//
[0.x.729] 
[0.x.730] 
//
[0.x.731] 
//
[0.x.732] 
[0.x.733] 
//
[0.x.734] 
[0.x.735] 
[0.x.736] 
[0.x.737] 
[0.x.738] 
[0.x.739]  
[0.x.740] 
[0.x.741] 
[0.x.742] 
[0.x.743] 
[0.x.744] 
[0.x.745]  
[0.x.746] 
//
// 下面的lambda函数将处理从单元格和面组件中复制数据到全局矩阵和右侧的问题。
//
// 虽然我们不需要AffineConstraints对象，因为在DG离散中没有悬空节点约束，但我们在这里使用一个空对象，因为这允许我们使用其`copy_local_to_global`功能。
//
[0.x.747] 
//
[0.x.748] 
[0.x.749] 
[0.x.750] 
[0.x.751] 
[0.x.752] 
[0.x.753] 
//
[0.x.754] 
[0.x.755] 
[0.x.756] 
[0.x.757] 
[0.x.758] 
[0.x.759] 
[0.x.760] 
//
[0.x.761] 
[0.x.762] 
//
// 在这里，我们最终处理了装配问题。我们传入ScratchData和CopyData对象，以及上面的lambda函数，并指定我们要对内部面进行一次装配。
//
[0.x.763] 
[0.x.764] 
[0.x.765] 
[0.x.766] 
[0.x.767] 
[0.x.768] 
[0.x.769] 
[0.x.770] 
[0.x.771] 
[0.x.772] 
[0.x.773] 
[0.x.774] 
//[2.x.112] 
//
// 对于这个简单的问题，我们使用了最简单的求解器，称为Richardson迭代，它代表了简单的缺陷修正。这与一个块状SSOR预处理相结合，该预处理使用DG离散化产生的系统矩阵的特殊块状结构。这些块的大小是每个单元的DoF数量。这里，我们使用SSOR预处理，因为我们没有根据流场对DoFs进行重新编号。如果在流的下游方向对DoFs进行重新编号，那么块状的Gauss-Seidel预处理（见PreconditionBlockSOR类，放松=1）会做得更好。
//
[0.x.775] 
[0.x.776] 
[0.x.777] 
[0.x.778] 
[0.x.779] 
//
// 这里我们创建了预处理程序。
//
[0.x.780] 
//
// 然后将矩阵分配给它，并设置正确的块大小。
//
[0.x.781] 
//
// 做完这些准备工作后，我们就可以启动线性求解器了。
//
[0.x.782] 
//
[0.x.783] 
[0.x.784] 
[0.x.785] 
//
// 我们根据一个非常简单的细化标准来细化网格，即对解的梯度的近似。由于这里我们考虑的是DG(1)方法（即我们使用片状双线性形状函数），我们可以简单地计算每个单元的梯度。但是我们并不希望我们的细化指标只建立在每个单元的梯度上，而是希望同时建立在相邻单元之间的不连续解函数的跳跃上。最简单的方法是通过差分商计算近似梯度，包括考虑中的单元和其相邻的单元。这是由[2.x.113]类完成的，它计算近似梯度的方式类似于本教程[2.x.115]中描述的[2.x.114]。事实上，[2.x.116]类是在[2.x.118]的[2.x.117]类之后开发的。与 [2.x.119] 中的讨论相关，这里我们考虑 [2.x.120] 。此外，我们注意到，我们不考虑近似的二次导数，因为线性平流方程的解一般不在[2.x.121]中，而只在[2.x.122]中（或者，更准确地说：在[2.x.123]中，即在方向[2.x.124]上的导数是可平方整除的函数空间）。
//
[0.x.786] 
[0.x.787] 
[0.x.788] 
//
// [2.x.125]类将梯度计算为浮点精度。这已经足够了，因为它们是近似的，只作为细化指标。
//
[0.x.789] 
//
// 现在，近似梯度被计算出来了
//
[0.x.790] 
[0.x.791] 
[0.x.792] 
[0.x.793] 
//
//并且它们的单元格按系数[2.x.126]进行缩放。
[0.x.794] 
[0.x.795] 
[0.x.796] 
[0.x.797] 
//
// 最后它们作为细化指标。
//
[0.x.798] 
[0.x.799] 
[0.x.800] 
[0.x.801] 
//
[0.x.802] 
[0.x.803] 
//
// 这个程序的输出包括一个自适应细化网格的vtk文件和数值解。最后，我们还用[2.x.127]计算了解的L-无穷大规范。
[0.x.804] 
[0.x.805] 
[0.x.806] 
[0.x.807] 
[0.x.808] 
[0.x.809] 
//
[0.x.810] 
[0.x.811]  
[0.x.812] 
//
[0.x.813] 
//
[0.x.814] 
//
[0.x.815] 
[0.x.816] 
[0.x.817] 
[0.x.818] 
[0.x.819] 
[0.x.820] 
[0.x.821] 
[0.x.822] 
[0.x.823] 
[0.x.824] 
[0.x.825] 
[0.x.826]  
[0.x.827] 
[0.x.828] 
[0.x.829] 
[0.x.830] 
//
// 下面的[2.x.128]函数与前面的例子类似。
//
[0.x.831] 
[0.x.832] 
[0.x.833] 
[0.x.834] 
[0.x.835]  
[0.x.836] 
//
[0.x.837] 
[0.x.838] 
[0.x.839] 
[0.x.840] 
[0.x.841] 
[0.x.842] 
[0.x.843] 
//
[0.x.844] 
[0.x.845] 
//
[0.x.846] 
//
[0.x.847] 
[0.x.848] 
//
[0.x.849] 
[0.x.850] 
//
[0.x.851] 
[0.x.852] 
[0.x.853] 
[0.x.854] 
//
// 下面的[2.x.129]函数与前面的例子也类似，不需要注释。
//
[0.x.855] 
[0.x.856] 
[0.x.857] 
[0.x.858] 
[0.x.859] 
[0.x.860] 
[0.x.861] 
[0.x.862] 
[0.x.863] 
[0.x.864] 
[0.x.865] 
[0.x.866] 
[0.x.867] 
[0.x.868] 
[0.x.869] 
[0.x.870] 
[0.x.871] 
[0.x.872] 
[0.x.873] 
[0.x.874] 
[0.x.875] 
[0.x.876] 
[0.x.877] 
[0.x.878] 
[0.x.879] 
[0.x.880] 
[0.x.881] 
[0.x.882] 
[0.x.883] 
[0.x.884] 
[0.x.885] 
[0.x.886] 
//
[0.x.887] 
[0.x.888] 
[0.x.889] 
[0.x.890] 
[0.x.891] 
[0.x.892] 
[0.x.893] 
[0.x.894] 
[0.x.895] 
[0.x.896] 
[0.x.897] 
[0.x.898] 
[0.x.899] 
[0.x.900] 
[0.x.901] 
[0.x.902] 
//
[0.x.903] 
[0.x.904] 
[0.x.905] 
//
// 前面几个文件已经在前面的例子中讲过了，因此不再做进一步的评论。
//
[0.x.906] 
[0.x.907] 
[0.x.908] 
[0.x.909] 
[0.x.910] 
[0.x.911] 
[0.x.912] 
[0.x.913] 
[0.x.914] 
[0.x.915] 
[0.x.916] 
[0.x.917] 
[0.x.918] 
[0.x.919] 
//
// 这里定义了不连续的有限元。它们的使用方式与所有其他有限元相同，不过--正如你在以前的教程程序中所看到的--用户与有限元类的交互并不多：它们被传递给[2.x.130]和[2.x.131]对象，就这样了。
//
[0.x.920] 
//
// 我们将使用最简单的求解器，称为Richardson迭代，它代表了一个简单的缺陷修正。这与一个块状SSOR预处理器（定义在precondition_block.h中）相结合，该预处理器使用DG离散化产生的系统矩阵的特殊块状结构。
//
[0.x.921] 
[0.x.922] 
//
// 我们将使用梯度作为细化指标。
//
[0.x.923] 
//
// 这里是使用MeshWorker框架的新的包含文件。第一个文件包含了[2.x.132]类，它为局部积分器提供了局部与全局自由度之间的映射。在第二个文件中，我们发现一个类型为[2.x.134]的对象，它主要是对一组FEValues对象的封装。文件<tt>meshworker/simple.h</tt>包含了将局部集成数据组装成只包含一个矩阵的全局系统的类。最后，我们将需要在所有的网格单元和面中运行循环的文件。
//
[0.x.924] 
[0.x.925] 
[0.x.926] 
[0.x.927] 
//
// 像所有的程序一样，我们在完成这一部分时要包括所需的C++头文件，并声明我们要使用dealii命名空间中的对象，不加前缀。
//
[0.x.928] 
[0.x.929] 
//
[0.x.930] 
[0.x.931] 
[0.x.932] 
//[2.x.135] 
//
// 首先，我们定义一个描述不均匀边界数据的类。由于只使用它的值，我们实现value_list()，但不定义Function的所有其他函数。
//
[0.x.933] 
[0.x.934] 
[0.x.935] 
[0.x.936] 
[0.x.937] 
[0.x.938] 
[0.x.939] 
[0.x.940] 
[0.x.941] 
//
// 考虑到流动方向，单位方块[2.x.136]的流入边界为右边界和下边界。我们在x轴上规定了不连续的边界值1和0，在右边界上规定了值0。该函数在流出边界上的值将不会在DG方案中使用。
//
[0.x.942] 
[0.x.943] 
[0.x.944] 
[0.x.945] 
[0.x.946] 
[0.x.947] 
[0.x.948] 
[0.x.949] 
[0.x.950] 
//
[0.x.951] 
[0.x.952] 
[0.x.953] 
[0.x.954] 
[0.x.955] 
[0.x.956] 
[0.x.957] 
[0.x.958] 
//
// 最后，一个计算并返回风场的函数 [2.x.137] 。正如在介绍中所解释的，在2D中我们将使用一个围绕原点的旋转场。在3D中，我们只需不设置[2.x.138]分量（即为零），而这个函数在目前的实现中不能用于1D。
//
[0.x.959] 
[0.x.960] 
[0.x.961] 
[0.x.962] 
//
[0.x.963] 
[0.x.964] 
[0.x.965] 
[0.x.966] 
//
[0.x.967] 
[0.x.968] 
//[2.x.139] 
//
// 在这个准备工作之后，我们继续进行这个程序的主类，叫做AdvectionProblem。它基本上是 [2.x.140] 的主类。我们没有AffineConstraints对象，因为在DG离散中没有悬挂节点约束。
//
// 主要的区别只出现在集合函数的实现上，因为在这里，我们不仅需要覆盖面上的通量积分，我们还使用MeshWorker接口来简化涉及的循环。
//
[0.x.969] 
[0.x.970] 
[0.x.971] 
[0.x.972] 
[0.x.973] 
[0.x.974] 
//
[0.x.975] 
[0.x.976] 
[0.x.977] 
[0.x.978] 
[0.x.979] 
[0.x.980] 
//
[0.x.981] 
[0.x.982] 
//
// 此外，我们想使用程度为1的DG元素（但这只在构造函数中指定）。如果你想使用不同度数的DG方法，整个程序保持不变，只需在构造函数中用所需的多项式度数替换1。
//
[0.x.983] 
[0.x.984] 
//
// 接下来的四个成员代表要解决的线性系统。 [2.x.141]是由[2.x.142]产生的，[2.x.143]是用来确定[2.x.144]中非零元素的位置。
//
[0.x.985] 
[0.x.986] 
//
[0.x.987] 
[0.x.988] 
//
// 最后，我们必须提供集合单元、边界和内表面条款的函数。在MeshWorker框架中，所有单元的循环和大部分操作的设置都将在这个类之外完成，所以我们所要提供的只是这三个操作。他们将在中间对象上工作，首先，我们在这里定义了交给本地集成函数的信息对象的别名，以使我们的生活更轻松。
//
[0.x.989] 
[0.x.990] 
//
// 下面的三个函数是在所有单元和面的通用循环中被调用的。它们是进行实际整合的函数。
//
// 在我们下面的代码中，这些函数并不访问当前类的成员变量，所以我们可以将它们标记为[2.x.145]，并简单地将这些函数的指针传递给MeshWorker框架。然而，如果这些函数想要访问成员变量（或者需要额外的参数，而不是下面指定的参数），我们可以使用lambda函数的设施来为MeshWorker框架提供对象，这些对象就像它们拥有所需的参数数量和类型一样，但实际上已经绑定了其他参数。
//
[0.x.991] 
[0.x.992] 
[0.x.993] 
[0.x.994] 
[0.x.995] 
[0.x.996] 
[0.x.997] 
//
// 我们从构造函数开始。[2.x.146]的构造器调用中的1是多项式的度数。
//
[0.x.998] 
[0.x.999] 
[0.x.1000] 
[0.x.1001] 
[0.x.1002] 
[0.x.1003] 
//
[0.x.1004] 
[0.x.1005] 
[0.x.1006] 
//
// 在设置通常的有限元数据结构的函数中，我们首先需要分配DoF。
//
[0.x.1007] 
//
// 我们从生成稀疏模式开始。为此，我们首先用系统中出现的耦合物填充一个动态稀疏模式（DynamicSparsityPattern）类型的中间对象。在建立模式之后，这个对象被复制到[2.x.147]并可以被丢弃。
//
// 为了建立DG离散的稀疏模式，我们可以调用类似于[2.x.148]的函数，它被称为[2.x.149] 
[0.x.1008] 
[0.x.1009] 
[0.x.1010] 
//
// 最后，我们设置了线性系统的所有组成部分的结构。
//
[0.x.1011] 
[0.x.1012] 
[0.x.1013] 
[0.x.1014] 
//[2.x.150] 
//
// 这里我们看到了与手工组装的主要区别。我们不需要在单元格和面上写循环，而是将这一切交给MeshWorker框架。为了做到这一点，我们只需要定义局部的集成函数，并使用命名空间[2.x.151]中的一个类来构建全局系统。
//
[0.x.1015] 
[0.x.1016] 
[0.x.1017] 
//
// 这是一个神奇的对象，它知道关于数据结构和局部集成的一切。 这是在函数[2.x.152]中做工作的对象，它被下面的[2.x.153]隐式调用。在我们提供指针的函数完成局部积分后，[2.x.154]对象将这些数据分配到全局稀疏矩阵和右手边的向量。
//
[0.x.1018] 
//
// 首先，我们在工作者基类中初始化正交公式和更新标志。对于正交，我们采取安全措施，使用QGauss公式，其点数比使用的多项式度数高一个。由于单元格、边界和内部面的正交率可以独立选择，我们必须把这个值交给三次。
//
[0.x.1019] 
[0.x.1020] 
[0.x.1021] 
[0.x.1022] 
//
// 这些是我们整合系统时需要的数值类型。它们被添加到单元格、边界和内部面以及内部邻居面所使用的标志中，这是由四个[2.x.155]值强制执行的。
//
[0.x.1023] 
[0.x.1024] 
[0.x.1025] 
[0.x.1026] 
//
// 在准备好<tt>info_box</tt>中的所有数据后，我们初始化其中的FEValues对象。
//
[0.x.1027] 
//
// 到目前为止创建的对象帮助我们在每个单元和面进行局部积分。现在，我们需要一个对象来接收整合后的（本地）数据，并将它们转发给装配程序。
//
[0.x.1028] 
//
// 现在，我们必须创建装配器对象，并告诉它将本地数据放在哪里。这些将是我们的系统矩阵和右手边的数据。
//
[0.x.1029] 
[0.x.1030] 
[0.x.1031] 
//
// 最后，在所有活动单元上进行积分循环（由第一个参数决定，它是一个活动迭代器）。
//
// 正如在类声明中声明局部积分函数时的讨论中所指出的，装配积分器类所期望的参数实际上不是函数指针。相反，它们是可以像函数一样被调用的对象，有一定数量的参数。因此，我们也可以在这里传递具有适当的operator()实现的对象，或者如果本地集成器是，例如，非静态成员函数，则可以传递lambda函数。
//
[0.x.1032] 
[0.x.1033] 
[0.x.1034] 
[0.x.1035] 
[0.x.1036] 
[0.x.1037] 
[0.x.1038] 
[0.x.1039] 
[0.x.1040] 
[0.x.1041] 
[0.x.1042] 
[0.x.1043] 
[0.x.1044] 
//[2.x.156] 
//
// 这些是给上面调用的[2.x.157]的函数。它们计算单元格和面中对系统矩阵和右手边的局部贡献。
//
[0.x.1045] 
[0.x.1046] 
[0.x.1047] 
[0.x.1048] 
//
// 首先，让我们从[2.x.158]中检索这里使用的一些对象。注意，这些对象可以处理更复杂的结构，因此这里的访问看起来比看起来更复杂。
//
[0.x.1049] 
[0.x.1050] 
[0.x.1051] 
//
// 有了这些对象，我们像往常一样继续进行局部积分。首先，我们在正交点上循环，计算当前点的平流矢量。
//
[0.x.1052] 
[0.x.1053] 
[0.x.1054] 
[0.x.1055] 
//
// 我们求解的是一个同质方程，因此在单元项中没有显示出右手。 剩下的就是对矩阵项的积分。
//
[0.x.1056] 
[0.x.1057] 
[0.x.1058] 
[0.x.1059] 
[0.x.1060] 
[0.x.1061] 
[0.x.1062] 
[0.x.1063] 
//
// 现在对边界条款也是如此。注意，现在我们使用FEValuesBase，即FEFaceValues和FESubfaceValues的基类，以便获得法向量。
//
[0.x.1064] 
[0.x.1065] 
[0.x.1066] 
[0.x.1067] 
[0.x.1068] 
[0.x.1069] 
[0.x.1070] 
//
[0.x.1071] 
[0.x.1072] 
[0.x.1073] 
//
[0.x.1074] 
//
[0.x.1075] 
[0.x.1076] 
//
[0.x.1077] 
[0.x.1078] 
[0.x.1079] 
[0.x.1080] 
[0.x.1081] 
[0.x.1082] 
[0.x.1083] 
[0.x.1084] 
[0.x.1085] 
[0.x.1086] 
[0.x.1087] 
[0.x.1088] 
[0.x.1089] 
[0.x.1090] 
[0.x.1091] 
[0.x.1092] 
[0.x.1093] 
[0.x.1094] 
[0.x.1095] 
[0.x.1096] 
//
// 最后是内部面的条款。这里的区别是，我们收到了两个信息对象，相邻面的每个单元都有一个，我们组装了四个矩阵，每个单元一个，两个用于来回耦合。
//
[0.x.1097] 
[0.x.1098] 
[0.x.1099] 
[0.x.1100] 
[0.x.1101] 
[0.x.1102] 
//
// 对于正交点、权重等，我们使用第一个参数的FEValuesBase对象。
//
[0.x.1103] 
[0.x.1104] 
//
// 对于额外的形状函数，我们必须询问邻居的FEValuesBase。
//
[0.x.1105] 
[0.x.1106] 
[0.x.1107] 
//
// 然后我们得到对四个局部矩阵的引用。字母u和v分别指的是试验和测试函数。%的数字表示由info1和info2提供的单元。按照惯例，每个信息对象中的两个矩阵指的是各自单元上的试验函数。第一个矩阵包含该单元的内部耦合，而第二个矩阵包含单元之间的耦合。
//
[0.x.1108] 
[0.x.1109] 
[0.x.1110] 
[0.x.1111] 
//
// 在这里，按照前面的函数，我们会有本地的右手边向量。幸运的是，界面条款只涉及到解决方案，右手边没有收到任何贡献。
//
[0.x.1112] 
[0.x.1113] 
[0.x.1114] 
//
[0.x.1115] 
[0.x.1116] 
[0.x.1117] 
[0.x.1118] 
[0.x.1119] 
[0.x.1120] 
[0.x.1121] 
//
// 这个词我们已经看过了。
//
[0.x.1122] 
[0.x.1123] 
[0.x.1124] 
[0.x.1125] 
[0.x.1126] 
[0.x.1127] 
//
// 我们另外组装术语 [2.x.159] 。
//
[0.x.1128] 
[0.x.1129] 
[0.x.1130] 
[0.x.1131] 
[0.x.1132] 
[0.x.1133] 
[0.x.1134] 
[0.x.1135] 
[0.x.1136] 
[0.x.1137] 
//
// 这个我们也已经看过了。
//
[0.x.1138] 
[0.x.1139] 
[0.x.1140] 
[0.x.1141] 
[0.x.1142] 
[0.x.1143] 
[0.x.1144] 
//
// 而这是另一个新的。 [2.x.160] :
//
[0.x.1145] 
[0.x.1146] 
[0.x.1147] 
[0.x.1148] 
[0.x.1149] 
[0.x.1150] 
[0.x.1151] 
[0.x.1152] 
[0.x.1153] 
[0.x.1154] 
//[2.x.161] 
//
// 对于这个简单的问题，我们使用了最简单的求解器，称为Richardson迭代，它代表了简单的缺陷修正。这与一个块状SSOR预处理相结合，该预处理使用DG离散化产生的系统矩阵的特殊块状结构。这些块的大小是每个单元的DoF数量。在这里，我们使用SSOR预处理，因为我们没有根据流场对DoFs进行重新编号。如果在流的下游方向对DoFs进行重新编号，那么块状的Gauss-Seidel预处理（见PreconditionBlockSOR类，放松=1）会做得更好。
//
[0.x.1155] 
[0.x.1156] 
[0.x.1157] 
[0.x.1158] 
[0.x.1159] 
//
// 这里我们创建了预处理程序。
//
[0.x.1160] 
//
// 然后将矩阵分配给它，并设置正确的块大小。
//
[0.x.1161] 
//
// 做完这些准备工作后，我们就可以启动线性求解器了。
//
[0.x.1162] 
[0.x.1163] 
//
// 我们根据一个非常简单的细化标准来细化网格，即对解的梯度的近似。由于这里我们考虑的是DG(1)方法（即我们使用片状双线性形状函数），我们可以简单地计算每个单元的梯度。但是我们并不希望我们的细化指标只建立在每个单元的梯度上，而是希望同时建立在相邻单元之间的不连续解函数的跳跃上。最简单的方法是通过差分商计算近似梯度，包括考虑中的单元和其相邻的单元。这是由[2.x.162]类完成的，它计算近似梯度的方式类似于本教程[2.x.164]中描述的[2.x.163]。事实上，[2.x.165]类是在[2.x.167]的[2.x.166]类之后开发的。与 [2.x.168] 中的讨论相关，这里我们考虑 [2.x.169] 。此外，我们注意到，我们不考虑近似的二次导数，因为线性平流方程的解一般不在[2.x.170]中，而只在[2.x.171]中（或者，更准确地说：在[2.x.172]中，即在方向[2.x.173]中的导数是可平方整除的函数空间）。
//
[0.x.1164] 
[0.x.1165] 
[0.x.1166] 
//
// [2.x.174]类将梯度计算为浮点精度。这已经足够了，因为它们是近似的，只作为细化指标。
//
[0.x.1167] 
//
// 现在，近似梯度被计算出来了
//
[0.x.1168] 
[0.x.1169] 
[0.x.1170] 
[0.x.1171] 
//
//并且它们被单元格按比例放大，系数为[2.x.175] 。
[0.x.1172] 
[0.x.1173] 
[0.x.1174] 
[0.x.1175] 
//
// 最后它们作为细化指标。
//
[0.x.1176] 
[0.x.1177] 
[0.x.1178] 
[0.x.1179] 
//
[0.x.1180] 
[0.x.1181] 
//
// 这个程序的输出包括自适应细化网格的eps文件和gnuplot格式的数值解。
//
[0.x.1182] 
[0.x.1183] 
[0.x.1184] 
//
// 首先将网格写成eps格式。
//
[0.x.1185] 
[0.x.1186] 
[0.x.1187] 
[0.x.1188] 
//
[0.x.1189] 
[0.x.1190] 
[0.x.1191] 
//
// 然后以gnuplot格式输出解决方案。
//
[0.x.1192] 
[0.x.1193] 
[0.x.1194] 
[0.x.1195] 
//
[0.x.1196] 
[0.x.1197] 
[0.x.1198] 
//
[0.x.1199] 
//
[0.x.1200] 
[0.x.1201] 
[0.x.1202] 
//
// 下面的[2.x.176]函数与前面的例子类似。
//
[0.x.1203] 
[0.x.1204] 
[0.x.1205] 
[0.x.1206] 
[0.x.1207] 
[0.x.1208] 
//
[0.x.1209] 
[0.x.1210] 
[0.x.1211] 
//
[0.x.1212] 
[0.x.1213] 
[0.x.1214] 
[0.x.1215] 
//
[0.x.1216] 
[0.x.1217] 
//
[0.x.1218] 
//
[0.x.1219] 
[0.x.1220] 
//
[0.x.1221] 
[0.x.1222] 
//
[0.x.1223] 
[0.x.1224] 
[0.x.1225] 
[0.x.1226] 
//
// 下面的[2.x.177]函数与前面的例子也类似，不需要注释。
//
[0.x.1227] 
[0.x.1228] 
[0.x.1229] 
[0.x.1230] 
[0.x.1231] 
//
[0.x.1232] 
[0.x.1233] 
[0.x.1234] 
[0.x.1235] 
[0.x.1236] 
[0.x.1237] 
[0.x.1238] 
[0.x.1239] 
[0.x.1240] 
[0.x.1241] 
[0.x.1242] 
[0.x.1243] 
[0.x.1244] 
[0.x.1245] 
[0.x.1246] 
[0.x.1247] 
[0.x.1248] 
[0.x.1249] 
[0.x.1250] 
[0.x.1251] 
[0.x.1252] 
[0.x.1253] 
[0.x.1254] 
[0.x.1255] 
[0.x.1256] 
[0.x.1257] 
[0.x.1258] 
[0.x.1259] 
//
[0.x.1260] 
[0.x.1261] 
[0.x.1262] 
[0.x.1263] 
[0.x.1264] 
[0.x.1265] 
[0.x.1266] 
[0.x.1267] 
[0.x.1268] 
[0.x.1269] 
[0.x.1270] 
[0.x.1271] 
[0.x.1272] 
[0.x.1273] 
[0.x.1274] 
[0.x.1275] 
//
[0.x.1276] 
[0.x.1277] 
[0.x.1278] 
//
// 像所有的程序一样，我们从库中的include文件列表开始，像往常一样，它们的标准顺序是[2.x.178] -- [2.x.179] -- [2.x.180]（因为每一类大致都是建立在前面的基础上），然后是C++标准头文件。
//
[0.x.1279] 
[0.x.1280] 
[0.x.1281] 
[0.x.1282] 
[0.x.1283] 
[0.x.1284] 
[0.x.1285] 
[0.x.1286] 
[0.x.1287] 
[0.x.1288] 
[0.x.1289] 
[0.x.1290] 
[0.x.1291] 
[0.x.1292] 
[0.x.1293] 
[0.x.1294] 
[0.x.1295] 
[0.x.1296] 
[0.x.1297] 
[0.x.1298] 
[0.x.1299] 
[0.x.1300] 
[0.x.1301] 
[0.x.1302] 
//
// 现在是C++标准头文件。
//
[0.x.1303] 
[0.x.1304] 
[0.x.1305] 
//
// 最后一步和以前所有的程序一样。
//
[0.x.1306] 
[0.x.1307] 
[0.x.1308] 
//[2.x.181] 
//
// 至于程序本身，我们首先定义了评估拉普拉斯方程解的类。事实上，它们可以评估每一种解，只要它是由一个[2.x.182]对象和一个解向量描述的。我们首先在这里定义它们，甚至在实际生成要评估的解的类之前，因为我们需要声明一个抽象的基类，以便解算器类可以引用。
//
// 从抽象的角度来看，我们声明一个纯粹的基类，它提供了一个评估算子（），它将对解进行评估（无论派生类如何考虑[2.x.183] ）。由于这是该基类唯一真正的功能（除了一些簿记机器），我们通常把这样一个只有[2.x.184]的类称为C++术语中的[2.x.185]，因为它的使用就像一个函数对象。
//
// 这种函数类型的对象随后将被传递给求解器对象，后者将其应用于刚刚计算出的解决方案。然后，评估对象可以从解决方案中提取他们喜欢的任何数量。将这些评估函数放入一个单独的类的层次结构的好处是，在设计上它们不能使用求解器对象的内部结构，因此独立于求解器工作方式的变化。此外，在不修改求解器类的情况下编写另一个评价类是很容易的，这就加快了编程速度（不能使用另一个类的内部结构也意味着你不必担心它们--对评价器的编程通常是一个相当快的任务），以及编译速度（如果求解器和评价类被放在不同的文件中：求解器只需要看到抽象基类的声明，因此在增加一个新的评价类或修改一个旧的类时不需要被重新编译）。 与此相关的是，你可以在其他项目中重复使用这些评估类，解决不同的方程。
//
// 为了提高代码在不同模块中的分离度，我们把评估类放到了一个自己的命名空间中。这使得在同一个程序中实际解决不同的方程更加容易，通过现有的构件进行组装。这样做的原因是，用于类似目的的类往往具有相同的名称，尽管它们是在不同的背景下开发的。为了能够在一个程序中一起使用它们，有必要将它们放在不同的命名空间中。我们在这里就是这样做的。
//
[0.x.1309] 
[0.x.1310] 
//
// 现在是评估类的抽象基类：它的主要目的是声明一个纯虚函数[2.x.186]，接收一个[2.x.187]对象和解向量。为了能够只使用指向这个基类的指针，它还必须声明一个虚拟的析构器，但这个析构器什么也不做。除此之外，它只提供了一点簿记功能：由于我们通常想在后续的细化水平上评估解决方案，我们存储了当前细化周期的编号，并提供了一个函数来改变这个编号。
//
[0.x.1311] 
[0.x.1312] 
[0.x.1313] 
[0.x.1314] 
[0.x.1315] 
//
[0.x.1316] 
//
[0.x.1317] 
[0.x.1318] 
//
[0.x.1319] 
[0.x.1320] 
[0.x.1321] 
//
[0.x.1322] 
[0.x.1323] 
[0.x.1324] 
[0.x.1325] 
[0.x.1326] 
//[2.x.188] 
//
// 下一件事是实现实际的评估类。正如介绍中指出的，我们想从解决方案中提取一个点值，所以第一个类在它的[2.x.189]中做这个。实际的点是通过构造函数给这个类的，还有一个表格对象，它将把它的发现放入其中。
//
// 如果我们不能依靠知道实际使用的有限元，那么找出任意点的有限元域的值是相当困难的，因为这样我们就不能，例如，在节点之间进行插值。因此，为了简单起见，我们在这里假设我们要评估场的点实际上是一个节点。如果在求解的过程中，我们发现我们在所有顶点上循环时没有遇到这个点，那么我们就必须抛出一个异常，以便向调用的函数发出信号，说明出了问题，而不是默默地忽略这个错误。
//
// 在 [2.x.190] 示例程序中，我们已经看到如何使用 [2.x.191] 宏来声明这样一个异常类。我们在这里再次使用这种机制。
//
// 由此可见，这个类的实际声明应该是很明显的。请注意，即使我们没有明确地列出一个析构器，编译器也会生成一个隐含的析构器，而且它和基类的析构器一样是虚拟的。
//
[0.x.1327] 
[0.x.1328] 
[0.x.1329] 
[0.x.1330] 
[0.x.1331] 
[0.x.1332] 
//
[0.x.1333] 
[0.x.1334] 
//
[0.x.1335] 
[0.x.1336] 
[0.x.1337] 
[0.x.1338] 
[0.x.1339] 
//
 
[0.x.1341] 
[0.x.1342] 
[0.x.1343] 
//
// 至于定义，构造函数是微不足道的，只是接收数据并将其存储在对象本地的。
//
[0.x.1344] 
[0.x.1345] 
[0.x.1346] 
[0.x.1347] 
[0.x.1348] 
[0.x.1349] 
[0.x.1350] 
//
// 现在是本类中主要感兴趣的函数，即点值的计算。
//
[0.x.1351] 
[0.x.1352] 
[0.x.1353] 
[0.x.1354] 
[0.x.1355] 
//
// 首先分配一个变量，用来保存点值。用一个明显是假的值来初始化它，这样如果我们不能把它设置成一个合理的值，我们就会马上注意到。这在像本函数这样小的函数中可能没有必要，因为我们在这里可以很容易地看到所有可能的执行路径，但事实证明它对更复杂的情况是有帮助的，所以我们在这里也采用了这个策略。
//
[0.x.1356] 
//然后
//循环所有单元格及其所有顶点，并检查顶点是否与评估点匹配。如果是这样，就提取点的值，设置一个标志，表示我们已经找到了感兴趣的点，然后退出循环。
//
[0.x.1357] 
[0.x.1358] 
[0.x.1359] 
[0.x.1360] 
[0.x.1361] 
[0.x.1362] 
//
// 为了从全局解决方案矢量中提取点值，挑选属于感兴趣的顶点的那个分量，如果解决方案是矢量值的，则取其第一个分量。
//
[0.x.1363] 
//
// 请注意，我们在这里做了一个假设，这个假设并不总是有效的，如果这是实际应用的代码，而不是一个教程程序，就应该在类的声明中记录下来：我们假设用于我们试图评估的解决方案的有限元实际上有与顶点相关的自由度。例如，这对不连续元素来说是不成立的，因为形状函数的支持点恰好位于顶点，但不与顶点相关，而是与单元内部相关，因为与顶点相关意味着那里的连续性。这对于面向边缘的元素等也是不成立的。            理想情况下，我们会在函数开始时检查这一点，例如通过一个类似<code>Assert (dof_handler.get_fe().dofs_per_vertex [2.x.192] 0, ExcNotImplemented())</code>的语句，这应该可以在异常触发时很清楚地说明问题所在。在这种情况下，我们省略了它（这的确是不好的风格），但是知道这一点在这里并没有什么坏处，因为如果我们要求语句[2.x.193]给我们顶点的DoF索引，如果没有的话，语句就会失败。            我们再次强调，这种对允许的有限元的限制应该在类的文档中说明。
//
// 由于我们找到了正确的点，我们现在设置相应的标志并退出最里面的循环。由于设置了标志，外循环也将被终止。
//
[0.x.1364] 
[0.x.1365] 
[0.x.1366] 
//
// 最后，我们要确定我们确实已经找到了评估点，因为如果不是这样，我们就不能在那里给出一个合理的解的值，反正剩下的计算也是无用的。所以通过[2.x.194]程序中已经使用的[2.x.195]宏，确保我们确实找到了这个点。如果不是这样，这个宏就会抛出一个作为第二个参数给它的类型的异常，但与直接的[2.x.196]语句相比，它在异常对象中填充了一组额外的信息，例如，产生异常的源文件和行号，以及失败的条件。如果你在你的主函数里有一个[2.x.197]子句（就像这个程序一样），你会捕捉到所有没有在中间某个地方捕捉到的、因而已经处理过的异常，这些额外的信息会帮助你找出发生了什么以及哪里出了问题。
//
[0.x.1367] 
[0.x.1368] 
//
// 注意，我们在其他示例程序中也使用了[2.x.198]宏。它与这里使用的[2.x.199]宏不同的是，它只是中止程序，而不是抛出一个异常，而且它只在调试模式下这样做。它是用来检查作为参数传递给函数的向量大小的正确宏，以及类似的。
//
// 然而，这里的情况是不同的：我们是否找到评估点可能会在不同的细化过程中发生变化（例如，如果点周围的四个单元被粗化掉了，那么在细化和粗化之后，点可能会消失）。这是在调试模式下无法预测的事情，但应该经常检查，在生产运行中也是如此。因此，这里使用了[2.x.200]宏。
//
// 现在，如果我们确信我们已经找到了评估点，我们可以把结果加入到结果表中。
//
[0.x.1369] 
[0.x.1370] 
[0.x.1371] 
//
// [2.x.201] 
//
// 一种不同的，也许略显奇怪的[2.x.202]的解决方案是将其以图形格式输出到一个文件中。因为在评估函数中，我们得到了一个[2.x.203]对象和解决方案的向量，我们已经有了做这件事所需要的一切，所以我们可以在评估类中做这件事。实际上这样做而不是把它放到计算解决方案的类中的原因是，这样我们有更多的灵活性：如果我们选择只输出它的某些方面，或者根本不输出它。在任何情况下，我们都不需要修改求解器类，我们只需要修改其中的一个模块，就可以构建这个程序了。如上所述，这种形式的封装可以帮助我们保持程序的每个部分相当简单，因为接口保持简单，不可能访问隐藏的数据。
//
// 由于这个生成输出的类是从普通的[2.x.204]基类派生出来的，它的主要接口是[2.x.205]函数。此外，它有一个构造函数，接收一个字符串，该字符串将被用作文件名的基本部分，输出将被发送到该文件名中（我们将用一个数字来增加它，表示细化周期的数量--基类手头有这个信息--以及一个后缀），构造函数还接收一个值，表示要求的格式，即我们将为哪个图形程序生成输出（然后我们也将从这个值中生成我们写入的文件名后缀）。
//
// 关于输出格式，DataOutBase命名空间提供了一个枚举字段[2.x.206]，列出了所有支持的输出格式的名称。在编写本程序时，支持的图形格式由枚举值[2.x.207]、[2.x.208]、[2.x.209]、[2.x.210]等表示，但这个列表肯定会随着时间而增加。现在，在该基类的各种函数中，你可以使用这种类型的值来获得关于这些图形格式的信息（例如每种格式的文件所使用的默认后缀），你可以调用一个通用的[2.x.211]函数，然后根据给它的第二个参数的值表示所需的输出格式，将其分支到我们在以前的例子中已经使用的[2.x.212]等函数。这种机制使得编写一个可扩展的程序变得很简单，它可以在运行时决定使用哪种输出格式，同时也使得编写程序的方式变得相当简单，它可以利用新实现的输出格式，而不需要改变应用程序。
//
// 在这两个字段中，即基本名称和输出格式描述符，构造函数取值并存储它们，以便以后由实际的评估函数使用。
//
[0.x.1372] 
[0.x.1373] 
[0.x.1374] 
[0.x.1375] 
[0.x.1376] 
[0.x.1377] 
//
[0.x.1378] 
[0.x.1379] 
//
[0.x.1380] 
[0.x.1381] 
[0.x.1382] 
[0.x.1383] 
//
[0.x.1384] 
[0.x.1385] 
[0.x.1386] 
[0.x.1387] 
[0.x.1388] 
[0.x.1389] 
[0.x.1390] 
//
// 按照上面的描述，生成实际输出的函数现在相对简单了。与以前的例子程序相比，唯一特别有趣的特征是使用了[2.x.213]函数，返回给定格式文件的通常后缀（例如，".eps "用于封装的postscript文件，".gnuplot "用于Gnuplot文件），以及带有第二个参数的通用[2.x.214]函数，该函数根据作为第二个参数的格式描述符的值，在内部分支到不同图形格式的实际输出函数。
//
//还要注意，我们必须在[2.x.215]前加上前缀，以访问依赖模板的基类的成员变量。这里的原因，以及在程序中更进一步的原因，与[2.x.216]示例程序中描述的相同（在那里寻找[2.x.217]）。
//
[0.x.1391] 
[0.x.1392] 
[0.x.1393] 
[0.x.1394] 
[0.x.1395] 
[0.x.1396] 
[0.x.1397] 
[0.x.1398] 
//
[0.x.1399] 
[0.x.1400] 
[0.x.1401] 
//
[0.x.1402] 
[0.x.1403] 
//
// [2.x.218] 
//
// 在实际应用中，人们会在这里添加一个其他可能的评价类的列表，代表人们可能感兴趣的数量。对于这个例子，这些就足够了，所以我们关闭命名空间。
//
[0.x.1404] 
//[2.x.219] 
//
// 在定义了我们想知道的解决方案之后，我们现在应该关心如何去获得它。我们将把所有我们需要的东西都打包到一个自己的命名空间中，原因和上面的评估差不多。
//
// 由于我们在前面的例子中已经相当详细地讨论了拉普拉斯求解器，所以下面就没有什么新东西了。相反，我们在很大程度上拆解了以前的例子，并以稍微不同的形式把它们放到这个例子程序中。因此，我们将主要讨论与以前的例子的不同之处。
//
// 基本上，正如在介绍中已经说过的，这个例子中缺乏新的东西是故意的，因为它更多地是为了展示软件设计的实践，而不是数学。因此，下面解释的重点将更多地放在实际的实现上。
//
[0.x.1405] 
[0.x.1406] 
//[2.x.220] 
//
// 在定义拉普拉斯求解器时，我们首先声明一个抽象的基类，它本身没有任何功能，只是接受和存储一个指向三角形的指针，以便以后使用。
//
// 这个基类是非常通用的，也可以用于任何其他静止问题。它提供了一些函数的声明，这些函数将在派生类中分别解决一个问题，用评估对象的列表对解决方案进行后处理，以及细化网格。在基类中，这些函数本身都没有做什么。
//
// 由于缺乏实际功能，声明非常抽象的基类的编程风格类似于Smalltalk或Java程序中使用的风格，所有的类都是从完全抽象的类派生出来的[2.x.221] ，甚至是数字表示。作者承认，他并不特别喜欢在C++中使用这种风格，因为它将风格置于理性之上。此外，它提倡对一切事物使用虚拟函数（例如，在Java中，所有的函数本身就是虚拟的），然而，这在许多应用中被证明是相当低效的，在这些应用中，函数往往只是访问数据，而不是进行计算，因此很快就会返回；这样，虚拟函数的开销就会很大。笔者的观点是，只要至少有一部分实际实现的代码可以被共享，从而被分离到基类中，就应该有抽象的基类。
//
// 除了这些理论上的问题，我们在这里还有一个很好的理由，这个理由在下面会让读者更清楚。基本上，我们希望能够有一个不同的拉普拉斯求解器家族，这些求解器的差别很大，以至于无法找到更大的共同功能子集。因此，我们只是声明了这样一个抽象的基类，在构造函数中获取一个指向三角形的指针，并从此存储它。由于这个三角剖分将在所有的计算中使用，我们必须确保这个三角剖分在最后使用之前是有效的。我们通过保留一个[2.x.222]到这个三角剖分来做到这一点，正如[2.x.223]中所解释的。
//
// 注意，虽然指针本身被声明为常数（即在这个对象的整个生命周期中，指针指向同一个对象），但它没有被声明为指向一个常数三角的指针。事实上，通过这种方式，我们允许派生类在[2.x.224]函数中细化或粗化三角结构。
//
// 最后，我们有一个函数[2.x.225]只是驱动函数的一个工具，用来决定我们是否要继续进行网格细化。它返回当前模拟的自由度数量。
//
[0.x.1407] 
[0.x.1408] 
[0.x.1409] 
[0.x.1410] 
[0.x.1411] 
[0.x.1412] 
//
[0.x.1413] 
[0.x.1414] 
[0.x.1415] 
[0.x.1416] 
[0.x.1417] 
//
[0.x.1418] 
[0.x.1419] 
[0.x.1420] 
//
// 仅有的两个非抽象函数的实现就相当无聊了。
//
[0.x.1421] 
[0.x.1422] 
[0.x.1423] 
[0.x.1424] 
//[2.x.226] 
//
// 下面是主类，它实现了组装线性系统的矩阵，解决它，并在解决方案上调用后处理器对象。它实现了基类中声明的 [2.x.227] 和 [2.x.228] 函数。然而，它并没有实现[2.x.229]方法，因为网格细化将在一些派生类中实现。
//
// 它还声明了一个新的抽象虚函数，[2.x.230] ，需要在子类中重载。原因是我们将实现两个不同的类，它们将实现不同的方法来组装右手边的向量。这个函数在以下情况下可能也很有趣：右手边不仅仅取决于一个连续函数，还取决于其他东西，例如另一个离散问题的解，等等。后者经常发生在非线性问题中。
//
// 正如我们之前提到的，这门课的实际内容并不是新的，而是以前的例子中已经使用过的各种技术的混合。因此，我们将不对它们进行详细讨论，而是让读者参考这些程序。
//
// 基本上，用几句话来说，这个类的构造函数接收指向一个三角形、一个有限元和一个代表边界值的函数对象的指针。这些东西或者被传递给基类的构造函数，或者被存储起来并在以后用来生成一个[2.x.231]对象。由于有限元和正交公式应该是匹配的，所以它也被传递给一个正交对象。
//
// [2.x.232]为实际求解设置数据结构，调用函数来组装线性系统，并求解它。
//
// [2.x.233]函数最后接收一个评估对象并将其应用于计算出的解决方案。
//
// [2.x.234]函数最后实现了基类的纯虚拟函数。
//
[0.x.1425] 
[0.x.1426] 
[0.x.1427] 
[0.x.1428] 
[0.x.1429] 
[0.x.1430] 
[0.x.1431] 
[0.x.1432] 
[0.x.1433] 
//
[0.x.1434] 
//
 
[0.x.1436] 
//
[0.x.1437] 
//
// 在这个类的保护部分，我们首先有一些成员变量，其用途在前面的例子中应该很清楚。
//
[0.x.1438] 
[0.x.1439] 
[0.x.1440] 
[0.x.1441] 
[0.x.1442] 
[0.x.1443] 
//
// 然后我们声明一个抽象函数，该函数将用于组装右手边的内容。如上所述，在各种情况下，这个动作的必要性有很大的不同，所以我们将其推迟到派生类中。
//
[0.x.1444] 
//
// 接下来，在私有部分，我们有一个小类，它代表了整个线性系统，即一个矩阵、一个右手边和一个解向量，以及应用于它的约束，如那些由于悬挂节点而产生的约束。它的构造函数初始化了各种子对象，还有一个函数实现了共轭梯度法作为求解器。
//
[0.x.1445] 
[0.x.1446] 
[0.x.1447] 
[0.x.1448] 
//
[0.x.1449] 
//
[0.x.1450] 
[0.x.1451] 
[0.x.1452] 
[0.x.1453] 
[0.x.1454] 
//
// 最后，有一组函数将被用来组装实际的系统矩阵。这一组的主函数[2.x.235]使用以下两个辅助函数，在多核系统上并行计算矩阵。这样做的机制与 [2.x.236] 示例程序相同，并遵循 [2.x.237] 中概述的 WorkStream 概念。主函数还调用了组装右手边的虚拟函数。
//
[0.x.1455] 
[0.x.1456] 
[0.x.1457] 
[0.x.1458] 
[0.x.1459] 
//
 
 
//
[0.x.1462] 
[0.x.1463] 
[0.x.1464] 
[0.x.1465] 
[0.x.1466] 
//
[0.x.1467] 
//
[0.x.1468] 
[0.x.1469] 
[0.x.1470] 
[0.x.1471] 
//
[0.x.1472] 
[0.x.1473] 
[0.x.1474] 
//
// 现在是该类的构造函数。它没有做什么，只是存储了给定对象的指针，并生成了[2.x.238]对象，初始化了给定的三角形的指针。这使得DoF处理程序存储该指针，但并没有生成有限元编号（我们只在[2.x.239]函数中要求这样做）。
//
[0.x.1475] 
[0.x.1476] 
[0.x.1477] 
[0.x.1478] 
[0.x.1479] 
[0.x.1480] 
[0.x.1481] 
[0.x.1482] 
[0.x.1483] 
[0.x.1484] 
[0.x.1485] 
//
// 解构器很简单，它只是清除存储在DoF处理程序对象中的信息以释放内存。
//
[0.x.1486] 
[0.x.1487] 
[0.x.1488] 
[0.x.1489] 
[0.x.1490] 
//
// 下一个函数是解决这个问题的主要工作：它用给这个对象的构造函数的有限元来设置DoF处理程序对象，创建一个表示线性系统的对象（即矩阵、右手向量和解向量），调用函数来组装它，最后解决它。
//
[0.x.1491] 
[0.x.1492] 
[0.x.1493] 
[0.x.1494] 
[0.x.1495] 
//
[0.x.1496] 
[0.x.1497] 
[0.x.1498] 
[0.x.1499] 
//
// 如上所述，[2.x.240]函数接收一个评估对象，并将其应用于计算的解决方案。这个函数可以被多次调用，对用户要求的每一个解的评估都要调用一次。
//
[0.x.1500] 
[0.x.1501] 
[0.x.1502] 
[0.x.1503] 
[0.x.1504] 
[0.x.1505] 
//
// [2.x.241]函数应该是不言自明的。
//
[0.x.1506] 
[0.x.1507] 
[0.x.1508] 
[0.x.1509] 
[0.x.1510] 
//
// 下面的函数在每一步中组装矩阵和要解决的线性系统的右手边。我们将在几个层面上并行地做事情。首先，请注意，我们需要组装矩阵和右手边。这些都是独立的操作，我们应该并行地进行这些操作。为此，我们使用[2.x.242]文档模块中讨论的 "任务 "概念。本质上，我们想说的是 "这里有一些需要处理的事情，只要有CPU核可用就去做"，然后再做其他事情，当我们需要第一个操作的结果时，就等待它的完成。在第二层，我们想使用与我们在[2.x.243]中已经使用过的完全相同的策略来组装矩阵，即WorkStream概念。
//
// 虽然我们可以考虑在做另一件事的时候在后台组装右侧或组装矩阵，但我们将选择前一种方法，只是因为调用[2.x.244]比调用[2.x.245]及其许多参数要简单得多。在任何情况下，代码看起来像这样，以组装整个线性系统。
//
[0.x.1511] 
[0.x.1512] 
[0.x.1513] 
[0.x.1514] 
[0.x.1515] 
//
[0.x.1516] 
[0.x.1517] 
[0.x.1518] 
[0.x.1519] 
[0.x.1520] 
[0.x.1521] 
//
[0.x.1522] 
[0.x.1523] 
[0.x.1524] 
//
[0.x.1525] 
[0.x.1526] 
[0.x.1527] 
[0.x.1528] 
[0.x.1529] 
[0.x.1530] 
[0.x.1531] 
//
// 上面的语法需要一些解释。[2.x.246]有多个版本，期待不同的参数。在 [2.x.247] 中，我们使用了一个版本，它需要一对迭代器、一对指向具有非常具体的参数列表的成员函数的指针、一个指向这些成员函数必须工作的对象的指针或引用，以及一个抓取和复制数据对象。这有点限制性，因为这样调用的成员函数的参数列表必须与[2.x.248]所期望的完全一致：本地装配函数需要接收一个迭代器、一个抓取对象和一个复制对象；而复制-本地-全局函数需要接收的正是一个复制对象。但是，如果我们想要的东西稍微更通用一些呢？例如，在目前的程序中，copy-local-to-global函数需要知道将本地贡献写入哪个线性系统对象中，也就是说，它还必须接受一个[2.x.249]参数。这在使用成员函数指针的方法中是行不通的。
//
// 幸运的是，C++提供了一条出路。这些被称为函数对象。本质上，[2.x.250]想要做的不是调用一个成员函数。它想调用一些函数，这些函数在第一种情况下需要一个迭代器、一个抓取对象和一个拷贝对象，而在第二种情况下需要一个拷贝对象。不管这些是成员函数、全局函数，还是其他什么，对WorkStream来说，真的不是很关心。因此，有第二个版本的函数只接收函数对象--具有 [2.x.251] 的对象，因此可以像函数一样被调用，不管它们真正代表什么。产生这种函数对象的典型方法是使用一个[1.x.8]，它用固定的值来包装函数调用，包括各个参数。所有属于外层函数签名的参数在lambda函数中被指定为常规的函数参数。固定值使用捕获列表（`[...]`）传递到lambda函数中。可以使用捕获默认值，也可以明确列出所有要绑定到lambda的变量。为了清楚起见，我们决定在这里省略捕获默认值，但是捕获列表同样可以是`[&]`，这意味着所有使用的变量都通过引用复制到lambda中。
//
// 在这一点上，我们已经组装好了矩阵，并将其浓缩。右手边可能已经完全组装好了，也可能还没有，但是我们接下来想浓缩右手边的向量。我们只有在这个向量的组装完成后才能这样做，所以我们必须等待任务的完成；在计算机科学中，等待任务通常被称为 "加入 "任务，解释了我们下面调用的函数的名称。
//
// 既然这个任务可能已经完成，也可能没有完成，既然我们可能要等它完成，我们不妨试着把其他需要完成的事情装进这个空隙。因此，我们首先插值边界值，然后再等待右手边的工作。当然，另一种可能性是在一个单独的任务中也插值边界值，因为这样做与我们到目前为止在这个函数中所做的其他事情无关。请自由地找到正确的语法，为这个插值创建一个任务，并在这个函数的顶部启动它，同时装配右手边。(你会发现这稍微有点复杂，因为[2.x.252]有多个版本，所以简单地取地址[2.x.253]会产生一组重载函数，不能马上传递给[2.x.254]--你必须通过将地址表达式转换为函数指针类型，选择你想要的这个重载集合中的哪个元素，这是你想在任务中调用的特定版本的函数。)
//
[0.x.1532] 
[0.x.1533] 
[0.x.1534] 
[0.x.1535] 
[0.x.1536] 
//
[0.x.1537] 
[0.x.1538] 
//
// 现在我们有了完整的线性系统，我们也可以处理边界值，需要从矩阵和右手边消除。
//
[0.x.1539] 
[0.x.1540] 
[0.x.1541] 
[0.x.1542] 
[0.x.1543] 
//
// 这组函数的后半部分是处理每个单元上的局部装配，并将局部贡献复制到全局矩阵对象中。这与 [2.x.255] 中描述的工作方式完全相同。
//
[0.x.1544] 
[0.x.1545] 
[0.x.1546] 
[0.x.1547] 
[0.x.1548] 
[0.x.1549] 
//
[0.x.1550] 
[0.x.1551] 
[0.x.1552] 
[0.x.1553] 
[0.x.1554] 
[0.x.1555] 
[0.x.1556] 
//
[0.x.1557] 
[0.x.1558] 
[0.x.1559] 
[0.x.1560] 
[0.x.1561] 
[0.x.1562] 
[0.x.1563] 
[0.x.1564] 
//
[0.x.1565] 
//
[0.x.1566] 
//
[0.x.1567] 
//
[0.x.1568] 
[0.x.1569] 
[0.x.1570] 
[0.x.1571] 
[0.x.1572] 
[0.x.1573] 
[0.x.1574] 
//
[0.x.1575] 
[0.x.1576] 
//
[0.x.1577] 
[0.x.1578] 
[0.x.1579] 
[0.x.1580] 
[0.x.1581] 
[0.x.1582] 
[0.x.1583] 
[0.x.1584] 
[0.x.1585] 
[0.x.1586] 
//
// 现在是实现线性系统类中动作的函数。首先，构造函数将所有数据元素初始化为正确的大小，并设置了一些额外的数据结构，例如由于悬挂节点而产生的约束。由于设置悬空节点和找出矩阵的非零元素是独立的，所以我们以并行方式进行（如果库被配置为使用并发，至少是这样；否则，这些动作是按顺序执行的）。注意，我们只启动一个线程，并在主线程中做第二个动作。由于只生成了一个任务，我们在这里不使用[2.x.256]类，而是直接使用创建的一个任务对象来等待这个特定任务的退出。
//
// 注意，占用[2.x.257]函数的地址有点麻烦，因为它实际上有三个，每个支持的空间维度都有一个。在C++中，获取重载函数的地址有些复杂，因为在这种情况下，操作符[2.x.258]返回的更像是一组值（所有具有该名称的函数的地址），然后选择正确的函数是下一步的工作。如果上下文决定采取哪一个（例如通过分配给一个已知类型的函数指针），那么编译器可以自己做，但如果这组指针应作为一个采取模板的函数的参数，编译器可以选择所有的，而不偏向于一个。因此，我们必须向编译器说明我们想要哪一个；为此，我们可以使用cast，但为了更清楚，我们把它分配给一个具有正确类型的临时[2.x.259]（简称<code>pointer to make_hanging_node_constraints</code>），并使用这个指针代替。
//
[0.x.1587] 
[0.x.1588] 
[0.x.1589] 
[0.x.1590] 
//
[0.x.1591] 
[0.x.1592] 
//
// 启动一个辅助任务，然后在主线程上继续进行
//
[0.x.1593] 
[0.x.1594] 
//
[0.x.1595] 
[0.x.1596] 
//
// 等到边上的任务完成后再继续前进
//
[0.x.1597] 
//
[0.x.1598] 
[0.x.1599] 
[0.x.1600] 
//
// 最后初始化矩阵和右手边的向量
//
[0.x.1601] 
[0.x.1602] 
[0.x.1603] 
//
// 该类的第二个函数只是通过预处理的共轭梯度法来解决线性系统。这一点之前已经被广泛讨论过了，所以我们不再赘述了。
//
[0.x.1604] 
[0.x.1605] 
[0.x.1606] 
[0.x.1607] 
[0.x.1608] 
//
[0.x.1609] 
[0.x.1610] 
//
[0.x.1611] 
//
[0.x.1612] 
[0.x.1613] 
//
// [2.x.260] 
//
// 在上一节中，我们实现了一个拉普拉斯求解器的基类，该基类缺乏组装右手边向量的功能，但是，由于其中的原因，我们已经解释了。现在我们实现了一个相应的类，它可以在问题的右边以函数对象的形式给出的情况下完成这一工作。
//
// 这个类的动作和你在以前的例子中已经看到的差不多，所以简单解释一下就够了：构造函数和底层类的数据相同（它把所有的信息传递给底层类），除了一个表示问题右侧的函数对象。这个对象的指针被存储起来（同样作为一个[2.x.261]，以确保这个函数对象只要还被这个类使用就不会被删除）。
//
// 这个类的唯一功能部分是[2.x.262]方法，它的作用和它的名字一样。
//
[0.x.1614] 
[0.x.1615] 
[0.x.1616] 
[0.x.1617] 
[0.x.1618] 
[0.x.1619] 
[0.x.1620] 
[0.x.1621] 
[0.x.1622] 
//
[0.x.1623] 
[0.x.1624] 
[0.x.1625] 
[0.x.1626] 
//
// 这个类的构造函数基本上做了上面宣布的事情......
//
[0.x.1627] 
[0.x.1628] 
[0.x.1629] 
[0.x.1630] 
[0.x.1631] 
[0.x.1632] 
[0.x.1633] 
[0.x.1634] 
[0.x.1635] 
[0.x.1636] 
//
// ... 和[2.x.263]函数一样。因为在前面的几个例子程序中已经解释过了，所以我们就不多说了。
//
[0.x.1637] 
[0.x.1638] 
[0.x.1639] 
[0.x.1640] 
[0.x.1641] 
[0.x.1642] 
[0.x.1643] 
//
[0.x.1644] 
[0.x.1645] 
//
 
[0.x.1647] 
[0.x.1648] 
//
[0.x.1649] 
[0.x.1650] 
[0.x.1651] 
[0.x.1652] 
[0.x.1653] 
[0.x.1654] 
//
[0.x.1655] 
[0.x.1656] 
[0.x.1657] 
[0.x.1658] 
[0.x.1659] 
//
[0.x.1660] 
[0.x.1661] 
[0.x.1662] 
[0.x.1663] 
[0.x.1664] 
//[2.x.264] 
//
// 至此，除了[2.x.265]函数外，抽象基类的所有函数都已实现。现在我们将有两个类为[2.x.266]类实现这个函数，一个做全局细化，一个做局部细化的形式。
//
// 第一个做全局细化的类相当简单：它的主函数只是调用[2.x.267]，它做所有的工作。
//
// 注意，由于[2.x.268]类的基类是虚拟的，我们必须声明一个构造函数来初始化直接的基类和抽象的虚拟类。
//
// 除了这个技术上的复杂性之外，这个类可能很简单，可以不做进一步的评论。
//
[0.x.1665] 
[0.x.1666] 
[0.x.1667] 
[0.x.1668] 
[0.x.1669] 
[0.x.1670] 
[0.x.1671] 
[0.x.1672] 
[0.x.1673] 
//
[0.x.1674] 
[0.x.1675] 
//
[0.x.1676] 
[0.x.1677] 
[0.x.1678] 
[0.x.1679] 
[0.x.1680] 
[0.x.1681] 
[0.x.1682] 
[0.x.1683] 
[0.x.1684] 
[0.x.1685] 
[0.x.1686] 
[0.x.1687] 
[0.x.1688] 
[0.x.1689] 
//
[0.x.1690] 
[0.x.1691] 
[0.x.1692] 
[0.x.1693] 
[0.x.1694] 
//[2.x.270] 
//
// 第二个实现细化策略的类使用了之前各种示例程序中使用的凯利细化指标。由于这个指标已经在deal.II库中用自己的类实现了，所以这里没有太多的事情要做，只是调用计算指标的函数，然后用它来选择一些单元进行细化和粗化，并相应地对网格进行细化。
//
// 同样，现在应该足够标准了，可以省去更多的注释。
//
[0.x.1695] 
[0.x.1696] 
[0.x.1697] 
[0.x.1698] 
[0.x.1699] 
[0.x.1700] 
[0.x.1701] 
[0.x.1702] 
[0.x.1703] 
//
[0.x.1704] 
[0.x.1705] 
//
[0.x.1706] 
[0.x.1707] 
[0.x.1708] 
[0.x.1709] 
[0.x.1710] 
[0.x.1711] 
[0.x.1712] 
[0.x.1713] 
[0.x.1714] 
[0.x.1715] 
[0.x.1716] 
[0.x.1717] 
[0.x.1718] 
//
[0.x.1719] 
[0.x.1720] 
[0.x.1721] 
[0.x.1722] 
[0.x.1723] 
[0.x.1724] 
[0.x.1725] 
[0.x.1726] 
[0.x.1727] 
[0.x.1728] 
[0.x.1729] 
[0.x.1730] 
[0.x.1731] 
[0.x.1732] 
[0.x.1733] 
[0.x.1734] 
[0.x.1735] 
//
[0.x.1736] 
//
// [2.x.271] 
//
// 由于这又是一个学术性的例子，我们想对精确解和计算解进行相互比较。为此，我们需要声明代表精确解的函数类（用于比较和Dirichlet边界值），以及一个表示方程右边的类（这只是应用于我们想恢复的精确解的拉普拉斯算子）。
//
// 在这个例子中，让我们选择函数[2.x.272]作为精确解。在超过两个维度的情况下，只需用[2.x.273]重复正弦系数，以此类推。鉴于此，以下两类可能是直接从以前的例子中得出的。
//
[0.x.1737] 
[0.x.1738] 
[0.x.1739] 
[0.x.1740] 
[0.x.1741] 
[0.x.1742] 
[0.x.1743] 
//
[0.x.1744] 
[0.x.1745] 
[0.x.1746] 
[0.x.1747] 
[0.x.1748] 
[0.x.1749] 
[0.x.1750] 
[0.x.1751] 
[0.x.1752] 
[0.x.1753] 
[0.x.1754] 
[0.x.1755] 
//
[0.x.1756] 
[0.x.1757] 
[0.x.1758] 
[0.x.1759] 
[0.x.1760] 
[0.x.1761] 
[0.x.1762] 
//
[0.x.1763] 
[0.x.1764] 
[0.x.1765] 
[0.x.1766] 
[0.x.1767] 
[0.x.1768] 
[0.x.1769] 
[0.x.1770] 
[0.x.1771] 
[0.x.1772] 
[0.x.1773] 
[0.x.1774] 
[0.x.1775] 
[0.x.1776] 
[0.x.1777] 
[0.x.1778] 
[0.x.1779] 
[0.x.1780] 
[0.x.1781] 
[0.x.1782] 
[0.x.1783] 
//
[0.x.1784] 
[0.x.1785] 
//
// [2.x.274] 
//
// 现在缺少的只是实际选择各种选项的函数，以及在连续的更细的网格上运行模拟，监测网格细化的进展。
//
// 我们在下面的函数中做到了这一点：它接收一个求解器对象和一个后处理（评估）对象的列表，并在间歇性的网格细化中运行它们。
//
[0.x.1786] 
[0.x.1787] 
[0.x.1788] 
[0.x.1789] 
[0.x.1790] 
//
// 我们将给出一个我们目前正在计算的步骤的指示器，以便让用户知道一些事情仍在发生，并且程序没有处于无尽的循环中。这就是这个状态行的标题。
//
[0.x.1791] 
//
// 然后开始一个循环，只有当自由度数大于20000时才会结束（当然你可以改变这个限制，如果你需要更多--或者更少--你的程序的准确性）。
//
[0.x.1792] 
[0.x.1793] 
//
// 然后给这个迭代的[2.x.275]指示。注意，[2.x.276]是需要的，以使文本真正出现在屏幕上，而不是只出现在某个缓冲区中，而这个缓冲区只有在我们下一次发出结束线时才会被刷新。
//
[0.x.1794] 
//
// 现在在现在的网格上解决问题，并在其上运行评估器。迭代器进入列表的长类型名称有点烦人，但如果需要的话，可以用别名来缩短。
//
[0.x.1795] 
//
[0.x.1796] 
[0.x.1797] 
[0.x.1798] 
[0.x.1799] 
[0.x.1800] 
//
// 现在检查是否需要更多的迭代，或者是否应该结束循环。
//
[0.x.1801] 
[0.x.1802] 
[0.x.1803] 
[0.x.1804] 
[0.x.1805] 
//
// 最后结束我们显示状态报告的那一行。
//
[0.x.1806] 
[0.x.1807] 
//
// 最后一个函数是接受一个求解器的名字（目前允许使用 "kelly "和 "global"），用一个粗网格（这里是无处不在的单位方格）和一个有限元对象（这里也是无处不在的双线性对象）创建一个求解器对象，并使用该求解器来要求在一连串的细化网格上解决问题。
//
// 该函数还设置了两个评估函数，一个是在(0.5,0.5)点评估解决方案，另一个是将解决方案写入一个文件。
//
[0.x.1808] 
[0.x.1809] 
[0.x.1810] 
//
// 第一个小任务：告诉用户将发生什么。因此，写一个标题行，并在下面写上与第一个标题相同长度的所有'-'字符的行。
//
[0.x.1811] 
[0.x.1812] 
[0.x.1813] 
[0.x.1814] 
//
// 然后设置三角法、有限元等。
//
[0.x.1815] 
[0.x.1816] 
[0.x.1817] 
[0.x.1818] 
[0.x.1819] 
[0.x.1820] 
[0.x.1821] 
//
// 创建一个由该函数的参数指示的解算器对象。如果该名称不被识别，则抛出一个异常! 各自的求解器对象被存储在一个[2.x.277]中，以避免使用后不得不删除指针。
//
[0.x.1822] 
[0.x.1823] 
[0.x.1824] 
[0.x.1825] 
[0.x.1826] 
[0.x.1827] 
[0.x.1828] 
[0.x.1829] 
[0.x.1830] 
//
// 接下来创建一个表对象，其中将存储点（0.5,0.5）的数值解的值，并创建一个相应的评估对象。
//
[0.x.1831] 
[0.x.1832] 
[0.x.1833] 
//
// 还会生成一个评估器，将解决方案写出来。
//
[0.x.1834] 
[0.x.1835] 
[0.x.1836] 
//
// 把这两个评价对象放在一个列表中...
//
[0.x.1837] 
[0.x.1838] 
[0.x.1839] 
//
// 然后，我们可以将其传递给在连续细化的网格上实际运行模拟的函数。
//
[0.x.1840] 
//
// 当这一切完成后，写出点评估的结果。
//
[0.x.1841] 
//
// 在所有结果之后再写上一行空白。
//
[0.x.1842] 
[0.x.1843] 
[0.x.1844] 
//
// 关于主函数没有什么可说的。它沿用了之前所有例子中的模式，试图捕捉被抛出的异常，并在我们得到一些信息时尽可能多地显示出来。剩下的就不言自明了。
//
[0.x.1845] 
[0.x.1846] 
[0.x.1847] 
[0.x.1848] 
[0.x.1849] 
[0.x.1850] 
[0.x.1851] 
[0.x.1852] 
[0.x.1853] 
[0.x.1854] 
[0.x.1855] 
[0.x.1856] 
[0.x.1857] 
[0.x.1858] 
[0.x.1859] 
[0.x.1860] 
[0.x.1861] 
[0.x.1862] 
[0.x.1863] 
[0.x.1864] 
[0.x.1865] 
[0.x.1866] 
[0.x.1867] 
[0.x.1868] 
[0.x.1869] 
[0.x.1870] 
[0.x.1871] 
[0.x.1872] 
[0.x.1873] 
[0.x.1874] 
[0.x.1875] 
[0.x.1876] 
//
[0.x.1877] 
[0.x.1878] 
[0.x.1879] 
[0.x.1880] 
[0.x.1881] 
[0.x.1882] 
[0.x.1883] 
[0.x.1884] 
[0.x.1885] 
[0.x.1886] 
[0.x.1887] 
[0.x.1888] 
[0.x.1889] 
[0.x.1890] 
[0.x.1891] 
[0.x.1892] 
//
[0.x.1893] 
[0.x.1894] 
[0.x.1895] 
//
// 从众所周知的事情开始......
//
[0.x.1896] 
[0.x.1897] 
[0.x.1898] 
[0.x.1899] 
[0.x.1900] 
[0.x.1901] 
[0.x.1902] 
[0.x.1903] 
[0.x.1904] 
[0.x.1905] 
[0.x.1906] 
[0.x.1907] 
[0.x.1908] 
[0.x.1909] 
[0.x.1910] 
[0.x.1911] 
[0.x.1912] 
[0.x.1913] 
[0.x.1914] 
[0.x.1915] 
[0.x.1916] 
[0.x.1917] 
[0.x.1918] 
[0.x.1919] 
[0.x.1920] 
//
[0.x.1921] 
[0.x.1922] 
[0.x.1923] 
[0.x.1924] 
[0.x.1925] 
[0.x.1926] 
//
// 最后一步和以前所有的程序一样。
//
[0.x.1927] 
[0.x.1928] 
[0.x.1929] 
//[2.x.278] 
//
// 正如介绍中提到的，该程序的重要部分只是从[2.x.279]的例子程序中拿过来的。因此，我们只对那些新的东西进行评论。
//
// 首先，评估解决方案的框架没有改变，即基类是相同的，评估网格点上的解决方案的类也没有改变。
//
[0.x.1930] 
[0.x.1931] 
//[2.x.280] 
[0.x.1932] 
[0.x.1933] 
[0.x.1934] 
[0.x.1935] 
[0.x.1936] 
//
[0.x.1937] 
//
[0.x.1938] 
[0.x.1939] 
//
[0.x.1940] 
[0.x.1941] 
[0.x.1942] 
//
[0.x.1943] 
[0.x.1944] 
[0.x.1945] 
[0.x.1946] 
[0.x.1947] 
//[2.x.281] 
[0.x.1948] 
[0.x.1949] 
[0.x.1950] 
[0.x.1951] 
[0.x.1952] 
//
[0.x.1953] 
[0.x.1954] 
//
[0.x.1955] 
[0.x.1956] 
[0.x.1957] 
[0.x.1958] 
[0.x.1959] 
//
[0.x.1960] 
[0.x.1961] 
[0.x.1962] 
//
[0.x.1963] 
[0.x.1964] 
[0.x.1965] 
[0.x.1966] 
[0.x.1967] 
//
[0.x.1968] 
[0.x.1969] 
[0.x.1970] 
[0.x.1971] 
[0.x.1972] 
[0.x.1973] 
//
[0.x.1974] 
[0.x.1975] 
[0.x.1976] 
[0.x.1977] 
[0.x.1978] 
[0.x.1979] 
[0.x.1980] 
[0.x.1981] 
//
[0.x.1982] 
[0.x.1983] 
[0.x.1984] 
//
[0.x.1985] 
[0.x.1986] 
//
[0.x.1987] 
[0.x.1988] 
//[2.x.282] 
//
// 除了实现在一个点上求解的类，我们在这里提供一个在网格点上求梯度的类。由于一般情况下，有限元函数的梯度在一个顶点上是不连续的，所以我们在这里要稍微小心一点。我们要做的是在所有单元中循环，即使我们已经在一个单元中找到了点，也要使用所有相邻单元中的顶点梯度的平均值。
//
// 鉴于[2.x.283]类的接口，这个类的声明没有提供什么惊喜，构造函数也没有。
//
[0.x.1989] 
[0.x.1990] 
[0.x.1991] 
[0.x.1992] 
[0.x.1993] 
//
[0.x.1994] 
[0.x.1995] 
//
[0.x.1996] 
[0.x.1997] 
[0.x.1998] 
[0.x.1999] 
[0.x.2000] 
//
[0.x.2001] 
[0.x.2002] 
[0.x.2003] 
//
[0.x.2004] 
[0.x.2005] 
[0.x.2006] 
[0.x.2007] 
[0.x.2008] 
//
// 更有趣的事情发生在进行实际评估的函数中。
//
[0.x.2009] 
[0.x.2010] 
[0.x.2011] 
[0.x.2012] 
[0.x.2013] 
//
// 这次用一些有用的东西来初始化返回值，因为我们要把一些贡献加起来，之后再取平均值。
//
[0.x.2014] 
//
// ...然后有一些对象，其含义将在下面变得清晰...
//
[0.x.2015] 
[0.x.2016] 
[0.x.2017] 
[0.x.2018] 
[0.x.2019] 
//
// ...接下来循环所有单元格及其顶点，并计算顶点被发现的频率。
//
[0.x.2020] 
[0.x.2021] 
[0.x.2022] 
[0.x.2023] 
[0.x.2024] 
//
// 现在事情不再那么简单了，因为我们不能像以前那样得到有限元场的梯度，我们只需要在一个顶点上选择一个自由度。        相反，我们必须在这个单元上，在某一点上评估有限元场。如你所知，在某一点上评估有限元场是通过[2.x.284]类完成的，所以我们使用它。问题是：[2.x.285]对象需要给定一个正交公式，然后可以计算正交点的有限元量值。在这里，我们并不想做正交，我们只是想指定一些点!         尽管如此，还是选择同样的方式：使用一个特殊的正交规则，点在顶点，因为这些是我们感兴趣的。适当的规则是梯形规则，所以这就是我们上面使用该规则的原因。        因此：在这个单元格上初始化[2.x.286]对象。
//
[0.x.2025] 
//
// 并在顶点提取解向量的梯度。
//
[0.x.2026] 
//
// 现在我们有了所有顶点的梯度，所以选出属于评估点的那一个（注意顶点的顺序不一定和正交点的顺序一样）。
//
[0.x.2027] 
[0.x.2028] 
[0.x.2029] 
[0.x.2030] 
//
// 检查是否确实找到了评估点。
//
[0.x.2031] 
//
// 如果是这样，就把那里的梯度的X导数作为我们感兴趣的值，并增加计数器，表示我们向该变量添加了多少次。
//
[0.x.2032] 
[0.x.2033] 
//
// 最后跳出最内层的循环，遍历当前单元格的顶点，因为如果我们在一个顶点找到了评估点，就不可能在后面的顶点也找到。
//
[0.x.2034] 
[0.x.2035] 
//
// 现在我们已经循环了所有的单元和顶点，所以检查是否找到了这个点。
//
[0.x.2036] 
[0.x.2037] 
//
// 我们已经简单地将所有相邻的单元格的贡献相加，所以我们仍然要计算出平均值。一旦完成，报告状态。
//
[0.x.2038] 
[0.x.2039] 
[0.x.2040] 
//
// [2.x.287] 
//
// 由于这个程序有一个更困难的结构（它除了计算一个原始解之外，还计算了一个对偶解），所以写出解不再由一个评估对象来完成，因为我们想把两个解同时写进一个文件，这需要一些比评估类可用的信息。
//
// 然而，我们也想看看生成的网格。这也可以通过一个这样的类来完成。它的结构类似于前面例子程序中的[2.x.288]类，所以我们在这里不做更详细的讨论。此外，这里所使用的一切都已经在前面的例子程序中使用过了。
//
[0.x.2041] 
[0.x.2042] 
[0.x.2043] 
[0.x.2044] 
[0.x.2045] 
//
[0.x.2046] 
[0.x.2047] 
//
[0.x.2048] 
[0.x.2049] 
[0.x.2050] 
//
[0.x.2051] 
[0.x.2052] 
[0.x.2053] 
[0.x.2054] 
//
[0.x.2055] 
[0.x.2056] 
[0.x.2057] 
[0.x.2058] 
[0.x.2059] 
[0.x.2060] 
[0.x.2061] 
[0.x.2062] 
[0.x.2063] 
//[2.x.289] 
//
// 接下来是实际的求解器类。同样，我们只讨论与之前程序的不同之处。
//
[0.x.2064] 
[0.x.2065] 
//[2.x.290] 
//
// 这个类几乎没有变化，只是多声明了两个函数。 [2.x.291]将用于从派生类计算的实际解决方案中生成输出文件，以及[2.x.292]函数，测试框架通过该函数将细化周期的编号设置为该类中的一个局部变量；该编号随后将用于生成解决方案输出的文件名。
//
[0.x.2066] 
[0.x.2067] 
[0.x.2068] 
[0.x.2069] 
[0.x.2070] 
[0.x.2071] 
//
[0.x.2072] 
[0.x.2073] 
[0.x.2074] 
[0.x.2075] 
[0.x.2076] 
//
[0.x.2077] 
//
[0.x.2078] 
//
[0.x.2079] 
[0.x.2080] 
//
[0.x.2081] 
[0.x.2082] 
//
[0.x.2083] 
[0.x.2084] 
[0.x.2085] 
[0.x.2086] 
[0.x.2087] 
//
[0.x.2088] 
[0.x.2089] 
[0.x.2090] 
[0.x.2091] 
[0.x.2092] 
//[2.x.293] 
//
// 同样地，[2.x.294]类完全没有变化，因此将不进行讨论。
//
[0.x.2093] 
[0.x.2094] 
[0.x.2095] 
[0.x.2096] 
[0.x.2097] 
[0.x.2098] 
[0.x.2099] 
[0.x.2100] 
[0.x.2101] 
[0.x.2102] 
//
[0.x.2103] 
//
[0.x.2104] 
[0.x.2105] 
//
[0.x.2106] 
//
[0.x.2107] 
[0.x.2108] 
[0.x.2109] 
[0.x.2110] 
[0.x.2111] 
[0.x.2112] 
[0.x.2113] 
//
[0.x.2114] 
//
[0.x.2115] 
[0.x.2116] 
[0.x.2117] 
[0.x.2118] 
//
[0.x.2119] 
//
[0.x.2120] 
[0.x.2121] 
[0.x.2122] 
[0.x.2123] 
[0.x.2124] 
//
// 该类的其余部分基本上也是[2.x.295]的副本，包括使用WorkStream框架并行计算线性系统所需的数据结构和函数。
//
[0.x.2125] 
[0.x.2126] 
[0.x.2127] 
[0.x.2128] 
[0.x.2129] 
//
[0.x.2130] 
[0.x.2131] 
//
[0.x.2132] 
[0.x.2133] 
[0.x.2134] 
[0.x.2135] 
[0.x.2136] 
//
[0.x.2137] 
//
[0.x.2138] 
[0.x.2139] 
[0.x.2140] 
[0.x.2141] 
//
[0.x.2142] 
[0.x.2143] 
[0.x.2144] 
//
[0.x.2145] 
[0.x.2146] 
[0.x.2147] 
[0.x.2148] 
[0.x.2149] 
[0.x.2150] 
[0.x.2151] 
[0.x.2152] 
[0.x.2153] 
[0.x.2154] 
[0.x.2155] 
[0.x.2156] 
[0.x.2157] 
//
[0.x.2158] 
[0.x.2159] 
[0.x.2160] 
[0.x.2161] 
[0.x.2162] 
//
[0.x.2163] 
[0.x.2164] 
[0.x.2165] 
[0.x.2166] 
[0.x.2167] 
//
[0.x.2168] 
[0.x.2169] 
[0.x.2170] 
[0.x.2171] 
//
[0.x.2172] 
[0.x.2173] 
[0.x.2174] 
[0.x.2175] 
[0.x.2176] 
[0.x.2177] 
//
[0.x.2178] 
[0.x.2179] 
[0.x.2180] 
[0.x.2181] 
[0.x.2182] 
//
// 以下几个函数和构造函数是逐字复制的，来自 [2.x.296] 。
//
[0.x.2183] 
[0.x.2184] 
[0.x.2185] 
[0.x.2186] 
[0.x.2187] 
//
[0.x.2188] 
[0.x.2189] 
[0.x.2190] 
[0.x.2191] 
[0.x.2192] 
[0.x.2193] 
//
[0.x.2194] 
[0.x.2195] 
[0.x.2196] 
//
[0.x.2197] 
[0.x.2198] 
[0.x.2199] 
[0.x.2200] 
[0.x.2201] 
[0.x.2202] 
[0.x.2203] 
//
[0.x.2204] 
[0.x.2205] 
[0.x.2206] 
[0.x.2207] 
[0.x.2208] 
//
[0.x.2209] 
[0.x.2210] 
//
[0.x.2211] 
[0.x.2212] 
[0.x.2213] 
[0.x.2214] 
[0.x.2215] 
//
[0.x.2216] 
[0.x.2217] 
[0.x.2218] 
[0.x.2219] 
[0.x.2220] 
[0.x.2221] 
//
[0.x.2222] 
[0.x.2223] 
[0.x.2224] 
[0.x.2225] 
[0.x.2226] 
[0.x.2227] 
[0.x.2228] 
//
[0.x.2229] 
[0.x.2230] 
[0.x.2231] 
[0.x.2232] 
[0.x.2233] 
[0.x.2234] 
[0.x.2235] 
[0.x.2236] 
//
[0.x.2237] 
//
[0.x.2238] 
//
[0.x.2239] 
//
[0.x.2240] 
[0.x.2241] 
[0.x.2242] 
[0.x.2243] 
[0.x.2244] 
[0.x.2245] 
[0.x.2246] 
//
[0.x.2247] 
[0.x.2248] 
//
[0.x.2249] 
[0.x.2250] 
[0.x.2251] 
[0.x.2252] 
[0.x.2253] 
[0.x.2254] 
[0.x.2255] 
[0.x.2256] 
[0.x.2257] 
[0.x.2258] 
//
// 现在是实现线性系统类中动作的函数。首先，构造函数将所有数据元素初始化为正确的大小，并设置了一些额外的数据结构，例如由于悬挂节点而产生的约束。由于设置悬空节点和找出矩阵的非零元素是独立的，所以我们以并行方式进行（如果库被配置为使用并发，至少是这样；否则，这些动作是按顺序执行的）。注意，我们只启动一个线程，并在主线程中做第二个动作。由于只生成一个线程，我们在这里不使用[2.x.297]类，而是直接使用创建的一个任务对象来等待这个特定任务的退出。这个方法与我们在上面[2.x.298]中使用的方法大致相同。
//
// 注意，获取[2.x.299]函数的地址有点麻烦，因为实际上有三个这个名字的函数，每个支持的空间维度都有一个。在C++中，获取重载函数的地址有些复杂，因为在这种情况下，操作符[2.x.300]会返回一组值（所有具有该名称的函数的地址），然后选择正确的函数是下一步的事情。如果上下文决定采取哪一个（例如通过分配给一个已知类型的函数指针），那么编译器可以自己做，但是如果这组指针应作为一个采取模板的函数的参数，编译器可以选择所有的，而不偏向于一个。因此，我们必须向编译器说明我们想要哪一个；为此，我们可以使用cast，但为了更清楚，我们把它分配给一个具有正确类型的临时[2.x.301]（简称<code>pointer to make_hanging_node_constraints</code>），并使用这个指针代替。
//
[0.x.2259] 
[0.x.2260] 
[0.x.2261] 
[0.x.2262] 
//
[0.x.2263] 
[0.x.2264] 
//
// 启动一个辅助任务，然后在主线程上继续进行
//
[0.x.2265] 
[0.x.2266] 
//
[0.x.2267] 
[0.x.2268] 
//
// 等到边上的任务完成后再继续前进
//
[0.x.2269] 
//
[0.x.2270] 
[0.x.2271] 
[0.x.2272] 
//
[0.x.2273] 
[0.x.2274] 
[0.x.2275] 
//
[0.x.2276] 
[0.x.2277] 
[0.x.2278] 
[0.x.2279] 
[0.x.2280] 
//
[0.x.2281] 
[0.x.2282] 
//
[0.x.2283] 
//
[0.x.2284] 
[0.x.2285] 
//
// [2.x.302] 
//
// [2.x.303]类除了实现[2.x.304]函数外，也基本没有变化。我们在这个程序中保留了[2.x.305]类，它们就可以依赖这个函数的默认实现，这个函数只是输出原始解。实现双重加权误差估计的类将自行重载这个函数，以同时输出双重解。
//
[0.x.2286] 
[0.x.2287] 
[0.x.2288] 
[0.x.2289] 
[0.x.2290] 
[0.x.2291] 
[0.x.2292] 
[0.x.2293] 
[0.x.2294] 
[0.x.2295] 
//
[0.x.2296] 
//
[0.x.2297] 
[0.x.2298] 
[0.x.2299] 
[0.x.2300] 
//
[0.x.2301] 
[0.x.2302] 
[0.x.2303] 
[0.x.2304] 
[0.x.2305] 
[0.x.2306] 
[0.x.2307] 
[0.x.2308] 
[0.x.2309] 
[0.x.2310] 
[0.x.2311] 
[0.x.2312] 
[0.x.2313] 
[0.x.2314] 
[0.x.2315] 
//
[0.x.2316] 
[0.x.2317] 
[0.x.2318] 
[0.x.2319] 
[0.x.2320] 
[0.x.2321] 
[0.x.2322] 
//
[0.x.2323] 
[0.x.2324] 
[0.x.2325] 
[0.x.2326] 
//
[0.x.2327] 
[0.x.2328] 
[0.x.2329] 
[0.x.2330] 
[0.x.2331] 
[0.x.2332] 
[0.x.2333] 
//
[0.x.2334] 
[0.x.2335] 
//
[0.x.2336] 
[0.x.2337] 
[0.x.2338] 
//
[0.x.2339] 
[0.x.2340] 
[0.x.2341] 
//
[0.x.2342] 
//
[0.x.2343] 
[0.x.2344] 
//
[0.x.2345] 
[0.x.2346] 
[0.x.2347] 
[0.x.2348] 
[0.x.2349] 
//
[0.x.2350] 
[0.x.2351] 
[0.x.2352] 
[0.x.2353] 
[0.x.2354] 
//[2.x.306] 
//
// 对于下面的两个类，与上面的大多数情况相同：类是按原样取自前面的例子。
//
[0.x.2355] 
[0.x.2356] 
[0.x.2357] 
[0.x.2358] 
[0.x.2359] 
[0.x.2360] 
[0.x.2361] 
[0.x.2362] 
[0.x.2363] 
[0.x.2364] 
//
[0.x.2365] 
[0.x.2366] 
//
[0.x.2367] 
[0.x.2368] 
[0.x.2369] 
[0.x.2370] 
[0.x.2371] 
[0.x.2372] 
[0.x.2373] 
[0.x.2374] 
[0.x.2375] 
[0.x.2376] 
[0.x.2377] 
[0.x.2378] 
[0.x.2379] 
[0.x.2380] 
[0.x.2381] 
[0.x.2382] 
//
[0.x.2383] 
[0.x.2384] 
[0.x.2385] 
[0.x.2386] 
[0.x.2387] 
//
[0.x.2388] 
[0.x.2389] 
[0.x.2390] 
[0.x.2391] 
[0.x.2392] 
[0.x.2393] 
[0.x.2394] 
[0.x.2395] 
[0.x.2396] 
[0.x.2397] 
//
[0.x.2398] 
[0.x.2399] 
//
[0.x.2400] 
[0.x.2401] 
[0.x.2402] 
[0.x.2403] 
[0.x.2404] 
[0.x.2405] 
[0.x.2406] 
[0.x.2407] 
[0.x.2408] 
[0.x.2409] 
[0.x.2410] 
[0.x.2411] 
[0.x.2412] 
[0.x.2413] 
[0.x.2414] 
[0.x.2415] 
//
[0.x.2416] 
[0.x.2417] 
[0.x.2418] 
[0.x.2419] 
[0.x.2420] 
[0.x.2421] 
[0.x.2422] 
[0.x.2423] 
[0.x.2424] 
[0.x.2425] 
[0.x.2426] 
[0.x.2427] 
[0.x.2428] 
[0.x.2429] 
[0.x.2430] 
[0.x.2431] 
[0.x.2432] 
//
// [2.x.307] 
//
// 这个类是前一个类的变种，它允许通过一些函数来加权我们从库的凯利指标中得到的细化指标。我们包括这个类，因为这个例子程序的目标是展示自动细化标准，即使是复杂的输出量，如点值或应力。如果我们不解决一个对偶问题并计算其中的权重，我们很可能会想给指标一个手工制作的权重，以说明我们要评估这些数量的事实。这个类接受这样一个加权函数作为其构造函数的参数。
//
[0.x.2433] 
[0.x.2434] 
[0.x.2435] 
[0.x.2436] 
[0.x.2437] 
[0.x.2438] 
[0.x.2439] 
[0.x.2440] 
[0.x.2441] 
[0.x.2442] 
[0.x.2443] 
//
[0.x.2444] 
//
[0.x.2445] 
[0.x.2446] 
[0.x.2447] 
//
[0.x.2448] 
[0.x.2449] 
[0.x.2450] 
[0.x.2451] 
[0.x.2452] 
[0.x.2453] 
[0.x.2454] 
[0.x.2455] 
[0.x.2456] 
[0.x.2457] 
[0.x.2458] 
[0.x.2459] 
[0.x.2460] 
[0.x.2461] 
[0.x.2462] 
[0.x.2463] 
[0.x.2464] 
[0.x.2465] 
//
// 现在，这里是主函数，包括加权。
//
[0.x.2466] 
[0.x.2467] 
[0.x.2468] 
//
// 首先通过库中已经实现的方法为所有单元计算一些基于残差的误差指标。我们在这里计算的具体内容在该类的文档中会有更详细的描述。
//
[0.x.2469] 
[0.x.2470] 
[0.x.2471] 
[0.x.2472] 
[0.x.2473] 
[0.x.2474] 
[0.x.2475] 
[0.x.2476] 
//
// 接下来用给与构造函数的值来衡量指标向量中的每个条目，在单元格中心进行评估。我们需要将结果写入对应于当前单元的向量条目中，我们可以通过使用[2.x.308]询问该单元在所有活动单元中的索引来获得（实际上，对于我们在循环中处理的第一个单元，该索引为0，第二个单元为1，等等，我们也可以使用一个整数计数器来跟踪该索引；但是使用[2.x.309]使其更加明确。
//
[0.x.2477] 
[0.x.2478] 
[0.x.2479] 
//
[0.x.2480] 
[0.x.2481] 
[0.x.2482] 
[0.x.2483] 
[0.x.2484] 
[0.x.2485] 
//
[0.x.2486] 
//[2.x.310] 
//
// 在这个例子中，我们使用的数据集和前面的一样，但由于可能有人想用不同的边界值和右手函数来运行程序，或者在不同的网格上运行，我们展示了一个简单的技术来做到这一点。为了更加清晰，我们进一步将所有与方程数据有关的东西都打包到一个自己的命名空间中。
//
// 我们的基本假设是，这是一个研究项目，我们经常有一些测试案例，包括一个域，一个右手边，边界值，可能还有一个指定的系数，以及一些其他参数。当从一个例子转移到另一个例子时，它们常常同时变化。为了使处理这样的问题描述参数集变得简单，是以下的目标。
//
// 基本上，这个想法是这样的：让我们为每一组数据都有一个结构，在这个结构中，我们把描述一个测试案例的所有东西都打包：这里，这些是两个子类，一个叫[2.x.311]，用于精确解的边界值，一个叫[2.x.312] ，然后是生成粗略网格的方法。由于前面的例子程序的解看起来像弯曲的山脊，所以我们在这里用这个名字来表示包围的类。请注意，两个内层类的名称对于所有包围的测试案例类必须是相同的，同时我们将维度模板参数附加到包围类而不是内层类，以使进一步的处理更简单。 从语言的角度来看，用命名空间来封装这些内部类会比用结构来封装更好。然而，命名空间不能作为模板参数给出，所以我们使用一个结构来允许第二个对象从其给定的参数中选择。当然，这个封闭的结构除了它所声明的类之外，没有任何成员变量，还有一个静态函数来生成粗略的网格；一般来说，它永远不会被实例化）。)
//
//然后
//想法是如下的（这是正确的时间，也可以简单看看下面的代码）：我们可以为边界值和右手边生成对象，只需将外层类的名字作为模板参数给一个类，我们在这里称之为[2.x.313]，然后它为内部类创建对象。在这种情况下，为了得到所有描述弧形山脊解决方案的特征，我们将简单地生成一个[2.x.314]的实例，而我们需要知道的关于该解决方案的一切都将是该对象的静态成员变量和函数。
//
// 在这种情况下，这种方法可能显得有些多余，但是一旦某种设定不仅有迪里希特边界值和右手函数的特征，而且还有材料属性、诺伊曼值、不同的边界描述符等，就会变得非常方便。在这种情况下，[2.x.315]类可能由十几个对象组成，而每个描述符类（如下面的[2.x.316]类）都必须提供这些对象。然后，你会很高兴，只需在一个地方改变[2.x.317]类的模板参数，而不是在很多地方改变，就能从一组数据改变到另一组。
//
// 有了这个不同测试用例的框架，我们就快完成了，但还有一件事：现在我们可以通过改变一个模板参数，静态地选择要选择的数据集。为了能够动态地做到这一点，即在运行时，我们需要一个基类。我们以明显的方式提供这个基类，见下文，用虚拟抽象函数。这迫使我们引入第二个模板参数[2.x.318]，我们需要这个基类（这可以通过一些模板魔法来避免，但我们省略），但这就是全部。
//
// 添加新的测试用例现在很简单，你不需要接触框架类，只需要一个类似于 [2.x.319] 的结构。
//
[0.x.2487] 
[0.x.2488] 
//[2.x.320] 
//
// 基于上述描述，[2.x.321]类就看起来如下。为了允许用这个类来使用[2.x.322]类，我们从[2.x.323]类派生出来。
//
[0.x.2489] 
[0.x.2490] 
[0.x.2491] 
[0.x.2492] 
//
[0.x.2493] 
//
[0.x.2494] 
[0.x.2495] 
[0.x.2496] 
//
// 现在是接受模板参数的派生类，如上所述。
//
// 在这里，我们把数据元素打包成私有变量，并允许通过基类的方法来访问它们。
//
[0.x.2497] 
[0.x.2498] 
[0.x.2499] 
[0.x.2500] 
//
[0.x.2501] 
//
[0.x.2502] 
[0.x.2503] 
//
[0.x.2504] 
[0.x.2505] 
[0.x.2506] 
[0.x.2507] 
//
// 我们必须为上述类的静态成员变量提供定义。
//
[0.x.2508] 
[0.x.2509] 
[0.x.2510] 
[0.x.2511] 
//
// 还有成员函数的定义。
//
[0.x.2512] 
[0.x.2513] 
[0.x.2514] 
[0.x.2515] 
[0.x.2516] 
//
[0.x.2517] 
[0.x.2518] 
[0.x.2519] 
[0.x.2520] 
[0.x.2521] 
//
[0.x.2522] 
[0.x.2523] 
[0.x.2524] 
[0.x.2525] 
[0.x.2526] 
[0.x.2527] 
//[2.x.324] 
//
// 用于描述[2.x.325]问题的边界值和右手边的类已经在[2.x.326]示例程序中使用，那么就像这样。
//
[0.x.2528] 
[0.x.2529] 
[0.x.2530] 
[0.x.2531] 
[0.x.2532] 
[0.x.2533] 
[0.x.2534] 
[0.x.2535]
[0.x.2536] 
//
[0.x.2537] 
[0.x.2538] 
[0.x.2539] 
[0.x.2540] 
[0.x.2541] 
[0.x.2542] 
//
[0.x.2543] 
[0.x.2544] 
//
[0.x.2545] 
[0.x.2546] 
[0.x.2547] 
[0.x.2548] 
[0.x.2549] 
[0.x.2550] 
[0.x.2551] 
[0.x.2552] 
[0.x.2553] 
[0.x.2554] 
[0.x.2555] 
//
[0.x.2556] 
[0.x.2557] 
[0.x.2558] 
[0.x.2559] 
[0.x.2560] 
[0.x.2561] 
[0.x.2562] 
[0.x.2563] 
[0.x.2564] 
[0.x.2565] 
[0.x.2566] 
[0.x.2567] 
[0.x.2568] 
[0.x.2569] 
[0.x.2570] 
[0.x.2571] 
[0.x.2572] 
[0.x.2573] 
[0.x.2574] 
[0.x.2575] 
//
[0.x.2576] 
[0.x.2577] 
//
[0.x.2578] 
[0.x.2579] 
[0.x.2580] 
[0.x.2581] 
[0.x.2582] 
[0.x.2583] 
//[2.x.327] 
//
// 这个例子程序是在为自适应有限元方法和基于对偶性的误差估计的讲座提供实践课程时写的。在这些课程中，我们有一个练习，要求在一个中心有方孔的正方形域上求解右方恒定的拉普拉斯方程，并且边界值为零。由于这个问题的属性在这里的实现特别简单，所以让我们来做。由于练习的编号是2.3，所以我们也擅自为这个类保留这个名称。
//
[0.x.2584] 
[0.x.2585] 
[0.x.2586] 
//
// 我们需要一个类来表示问题的边界值。在这种情况下，这很简单：它是零函数，所以甚至不需要声明一个类，只需要一个别名。
//
[0.x.2587] 
//
// 第二，一个表示右边的类。因为它们是常数，所以只要把库中相应的类子类化就可以了。
//
[0.x.2588] 
[0.x.2589] 
[0.x.2590] 
[0.x.2591] 
[0.x.2592] 
[0.x.2593] 
[0.x.2594] 
//
// 最后是一个生成粗略网格的函数。这里的情况有些复杂，请看下面的内容。
//
[0.x.2595] 
[0.x.2596] 
//
// 如上所述，本例的网格是正方形[-1,1]^2，其中的正方形[-1/2,1/2]^2为孔。我们将粗略的网格创建为4乘以4的单元，中间的四个单元缺失。要了解网格的具体样子，最简单的方法可能是先看一下本教程程序的 "结果 "部分。一般来说，如果你想了解更多关于创建网格的信息，无论是像我们在这里所做的那样从头开始，还是使用其他技术，你都应该看一下 [2.x.328] 。
//
// 当然，这个例子可以扩展到3d，但是由于这个函数不能以独立于维度的方式编写，我们选择不在这里实现，而是只对dim=2的模板进行专业化处理。如果你编译3d的程序，你会从链接器中得到一个信息，即这个函数在3d中没有实现，需要提供。
//
// 对于这个几何体的创建，库中没有预定义的方法。在这种情况下，几何体还是很简单的，可以用手来创建，而不是用网格发生器。
//
[0.x.2597] 
[0.x.2598] 
[0.x.2599] 
//
// 我们首先定义空间维度，以便让函数中那些实际上与维度无关的部分使用这个变量。这样，如果你以后把它作为一个起点来实现这个网格的三维版本，就会更简单。下一步是要有一个顶点的列表。这里，它们是24个（5乘以5，中间的省略）。最好的办法是在这里画一个草图。
//
[0.x.2600] 
//
[0.x.2601] 
[0.x.2602] 
[0.x.2603] 
[0.x.2604] 
[0.x.2605] 
[0.x.2606] 
//
// 接下来，我们要定义单元格和它们所包含的顶点。
//
[0.x.2607] 
[0.x.2608] 
[0.x.2609] 
[0.x.2610] 
[0.x.2611] 
[0.x.2612] 
[0.x.2613] 
[0.x.2614] 
[0.x.2615] 
[0.x.2616] 
[0.x.2617] 
[0.x.2618] 
[0.x.2619] 
//
[0.x.2620] 
//
// 我们再次从中生成一个C++向量类型，但这次是通过在单元格上循环来实现的（是的，这很无聊）。此外，我们将所有单元格的材料指标设置为零。
//
[0.x.2621] 
[0.x.2622] 
[0.x.2623] 
[0.x.2624] 
[0.x.2625] 
[0.x.2626] 
[0.x.2627] 
//
// 最后将所有这些信息传递给库，以生成一个三角图。最后一个参数可以用来将三角形的某些面的非零边界指标的信息传递给库，但我们在这里不希望这样，所以我们给出一个空对象。
//
[0.x.2628] 
//
// 因为我们希望本例中的评估点（3/4,3/4）是一个网格点，所以我们在全局范围内细化一次。
//
[0.x.2629] 
[0.x.2630] 
[0.x.2631] 
//[2.x.329] 
//
// 你现在已经读完了这个框架，你可能会想，为什么我们没有选择直接把实现某种设置的类（比如[2.x.330]类）作为派生自[2.x.331]的类来实现。事实上，我们可以很好地这样做。唯一的原因是，这样我们就必须在[2.x.332]类中为解决方案和右手边的类设置成员变量，以及重载基类的抽象函数来访问这些成员变量的成员函数。[2.x.333]类的唯一原因是让我们不必再重申这些成员变量和函数，而这些成员变量和函数在所有这些类中都是必要的。在某种程度上，这里的模板机制只是提供了一种方法，为一些依赖于外部量的函数提供默认的实现，因此不能使用正常的虚拟函数来提供，至少在没有模板的帮助下不能。
//
// 然而，可能有很好的理由来实际实现从[2.x.334]派生的类，例如，如果解或右手边的类需要带参数的构造函数，而[2.x.335]类无法提供。在这种情况下，子类化是一个值得考虑的策略。对于特殊情况的其他可能性是，从[2.x.336]派生，其中[2.x.337]表示一个类，或者甚至明确地专门化[2.x.338] 。后者允许透明地使用[2.x.339]类用于其他设置的方式，但对特殊参数采取特殊行动。
//
// 赞成这里采取的方法的最后一个意见是：我们无数次发现，当开始一个项目时，参数的数量（通常是边界值，右侧，粗略的网格，就像这里）很小，测试案例的数量也很小。然后，人们一开始就把它们手工编码成一些[2.x.340]的语句。随着时间的推移，项目的增长，测试用例的数量也在增长。[2.x.341]语句的数量也随之增长，它们的长度也是如此，人们开始想办法考虑不可能的例子，其中域、边界值和右手边不再适合在一起，并且开始失去对整个结构的概述。事实证明，把属于某个测试用例的所有东西都封装到一个自己的结构中是值得的，因为它把属于一个测试用例的所有东西都放在一个地方。此外，它允许把这些东西都放在一个或多个文件中，这些文件只用于测试用例和它们的数据，而不需要把它们的实际实现与程序的其他部分联系起来。
//
// [2.x.342] 
//
// 和程序的其他部分一样，我们把所有需要描述对偶函数的东西放到一个自己的命名空间中，并定义一个抽象的基类，提供解决对偶问题的类在工作中需要的接口。
//
// 然后，我们将实现两个这样的类，用于评估一个点的值和该点的解的导数。对于这些函数，我们已经有了相应的评估对象，所以它们是互补的。
//
[0.x.2632] 
[0.x.2633] 
//[2.x.343] 
//
// 首先从对偶函数的基类开始。因为对于线性问题来说，对偶问题的特征只在右手边起作用，所以我们只需要提供一个函数来组装给定离散化的右手边。
//
[0.x.2634] 
[0.x.2635] 
[0.x.2636] 
[0.x.2637] 
[0.x.2638] 
[0.x.2639] 
[0.x.2640] 
//[2.x.344] 
//
// 作为第一个应用，我们考虑对应于在一个给定的点上评估解决方案的值的函数，我们再次假设该点为一个顶点。除了接受和存储评估点的构造函数之外，这个类只包括实现组装右手边的函数。
//
[0.x.2641] 
[0.x.2642] 
[0.x.2643] 
[0.x.2644] 
[0.x.2645] 
//
[0.x.2646] 
[0.x.2647] 
//
[0.x.2648] 
[0.x.2649] 
[0.x.2650] 
[0.x.2651] 
[0.x.2652] 
//
[0.x.2653] 
[0.x.2654] 
[0.x.2655] 
//
[0.x.2656] 
[0.x.2657] 
[0.x.2658] 
[0.x.2659] 
[0.x.2660] 
//
// 至于做这门课的主要目的，组装右手边，让我们首先考虑什么是必要的。对偶问题的右手边是一个值的向量J(phi_i)，其中J是误差函数，phi_i是第i个形状函数。这里，J是在点x0处的评价，即J(phi_i)=phi_i(x0)。
//
// 现在，我们已经假定评价点是一个顶点。因此，对于我们在这个程序中可能使用的通常的有限元来说，我们可以想当然地认为在这样一个点上正好有一个形状函数是不为零的，特别是其值为1。因此，我们将右手边的向量设置为全零，然后寻找与该点相关的形状函数，并将右手边向量的相应值设置为1。
//
[0.x.2661] 
[0.x.2662] 
[0.x.2663] 
[0.x.2664] 
[0.x.2665] 
//
// 所以，首先把所有东西都设为零......
//
[0.x.2666] 
//
// ...然后在单元格上循环，在顶点中找到评估点（或者非常接近顶点，由于浮点舍入，可能会出现这种情况）。
//
[0.x.2667] 
[0.x.2668] 
[0.x.2669] 
[0.x.2670] 
[0.x.2671] 
//
// 好的，找到了，所以设置相应的条目，然后离开函数，因为我们已经完成了。
//
[0.x.2672] 
[0.x.2673] 
[0.x.2674] 
//
// 最后，一个理智的检查：如果我们以某种方式来到这里，那么我们一定是错过了评估点，所以无条件地引发一个异常。
//
[0.x.2675] 
[0.x.2676] 
//[2.x.345] 
//
// 作为第二个应用，我们再次考虑在一个点上对解决方案的x导数进行评估。同样，这个类的声明和它的构造函数的实现也不是太有趣。
//
[0.x.2677] 
[0.x.2678] 
[0.x.2679] 
[0.x.2680] 
[0.x.2681] 
//
[0.x.2682] 
[0.x.2683] 
//
[0.x.2684] 
[0.x.2685] 
[0.x.2686] 
[0.x.2687] 
[0.x.2688] 
//
[0.x.2689] 
[0.x.2690] 
[0.x.2691] 
//
[0.x.2692] 
[0.x.2693] 
[0.x.2694] 
[0.x.2695] 
[0.x.2696] 
//
//有趣的是这个函数的实现：这里，J(phi_i)=d/dx phi_i(x0)。
//
// 我们可以像实现各自的评价对象那样，在这个评价点上取每个形状函数phi_i的梯度的平均值。然而，我们采取了一个略微不同的方法：我们简单地取该点周围所有单元格的平均值。哪些单元[2.x.346]是评估点，这个问题取决于网格宽度，包括那些单元的中点到评估点的距离小于单元的直径的单元。
//
// 在这些单元的面积/体积上取梯度的平均值，可以得到一个与梯度的点评估非常接近的对偶解。从理论上讲，这并没有明显改变方法，这一点很简单。
//
[0.x.2697] 
[0.x.2698] 
[0.x.2699] 
[0.x.2700] 
[0.x.2701] 
//
// 同样，首先将所有条目设置为零。
//
[0.x.2702] 
//
// 用正交公式初始化一个[2.x.347]对象，有正交点数量和形状函数的缩写......
//
[0.x.2703] 
[0.x.2704] 
[0.x.2705] 
[0.x.2706] 
[0.x.2707] 
[0.x.2708] 
[0.x.2709] 
//
// ...并有两个对象用于存储单元上自由度的全局指数，以及正交点上形状函数的梯度值。
//
[0.x.2710] 
[0.x.2711] 
//
// 最后有一个变量，我们将通过对这些单元上的单位函数进行积分，总结出这些单元的面积/体积。
//
[0.x.2712] 
//
// 然后在所有单元上开始循环，并选择那些与评估点足够接近的单元。
//
[0.x.2713] 
[0.x.2714] 
[0.x.2715] 
//
// 如果我们找到了这样的单元，那么就初始化[2.x.348]对象，并整合每个形状函数梯度的x分量，以及总面积/体积的单位函数。
//
[0.x.2716] 
[0.x.2717] 
//
[0.x.2718] 
[0.x.2719] 
[0.x.2720] 
[0.x.2721] 
[0.x.2722] 
[0.x.2723] 
[0.x.2724] 
[0.x.2725] 
//
// 如果我们有本地的贡献，把它们分配到全局矢量。
//
[0.x.2726] 
[0.x.2727] 
[0.x.2728] 
[0.x.2729] 
//
// 在我们循环了所有的单元格之后，检查我们是否找到了任何单元格，确保其体积不为零。如果不是，那么结果将是错误的，因为这时的右边应该仍然是零，所以抛出一个异常。
//
[0.x.2730] 
[0.x.2731] 
//
// 最后，我们现在只整合了形状函数的梯度，而没有取其平均值。我们通过除以我们所积分的体积的大小来解决这个问题。
//
[0.x.2732] 
[0.x.2733] 
//
[0.x.2734] 
//[2.x.349] 
[0.x.2735] 
[0.x.2736] 
//[2.x.350] 
//
// 与上面的 [2.x.351] 类相同，我们现在实现一个 [2.x.352] 。它具有所有相同的特征，唯一的区别是它不接受一个表示右侧对象的函数对象，而现在接受一个[2.x.353]对象，它将集合对偶问题的右侧向量。这个类的其余部分是相当琐碎的。
//
// 由于原始求解器和对偶求解器将使用相同的三角形，但是不同的离散化，现在很清楚为什么我们将[2.x.354]类变成了虚拟类：因为最终类将从[2.x.355]以及[2.x.356]实例中派生，我们是不是应该将继承标记为虚拟。因为在许多应用中，基类会存储更多的信息，而不仅仅是需要在原始求解器和对偶求解器之间共享的三角形，所以我们通常不希望使用两个这样的基类。
//
[0.x.2737] 
[0.x.2738] 
[0.x.2739] 
[0.x.2740] 
[0.x.2741] 
[0.x.2742] 
[0.x.2743] 
[0.x.2744] 
[0.x.2745] 
[0.x.2746] 
//
[0.x.2747] 
[0.x.2748] 
[0.x.2749] 
[0.x.2750] 
//
[0.x.2751] 
[0.x.2752] 
//
[0.x.2753] 
[0.x.2754] 
//
[0.x.2755] 
[0.x.2756] 
[0.x.2757] 
[0.x.2758] 
[0.x.2759] 
[0.x.2760] 
[0.x.2761] 
[0.x.2762] 
[0.x.2763] 
[0.x.2764] 
[0.x.2765] 
[0.x.2766] 
[0.x.2767] 
[0.x.2768] 
[0.x.2769] 
//
[0.x.2770] 
[0.x.2771] 
[0.x.2772] 
[0.x.2773] 
[0.x.2774] 
//[2.x.357] 
//
// 这里终于出现了这个程序的主类，也就是实现双重加权残差估计器的类。它连接了原始和对偶求解器类，用于计算原始和对偶解，并实现了误差表示公式，用于误差估计和网格细化。
//
// 该类的前几个函数大多是对基类各自函数的覆盖。
//
[0.x.2775] 
[0.x.2776] 
[0.x.2777] 
[0.x.2778] 
[0.x.2779] 
[0.x.2780] 
[0.x.2781] 
[0.x.2782] 
[0.x.2783] 
[0.x.2784] 
[0.x.2785] 
[0.x.2786] 
[0.x.2787] 
//
[0.x.2788] 
//
[0.x.2789] 
[0.x.2790] 
//
[0.x.2791] 
//
[0.x.2792] 
//
[0.x.2793] 
//
[0.x.2794] 
//
// 在私有部分，我们有两个函数，用来调用原始类和双基类的[2.x.358]函数。这两个函数将被本类的[2.x.359]函数所平行调用。
//
[0.x.2795] 
[0.x.2796] 
//
// 然后声明活动单元迭代器的缩写，以避免我们不得不重复写这个冗长的名字。
//
[0.x.2797] 
[0.x.2798] 
//
// 接下来，声明一个数据类型，我们将用它来存储面对误差估计器的贡献。我们的想法是，我们可以计算从两个单元格中的每一个到这个面的脸部条款，因为从两边看时它们是一样的。我们要做的是，根据下面解释的一些规则，只计算一次，由相邻的两个单元负责计算。然后，我们将每个面的贡献存储在一个映射面与它们的值的地图中，并通过第二次在单元格上循环并从地图上抓取值来收集每个单元格的贡献。
//
// 这个地图的数据类型在此声明。
//
[0.x.2799] 
[0.x.2800] 
//
// 在计算单元和面的误差估计时，我们需要一些辅助对象，例如[2.x.360]和[2.x.361]函数，但也需要一些临时对象来存储原始和对偶解的值和梯度，例如。这些字段在三个函数中都是需要的，这些函数分别在单元格、规则面和不规则面上做积分。
//
// 有三种合理的方式来提供这些字段：第一，作为需要它们的函数中的局部变量；第二，作为本类的成员变量；第三，作为参数传递给该函数。
//
// 这三种方式都有缺点：第三种是它们的数量不可忽略，会使调用这些函数成为一项漫长的事业。第二种方法的缺点是不允许并行化，因为计算错误估计值的线程必须各自拥有这些变量的副本，所以包围类的成员变量将不起作用。第一种方法虽然直接，但有一个微妙但重要的缺点：我们会反复调用这些函数，也许是成千上万次；现在证明，从堆中分配向量和其他需要内存的对象在运行时间上是很昂贵的，因为当涉及到几个线程时，内存分配很昂贵。因此，只分配一次内存，并尽可能频繁地回收这些对象是明显更好的做法。
//
// 该怎么做呢？我们的答案是使用第三种策略的一个变种。事实上，这正是WorkStream概念所要做的（我们已经在上面介绍了它，但也可以参见[2.x.362]）。为了避免我们必须给这些函数十几个参数，我们将所有这些变量打包成两个结构，一个用于单元格的计算，另一个用于面的计算。然后，这两个结构被加入到WeightedResidualScratchData类中，该类将作为WorkStream概念的 "划痕数据 "类。
//
[0.x.2801] 
[0.x.2802] 
[0.x.2803] 
[0.x.2804] 
//
[0.x.2805] 
[0.x.2806] 
[0.x.2807] 
[0.x.2808] 
[0.x.2809] 
[0.x.2810] 
[0.x.2811] 
[0.x.2812] 
[0.x.2813] 
//
[0.x.2814] 
[0.x.2815] 
[0.x.2816] 
[0.x.2817] 
[0.x.2818] 
//
[0.x.2819] 
[0.x.2820] 
[0.x.2821] 
[0.x.2822]
[0.x.2823] 
[0.x.2824] 
[0.x.2825] 
[0.x.2826] 
//
[0.x.2827] 
[0.x.2828] 
[0.x.2829]
[0.x.2830]
[0.x.2831] 
[0.x.2832] 
[0.x.2833] 
[0.x.2834] 
[0.x.2835] 
//
[0.x.2836] 
[0.x.2837] 
//
[0.x.2838] 
[0.x.2839] 
[0.x.2840]
[0.x.2841]
[0.x.2842] 
//[2.x.363]一般要有一个从头开始的对象和一个拷贝对象。在这里，由于与我们在[2.x.364]中讨论梯度的近似计算时类似的原因，我们实际上不需要一个 "拷贝数据 "结构。既然WorkStream坚持要有一个这样的结构，我们就声明一个空的结构，除了存在之外什么都不做。
//
[0.x.2843] 
[0.x.2844] 
//
// 关于误差估计器的评估，我们有一个驱动函数，使用 [2.x.365] 在每个单元上调用第二个函数。
//
[0.x.2845] 
//
[0.x.2846] 
[0.x.2847] 
[0.x.2848] 
[0.x.2849] 
[0.x.2850] 
//
// 然后我们有函数对误差表示公式进行实际积分。它们将分别处理单元格内部、没有悬挂节点的面和有悬挂节点的面的条款。
//
[0.x.2851] 
[0.x.2852] 
[0.x.2853] 
[0.x.2854] 
[0.x.2855] 
//
[0.x.2856] 
[0.x.2857] 
[0.x.2858] 
[0.x.2859] 
[0.x.2860] 
[0.x.2861]  
[0.x.2862] 
[0.x.2863] 
[0.x.2864] 
[0.x.2865] 
[0.x.2866]  
[0.x.2867] 
[0.x.2868] 
//
// 在这个类的实现中，我们首先有[2.x.366]成员类的构造函数，以及[2.x.367]构造函数。它们只将字段初始化为正确的长度，所以我们不必过多地讨论它们。
//
[0.x.2869] 
[0.x.2870] 
[0.x.2871] 
[0.x.2872] 
[0.x.2873] 
[0.x.2874] 
[0.x.2875] 
[0.x.2876] 
[0.x.2877]  
[0.x.2878] 
[0.x.2879] 
[0.x.2880] 
[0.x.2881] 
[0.x.2882] 
[0.x.2883] 
//
[0.x.2884] 
[0.x.2885] 
[0.x.2886] 
[0.x.2887] 
[0.x.2888] 
[0.x.2889] 
[0.x.2890] 
[0.x.2891] 
[0.x.2892] 
[0.x.2893] 
[0.x.2894] 
[0.x.2895] 
//
[0.x.2896] 
[0.x.2897] 
[0.x.2898] 
[0.x.2899] 
[0.x.2900] 
[0.x.2901] 
[0.x.2902] 
[0.x.2903] 
[0.x.2904] 
[0.x.2905] 
[0.x.2906] 
[0.x.2907] 
[0.x.2908] 
[0.x.2909] 
[0.x.2910] 
//
[0.x.2911] 
[0.x.2912] 
[0.x.2913] 
[0.x.2914] 
[0.x.2915] 
//
[0.x.2916] 
[0.x.2917] 
[0.x.2918] 
[0.x.2919] 
[0.x.2920] 
[0.x.2921] 
[0.x.2922] 
[0.x.2923] 
[0.x.2924] 
[0.x.2925] 
[0.x.2926] 
[0.x.2927] 
[0.x.2928] 
[0.x.2929] 
[0.x.2930]  
[0.x.2931] 
[0.x.2932] 
[0.x.2933] 
[0.x.2934] 
[0.x.2935] 
//
[0.x.2936] 
[0.x.2937]  
[0.x.2938] 
[0.x.2939] 
[0.x.2940] 
[0.x.2941] 
[0.x.2942] 
[0.x.2943] 
[0.x.2944] 
[0.x.2945] 
[0.x.2946] 
[0.x.2947] 
[0.x.2948] 
[0.x.2949] 
//
[0.x.2950] 
[0.x.2951] 
[0.x.2952] 
[0.x.2953] 
[0.x.2954] 
[0.x.2955] 
[0.x.2956] 
[0.x.2957] 
[0.x.2958] 
//
[0.x.2959] 
[0.x.2960] 
[0.x.2961] 
[0.x.2962] 
[0.x.2963] 
[0.x.2964] 
[0.x.2965]  
[0.x.2966] 
[0.x.2967] 
[0.x.2968] 
[0.x.2969] 
[0.x.2970] 
[0.x.2971] 
[0.x.2972] 
[0.x.2973] 
[0.x.2974] 
[0.x.2975] 
[0.x.2976] 
[0.x.2977] 
[0.x.2978] 
[0.x.2979] 
[0.x.2980] 
[0.x.2981] 
//
// 接下来的五个函数很无聊，因为它们只是简单地将它们的工作传递给基类。第一个函数并行地调用原始和对偶求解器，而解的后处理和检索自由度的数量则由原始类完成。
//
[0.x.2982] 
[0.x.2983] 
[0.x.2984] 
[0.x.2985] 
[0.x.2986] 
[0.x.2987] 
[0.x.2988] 
[0.x.2989] 
[0.x.2990] 
[0.x.2991] 
//
[0.x.2992] 
[0.x.2993] 
[0.x.2994] 
[0.x.2995] 
[0.x.2996] 
//
[0.x.2997] 
[0.x.2998] 
[0.x.2999] 
[0.x.3000] 
[0.x.3001] 
//
[0.x.3002] 
[0.x.3003] 
[0.x.3004] 
[0.x.3005] 
[0.x.3006] 
[0.x.3007] 
//
[0.x.3008] 
[0.x.3009] 
[0.x.3010] 
[0.x.3011] 
[0.x.3012] 
//
// 现在，变得更加有趣了：[2.x.368]函数要求误差估计器计算单元格的误差指标，然后使用其绝对值进行网格细化。
//
[0.x.3013] 
[0.x.3014] 
[0.x.3015] 
//
// 首先调用计算单元格和全局误差的函数。
//
[0.x.3016] 
[0.x.3017] 
//
//然后
//注意，只有当所有的指标都是正数时，标记单元的细化或粗化才会起作用，以便于它们的比较。因此，去掉所有这些指标上的符号。
//
[0.x.3018] 
[0.x.3019] 
//
// 最后，我们可以选择不同的细化策略。这里默认的是细化那些误差指标最大、占总误差80%的单元格，而我们粗化那些指标最小、占总误差2%的单元格。
//
[0.x.3020] 
[0.x.3021] 
[0.x.3022] 
[0.x.3023] 
[0.x.3024] 
[0.x.3025] 
//
// 由于我们想同时输出原始解和对偶解，我们重载了[2.x.369]函数。这个函数唯一有趣的特点是，原始解和对偶解是在不同的有限元空间上定义的，这不是[2.x.370]类所期望的格式。因此，我们必须将它们转移到一个共同的有限元空间。由于我们只想从质量上看到这些解，所以我们要争夺将对偶解内插到（较小的）原始空间。对于插值，有一个库函数，它接收一个AffineConstraints对象，包括悬挂节点约束。其余的都是标准的。
//
[0.x.3026] 
[0.x.3027] 
[0.x.3028] 
[0.x.3029] 
[0.x.3030] 
[0.x.3031] 
[0.x.3032] 
[0.x.3033] 
[0.x.3034] 
[0.x.3035] 
[0.x.3036] 
[0.x.3037] 
[0.x.3038] 
//
[0.x.3039] 
[0.x.3040] 
//
// 添加我们想要输出的数据向量。两个都加上，[2.x.371]函数可以处理你想写到输出的多少个数据向量。
//
[0.x.3041] 
[0.x.3042] 
//
[0.x.3043] 
//
[0.x.3044] 
[0.x.3045] 
[0.x.3046] 
[0.x.3047] 
//[2.x.372] 
//[2.x.373] 
//
// 至于误差估计的实际计算，让我们从驱动这一切的函数开始，即调用那些真正做工作的函数，并最终收集结果。
//
[0.x.3048] 
[0.x.3049] 
[0.x.3050] 
[0.x.3051] 
//
// 计算误差的第一个任务是建立向量，表示原始解，以及权重(z-z_h)=(z-I_hz)，两者都在我们已经计算出对偶解的有限元空间。为此，我们必须将原始解内插到对偶有限元空间，并将计算出的对偶解内插到原始有限元空间。幸运的是，库中提供了插值到更大或更小的有限元空间的函数，所以这一点是很明显的。
//
// 首先，让我们对原始解进行插值：它被逐格插值到我们已经解决了对偶问题的有限元空间中：但是，还是和[2.x.374]函数一样，我们首先需要创建一个包括悬挂节点约束的AffineConstraints对象，但这次是对偶有限元空间的。
//
[0.x.3052] 
[0.x.3053] 
[0.x.3054] 
[0.x.3055] 
[0.x.3056] 
[0.x.3057] 
[0.x.3058] 
[0.x.3059] 
[0.x.3060] 
[0.x.3061] 
//然后
//为了计算数值逼近的对偶解z插值到原始解的有限元空间并从z中减去：使用[2.x.375]函数，在对偶解的元素空间中得到(z-I_hz)。
//
[0.x.3062] 
[0.x.3063] 
[0.x.3064] 
[0.x.3065] 
[0.x.3066] 
[0.x.3067] 
[0.x.3068] 
[0.x.3069] 
[0.x.3070] 
[0.x.3071] 
[0.x.3072] 
//
// 请注意，这可能会更有效，因为这些约束条件在之前为原始问题组装矩阵和右手边以及写出对偶解时已经使用过了。我们把这方面的程序优化作为一个练习。
//
// 在计算了对偶权重之后，我们现在开始计算原始解的单元和面的残差。首先，我们在面的迭代器和它们的面的跳跃项对误差估计器的贡献之间建立一个映射。原因是我们只计算了一次跳跃项，从面的一侧开始，并且希望在第二次循环所有单元时才收集它们。
//
// 我们已经用一个-1e20的值初始化了这个地图，因为如果出现问题，我们因为某些原因无法计算某个面的值，这个值就会在结果中显示出来。其次，这个初始化已经让[2.x.376]对象分配了它可能需要的所有对象。这一点很重要，因为我们将从并行线程写进这个结构，如果地图需要分配内存，从而重塑其数据结构，那么这样做就不是线程安全的。换句话说，初始化使我们不必在线程每次写入（和修改）该地图的结构时通过互斥来同步。
//
[0.x.3073] 
[0.x.3074] 
[0.x.3075] 
[0.x.3076] 
[0.x.3077] 
//
[0.x.3078] 
[0.x.3079] 
[0.x.3080] 
[0.x.3081] 
[0.x.3082] 
[0.x.3083] 
[0.x.3084] 
[0.x.3085] 
//
[0.x.3086] 
[0.x.3087] 
//
// 然后将其全部交给[2.x.377]，以并行计算所有单元的估计器。
//
[0.x.3088] 
[0.x.3089] 
[0.x.3090] 
[0.x.3091] 
[0.x.3092] 
[0.x.3093] 
[0.x.3094] 
[0.x.3095] 
[0.x.3096] 
[0.x.3097] 
[0.x.3098] 
[0.x.3099] 
//
// 一旦计算出误差贡献，就把它们加起来。为此，请注意，单元格项已经设置好了，只有边缘项需要收集。因此，在所有单元格和它们的面中循环，确保每个面的贡献都在那里，然后把它们加起来。只需要减去一半的跳跃项，因为另一半将被邻近的单元格拿走。
//
[0.x.3100] 
[0.x.3101] 
[0.x.3102] 
[0.x.3103] 
[0.x.3104] 
[0.x.3105] 
[0.x.3106] 
[0.x.3107] 
[0.x.3108] 
[0.x.3109] 
[0.x.3110] 
[0.x.3111] 
[0.x.3112] 
[0.x.3113] 
[0.x.3114] 
[0.x.3115] 
[0.x.3116] 
[0.x.3117] 
//[2.x.378] 
//
// 接下来我们有一个函数，它被调用来估计单个单元的误差。如果库被配置为使用多线程，该函数可能被多次调用。下面是它的内容。
//
[0.x.3118] 
[0.x.3119] 
[0.x.3120] 
[0.x.3121] 
[0.x.3122] 
[0.x.3123] 
[0.x.3124] 
[0.x.3125] 
//
// 由于WorkStream的原因， estimate_on_one_cell需要一个CopyData对象，即使它没有被使用。下一行将对这个未使用的变量发出警告。
//
[0.x.3126] 
//
// 每个单元的第一个任务是计算这个单元的剩余贡献，并把它们放入 [2.x.379] 变量中。
//
[0.x.3127] 
[0.x.3128] 
[0.x.3129] 
[0.x.3130] 
[0.x.3131] 
//
// 计算完单元格条款后，转向面条款。为此，在当前单元格的所有面中进行循环，看看是否需要对其进行计算。
//
[0.x.3132] 
[0.x.3133] 
//
// 首先，如果这个面是边界的一部分，那么就没有什么可做的。然而，为了在汇总单元格的面的贡献时使事情变得简单，我们把这个面输入对误差贡献为零的面的列表中。
//
[0.x.3134] 
[0.x.3135] 
[0.x.3136] 
[0.x.3137] 
[0.x.3138] 
//
// 接下来，请注意，由于我们想在每个面上只计算一次跳跃项，尽管我们访问它两次（如果它不在边界），我们必须定义一些规则，由谁负责在一个面上计算。
//
// 首先，如果相邻的单元格与这个单元格处于同一层次，也就是说，既不进一步细化，也不进一步粗化，那么这个层次中索引较低的单元格就负责计算。换句话说：如果另一个单元的索引更低，那么就跳过这个面的工作。
//
[0.x.3139] 
[0.x.3140] 
[0.x.3141] 
[0.x.3142] 
//
// 同样地，如果这个单元和它的邻居在细化程度上有差异，我们总是从较粗的单元开始工作。因此，如果相邻的单元比现在的单元细化程度低，那么就什么都不做，因为我们在访问粗略的单元时对子面进行整合。
//
[0.x.3143] 
[0.x.3144] 
[0.x.3145] 
//
// 现在我们知道，我们在这里负责，所以实际上是在计算面的跳跃项。如果这个面是一个规则的面，即另一边的单元格既不比这个单元格粗也不比这个单元格细，那么就调用一个函数，如果另一边的单元格进一步细化，那么就用另一个函数。请注意，另一边的单元格更粗的情况不可能发生，因为我们上面已经决定，当我们传递到另一个单元格时，我们会处理这种情况。
//
[0.x.3146] 
[0.x.3147] 
[0.x.3148] 
[0.x.3149] 
[0.x.3150] 
[0.x.3151] 
[0.x.3152] 
[0.x.3153] 
[0.x.3154] 
[0.x.3155] 
[0.x.3156] 
[0.x.3157] 
[0.x.3158] 
[0.x.3159] 
[0.x.3160] 
[0.x.3161] 
//[2.x.380] 
//
// 关于误差贡献的实际计算，首先转向单元条款。
//
[0.x.3162] 
[0.x.3163] 
[0.x.3164] 
[0.x.3165] 
[0.x.3166] 
[0.x.3167] 
[0.x.3168] 
[0.x.3169] 
//
// 需要完成的任务是通过观察误差估计公式看起来很自然的事情：首先在正交点得到单元残差的数值解的右手边和拉普拉斯。
//
[0.x.3170] 
[0.x.3171] 
[0.x.3172] 
[0.x.3173] 
[0.x.3174] 
//
// ...然后得到双重权重...
//
[0.x.3175] 
[0.x.3176] 
//
// ...最后建立所有正交点的总和，并将其存储在当前单元格中。
//
[0.x.3177] 
[0.x.3178] 
[0.x.3179] 
[0.x.3180] 
[0.x.3181] 
[0.x.3182] 
//[2.x.381] 
//
// 另一方面，误差估计的边缘项的计算并不那么简单。首先，我们必须区分有悬挂节点和无悬挂节点的面。因为这是一种简单的情况，我们首先考虑一个面上没有悬挂节点的情况（我们称之为 "常规 "情况）。
//
[0.x.3183] 
[0.x.3184] 
[0.x.3185] 
[0.x.3186] 
[0.x.3187] 
[0.x.3188] 
[0.x.3189] 
[0.x.3190] 
[0.x.3191] 
[0.x.3192] 
[0.x.3193] 
//
// 第一步是获取本单元上有限元场的正交点的梯度值。为此，初始化[2.x.382]对象，对应于面的这一侧，并使用该对象提取梯度。
//
[0.x.3194] 
[0.x.3195] 
[0.x.3196] 
//
// 第二步是提取面的另一侧正交点上的有限元解的梯度，即从相邻单元提取。
//
// 为此，在之前做一个理智的检查：确保邻居确实存在（是的，如果邻居不存在，我们就不应该来这里，但是在复杂的软件中会有bug，所以最好检查一下），如果不是这样，就扔一个错误。
//
[0.x.3197] 
[0.x.3198] 
//
// 如果我们有了这个，那么我们需要找出相邻单元格的哪个面，也就是说，[2.x.383]这个单元格是这个面后面的单元格的相邻面。为此，有一个函数，我们将结果放入一个变量，名称为[2.x.384] 。
//
[0.x.3199] 
[0.x.3200] 
//
// 然后定义一个邻近单元的缩写，在该单元上初始化[2.x.385]对象，并提取该单元上的梯度。
//
[0.x.3201] 
[0.x.3202] 
[0.x.3203] 
[0.x.3204] 
//
// 现在我们有了这个单元和邻近单元的梯度，通过将梯度的跳跃与法向量相乘来计算跳跃残差。
//
[0.x.3205] 
[0.x.3206] 
[0.x.3207] 
[0.x.3208] 
//
// 接下来得到这个面的双重权重。
//
[0.x.3209] 
[0.x.3210] 
//
// 最后，我们要计算跳跃残差、对偶权重和正交权重的总和，以得到这个面的结果。
//
[0.x.3211] 
[0.x.3212] 
[0.x.3213] 
[0.x.3214] 
[0.x.3215] 
//
// 仔细检查该元素是否已经存在，是否已经被写入...
//
[0.x.3216] 
[0.x.3217] 
[0.x.3218] 
//
// ...然后在指定的位置存储计算值。注意，存储的值不包含错误表示中出现的因子1/2。原因是，如果我们在三角形的所有面上进行循环，这个项实际上没有这个因子，但只有当我们把它写成所有单元和每个单元的所有面的总和时才会出现；因此我们两次访问同一个面。我们稍后在对每个单元的贡献进行单独求和时，会使用这个因子-1/2来考虑这个问题。
//
[0.x.3219] 
[0.x.3220] 
//[2.x.386] 
//
// 我们仍然缺少有悬挂节点的面的情况。这就是这个函数中所涉及的内容。
//
[0.x.3221] 
[0.x.3222] 
[0.x.3223] 
[0.x.3224] 
[0.x.3225] 
[0.x.3226] 
[0.x.3227] 
[0.x.3228] 
[0.x.3229] 
//
// 首先还是两个缩写，以及一些一致性检查，以确定该函数是否只在它应该被调用的面上被调用。
//
[0.x.3230] 
[0.x.3231] 
//
[0.x.3232] 
[0.x.3233] 
[0.x.3234] 
[0.x.3235] 
[0.x.3236] 
[0.x.3237] 
//
// 然后找出当前单元格是相邻单元格的哪个邻居。请注意，我们将对这个相邻单元的子女进行操作，但他们的方向与他们的母亲相同，也就是说，邻居的方向是一样的。
//
[0.x.3238] 
[0.x.3239] 
//
// 然后简单地对所有的子面做我们在前面的函数中对一个面所做的一切。
//
[0.x.3240] 
[0.x.3241] 
[0.x.3242] 
//
// 再从一些检查开始：得到一个指向当前子面后面的单元格的迭代器，并检查其面是否是我们正在考虑的子面。如果不是这样，那么要么是上面调用的[2.x.387]函数存在错误，要么--更糟糕的是--库中的某些函数没有遵守关于单元格、它们的子面的一些基本假设。在任何情况下，即使这个断言不应该被触发，谨慎一点也无妨，而且在优化模式的计算中，这个断言无论如何都会被删除。
//
[0.x.3243] 
[0.x.3244] 
[0.x.3245] 
[0.x.3246] 
[0.x.3247] 
//
// 现在开始工作，首先在界面的这一侧再次得到解决方案的梯度。
//
[0.x.3248] 
[0.x.3249] 
[0.x.3250] 
//
// 然后在另一边。
//
[0.x.3251] 
[0.x.3252] 
[0.x.3253] 
[0.x.3254] 
//
//最后建立跳跃残差。因为这次我们从另一个单元格中取法向量，所以与其他函数相比，将第一项的符号还原。
//
[0.x.3255] 
[0.x.3256] 
[0.x.3257] 
[0.x.3258] 
//
// 然后得到双重权重。
//
[0.x.3259] 
[0.x.3260] 
//
// 最后，总结这个子面的贡献，并将其设置在全局图中。
//
[0.x.3261] 
[0.x.3262] 
[0.x.3263] 
[0.x.3264] 
[0.x.3265] 
[0.x.3266] 
[0.x.3267] 
[0.x.3268] 
//
// 一旦所有子面的贡献被计算出来，循环收集所有子面，并将其与母面一起存储，以便以后收集单元格的误差项时简单使用。再次进行安全检查，确保子面的条目已经被计算出来，并且不带有无效的值。
//
[0.x.3269] 
[0.x.3270] 
[0.x.3271] 
[0.x.3272] 
[0.x.3273] 
[0.x.3274] 
[0.x.3275]  
[0.x.3276] 
[0.x.3277] 
//
[0.x.3278] 
[0.x.3279] 
//
// 最后将该值存储在父脸。
//
[0.x.3280] 
[0.x.3281] 
//
[0.x.3282] 
//[2.x.388] 
//
// 在前面的例子程序中，我们有两个函数，用来驱动在随后的更细的网格上求解的过程。我们在这里进行了扩展，允许向这些函数传递一些参数，并将这些参数全部放入框架类中。
//
// 你会注意到这个程序是由许多小部分组成的（评估函数、实现各种细化方法的求解器类、不同的对偶函数、不同的问题和数据描述），这使得程序的扩展相对简单，但也允许通过用一个部分替换另一个部分来解决大量的不同问题。我们通过在下面的框架类中声明一个结构来体现这种灵活性，该结构持有一些参数，可以设置这些参数来测试这个程序的各个部分的组合，可以用简单的方式在各种问题和离散度上进行测试。
//
[0.x.3283] 
[0.x.3284] 
[0.x.3285] 
[0.x.3286] 
//
// 首先，我们声明两个缩写，以便简单使用各自的数据类型。
//
[0.x.3287] 
[0.x.3288] 
//
// 然后我们有一个结构，它声明了所有可能被设置的参数。在该结构的默认构造函数中，这些值都被设置为默认值，以便简单使用。
//
[0.x.3289] 
[0.x.3290] 
//
// 首先允许原始和对偶问题离散化的片状多项式的度数。对于原始问题，它们默认为（双，三）线性分解函数，对于对偶问题，默认为（双，三）二次函数。如果选择了一个不需要解决对偶问题的细化准则，对偶有限元度的值当然会被忽略。
//
[0.x.3291] 
[0.x.3292] 
//
// 然后有一个描述问题类型的对象，即右手边、领域、边界值等。这里需要的指针默认为Null指针，也就是说，你必须在这个对象的实际实例中设置它，才能使它发挥作用。
//
[0.x.3293] 
//
// 由于我们允许使用不同的细化标准（全局细化、通过凯利误差指标细化，可能有一个权重，以及使用双重估计器），定义一些枚举值，并随后定义一个该类型的变量。它将默认为[2.x.389] 。
//
[0.x.3294] 
[0.x.3295] 
[0.x.3296] 
[0.x.3297] 
[0.x.3298] 
[0.x.3299] 
[0.x.3300] 
//
[0.x.3301] 
//
// 接下来是一个描述双重函数的对象。只有在选择双重加权残差细化时才需要这个对象，并且默认为一个空指针。
//
[0.x.3302] 
[0.x.3303] 
//
// 然后是一个评估对象的列表。其默认值为空，即没有评价对象。
//
[0.x.3304] 
//
// 接下来是一个函数，作为[2.x.390]类的权重。这个指针的默认值是零，但是如果你想使用[2.x.391]的细化标准，你必须把它设置成其他的值。
//
[0.x.3305] 
//
// 最后，我们有一个变量，表示我们允许的（原始）离散化的最大自由度数。如果超过这个数值，我们将停止解算和间歇性网格细化的过程。其默认值为20,000。
//
[0.x.3306] 
//
// 最后是这个类的默认构造函数。
//
[0.x.3307] 
[0.x.3308] 
//
// 驱动程序框架类只有一个方法，它断断续续地调用求解器和网格细化，并在中间做一些其他的小任务。由于它除了给它的参数外不需要其他数据，我们把它变成静态的。
//
[0.x.3309] 
[0.x.3310] 
//
// 至于实现，首先是参数对象的构造函数，将所有的值设置为默认值。
//
[0.x.3311] 
[0.x.3312] 
[0.x.3313] 
[0.x.3314] 
[0.x.3315] 
[0.x.3316] 
[0.x.3317] 
//
// 然后是驱动整个过程的函数。
//
[0.x.3318] 
[0.x.3319] 
[0.x.3320] 
//
// 首先从给定的数据对象中创建一个三角图。
//
[0.x.3321] 
[0.x.3322] 
[0.x.3323] 
//
// 然后是一组有限元和适当的正交公式。
//
[0.x.3324] 
[0.x.3325] 
[0.x.3326] 
[0.x.3327] 
//
// 接下来，从实现不同细化标准的类中选择一个。
//
[0.x.3328] 
[0.x.3329] 
[0.x.3330] 
[0.x.3331] 
[0.x.3332] 
[0.x.3333] 
[0.x.3334] 
[0.x.3335] 
[0.x.3336] 
[0.x.3337] 
[0.x.3338] 
[0.x.3339] 
[0.x.3340] 
[0.x.3341] 
[0.x.3342] 
[0.x.3343] 
//
[0.x.3344] 
[0.x.3345] 
[0.x.3346] 
[0.x.3347] 
[0.x.3348] 
[0.x.3349] 
[0.x.3350] 
[0.x.3351] 
[0.x.3352] 
[0.x.3353] 
[0.x.3354] 
//
[0.x.3355] 
[0.x.3356] 
[0.x.3357] 
[0.x.3358] 
[0.x.3359] 
[0.x.3360] 
[0.x.3361] 
[0.x.3362] 
[0.x.3363] 
[0.x.3364] 
[0.x.3365] 
//
[0.x.3366] 
[0.x.3367] 
[0.x.3368] 
[0.x.3369] 
[0.x.3370] 
[0.x.3371] 
[0.x.3372] 
[0.x.3373] 
[0.x.3374] 
[0.x.3375] 
[0.x.3376] 
[0.x.3377] 
[0.x.3378] 
//
[0.x.3379] 
[0.x.3380] 
[0.x.3381] 
//
// 现在所有对象都到位了，运行主循环。停止的标准在循环的底部实现。
//
// 在循环中，首先设置新的循环数，然后解决问题，输出它的解，对它应用评估对象，然后决定我们是否要进一步细化网格并在这个网格上再次解决问题，或者跳出循环。
//
[0.x.3382] 
[0.x.3383] 
[0.x.3384] 
//
[0.x.3385] 
[0.x.3386] 
[0.x.3387] 
//
[0.x.3388] 
[0.x.3389] 
//
[0.x.3390] 
[0.x.3391] 
[0.x.3392] 
[0.x.3393] 
[0.x.3394] 
//
[0.x.3395] 
[0.x.3396] 
[0.x.3397] 
[0.x.3398] 
[0.x.3399] 
//
// 循环运行后清理屏幕。
//
[0.x.3400] 
[0.x.3401] 
//
[0.x.3402] 
//
// [2.x.392] 
//
// 这里最后是主函数。它通过指定一组用于模拟的参数（多项式度数、评估和对偶函数等）来驱动整个过程，并将它们打包成一个结构传给上面的框架工作类。
//
[0.x.3403] 
[0.x.3404] 
[0.x.3405] 
[0.x.3406] 
[0.x.3407] 
//
//描述我们要在这里解决的问题，将一个描述符对象传递给做其他工作的函数。
//
[0.x.3408] 
[0.x.3409] 
//
// 首先设置我们希望使用的细化标准。
//
[0.x.3410] 
[0.x.3411] 
//
// 在这里，我们也可以使用 [2.x.393] 或 [2.x.394] 。请注意，所给出的关于对偶有限元、对偶函数等信息只对给定的细化准则选择很重要，否则就会被忽略。
//
// 然后设置原始问题和对偶问题的多项式程度。我们在这里选择双线性和双二次方的问题。
//
[0.x.3412] 
[0.x.3413] 
//
// 然后设置测试案例的描述，即域、边界值和右手边。这些都是预先打包在类中的。我们在这里采用 [2.x.395] 的描述，但你也可以使用 [2.x.396] 。
//
[0.x.3414] 
[0.x.3415] 
//
// 接下来先设置一个二元函数，然后设置一个评价对象的列表。我们默认选择在一个评价点对值进行评价，由评价和二元函数类命名空间中的[2.x.397]类代表。你也可以设置[2.x.398]类来代替评价点上的值的x-derivative。
//
// 注意，双功能和评价对象应该匹配。然而，你可以给你想要的评价函数，所以你可以在每一步之后让点值和导数都得到评价。 一个这样的附加评价是在每一步中输出网格。
//
[0.x.3416] 
[0.x.3417] 
[0.x.3418] 
[0.x.3419] 
//
[0.x.3420] 
[0.x.3421] 
//
[0.x.3422] 
[0.x.3423] 
//
// 设置最大的自由度数，在这个自由度数之后，我们希望程序停止进一步细化网格。
//
[0.x.3424] 
//
// 最后将描述符对象传递给一个函数，用它来运行整个解决方案。
//
[0.x.3425] 
[0.x.3426] 
//
// 捕获异常以提供有关失败的信息。
//
[0.x.3427] 
[0.x.3428] 
[0.x.3429] 
[0.x.3430] 
[0.x.3431]  
[0.x.3432] 
[0.x.3433] 
[0.x.3434] 
[0.x.3435] 
[0.x.3436] 
[0.x.3437] 
[0.x.3438] 
[0.x.3439] 
[0.x.3440] 
[0.x.3441] 
[0.x.3442] 
[0.x.3443] 
[0.x.3444] 
[0.x.3445] 
[0.x.3446] 
[0.x.3447] 
[0.x.3448] 
[0.x.3449] 
[0.x.3450] 
[0.x.3451] 
//
[0.x.3452] 
[0.x.3453] 
[0.x.3454] 
[0.x.3455] 
[0.x.3456] 
[0.x.3457] 
[0.x.3458] 
[0.x.3459] 
[0.x.3460] 
[0.x.3461] 
[0.x.3462] 
[0.x.3463] 
[0.x.3464] 
[0.x.3465] 
[0.x.3466] 
[0.x.3467] 
//
[0.x.3468] 
[0.x.3469] 
[0.x.3470] 
//[2.x.399] 
//
// 前面几个文件已经在前面的例子中讲过了，因此不再做进一步的评论。
//
[0.x.3471] 
[0.x.3472] 
[0.x.3473] 
//
[0.x.3474] 
[0.x.3475] 
[0.x.3476] 
[0.x.3477] 
[0.x.3478] 
[0.x.3479] 
[0.x.3480] 
//
[0.x.3481] 
[0.x.3482] 
[0.x.3483] 
//
[0.x.3484] 
[0.x.3485] 
//
[0.x.3486] 
[0.x.3487] 
//
[0.x.3488] 
[0.x.3489] 
[0.x.3490] 
[0.x.3491] 
//
[0.x.3492] 
[0.x.3493] 
//
// 我们将在牛顿迭代之间使用自适应网格细化技术。要做到这一点，我们需要能够在新的网格上使用解决方案，尽管它是在旧的网格上计算出来的。SolutionTransfer类将解决方案从旧网格转移到新网格。
//
[0.x.3494] 
//
// 然后，我们为这个程序打开一个命名空间，像以前的程序一样，将dealii命名空间中的所有东西导入其中。
//
[0.x.3495] 
[0.x.3496] 
[0.x.3497] 
//[2.x.400] 
//
// 类模板与 [2.x.401] 中的基本相同。 增加了三个内容。
//
// - 有两个解决方案向量，一个用于牛顿更新 [2.x.402] ，另一个用于当前迭代 [2.x.403] 。
//
// - [2.x.404]函数需要一个参数，表示这是否是第一次被调用。不同的是，第一次我们需要分配自由度，并将[2.x.405]的解向量设置为正确的大小。接下来的几次，该函数是在我们已经完成了这些步骤，作为细化[2.x.406]中网格的一部分之后被调用的。
//
// - 然后我们还需要新的函数。 [2.x.407]负责正确设置解向量的边界值，这在介绍的最后已经讨论过了。 [2.x.408]是一个计算非线性（离散）残差规范的函数。我们用这个函数来监测牛顿迭代的收敛性。该函数以步长[2.x.409]为参数来计算[2.x.410]的残差。这是人们通常需要的步长控制，尽管我们在这里不会使用这个功能。最后，[2.x.411]计算每个牛顿迭代中的步长[2.x.412]。正如介绍中所讨论的，我们在这里使用一个固定的步长，并把实现一个更好的策略作为一个练习。( [2.x.413]的做法不同。它只是在整个求解过程中使用了一个外部包，而一个好的直线搜索策略是该包所提供的一部分）。)
//
[0.x.3498] 
[0.x.3499] 
[0.x.3500] 
[0.x.3501] 
[0.x.3502] 
[0.x.3503] 
//
[0.x.3504] 
[0.x.3505] 
[0.x.3506] 
[0.x.3507] 
[0.x.3508] 
[0.x.3509] 
[0.x.3510] 
[0.x.3511] 
[0.x.3512] 
//
[0.x.3513] 
//
[0.x.3514] 
[0.x.3515] 
//
[0.x.3516] 
//
[0.x.3517] 
[0.x.3518] 
//
[0.x.3519] 
[0.x.3520] 
[0.x.3521] 
[0.x.3522] 
//[2.x.414] 
//
// 边界条件的实现就像在 [2.x.415] 中一样。 它被选为 [2.x.416] 。
//
[0.x.3523] 
[0.x.3524] 
[0.x.3525] 
[0.x.3526] 
[0.x.3527] 
[0.x.3528] 
[0.x.3529] 
//
[0.x.3530] 
[0.x.3531] 
[0.x.3532] 
[0.x.3533] 
[0.x.3534] 
[0.x.3535] 
//[2.x.417] 
//[2.x.418] 
//
// 该类的构造函数和析构函数与前几篇教程中的相同。
//
[0.x.3536] 
[0.x.3537] 
[0.x.3538] 
[0.x.3539] 
[0.x.3540] 
//[2.x.419] 
//
// 在setup-system函数中，我们总是设置有限元方法的变量。与[2.x.420]有相同的区别，因为在那里我们在每个细化周期中都要从头开始求解PDE，而在这里我们需要把以前的网格的解放到当前的网格上。因此，我们不能只是重置解向量。因此，传递给这个函数的参数表明我们是否可以分布自由度（加上计算约束）并将解向量设置为零，或者这在其他地方已经发生过了（特别是在[2.x.421]）。
//
[0.x.3541] 
[0.x.3542] 
[0.x.3543] 
[0.x.3544] 
[0.x.3545] 
[0.x.3546] 
[0.x.3547] 
//
[0.x.3548] 
[0.x.3549] 
[0.x.3550] 
[0.x.3551] 
[0.x.3552] 
//
// 该函数的其余部分与 [2.x.422] 中的相同。
//
[0.x.3553] 
[0.x.3554] 
//
[0.x.3555] 
[0.x.3556] 
//
[0.x.3557] 
//
[0.x.3558] 
[0.x.3559] 
[0.x.3560] 
//[2.x.423] 
//
// 这个函数的作用与前面的教程相同，当然，现在矩阵和右手边的函数取决于上一次迭代的解。正如在介绍中所讨论的，我们需要使用牛顿更新的零边界值；我们在这个函数的最后计算它们。
//
// 该函数的顶部包含了通常的模板代码，设置了允许我们在正交点评估形状函数的对象，以及本地矩阵和向量的临时存储位置，以及正交点上先前解的梯度。然后我们开始在所有单元格上进行循环。
//
[0.x.3561] 
[0.x.3562] 
[0.x.3563] 
[0.x.3564] 
//
[0.x.3565] 
[0.x.3566] 
//
[0.x.3567] 
[0.x.3568] 
[0.x.3569] 
[0.x.3570] 
//
[0.x.3571] 
[0.x.3572] 
//
[0.x.3573] 
[0.x.3574] 
//
[0.x.3575] 
//
[0.x.3576] 
//
[0.x.3577] 
[0.x.3578] 
[0.x.3579] 
[0.x.3580] 
//
[0.x.3581] 
//
// 为了组装线性系统，我们必须在正交点上获得前一个解的梯度值。有一个标准的方法：[2.x.424]函数接收一个代表定义在DoFHandler上的有限元场的向量，并评估这个场在FEValues对象最后被重新初始化的单元的正交点的梯度。然后将所有正交点的梯度值写入第二个参数中。
//
[0.x.3582] 
[0.x.3583] 
//
// 有了这个，我们就可以对所有的正交点和形状函数进行积分循环。 在刚刚计算了正交点中旧解的梯度后，我们就可以计算这些点中的系数[2.x.425]。 然后，系统本身的组装看起来与我们一贯的做法相似，除了非线性项之外，将结果从局部对象复制到全局对象中也是如此。
//
[0.x.3584] 
[0.x.3585] 
[0.x.3586] 
[0.x.3587] 
[0.x.3588] 
//
[0.x.3589] 
[0.x.3590] 
[0.x.3591] 
[0.x.3592] 
[0.x.3593] 
[0.x.3594] 
[0.x.3595] 
[0.x.3596] 
[0.x.3597] 
[0.x.3598] 
[0.x.3599] 
[0.x.3600] 
[0.x.3601] 
[0.x.3602] 
//
[0.x.3603] 
[0.x.3604] 
[0.x.3605] 
[0.x.3606] 
[0.x.3607] 
[0.x.3608] 
//
[0.x.3609] 
[0.x.3610] 
[0.x.3611] 
[0.x.3612] 
[0.x.3613] 
[0.x.3614] 
[0.x.3615] 
//
[0.x.3616] 
[0.x.3617] 
[0.x.3618] 
//
// 最后，我们从系统中移除悬挂的节点，并将零边界值应用到定义牛顿更新的线性系统中 [2.x.426] 。
//
[0.x.3619] 
[0.x.3620] 
//
[0.x.3621] 
[0.x.3622] 
[0.x.3623] 
[0.x.3624] 
[0.x.3625] 
[0.x.3626] 
[0.x.3627] 
[0.x.3628] 
[0.x.3629] 
[0.x.3630] 
//
// [2.x.427] 
//
// 解算函数和以往一样。在求解过程的最后，我们通过设置[2.x.428]来更新当前的解决方案。
//
[0.x.3631] 
[0.x.3632] 
[0.x.3633] 
[0.x.3634] 
[0.x.3635] 
[0.x.3636] 
//
[0.x.3637] 
[0.x.3638] 
//
[0.x.3639] 
//
[0.x.3640] 
//
[0.x.3641] 
[0.x.3642] 
[0.x.3643] 
//[2.x.429] 
//
// 这个函数的第一部分与[2.x.430]中的内容相同 ... 然而，在细化网格后，我们必须将旧的解决方案转移到新的解决方案中，我们在SolutionTransfer类的帮助下完成。这个过程稍微有点复杂，所以让我们详细描述一下。
//
[0.x.3644] 
[0.x.3645] 
[0.x.3646] 
[0.x.3647] 
//
[0.x.3648] 
[0.x.3649] 
[0.x.3650] 
[0.x.3651] 
[0.x.3652] 
[0.x.3653] 
//
[0.x.3654] 
[0.x.3655] 
[0.x.3656] 
[0.x.3657] 
//
// 然后我们需要一个额外的步骤：例如，如果你标记了一个比它的邻居更精炼一次的单元，而这个邻居没有被标记为精炼，我们最终会在一个单元界面上跳过两个精炼级别。 为了避免这些情况，库将默默地也要对邻居单元进行一次细化。它通过在实际进行细化和粗化之前调用[2.x.431]函数来实现。 这个函数标志着一组额外的单元格进行细化或粗化，以执行像单悬节点规则这样的规则。 调用此函数后，被标记为细化和粗化的单元格正是那些将被实际细化或粗化的单元格。通常情况下，你不需要手工操作[2.x.432]为你做这个）。) 然而，我们需要初始化SolutionTransfer类，它需要知道最终将被粗化或细化的单元集，以便存储旧网格的数据并转移到新网格。因此，我们手动调用这个函数。
//
[0.x.3658] 
//
// 有了这个方法，我们用现在的DoFHandler初始化一个SolutionTransfer对象，并将解决方案向量附加到它上面，然后在新网格上进行实际的细化和自由度分配
//
[0.x.3659] 
[0.x.3660] 
//
[0.x.3661] 
//
[0.x.3662] 
//
// 最后，我们找回插值到新网格的旧解。由于SolutionTransfer函数实际上并不存储旧的解决方案的值，而是索引，我们需要保留旧的解决方案向量，直到我们得到新的内插值。因此，我们将新的数值写入一个临时的向量中，之后才将其写入解决方案向量对象中。
//
[0.x.3663] 
[0.x.3664] 
[0.x.3665] 
//
// 在新的网格上，有不同的悬挂节点，对于这些节点，我们必须在扔掉之前的对象内容后，重新计算约束。为了安全起见，我们还应该确保当前解决方案的向量条目满足悬空节点的约束条件（参见SolutionTransfer类文档中的讨论，了解为什么必须这样做）。我们可以通过明确调用`hanging_node_constraints.distribution(current_solution)`来做到这一点；我们省略这一步，因为这将在下面调用`set_boundary_values()`的最后发生，而且没有必要做两次。
//
[0.x.3666] 
//
[0.x.3667] 
[0.x.3668] 
[0.x.3669] 
//
// 一旦我们有了内插的解决方案和所有关于悬挂节点的信息，我们必须确保我们现在的[2.x.433]实际上有正确的边界值。正如在介绍的最后所解释的，即使细化前的解决方案有正确的边界值，也不会自动出现这种情况，因此我们必须明确地确保它现在有。
//
[0.x.3670] 
//
// 我们通过更新所有剩余的数据结构来结束这个函数，向[2.x.434]表明这不是第一次了，它需要保留解向量的内容。
//
[0.x.3671] 
[0.x.3672] 
//
// [2.x.435] 
//
// 下一个函数确保解向量的条目尊重我们问题的边界值。 在细化了网格之后（或者刚刚开始计算），边界上可能会出现新的节点。这些节点的数值是在`refine_mesh()`中从之前的网格中简单插值出来的，而不是正确的边界值。这个问题可以通过将当前解决方案向量的所有边界节点明确设置为正确的值来解决。
//
// 但是有一个问题我们必须注意：如果我们有一个挂起的节点紧挨着一个新的边界节点，那么它的值也必须被调整以确保有限元场保持连续。这就是这个函数最后一行的调用所做的。
//
[0.x.3673] 
[0.x.3674] 
[0.x.3675] 
[0.x.3676] 
[0.x.3677] 
[0.x.3678] 
[0.x.3679] 
[0.x.3680] 
[0.x.3681] 
[0.x.3682] 
//
[0.x.3683] 
[0.x.3684] 
//[2.x.436] 
//
// 为了监测收敛性，我们需要一种方法来计算（离散）残差的规范，即在介绍中讨论的向量[2.x.437]与[2.x.438]的规范。事实证明，（尽管我们在当前版本的程序中没有使用这个功能）在确定最佳步长时需要计算残差[2.x.439]，因此这就是我们在这里实现的：该函数将步长[2.x.440]作为参数。原有的功能当然是通过传递一个零作为参数得到的。
//
// 在下面的函数中，我们首先为残差设置一个向量，然后为评估点设置一个向量 [2.x.441] 。接下来是我们在所有的积分操作中使用的相同的模板代码。
//
[0.x.3685] 
[0.x.3686] 
[0.x.3687] 
[0.x.3688] 
//
[0.x.3689] 
[0.x.3690] 
[0.x.3691] 
//
[0.x.3692] 
[0.x.3693] 
[0.x.3694] 
[0.x.3695] 
[0.x.3696] 
//
[0.x.3697] 
[0.x.3698] 
//
[0.x.3699] 
[0.x.3700] 
//
[0.x.3701] 
//
[0.x.3702] 
[0.x.3703] 
[0.x.3704] 
[0.x.3705] 
//
// 实际的计算与 [2.x.442] 中的计算差不多。我们首先评估[2.x.443]在正交点的梯度，然后计算系数[2.x.444]，然后将其全部插入残差公式中。
//
[0.x.3706] 
//
[0.x.3707] 
[0.x.3708] 
[0.x.3709] 
[0.x.3710] 
//
[0.x.3711] 
[0.x.3712] 
[0.x.3713] 
[0.x.3714] 
[0.x.3715] 
[0.x.3716] 
//
[0.x.3717] 
[0.x.3718] 
[0.x.3719] 
[0.x.3720] 
//
// 在这个函数的最后，我们还必须处理悬挂节点的约束和边界值的问题。关于后者，我们必须将所有对应于位于边界的自由度的条目的残差向量元素设置为零。原因是，由于那里的解的值是固定的，它们当然不是 "真正的 "自由度，因此，严格来说，我们不应该在残差向量中为它们集合条目。然而，正如我们一直所做的那样，我们想在每个单元上做完全相同的事情，因此我们并不想在上面的积分中处理某个自由度是否位于边界的问题。相反，我们将简单地在事后将这些条目设置为零。为此，我们需要确定哪些自由度实际上属于边界，然后在所有这些自由度上进行循环，并将剩余条目设置为零。这发生在以下几行中，我们已经在[2.x.445]中看到了使用DoFTools命名空间的适当函数。
//
[0.x.3721] 
//
[0.x.3722] 
[0.x.3723] 
[0.x.3724] 
//
// 在函数的最后，我们返回残差的常数。
//
[0.x.3725] 
[0.x.3726] 
//
// [2.x.446] 
//
// 正如介绍中所讨论的，如果我们总是采取全步，即计算[2.x.447]，牛顿方法经常不收敛。相反，我们需要一个阻尼参数（步长） [2.x.448] 并设置 [2.x.449] 。这个函数是用来计算 [2.x.450] 的。
//
// 在这里，我们简单地总是返回0.1。这当然是一个次优的选择：理想情况下，人们希望的是，当我们越来越接近解的时候，步长变成1，这样我们就可以享受牛顿方法的快速二次收敛。我们将在下面的结果部分讨论更好的策略，[2.x.451]也涉及这方面的内容。
//
[0.x.3727] 
[0.x.3728] 
[0.x.3729] 
[0.x.3730] 
[0.x.3731] 
//
// [2.x.452] 
//
// 从`run()`调用的最后一个函数以图形形式输出当前的解决方案（和牛顿更新），作为VTU文件。它与之前教程中使用的完全相同。
//
[0.x.3732] 
[0.x.3733] 
[0.x.3734] 
[0.x.3735] 
[0.x.3736] 
//
[0.x.3737] 
[0.x.3738] 
[0.x.3739] 
[0.x.3740] 
//
[0.x.3741] 
[0.x.3742] 
[0.x.3743] 
[0.x.3744] 
[0.x.3745] 
//[2.x.453] 
//
// 在运行函数中，我们建立第一个网格，然后有牛顿迭代的顶层逻辑。
//
// 正如在介绍中所描述的，领域是围绕原点的单位圆盘，创建方式与[2.x.454]中所示相同。网格经过两次全局细化，然后再进行若干次适应性循环。
//
// 在开始牛顿循环之前，我们还需要做一些设置工作。我们需要创建基本的数据结构，并确保第一个牛顿迭代已经有了正确的边界值，这在介绍中已经讨论过了。
//
[0.x.3746] 
[0.x.3747] 
[0.x.3748] 
[0.x.3749] 
[0.x.3750] 
//
[0.x.3751] 
[0.x.3752] 
//
// 接下来开始牛顿迭代。我们一直迭代到上一次迭代结束时计算的残差（规范）小于[2.x.455]，正如在 "do { ... } while "循环结束时的检查。因为我们没有一个合理的值来初始化这个变量，所以我们只是使用可以表示为`双数'的最大值。
//
[0.x.3753] 
[0.x.3754] 
[0.x.3755] 
[0.x.3756] 
[0.x.3757] 
//
[0.x.3758] 
[0.x.3759] 
//
// 在每个网格上，我们正好做五个牛顿步骤。我们在这里打印初始残差，然后在这个网格上开始迭代。
//
// 在每一个牛顿步骤中，首先要计算系统矩阵和右手边，然后我们存储右手边的规范作为残差，以便在决定是否停止迭代时进行检查。然后我们求解线性系统（该函数也会更新[2.x.456]），并在这个牛顿步骤结束时输出残差的准则。
//
// 在这个循环结束后，我们还将以图形形式输出当前网格上的解，并增加网格细化循环的计数器。
//
[0.x.3760] 
//
[0.x.3761] 
[0.x.3762] 
[0.x.3763] 
[0.x.3764] 
[0.x.3765] 
//
[0.x.3766] 
//
[0.x.3767] 
[0.x.3768] 
//
[0.x.3769] 
//
[0.x.3770] 
[0.x.3771] 
[0.x.3772] 
[0.x.3773] 
[0.x.3774] 
[0.x.3775] 
//[2.x.457] 
//
// 最后是主函数。这遵循了所有其他主函数的方案。
//
[0.x.3776] 
[0.x.3777] 
[0.x.3778] 
[0.x.3779] 
[0.x.3780] 
//
[0.x.3781] 
[0.x.3782] 
[0.x.3783] 
[0.x.3784] 
[0.x.3785] 
[0.x.3786] 
[0.x.3787] 
[0.x.3788] 
[0.x.3789] 
[0.x.3790] 
[0.x.3791] 
[0.x.3792] 
[0.x.3793] 
[0.x.3794] 
//
[0.x.3795] 
[0.x.3796] 
[0.x.3797] 
[0.x.3798] 
[0.x.3799] 
[0.x.3800] 
[0.x.3801] 
[0.x.3802] 
[0.x.3803] 
[0.x.3804] 
[0.x.3805] 
[0.x.3806] 
[0.x.3807] 
[0.x.3808] 
[0.x.3809] 
[0.x.3810] 
[0.x.3811] 
[0.x.3812] 
[0.x.3813] 
[0.x.3814] 
[0.x.3815] 
[0.x.3816] 
[0.x.3817] 
[0.x.3818] 
[0.x.3819] 
[0.x.3820] 
[0.x.3821] 
[0.x.3822] 
[0.x.3823] 
[0.x.3824] 
[0.x.3825] 
[0.x.3826] 
[0.x.3827] 
[0.x.3828] 
[0.x.3829] 
[0.x.3830] 
//[2.x.458] 
//
// 同样，前几个include文件已经知道了，所以我们不会对它们进行评论。
//
[0.x.3831] 
[0.x.3832] 
[0.x.3833] 
[0.x.3834] 
//
[0.x.3835] 
[0.x.3836] 
[0.x.3837] 
[0.x.3838] 
[0.x.3839] 
[0.x.3840] 
//
[0.x.3841] 
[0.x.3842] 
[0.x.3843] 
//
[0.x.3844] 
//
[0.x.3845] 
[0.x.3846] 
//
[0.x.3847] 
[0.x.3848] 
[0.x.3849] 
//
// 现在，这些是多级方法所需的包括。第一个声明了如何处理多网格方法每个层次上的Dirichlet边界条件。对于自由度的实际描述，我们不需要任何新的包含文件，因为DoFHandler已经实现了所有必要的方法。我们只需要将自由度分配给更多的层次。
//
// 其余的包含文件涉及到作为线性算子（求解器或预处理器）的多重网格的力学问题。
//
[0.x.3850] 
[0.x.3851] 
[0.x.3852] 
[0.x.3853] 
[0.x.3854] 
[0.x.3855] 
[0.x.3856] 
//
// 我们将使用[2.x.459]来对单元格进行循环，所以在这里包括它。
//
[0.x.3857] 
//
// 这就是C++。
//
[0.x.3858] 
[0.x.3859] 
//
[0.x.3860] 
//
[0.x.3861] 
[0.x.3862] 
//[2.x.460] 
//
// 我们使用[2.x.461]来组装我们的矩阵。为此，我们需要一个ScratchData对象来存储每个单元的临时数据（这只是FEValues对象）和一个CopyData对象，它将包含每个单元装配的输出。关于scratch和copy对象的用法的更多细节，请参见WorkStream命名空间。
//
[0.x.3863] 
[0.x.3864] 
[0.x.3865] 
[0.x.3866] 
[0.x.3867] 
[0.x.3868] 
[0.x.3869] 
[0.x.3870] 
[0.x.3871] 
//
[0.x.3872] 
[0.x.3873] 
[0.x.3874] 
[0.x.3875] 
[0.x.3876] 
[0.x.3877] 
//
[0.x.3878] 
[0.x.3879] 
//
[0.x.3880] 
[0.x.3881] 
[0.x.3882] 
[0.x.3883] 
[0.x.3884] 
[0.x.3885] 
//
[0.x.3886] 
[0.x.3887] 
[0.x.3888] 
[0.x.3889] 
[0.x.3890] 
//
[0.x.3891] 
[0.x.3892] 
[0.x.3893] 
[0.x.3894] 
[0.x.3895] 
//[2.x.462] 
//
// 这个主类与 [2.x.463] 中的同一类相似。就成员函数而言，唯一增加的是。
//
// -- [2.x.464]的函数，该函数组装了对应于中间层离散运算符的矩阵。
//
// - [2.x.465]函数，它将我们的PDE集合在一个单元上。
//
[0.x.3896] 
[0.x.3897] 
[0.x.3898] 
[0.x.3899] 
[0.x.3900] 
[0.x.3901] 
//
[0.x.3902] 
[0.x.3903] 
[0.x.3904] 
[0.x.3905] 
[0.x.3906] 
//
[0.x.3907] 
[0.x.3908] 
[0.x.3909] 
[0.x.3910] 
[0.x.3911] 
[0.x.3912] 
//
[0.x.3913] 
[0.x.3914] 
[0.x.3915] 
//
[0.x.3916] 
[0.x.3917] 
//
[0.x.3918] 
//
[0.x.3919] 
[0.x.3920] 
//
[0.x.3921] 
//
// 以下成员是多网格方法的基本数据结构。前四个表示稀疏模式和多级层次结构中各个层次的矩阵，非常类似于上面的全局网格的对象。
//
// 然后，我们有两个新的矩阵，只需要在自适应网格上进行局部平滑的多网格方法。它们在细化区域的内部和细化边缘之间传递数据，在[2.x.466]"多网格论文 "中详细介绍过。
//
// 最后一个对象存储了每个层次上的边界指数信息和位于两个不同细化层次之间的细化边缘上的指数信息。因此，它的作用与AffineConstraints相似，但在每个层次上。
//
[0.x.3922] 
[0.x.3923] 
//
[0.x.3924] 
[0.x.3925] 
[0.x.3926] 
[0.x.3927] 
//[2.x.467] 
//
// 关于三角形的构造函数只有一个简短的评论：按照惯例，deal.II中所有自适应精化的三角形在单元格之间的面的变化不会超过一个级别。然而，对于我们的多网格算法，我们需要一个更严格的保证，即网格在连接两个单元的顶点上的变化也不超过细化级别。换句话说，我们必须防止出现以下情况。
//
// [2.x.468] 
//
// 这可以通过向三角化类的构造函数传递[2.x.469]标志来实现。
//
[0.x.3928] 
[0.x.3929] 
[0.x.3930] 
[0.x.3931] 
[0.x.3932] 
[0.x.3933] 
[0.x.3934] 
//
// [2.x.470] 
//
// 除了只是在DoFHandler中分配自由度之外，我们在每一层都做同样的事情。然后，我们按照之前的程序，在叶子网格上设置系统。
//
[0.x.3935] 
[0.x.3936] 
[0.x.3937] 
[0.x.3938] 
[0.x.3939] 
//
[0.x.3940] 
[0.x.3941] 
[0.x.3942] 
[0.x.3943] 
[0.x.3944] 
[0.x.3945] 
//
[0.x.3946] 
[0.x.3947] 
//
[0.x.3948] 
[0.x.3949] 
//
[0.x.3950] 
[0.x.3951] 
[0.x.3952] 
[0.x.3953] 
[0.x.3954] 
[0.x.3955] 
[0.x.3956] 
[0.x.3957] 
[0.x.3958] 
//
[0.x.3959] 
[0.x.3960] 
[0.x.3961] 
[0.x.3962] 
[0.x.3963] 
[0.x.3964] 
//
// 多网格约束必须被初始化。他们需要知道在哪里规定了Dirichlet边界条件。
//
[0.x.3965] 
[0.x.3966] 
[0.x.3967] 
[0.x.3968] 
//
// 现在是关于多网格数据结构的事情。首先，我们调整多级对象的大小，以容纳每一级的矩阵和稀疏模式。粗略的级别是零（现在是强制性的，但在未来的修订中可能会改变）。注意，这些函数在这里采取的是一个完整的、包容的范围（而不是一个起始索引和大小），所以最细的级别是[2.x.471] 。我们首先要调整容纳SparseMatrix类的容器的大小，因为它们必须在调整大小时释放它们的SparsityPattern才能被销毁。
//
[0.x.3969] 
//
[0.x.3970] 
[0.x.3971] 
[0.x.3972] 
[0.x.3973] 
//
// 现在，我们必须在每个级别上提供一个矩阵。为此，我们首先使用[2.x.472]函数在每个层次上生成一个初步的压缩稀疏模式（关于这个主题的更多信息，请参见[2.x.473]模块），然后将其复制到我们真正想要的那一个。下一步是用拟合的稀疏度模式初始化接口矩阵。
//
// 值得指出的是，界面矩阵只包含位于较粗和较细的网格之间的自由度的条目。因此，它们甚至比我们的多网格层次结构中的各个层次的矩阵还要稀疏。因此，我们使用一个专门为此目的而建立的函数来生成它。
//
[0.x.3974] 
[0.x.3975] 
[0.x.3976] 
[0.x.3977] 
[0.x.3978] 
[0.x.3979] 
//
[0.x.3980] 
[0.x.3981] 
[0.x.3982] 
[0.x.3983] 
[0.x.3984] 
[0.x.3985] 
[0.x.3986] 
[0.x.3987] 
[0.x.3988] 
[0.x.3989] 
[0.x.3990] 
[0.x.3991] 
[0.x.3992] 
[0.x.3993] 
[0.x.3994] 
[0.x.3995] 
//[2.x.474] 
//
// cell_worker函数用于在给定的单元上组装矩阵和右手边。这个函数用于活动单元生成system_matrix，并在每个层次上建立层次矩阵。
//
// 注意，当从assemble_multigrid()调用时，我们也会组装一个右手边，尽管它没有被使用。
//
[0.x.3996] 
[0.x.3997] 
[0.x.3998] 
[0.x.3999] 
[0.x.4000] 
[0.x.4001] 
[0.x.4002] 
[0.x.4003] 
//
[0.x.4004] 
[0.x.4005] 
//
[0.x.4006] 
//
[0.x.4007] 
//
[0.x.4008] 
[0.x.4009] 
[0.x.4010] 
[0.x.4011] 
//
[0.x.4012] 
[0.x.4013] 
[0.x.4014] 
[0.x.4015] 
[0.x.4016] 
[0.x.4017] 
[0.x.4018] 
[0.x.4019] 
[0.x.4020] 
[0.x.4021] 
[0.x.4022] 
[0.x.4023] 
[0.x.4024] 
//
// [2.x.475] 
//
// 下面的函数将线性系统集合在网格的活动单元上。为此，我们向Mesh_loop()函数传递两个lambda函数。cell_worker函数重定向到同名的类成员函数，而copyer是这个函数特有的，它使用约束条件将本地矩阵和向量复制到相应的全局矩阵。
//
[0.x.4025] 
[0.x.4026] 
[0.x.4027] 
[0.x.4028] 
//
[0.x.4029] 
[0.x.4030] 
[0.x.4031] 
[0.x.4032] 
[0.x.4033] 
[0.x.4034] 
//
[0.x.4035] 
[0.x.4036] 
[0.x.4037] 
[0.x.4038] 
[0.x.4039] 
[0.x.4040] 
[0.x.4041] 
//
[0.x.4042] 
//
[0.x.4043] 
[0.x.4044] 
[0.x.4045] 
[0.x.4046] 
[0.x.4047] 
[0.x.4048] 
//
[0.x.4049] 
[0.x.4050] 
[0.x.4051] 
[0.x.4052] 
[0.x.4053] 
[0.x.4054] 
[0.x.4055] 
[0.x.4056] 
//[2.x.476] 
//
// 下一个函数是建立矩阵，定义每一层网格上的多网格方法。集成的核心与上面的相同，但是下面的循环将遍历所有已存在的单元，而不仅仅是活动的单元，并且必须将结果输入正确的层矩阵。幸运的是，MeshWorker对我们隐藏了大部分的内容，因此这个函数和之前的函数的区别只在于汇编器的设置和循环中的不同迭代器。
//
// 我们为每个层次生成一个AffineConstraints对象，其中包含边界和界面道夫作为约束条目。然后，相应的对象被用来生成层次矩阵。
//
[0.x.4057] 
[0.x.4058] 
[0.x.4059] 
[0.x.4060] 
[0.x.4061] 
//
[0.x.4062] 
[0.x.4063] 
[0.x.4064] 
[0.x.4065] 
[0.x.4066] 
[0.x.4067] 
[0.x.4068] 
[0.x.4069] 
[0.x.4070] 
[0.x.4071] 
[0.x.4072] 
[0.x.4073] 
[0.x.4074] 
[0.x.4075] 
//
[0.x.4076] 
[0.x.4077] 
[0.x.4078] 
[0.x.4079] 
[0.x.4080] 
[0.x.4081] 
//
[0.x.4082] 
[0.x.4083] 
[0.x.4084] 
//
[0.x.4085] 
//
// 接口条目在填充mg_matrices[cd.level]时被上面的boundary_constraints对象所忽略。相反，我们手动将这些条目复制到当前级别的界面矩阵中。
//
[0.x.4086] 
[0.x.4087] 
[0.x.4088] 
[0.x.4089] 
[0.x.4090] 
[0.x.4091] 
[0.x.4092] 
[0.x.4093] 
[0.x.4094] 
[0.x.4095] 
//
[0.x.4096] 
//
[0.x.4097] 
[0.x.4098] 
[0.x.4099] 
[0.x.4100] 
[0.x.4101] 
[0.x.4102] 
//
[0.x.4103] 
[0.x.4104] 
[0.x.4105] 
[0.x.4106] 
[0.x.4107] 
[0.x.4108] 
[0.x.4109] 
[0.x.4110] 
//
// [2.x.477] 
//
// 这是另外一个在支持多栅求解器（或者说，事实上，我们使用多栅方法的前提条件）方面有明显不同的函数。
//
// 让我们从建立多层次方法的两个组成部分开始：层次间的转移运算器和最粗层次上的求解器。在有限元方法中，转移算子来自所涉及的有限元函数空间，通常可以用独立于所考虑问题的通用方式计算。在这种情况下，我们可以使用MGTransferPrebuilt类，给定最终线性系统的约束和MGConstrainedDoFs对象，该对象知道每个层次的边界条件和不同细化层次之间接口的自由度，可以从具有层次自由度的DoFHandler对象中建立这些转移操作的矩阵。
//
// 下面几行的第二部分是关于粗略网格求解器的。由于我们的粗网格确实非常粗，我们决定采用直接求解器（最粗层次矩阵的Householder分解），即使其实现不是特别复杂。如果我们的粗网格比这里的5个单元多得多，那么这里显然需要更合适的东西。
//
[0.x.4111] 
[0.x.4112] 
[0.x.4113] 
[0.x.4114] 
[0.x.4115] 
//
[0.x.4116] 
[0.x.4117] 
[0.x.4118] 
[0.x.4119] 
//
// 多级求解器或预处理器的下一个组成部分是，我们需要在每一级上设置平滑器。这方面常见的选择是使用松弛方法的应用（如SOR、Jacobi或Richardson方法）或求解器方法的少量迭代（如CG或GMRES）。[2.x.478]和MGSmootherPrecondition类为这两种平滑器提供支持。这里，我们选择应用单一的SOR迭代。为此，我们定义一个适当的别名，然后设置一个平滑器对象。
//
// 最后一步是用我们的水平矩阵初始化平滑器对象，并设置一些平滑参数。[2.x.479]函数可以有选择地接受额外的参数，这些参数将被传递给每一级的平滑器对象。在目前SOR平滑器的情况下，这可能包括一个松弛参数。然而，我们在这里将这些参数保留为默认值。对[2.x.480]的调用表明我们将在每个级别上使用两个前平滑步骤和两个后平滑步骤；为了在不同级别上使用可变数量的平滑器步骤，可以在对[2.x.481]对象的构造函数调用中设置更多选项。
//
// 最后一步的结果是我们使用SOR方法作为平滑器的事实
//
// --这不是对称的
//
// 但我们在下面使用共轭梯度迭代（需要对称的预处理），我们需要让多级预处理确保我们得到一个对称的算子，即使是非对称的平滑器。
//
[0.x.4120] 
[0.x.4121] 
[0.x.4122] 
[0.x.4123] 
[0.x.4124] 
//
// 下一个准备步骤是，我们必须将我们的水平和接口矩阵包裹在一个具有所需乘法函数的对象中。我们将为从粗到细的接口对象创建两个对象，反之亦然；多网格算法将在后面的操作中使用转置运算器，允许我们用已经建立的矩阵初始化该运算器的上下版本。
//
[0.x.4125] 
[0.x.4126] 
[0.x.4127] 
//
// 现在，我们准备设置V型循环算子和多级预处理程序。
//
[0.x.4128] 
[0.x.4129] 
[0.x.4130] 
//
[0.x.4131] 
[0.x.4132] 
//
// 有了这一切，我们终于可以用通常的方法来解决这个线性系统了。
//
[0.x.4133] 
[0.x.4134] 
//
[0.x.4135] 
//
[0.x.4136] 
[0.x.4137] 
[0.x.4138] 
[0.x.4139] 
[0.x.4140] 
[0.x.4141] 
//
// [2.x.482] 
//
// 以下两个函数在计算出解决方案后对其进行后处理。特别是，第一个函数在每个周期开始时细化网格，第二个函数在每个周期结束时输出结果。这些函数与 [2.x.483] 中的函数几乎没有变化。
//
[0.x.4142] 
[0.x.4143] 
[0.x.4144] 
[0.x.4145] 
//
[0.x.4146] 
[0.x.4147] 
[0.x.4148] 
[0.x.4149] 
[0.x.4150] 
[0.x.4151] 
[0.x.4152] 
[0.x.4153] 
[0.x.4154] 
[0.x.4155] 
[0.x.4156] 
[0.x.4157] 
//
[0.x.4158] 
[0.x.4159] 
[0.x.4160] 
[0.x.4161] 
//
[0.x.4162] 
[0.x.4163] 
[0.x.4164] 
//
[0.x.4165] 
[0.x.4166] 
[0.x.4167] 
//[2.x.484] 
//
// 和上面的几个函数一样，这几乎是对 [2.x.485] 中相应函数的复制。唯一的区别是对[2.x.486]的调用，它负责形成我们在多网格方法中需要的每一层的矩阵。
//
[0.x.4168] 
[0.x.4169] 
[0.x.4170] 
[0.x.4171] 
[0.x.4172] 
[0.x.4173] 
//
[0.x.4174] 
[0.x.4175] 
[0.x.4176] 
[0.x.4177] 
[0.x.4178] 
[0.x.4179] 
[0.x.4180] 
//
[0.x.4181] 
[0.x.4182] 
//
[0.x.4183] 
//
[0.x.4184] 
[0.x.4185] 
//
[0.x.4186] 
[0.x.4187] 
[0.x.4188] 
[0.x.4189] 
[0.x.4190] 
//[2.x.487] 
//
// 这又是与[2.x.488]中相同的函数。
//
[0.x.4191] 
[0.x.4192] 
[0.x.4193] 
[0.x.4194] 
[0.x.4195] 
//
[0.x.4196] 
[0.x.4197] 
[0.x.4198] 
[0.x.4199] 
[0.x.4200] 
[0.x.4201] 
[0.x.4202] 
[0.x.4203] 
[0.x.4204] 
[0.x.4205] 
[0.x.4206] 
[0.x.4207] 
[0.x.4208] 
[0.x.4209] 
//
[0.x.4210] 
[0.x.4211] 
[0.x.4212] 
[0.x.4213] 
[0.x.4214] 
[0.x.4215] 
[0.x.4216] 
[0.x.4217] 
[0.x.4218] 
[0.x.4219] 
[0.x.4220] 
[0.x.4221] 
[0.x.4222] 
[0.x.4223] 
//
[0.x.4224] 
[0.x.4225] 
[0.x.4226] 
[0.x.4227] 
[0.x.4228] 
[0.x.4229] 
[0.x.4230] 
[0.x.4231] 
[0.x.4232] 
[0.x.4233] 
[0.x.4234] 
[0.x.4235] 
[0.x.4236] 
[0.x.4237] 
[0.x.4238] 
[0.x.4239] 
[0.x.4240] 
[0.x.4241] 
[0.x.4242] 
[0.x.4243] 
[0.x.4244] 
//[2.x.489] 
//
// 同样，前几个include文件已经知道了，所以我们不会对它们进行评论。
//
[0.x.4245] 
[0.x.4246] 
[0.x.4247] 
[0.x.4248] 
//
[0.x.4249] 
[0.x.4250] 
[0.x.4251] 
[0.x.4252] 
[0.x.4253] 
[0.x.4254] 
//
[0.x.4255] 
[0.x.4256] 
[0.x.4257] 
//
[0.x.4258] 
//
[0.x.4259] 
[0.x.4260] 
//
[0.x.4261] 
[0.x.4262] 
[0.x.4263] 
//
// 这些，现在，是多级方法所必需的包括。第一个声明了如何处理多网格方法每个层次上的Dirichlet边界条件。对于自由度的实际描述，我们不需要任何新的包含文件，因为DoFHandler已经实现了所有必要的方法。我们只需要将自由度分配给更多的层次。
//
// 其余的包含文件涉及到作为线性算子（求解器或预处理器）的多重网格的力学问题。
//
[0.x.4264] 
[0.x.4265] 
[0.x.4266] 
[0.x.4267] 
[0.x.4268] 
[0.x.4269] 
[0.x.4270] 
//
// 最后我们包括MeshWorker框架。这个框架通过其函数loop()和integration_loop()，自动在单元格上进行循环，并将数据组装成向量、矩阵等。它自动服从约束。由于我们必须建立几个矩阵，并且必须注意几组约束，这将使我们省去很多麻烦。
//
[0.x.4271] 
[0.x.4272] 
[0.x.4273] 
[0.x.4274] 
[0.x.4275] 
//
// 为了节省精力，我们使用了在以下文件中找到的预先实现的拉普拉斯。
//
[0.x.4276] 
[0.x.4277] 
//
// 这就是C++。
//
[0.x.4278] 
[0.x.4279] 
//
[0.x.4280] 
//
[0.x.4281] 
[0.x.4282] 
//[2.x.490] 
//
// [2.x.491]希望有一个类能够提供在单元格和边界及内部面的积分功能。这是由下面的类来完成的。在构造函数中，我们告诉循环应该计算单元格积分（"真"），但不应该计算边界和内部面的积分（两个 "假"）。因此，我们只需要一个单元格函数，而不需要面的函数。
//
[0.x.4283] 
[0.x.4284] 
[0.x.4285] 
[0.x.4286] 
[0.x.4287] 
[0.x.4288] 
[0.x.4289] 
[0.x.4290] 
//
[0.x.4291] 
[0.x.4292] 
[0.x.4293] 
[0.x.4294] 
//
// 接下来是每个单元上的实际积分器。我们解决一个泊松问题，在右半平面上的系数为1，在左半平面上的系数为十分之一。
//
// [2.x.492]的基类[2.x.493]包含可以在这个局部积分器中填充的对象。在MeshWorker框架内，有多少对象被创建是由装配器类决定的。在这里，我们举例测试一下，需要一个矩阵[2.x.494] 矩阵是通过[2.x.495]来访问的，它的第一个参数是矩阵的编号。第二个参数只用于面的积分，当每个测试函数使用两个矩阵时。那么，第二个指标为 "true "的矩阵将以相同的索引存在。
//
// [2.x.496]提供了一个或几个FEValues对象，下面这些对象被[2.x.497]或[2.x.498]使用，因为我们只组装一个PDE，所以也只有一个索引为0的对象。
//
// 此外，我们注意到这个积分器的作用是计算多级预处理的矩阵，以及全局系统的矩阵和右手边。由于系统的汇编器需要一个额外的向量，[2.x.499]要返回一个非零值。相应地，我们在这个函数的末尾填充了一个右边的向量。由于LocalResults可以处理多个BlockVector对象，但我们这里又是最简单的情况，所以我们将信息输入到零号向量的零号块中。
//
[0.x.4295] 
[0.x.4296] 
[0.x.4297] 
[0.x.4298] 
[0.x.4299] 
[0.x.4300] 
[0.x.4301] 
//
[0.x.4302] 
[0.x.4303] 
[0.x.4304] 
//
[0.x.4305] 
[0.x.4306] 
[0.x.4307] 
[0.x.4308] 
[0.x.4309] 
[0.x.4310] 
[0.x.4311] 
[0.x.4312] 
//[2.x.500] 
//
// 这个主类与 [2.x.501] 中的类基本相同。就成员函数而言，唯一增加的是[2.x.502]函数，它组装了对应于中间层离散运算符的矩阵。
//
[0.x.4313] 
[0.x.4314] 
[0.x.4315] 
[0.x.4316] 
[0.x.4317] 
[0.x.4318] 
//
[0.x.4319] 
[0.x.4320] 
[0.x.4321] 
[0.x.4322] 
[0.x.4323] 
[0.x.4324] 
[0.x.4325] 
//
[0.x.4326] 
[0.x.4327] 
[0.x.4328] 
//
[0.x.4329] 
[0.x.4330] 
//
[0.x.4331] 
//
[0.x.4332] 
[0.x.4333] 
//
[0.x.4334] 
//
// 以下成员是多网格方法的基本数据结构。前两个表示稀疏模式和多级层次结构中各个层次的矩阵，非常类似于上面的全局网格的对象。
//
// 然后，我们有两个新的矩阵，只需要在自适应网格上进行局部平滑的多网格方法。它们在细化区域的内部和细化边缘之间传递数据，在[2.x.503]"多网格论文 "中详细介绍过。
//
// 最后一个对象存储了每个层次上的边界指数信息和位于两个不同细化层次之间的细化边缘上的指数信息。因此，它的作用与AffineConstraints类似，但在每个层次上。
//
[0.x.4335] 
[0.x.4336] 
[0.x.4337] 
[0.x.4338] 
[0.x.4339] 
[0.x.4340] 
//[2.x.504] 
//
// 关于三角形的构造函数只有一个简短的评论：按照惯例，deal.II中所有自适应精化的三角形在单元格之间的面的变化不会超过一个级别。然而，对于我们的多网格算法，我们需要一个更严格的保证，即网格在连接两个单元的顶点上的变化也不超过细化级别。换句话说，我们必须防止出现以下情况。
//
// [2.x.505] 
//
// 这可以通过向三角化类的构造函数传递[2.x.506]标志来实现。
//
[0.x.4341] 
[0.x.4342] 
[0.x.4343] 
[0.x.4344] 
[0.x.4345] 
[0.x.4346] 
[0.x.4347] 
//
// [2.x.507] 
//
// 除了只是在DoFHandler中分配自由度之外，我们在每一层都做同样的事情。然后，我们按照之前的程序，在叶子网格上设置系统。
//
[0.x.4348] 
[0.x.4349] 
[0.x.4350] 
[0.x.4351] 
[0.x.4352] 
//
[0.x.4353] 
[0.x.4354] 
[0.x.4355] 
[0.x.4356] 
[0.x.4357] 
[0.x.4358] 
//
[0.x.4359] 
[0.x.4360] 
//
[0.x.4361] 
[0.x.4362] 
//
[0.x.4363] 
[0.x.4364] 
//
[0.x.4365] 
[0.x.4366] 
[0.x.4367] 
[0.x.4368] 
[0.x.4369] 
[0.x.4370] 
[0.x.4371] 
[0.x.4372] 
[0.x.4373] 
[0.x.4374] 
[0.x.4375] 
[0.x.4376] 
//
// 多网格约束必须被初始化。他们也需要知道边界值，所以我们也在这里传递[2.x.508]。
//
[0.x.4377] 
[0.x.4378] 
[0.x.4379] 
[0.x.4380] 
//
// 现在是关于多网格数据结构的事情。首先，我们调整多级对象的大小，以容纳每一级的矩阵和稀疏模式。粗略的级别是零（现在是强制性的，但在未来的修订中可能会改变）。注意，这些函数在这里采取的是一个完整的、包容的范围（而不是一个起始索引和大小），所以最细的级别是[2.x.509] 。我们首先要调整容纳SparseMatrix类的容器的大小，因为它们必须在调整大小时释放它们的SparsityPattern才能被销毁。
//
[0.x.4381] 
//
[0.x.4382] 
[0.x.4383] 
[0.x.4384] 
[0.x.4385] 
[0.x.4386] 
[0.x.4387] 
[0.x.4388] 
//
// 现在，我们必须在每个层面上提供一个矩阵。为此，我们首先使用[2.x.510]函数在每个层次上生成一个初步的压缩稀疏模式（关于这个主题的更多信息，请参见[2.x.511]模块），然后把它复制到我们真正想要的那个层次上。下一步是用这些稀疏模式初始化两种层次矩阵。
//
// 值得指出的是，界面矩阵只有位于较粗的网格和较细的网格之间的界面上的自由度条目。因此，它们甚至比我们多网格层次结构中的各个层次的矩阵还要稀少。如果我们更关心内存的使用（可能还有我们使用这些矩阵的速度），我们应该对这两种矩阵使用不同的稀疏性模式。
//
[0.x.4389] 
[0.x.4390] 
[0.x.4391] 
[0.x.4392] 
[0.x.4393] 
//
[0.x.4394] 
//
[0.x.4395] 
[0.x.4396] 
[0.x.4397] 
[0.x.4398] 
[0.x.4399] 
//[2.x.512] 
//
// 下面的函数将线性系统装配在网格的最细层上。由于我们想在下面的层次装配中重用这里的代码，我们使用本地积分器类LaplaceIntegrator，而将循环留给MeshWorker框架。因此，这个函数首先设置了这个框架所需的对象，即  
//
// - 一个[2.x.513]对象，它将提供单元格上正交点的所有需要的数据。这个对象可以看作是FEValues的扩展，提供更多的有用信息。 
//
// - 一个[2.x.514]对象，它一方面扩展了单元格迭代器的功能，另一方面也为其基类LocalResults的返回值提供了空间。 
//
// - 一个汇编器，在这里是指整个系统。这里的 "简单 "指的是全局系统没有一个块状结构。 
//
// - 本地集成器，它实现了实际的形式。
//
// 在循环将所有这些组合成一个矩阵和一个右手边之后，还有一件事要做：集合器对受限自由度的矩阵行和列不做任何处理。因此，我们在对角线上放一个一，使整个系统摆好。一的值或任何固定的值都有一个好处，即它对矩阵的频谱的影响很容易理解。由于相应的特征向量形成了一个不变的子空间，所选择的值不会影响Krylov空间求解器的收敛性。
//
[0.x.4400] 
[0.x.4401] 
[0.x.4402] 
[0.x.4403] 
[0.x.4404] 
[0.x.4405] 
[0.x.4406] 
[0.x.4407] 
[0.x.4408] 
//
[0.x.4409] 
//
[0.x.4410] 
[0.x.4411] 
[0.x.4412] 
[0.x.4413] 
//
[0.x.4414] 
[0.x.4415] 
[0.x.4416] 
[0.x.4417] 
[0.x.4418] 
[0.x.4419] 
[0.x.4420] 
//
[0.x.4421] 
[0.x.4422] 
[0.x.4423] 
[0.x.4424] 
//[2.x.515] 
//
// 下一个函数是建立线性算子（矩阵），定义每一级网格上的多栅方法。积分的核心和上面的一样，但是下面的循环会遍历所有已有的单元，而不仅仅是活动的单元，而且结果必须输入正确的层次矩阵。幸运的是，MeshWorker对我们隐藏了大部分的内容，因此这个函数和之前的函数的区别只在于汇编器的设置和循环中不同的迭代器。另外，最后修复矩阵的过程也比较复杂。
//
[0.x.4425] 
[0.x.4426] 
[0.x.4427] 
[0.x.4428] 
[0.x.4429] 
[0.x.4430] 
[0.x.4431] 
[0.x.4432] 
[0.x.4433] 
//
[0.x.4434] 
//
[0.x.4435] 
[0.x.4436] 
[0.x.4437] 
[0.x.4438] 
//
[0.x.4439] 
[0.x.4440] 
[0.x.4441] 
[0.x.4442] 
[0.x.4443] 
[0.x.4444] 
[0.x.4445] 
//
[0.x.4446] 
[0.x.4447] 
[0.x.4448] 
[0.x.4449] 
[0.x.4450] 
[0.x.4451] 
[0.x.4452] 
[0.x.4453] 
[0.x.4454] 
//
// [2.x.516] 
//
// 这是另外一个在支持多栅求解器（或者说，事实上，我们使用多栅方法的前提条件）方面有明显不同的函数。
//
// 让我们从建立多层次方法的两个组成部分开始：层次间的转移运算器和最粗层次上的求解器。在有限元方法中，转移算子来自所涉及的有限元函数空间，通常可以用独立于所考虑问题的通用方式计算。在这种情况下，我们可以使用MGTransferPrebuilt类，给定最终线性系统的约束和MGConstrainedDoFs对象，该对象知道每个层次的边界条件和不同细化层次之间接口的自由度，可以从具有层次自由度的DoFHandler对象中建立这些转移操作的矩阵。
//
// 下面几行的第二部分是关于粗略网格求解器的。由于我们的粗网格确实非常粗，我们决定采用直接求解器（最粗层次矩阵的Householder分解），即使其实现不是特别复杂。如果我们的粗网格比这里的5个单元多得多，那么这里显然需要更合适的东西。
//
[0.x.4455] 
[0.x.4456] 
[0.x.4457] 
[0.x.4458] 
[0.x.4459] 
//
[0.x.4460] 
[0.x.4461] 
[0.x.4462] 
[0.x.4463] 
//
// 多级求解器或预处理器的下一个组成部分是，我们需要在每一级上有一个平滑器。这方面常见的选择是使用松弛方法的应用（如SOR、Jacobi或Richardson方法）或求解器方法的少量迭代（如CG或GMRES）。[2.x.517]和MGSmootherPrecondition类为这两种平滑器提供支持。这里，我们选择应用单一的SOR迭代。为此，我们定义一个适当的别名，然后设置一个平滑器对象。
//
// 最后一步是用我们的水平矩阵初始化平滑器对象，并设置一些平滑参数。[2.x.518]函数可以有选择地接受额外的参数，这些参数将被传递给每一级的平滑器对象。在当前SOR平滑器的情况下，这可能包括一个松弛参数。然而，我们在这里将这些参数保留为默认值。对[2.x.519]的调用表明我们将在每个级别上使用两个前平滑步骤和两个后平滑步骤；为了在不同级别上使用可变数量的平滑器步骤，可以在对[2.x.520]对象的构造函数调用中设置更多选项。
//
// 最后一步的结果是我们使用SOR方法作为平滑器的事实
//
// --这不是对称的
//
// 但我们在下面使用共轭梯度迭代（需要对称的预处理），我们需要让多级预处理确保我们得到一个对称的算子，即使是非对称的平滑器。
//
[0.x.4464] 
[0.x.4465] 
[0.x.4466] 
[0.x.4467] 
[0.x.4468] 
//
// 下一个准备步骤是，我们必须将我们的水平矩阵和接口矩阵包裹在一个具有所需乘法函数的对象中。我们将为从粗到细的接口对象创建两个对象，反之亦然；多网格算法将在以后的操作中使用转置运算器，允许我们用已经建立的矩阵初始化该运算器的上下版本。
//
[0.x.4469] 
[0.x.4470] 
[0.x.4471] 
//
// 现在，我们准备设置V型循环算子和多级预处理程序。
//
[0.x.4472] 
[0.x.4473] 
[0.x.4474] 
//
[0.x.4475] 
[0.x.4476] 
//
// 有了这一切，我们终于可以用通常的方法来解决这个线性系统了。
//
[0.x.4477] 
[0.x.4478] 
//
[0.x.4479] 
//
[0.x.4480] 
[0.x.4481] 
[0.x.4482] 
//
// [2.x.521] 
//
// 下面两个函数在计算出解决方案后对其进行后处理。特别是，第一个函数在每个周期开始时细化网格，第二个函数在每个周期结束时输出结果。这些函数与[2.x.522]中的函数几乎没有变化，只有一个小的区别：我们以VTK格式生成输出，以使用当今更现代的可视化程序，而不是[2.x.523]编写时的那些。
//
[0.x.4483] 
[0.x.4484] 
[0.x.4485] 
[0.x.4486] 
//
[0.x.4487] 
[0.x.4488] 
[0.x.4489] 
[0.x.4490] 
[0.x.4491] 
[0.x.4492] 
[0.x.4493] 
[0.x.4494] 
[0.x.4495] 
[0.x.4496] 
[0.x.4497] 
[0.x.4498] 
//
[0.x.4499] 
[0.x.4500] 
[0.x.4501] 
[0.x.4502] 
//
[0.x.4503] 
[0.x.4504] 
[0.x.4505] 
//
[0.x.4506] 
[0.x.4507] 
[0.x.4508] 
//[2.x.524] 
//
// 和上面的几个函数一样，这几乎是对 [2.x.525] 中相应函数的复制。唯一的区别是对[2.x.526]的调用，它负责形成我们在多网格方法中需要的每一层的矩阵。
//
[0.x.4509] 
[0.x.4510] 
[0.x.4511] 
[0.x.4512] 
[0.x.4513] 
[0.x.4514] 
//
[0.x.4515] 
[0.x.4516] 
[0.x.4517] 
[0.x.4518] 
[0.x.4519] 
[0.x.4520] 
[0.x.4521] 
//
[0.x.4522] 
[0.x.4523] 
//
[0.x.4524] 
//
[0.x.4525] 
[0.x.4526] 
//
[0.x.4527] 
[0.x.4528] 
[0.x.4529] 
[0.x.4530] 
[0.x.4531] 
//[2.x.527] 
//
// 这又是与[2.x.528]中相同的函数。
//
[0.x.4532] 
[0.x.4533] 
[0.x.4534] 
[0.x.4535] 
[0.x.4536] 
//
[0.x.4537] 
//
[0.x.4538] 
[0.x.4539] 
[0.x.4540] 
[0.x.4541] 
[0.x.4542] 
[0.x.4543] 
[0.x.4544] 
[0.x.4545] 
[0.x.4546] 
[0.x.4547] 
[0.x.4548] 
[0.x.4549] 
[0.x.4550] 
[0.x.4551] 
//
[0.x.4552] 
[0.x.4553] 
[0.x.4554] 
[0.x.4555] 
[0.x.4556] 
[0.x.4557] 
[0.x.4558] 
[0.x.4559] 
[0.x.4560] 
[0.x.4561] 
[0.x.4562] 
[0.x.4563] 
[0.x.4564] 
[0.x.4565] 
//
[0.x.4566] 
[0.x.4567] 
[0.x.4568] 
[0.x.4569] 
[0.x.4570] 
[0.x.4571] 
[0.x.4572] 
[0.x.4573] 
[0.x.4574] 
[0.x.4575] 
[0.x.4576] 
[0.x.4577] 
[0.x.4578] 
[0.x.4579] 
[0.x.4580] 
[0.x.4581] 
//
 
[0.x.4583] 
[0.x.4584] 
[0.x.4585] 
//[2.x.529] 
//
// 首先是我们在以前的例子程序中已经使用过的常见的各种头文件。
//
[0.x.4586] 
[0.x.4587] 
[0.x.4588] 
[0.x.4589] 
[0.x.4590] 
[0.x.4591] 
[0.x.4592] 
[0.x.4593] 
[0.x.4594] 
[0.x.4595] 
[0.x.4596] 
[0.x.4597] 
[0.x.4598] 
[0.x.4599] 
[0.x.4600] 
[0.x.4601] 
[0.x.4602] 
[0.x.4603] 
[0.x.4604] 
[0.x.4605] 
[0.x.4606] 
//
// 这里是我们对这个例子程序特别需要的东西，而这些东西并不在 [2.x.530] 中。首先，我们替换掉标准输出[2.x.531]，它在并行计算中只用于在其中一个MPI进程中生成输出。
//
[0.x.4607] 
//
// 我们将通过调用 [2.x.532] 名称空间中的相应函数来查询进程的数量和当前进程的数量。
//
[0.x.4608] 
//
// 然后，我们要把所有涉及（全局）线性系统的线性代数组件替换成类，这些类围绕PETSc提供的接口与我们自己的线性代数类相似（PETSc是一个用C语言编写的库，而deal.II附带的包装类提供的PETSc功能的接口与我们自己的线性代数类已经有的接口相似）。特别是，我们需要在MPI程序中分布在几个[2.x.533]"进程 "中的向量和矩阵（如果只有一个进程，也就是说，如果你只在一台机器上运行，并且没有MPI支持，则简单映射为顺序的、本地的向量和矩阵）。
//
[0.x.4609] 
[0.x.4610] 
//
// 然后，我们还需要PETSc提供的求解器和预处理器的接口。
//
[0.x.4611] 
[0.x.4612] 
//
// 此外，我们还需要一些划分网格的算法，以便在MPI网络上有效地分布这些网格。分区算法在[2.x.534]命名空间中实现，我们需要一个额外的包含文件，用于[2.x.535]中的一个函数，该函数允许对与自由度相关的索引进行排序，以便根据它们所关联的子域进行编号。
//
[0.x.4613] 
[0.x.4614] 
//
// 而这又是简单的C++。
//
[0.x.4615] 
[0.x.4616] 
//
// 最后一步和以前所有的程序一样。
//
[0.x.4617] 
[0.x.4618] 
[0.x.4619] 
//[2.x.536] 
//
// 该程序的第一个真正的部分是主类的声明。 正如在介绍中提到的，几乎所有的内容都是从[2.x.537]中逐字复制过来的，所以我们只对这两个教程之间的少数差异进行评论。 有一个（表面上的）变化是，我们让[2.x.538]返回一个值，即收敛所需的迭代次数，这样我们就可以在适当的地方将其输出到屏幕上。
//
[0.x.4620] 
[0.x.4621] 
[0.x.4622] 
[0.x.4623] 
[0.x.4624] 
[0.x.4625] 
//
[0.x.4626] 
[0.x.4627] 
[0.x.4628] 
[0.x.4629] 
[0.x.4630] 
[0.x.4631] 
//
// 第一个变化是，我们必须声明一个变量，表明我们应该通过它来分配我们的计算的[2.x.539]"MPI通信器"。
//
[0.x.4632] 
//
// 然后我们有两个变量，告诉我们在并行世界中的位置。下面的第一个变量，[2.x.540] ，告诉我们总共有多少个MPI进程，而第二个变量，[2.x.541] ，表示在这个进程空间中，目前进程的编号（在MPI语言中，这相当于进程的[2.x.542] "等级"）。后者对每个进程都有一个唯一的值，介于0和（小于）[2.x.543] 之间。如果这个程序运行在没有MPI支持的单机上，那么它们的值分别为[2.x.544] ，。
//
[0.x.4633] 
[0.x.4634] 
//
// 接下来是一个类似流的变量 [2.x.545] 。从本质上讲，它只是我们为了方便而使用的东西：在一个并行程序中，如果每个进程都输出状态信息，那么很快就会有很多杂乱的信息。相反，我们希望只让一个[2.x.546]"进程 "输出一次所有的信息，例如，[2.x.547]"等级 "为零的那个。同时，在我们创建输出的[1.x.9]地方加上[2.x.548]条件的前缀似乎很傻。
//
// 为了使这个问题更简单，ConditionalOStream类正是这样做的：它就像一个流一样，但只有在一个标志被设置后才转发到一个真正的、底层的流。通过将这个条件设置为[2.x.549]（其中[2.x.550]对应于MPI进程的等级），我们确保输出只从第一个进程中产生，并且我们不会在每个进程中重复得到同样的输出行。因此，我们可以在每一个地方和每一个进程中使用[2.x.551]，但是除了一个进程之外，所有的进程都不会发生通过[2.x.552]输送到对象中的信息。
//
[0.x.4635] 
//
// 成员变量列表的其余部分与 [2.x.553] 中的内容基本相同。然而，我们改变了矩阵和矢量类型的声明，以使用并行的PETSc对象代替。请注意，我们没有使用单独的稀疏模式，因为PETSc将其作为矩阵数据结构的一部分进行内部管理。
//
[0.x.4636] 
[0.x.4637] 
[0.x.4638] 
//
[0.x.4639] 
//
[0.x.4640] 
//
[0.x.4641] 
[0.x.4642] 
[0.x.4643] 
//[2.x.554] 
//
// 以下内容取自[2.x.555]，未作改动。
//
[0.x.4644] 
[0.x.4645] 
[0.x.4646] 
[0.x.4647] 
[0.x.4648] 
[0.x.4649] 
[0.x.4650] 
[0.x.4651] 
[0.x.4652] 
//
[0.x.4653] 
[0.x.4654] 
[0.x.4655] 
//
[0.x.4656] 
[0.x.4657] 
[0.x.4658] 
[0.x.4659] 
[0.x.4660] 
//
[0.x.4661] 
[0.x.4662] 
[0.x.4663] 
[0.x.4664] 
[0.x.4665] 
//
[0.x.4666] 
[0.x.4667] 
[0.x.4668] 
[0.x.4669] 
[0.x.4670] 
//
[0.x.4671] 
[0.x.4672] 
//
[0.x.4673] 
[0.x.4674] 
[0.x.4675] 
[0.x.4676] 
//
// [2.x.556] 
//[2.x.557] 
//
// 实际实现的第一步是主类的构造函数。除了初始化我们在[2.x.558]中已经有的相同成员变量外，我们在这里用连接所有进程的全局MPI通信器来初始化我们将使用的MPI通信器变量（在更复杂的应用中，可以在这里使用只连接所有进程的一个子集的通信器对象），并调用[2.x.559]辅助函数来确定进程的数量以及当前进程在这个画面中的地位。此外，我们确保输出只由（全局）第一个进程产生。我们通过将我们想要输出的流传给[2.x.560]和一个真/假标志作为参数，后者是通过测试当前执行构造函数调用的进程是否是MPI宇宙中的第一个来确定的。
//
[0.x.4677] 
[0.x.4678] 
[0.x.4679] 
[0.x.4680] 
[0.x.4681] 
[0.x.4682] 
[0.x.4683] 
[0.x.4684] 
[0.x.4685] 
//
// [2.x.561] 
//
// 接下来，我们需要实现为要解决的全局线性系统设置各种变量的函数。
//
// 然而，在我们进行这项工作之前，对于一个并行程序来说，有一件事要做：我们需要确定哪个MPI进程负责每个单元。在进程之间分割单元，通常称为 "划分网格"，是通过给每个单元分配一个[2.x.562]"子域id "来完成的。我们通过调用METIS库来完成这一工作，METIS库以一种非常有效的方式完成这一工作，试图将子域之间接口上的节点数量降到最低。我们没有尝试直接调用METIS，而是通过调用[2.x.563]函数来实现，该函数在更高的编程水平上实现了这一点。
//
// [2.x.564] 正如在介绍中提到的，如果我们使用[2.x.565]类来代替三角形对象，我们就可以避免这个手动划分的步骤（正如我们在[2.x.566]中所做的）。  该类实质上做了所有常规三角形的工作，但它也在每次创建或细化网格操作后自动划分网格。
//
// 在分割之后，我们需要像往常一样列举所有的自由度。 然而，我们希望列举自由度的方式是：所有与子域0（位于进程0）的单元相关的自由度都在与子域1的单元相关的自由度之前，在进程2的单元之前，以此类推。我们需要这样做，因为我们必须将全局向量的右手边和解决方案，以及矩阵分割成连续的行块，住在每个处理器上，而且我们希望以一种需要最小通信的方式来做。这个特殊的列举可以通过使用[2.x.567]对自由度指数重新排序来获得。
//
// 这个初始设置的最后一步是，我们为自己得到一个IndexSet，表示这个过程所负责的全局未知数的子集。(注意，一个自由度不一定是由拥有一个单元的进程所拥有，只是因为这个自由度生活在这个单元上：有些自由度生活在子域之间的接口上，因此只由这个接口附近的一个进程所拥有。)
//
// 在我们继续之前，让我们回顾一下在介绍中已经讨论过的一个事实。我们在这里使用的三角形是在所有进程中复制的，每个进程都有整个三角形的完整副本，包括所有单元。分区只提供了一种方法来确定每个进程 "拥有 "哪些单元，但它知道所有单元的一切。同样，DoFHandler对象知道每个单元的一切，特别是每个单元上的自由度，无论它是否是当前进程拥有的单元。这不能扩展到大型问题，因为如果问题足够大，最终只是在每个进程中存储整个网格以及与之相关的所有内容将变得不可行。另一方面，如果我们将三角形分割成若干部分，使每个进程只存储它 "拥有 "的单元格，而不存储其他的单元格（或者，至少是其他单元格的一小部分），那么，只要我们将足够多的MPI进程扔给它们，我们就可以解决大问题。这就是我们在[2.x.568]中要做的，例如，使用[2.x.569]类。 另一方面，我们在当前程序中演示的其余大部分内容实际上将继续工作，无论我们有整个三角形的可用，还是只有其中的一部分。
//
[0.x.4686] 
[0.x.4687] 
[0.x.4688] 
[0.x.4689] 
//
[0.x.4690] 
[0.x.4691] 
//
// 我们需要初始化表示当前网格的悬挂节点约束的对象。与三角形和DoFHandler对象一样，我们将简单地在每个进程上存储[1.x.10]约束；同样，这不会有规模，但我们在[2.x.570]中展示了如何通过在每个MPI进程上只存储对这个特定进程实际重要的自由度约束来解决这个问题。
//
[0.x.4692] 
[0.x.4693] 
[0.x.4694] 
[0.x.4695] 
//
// 现在我们为系统矩阵创建稀疏性模式。请注意，我们再次计算并存储所有条目，而不仅仅是与此相关的条目（参见[2.x.571]或[2.x.572]，以获得更有效的处理方式）。
//
[0.x.4696] 
[0.x.4697] 
[0.x.4698] 
[0.x.4699] 
[0.x.4700] 
//
// 现在我们确定本地拥有的DoF的集合，并使用它来初始化并行向量和矩阵。由于矩阵和向量需要并行工作，我们必须向它们传递一个MPI通信对象，以及IndexSet [2.x.573]中包含的分区信息。IndexSet包含关于全局大小（[1.x.11]自由度数）的信息，也包含要在本地存储哪些行的子集。 注意，系统矩阵需要该行和列的分区信息。对于正方形矩阵，就像这里的情况一样，列的划分方式应该与行的划分方式相同，但是对于矩形矩阵，我们必须按照与矩阵相乘的向量的划分方式来划分列，而行的划分方式必须与矩阵-向量乘法的目的向量相同。
//
[0.x.4701] 
[0.x.4702] 
[0.x.4703] 
[0.x.4704] 
//
[0.x.4705] 
[0.x.4706] 
[0.x.4707] 
[0.x.4708] 
//
[0.x.4709] 
[0.x.4710] 
[0.x.4711] 
//
// [2.x.574] 
//
// 我们现在组装矩阵和问题的右手边。在我们进行详细讨论之前，有一些事情值得一提。首先，我们将并行组装系统，也就是说，每个进程将负责在属于这个特定进程的单元上进行组装。请注意，自由度的分割方式是，单元内部和属于同一子域的单元之间的所有自由度都属于[2.x.575]该单元的过程。然而，即使如此，我们有时也需要在一个单元上与属于不同过程的邻居集合，在这些情况下，当我们将局部贡献加到全局矩阵或右手向量中时，我们必须将这些条目转移到拥有这些元素的过程中。幸运的是，我们不需要用手去做这件事。PETSc为我们做了这一切，它在本地缓存了这些元素，当我们在这个函数的末尾对矩阵和向量调用[2.x.576]函数时，根据需要将它们发送给其他进程。
//
// 第二点是，一旦我们把矩阵和向量的贡献交给了PETSc，那么，a）很难，b）要把它们拿回来进行修改，效率非常低。这不仅是PETSc的错，也是这个程序的分布式性质的结果：如果一个条目驻留在另一个处理器上，那么要得到它必然是很昂贵的。这样做的后果是，我们不应该试图首先组装矩阵和右手边，就像没有悬挂的节点约束和边界值一样，然后在第二步中消除这些约束（例如使用[2.x.577]），相反，我们应该在将这些条目交给PETSc之前尝试消除悬挂的节点约束。这很容易：我们不需要手工复制元素到全局矩阵中（就像我们在[2.x.578]中做的那样），而是使用[2.x.579]函数来同时处理悬空节点的问题。我们在 [2.x.580] 中也已经这样做了。第二步，消除边界节点，也可以这样做，把边界值放到与悬挂节点相同的AffineConstraints对象中（例如，见[2.x.581]中的方法）；但是，严格来说，在这里没有必要这样做，因为消除边界值可以只用每个进程本身存储的数据来完成，因此，我们使用之前在[2.x.582]中使用的方法，即通过[2.x.583] 
//
// 说了这么多，下面是实际的实现，从辅助变量的一般设置开始。 请注意，我们仍然使用deal.II的全矩阵和向量类型的本地系统，因为这些类型很小，不需要在不同进程中共享）。
//
[0.x.4712] 
[0.x.4713] 
[0.x.4714] 
[0.x.4715] 
[0.x.4716] 
[0.x.4717] 
[0.x.4718] 
[0.x.4719] 
//
[0.x.4720] 
[0.x.4721] 
//
[0.x.4722] 
[0.x.4723] 
//
[0.x.4724] 
//
[0.x.4725] 
[0.x.4726] 
//
[0.x.4727] 
//
[0.x.4728] 
[0.x.4729] 
//
// 接下来是对所有元素的循环。请注意，我们不需要在每个进程上做[1.x.12]的工作：我们在这里的工作只是在实际属于这个MPI进程的单元上组装系统，所有其他的单元将由其他进程来处理。这就是紧随for-loop之后的if-clause所要处理的：它查询每个单元的子域标识符，这是一个与每个单元相关的数字，告诉我们所有者进程的情况。在更大的范围内，子域标识被用来将一个域分成几个部分（我们在上面[2.x.584]的开头就这样做了），并允许识别一个单元生活在哪个子域。在这个应用中，我们让每个进程恰好处理一个子域，所以我们确定了 [2.x.585] 的条款。
//
// 除此以外，如果你已经了解了 [2.x.586] 中的组装方式，那么组装本地系统就相对不容易了。如上所述，将本地贡献分配到全局矩阵和右手边，也是以与 [2.x.587] 中相同的方式来处理悬挂节点约束。
//
[0.x.4730] 
[0.x.4731] 
[0.x.4732] 
[0.x.4733] 
[0.x.4734] 
//
[0.x.4735] 
//
[0.x.4736] 
[0.x.4737] 
//
[0.x.4738] 
[0.x.4739] 
[0.x.4740] 
[0.x.4741] 
//
[0.x.4742] 
[0.x.4743] 
[0.x.4744] 
[0.x.4745] 
//
[0.x.4746] 
[0.x.4747] 
[0.x.4748] 
[0.x.4749] 
[0.x.4750] 
[0.x.4751] 
[0.x.4752] 
[0.x.4753] 
[0.x.4754] 
[0.x.4755] 
[0.x.4756] 
[0.x.4757] 
[0.x.4758] 
[0.x.4759] 
[0.x.4760] 
[0.x.4761] 
[0.x.4762] 
[0.x.4763] 
[0.x.4764] 
//
[0.x.4765] 
[0.x.4766] 
[0.x.4767] 
[0.x.4768] 
[0.x.4769] 
[0.x.4770] 
//
[0.x.4771] 
[0.x.4772] 
[0.x.4773] 
[0.x.4774] 
[0.x.4775] 
//
[0.x.4776] 
[0.x.4777] 
[0.x.4778] 
[0.x.4779] 
[0.x.4780] 
[0.x.4781] 
[0.x.4782] 
//
// 下一步是对向量和系统矩阵进行 "压缩"。这意味着每个进程将对矩阵和向量中那些自己不拥有的条目所做的添加发送给拥有这些条目的进程。在收到其他进程的这些加法后，每个进程再把它们加到它已经拥有的值上。这些加法是将生活在几个单元上的形状函数的积分贡献结合起来，就像在串行计算中一样，不同的是这些单元被分配给不同的进程。
//
[0.x.4783] 
[0.x.4784] 
//
// 全局矩阵和右边的向量现在已经形成。我们仍然要应用边界值，方法与我们在[2.x.588], [2.x.589], 和其他一些程序中的方法相同。
//
// 下面调用[2.x.590]的最后一个参数允许进行一些优化。它控制我们是否应该删除对应于边界节点的矩阵列中的条目（即，将其设置为零），或者保留它们（通过[2.x.591]意味着：是的，消除这些列）。如果我们消除了列，那么结果矩阵将再次成为对称的，如果我们不这样做，那么它将不会。不过，结果系统的解应该是一样的。我们想让系统重新成为对称的唯一原因是我们想使用CG方法，该方法只对对称矩阵有效。我们可能[1.x.13]想让矩阵对称的原因是，这将要求我们写进实际存在于其他进程中的列项，即涉及到数据的交流。这总是很昂贵的。
//
// 经验告诉我们，如果我们不删除与边界节点相关的列，CG也可以工作（而且工作得几乎一样好），这可以用这种特殊的非对称性结构来解释。为了避免通信的费用，我们因此不消除受影响列中的条目。
//
[0.x.4785] 
[0.x.4786] 
[0.x.4787] 
[0.x.4788] 
[0.x.4789] 
[0.x.4790] 
[0.x.4791] 
[0.x.4792] 
//
// [2.x.592] 
//
// 组建了线性系统后，我们接下来需要解决它。PETSc提供了各种顺序和并行求解器，我们为这些求解器编写了包装器，其接口与之前所有示例程序中使用的deal.II求解器几乎相同。因此，下面的代码看起来应该相当熟悉。
//
// 在该函数的顶部，我们设置了一个收敛监视器，并指定了我们希望解决线性系统的精度。接下来，我们使用PETSc的CG求解器创建一个实际的求解器对象，该求解器也可用于并行（分布式）矢量和矩阵。最后是一个预处理程序；我们选择使用一个块状雅可比预处理程序，它通过计算矩阵的每个对角线块的不完全LU分解来工作。 换句话说，每个MPI进程从其存储的行中计算出一个ILU，丢掉与本地未存储的行指数相对应的列；这就产生了一个方形的矩阵块，我们可以从中计算出一个ILU。这意味着如果你只用一个进程来运行程序，那么你将使用一个ILU(0)作为预处理程序，而如果它在许多进程上运行，那么我们将在对角线上有许多块，预处理程序是这些块中每个块的ILU(0)。在每个处理器只有一个自由度的极端情况下，这个预处理程序只是一个雅可比预处理程序，因为对角线矩阵块只由一个条目组成。这样的预处理程序相对容易计算，因为它不需要在处理器之间进行任何形式的通信，但一般来说，对于大量的处理器来说，它的效率并不高)。
//
// 按照这样的设置，我们就可以解决这个线性系统。
//
[0.x.4793] 
[0.x.4794] 
[0.x.4795] 
[0.x.4796] 
[0.x.4797] 
//
[0.x.4798] 
//
[0.x.4799] 
//
// 下一步是分配悬挂的节点约束。这有点麻烦，因为要填入一个约束节点的值，你需要访问它所约束的节点的值（例如，对于2d中的Q1元素，我们需要访问悬挂节点面的大边上的两个节点，以计算中间的约束节点的值）。
//
// 问题是，我们已经建立了我们的向量（在[2.x.593]中），使每个进程只负责存储解向量中与该进程 "拥有 "的自由度相对应的那些元素。然而，在有些情况下，为了计算一个进程中受限自由度的向量项的值，我们需要访问存储在其他进程中的向量项。 PETSc（以及它所基于的MPI模型）不允许简单地查询存储在其他进程上的向量条目，所以我们在这里所做的是获得一个 "分布式 "向量的副本，我们将所有元素存储在本地。这很简单，因为deal.II包装器有一个针对deal.II Vector类的转换构造函数。这种转换当然需要通信，但实质上每个进程只需要将其数据批量发送给其他每个进程一次，而不需要对单个元素的查询做出回应）。
//
[0.x.4800] 
//
// 当然，和以前的讨论一样，如果你想在大量进程上解决大问题，这样的步骤显然不能扩展得很远，因为现在每个进程都存储了[1.x.14]的解向量。(我们将在[2.x.594]中展示如何更好地做到这一点。) 另一方面，在这个本地副本上分配悬挂节点约束很简单，使用通常的函数[2.x.595] 特别是，我们可以计算[1.x.15]约束自由度的值，无论当前进程是否拥有它们。
//
[0.x.4801] 
//
// 然后把所有的东西都转回全局向量中。下面的操作是复制我们在分布式解决方案中本地存储的那些本地化解决方案的元素，而不碰其他的。由于我们在所有处理器上做同样的操作，我们最终得到一个分布式向量（即在每个进程上只存储与该进程拥有的自由度相对应的向量项），该向量的所有受限节点都被固定。
//
// 我们通过返回收敛所需的迭代次数来结束这个函数，以允许一些输出。
//
[0.x.4802] 
//
[0.x.4803] 
[0.x.4804] 
//[2.x.596] 
//
// 使用某种细化指标，可以对网格进行细化。这个问题与分布悬挂节点约束基本相同：为了计算误差指标（即使我们只是对当前进程拥有的单元上的指标感兴趣），我们需要访问解向量的更多元素，而不仅仅是当前处理器存储的那些元素。为了实现这一点，我们基本上做了我们在[2.x.597]中已经做过的事情，即获取[1.x.16]解向量的副本到每个进程中，并使用它来计算。如上所述，这本身就很昂贵，尤其是没有必要，因为我们刚刚在[2.x.598]中创建并销毁了这样一个向量，但效率并不是这个程序的重点，所以让我们选择一种设计，即每个函数都尽可能地独立。
//
// 一旦我们有了这样一个包含[1.x.17]解向量元素的 "本地化 "向量，我们就可以计算属于当前过程的单元的指标。事实上，我们当然可以计算[1.x.18]细化指标，因为我们的Triangulation和DoFHandler对象存储了所有单元的信息，而且我们有一个完整的解向量副本。但是为了展示如何进行%并行操作，让我们演示一下，如果只计算[1.x.19]错误指标，然后与其他进程交换剩余的指标，会如何操作。(最终，每个进程都需要一套完整的细化指标，因为每个进程都需要细化他们的网格，并且需要以与其他进程完全相同的方式细化它。)
//
// 所以，为了做到这一切，我们需要。
//
// - 首先，获得分布式求解向量的本地拷贝。
//
// - 第二，创建一个向量来存储细化指标。
//
// - 第三，让KellyErrorEstimator计算属于当前子域/过程的所有单元的细化指标。调用的最后一个参数表明我们对哪个子域感兴趣。在它之前的三个参数是其他各种默认参数，通常不需要（也不说明数值，而是使用默认值），但我们必须在这里明确说明，因为我们要修改下面一个参数的值（即表示子域的参数）。
//
[0.x.4805] 
[0.x.4806] 
[0.x.4807] 
[0.x.4808] 
//
[0.x.4809] 
[0.x.4810] 
[0.x.4811] 
[0.x.4812] 
[0.x.4813] 
[0.x.4814] 
[0.x.4815] 
[0.x.4816] 
[0.x.4817] 
[0.x.4818] 
//
// 现在所有进程都计算了自己单元格的错误指标，并将其存储在[2.x.599]向量的相应元素中。这个向量中不属于本进程的单元格的元素为零。然而，由于所有进程都有整个三角形的副本，并需要保持这些副本的同步，他们需要三角形的所有单元的细化指标值。因此，我们需要分配我们的结果。我们通过创建一个分布式向量来做到这一点，每个进程都有自己的份额，并设置它所计算的元素。因此，当你把这个向量看作是一个存在于所有进程中的向量时，那么这个向量的每个元素都被设置过一次。然后，我们可以将这个并行向量分配给每个进程上的一个本地非并行向量，使[1.x.20]错误指示器在每个进程上都可用。
//
因此，//在第一步，我们需要设置一个并行向量。为了简单起见，每个进程都将拥有一个元素块，其数量与该进程拥有的单元格一样多，因此第一个元素块存储在进程0，下一个元素块存储在进程1，以此类推。然而，需要注意的是，这些元素不一定是我们要写入的元素。这是单元格排列顺序的结果，也就是说，向量中的元素对应单元格的顺序并不是根据这些单元格所属的子域来排序的。换句话说，如果在这个过程中，我们计算某个子域的单元的指标，我们可能会把结果写到分布式向量的或多或少的随机元素中；特别是，它们不一定位于我们在这个过程中拥有的向量块中。它们随后将不得不被复制到另一个进程的内存空间中，当我们调用[2.x.600]函数时，PETSc为我们做了这项操作。这种低效率可以通过更多的代码来避免，但我们不这样做，因为它不是程序总运行时间的一个主要因素。
//
// 所以我们是这样做的：计算有多少个单元属于这个过程，建立一个有这么多元素的分布式向量存储在本地，将我们在本地计算的元素复制过去，最后将结果压缩。事实上，我们实际上只复制了非零的元素，所以我们可能会错过一些我们计算为零的元素，但这不会有什么影响，因为无论如何，向量的原始值是零。
//
[0.x.4819] 
[0.x.4820] 
[0.x.4821] 
[0.x.4822] 
[0.x.4823] 
//
[0.x.4824] 
[0.x.4825] 
[0.x.4826] 
[0.x.4827] 
//
// 所以现在我们有了这个分布式向量，它包含了所有单元的细化指标。为了使用它，我们需要获得一个本地副本，然后用它来标记要细化或粗化的单元，并实际进行细化和粗化。重要的是要认识到，[1.x.21]过程对它自己的三角形副本做了这个工作，并且以完全相同的方式进行。
//
[0.x.4828] 
//
[0.x.4829] 
[0.x.4830] 
[0.x.4831] 
[0.x.4832] 
[0.x.4833] 
[0.x.4834] 
//[2.x.601] 
//
// 最后一个有意义的函数是创建图形输出的函数。它的工作方式与[2.x.602]中的相同，但有两个小的区别。在讨论这些之前，让我们说明这个函数的一般工作原理：我们打算让所有的数据都在一个进程中产生，然后写入一个文件中。正如本程序的许多其他部分已经讨论过的那样，这不是一个可以扩展的东西。之前，我们认为我们会在三角计算、DoFHandlers和解决方案向量的副本方面遇到麻烦，每个进程都必须存储所有的数据，而且会出现一个点，即每个进程根本没有足够的内存来存储这么多数据。在这里，情况是不同的：不仅是内存，而且运行时间也是一个问题。如果一个进程负责处理[1.x.22]的数据，而其他所有的进程什么都不做，那么这一个函数最终会在程序的整个运行时间中占主导地位。 特别是，这个函数花费的时间将与问题的整体大小（以单元数或自由度数计算）成正比，与我们扔给它的进程数量无关。
//
// 这种情况需要避免，我们将在[2.x.603]和[2.x.604]中展示如何解决这个问题。对于目前的问题，解决方案是让每个进程只为自己的本地单元产生输出数据，并将它们写入单独的文件，每个进程一个文件。这就是[2.x.605]的操作方式。另外，我们可以简单地把所有的东西放在一组独立的文件中，让可视化软件读取所有的文件（可能也使用多个处理器），并从所有的文件中创建一个单一的可视化；这就是[2.x.606]、[2.x.607]以及后来开发的所有其他并行程序的路径。
//
// 更具体地说，对于当前的函数，所有的进程都调用这个函数，但不是所有的进程都需要做与生成输出相关的工作。事实上，它们不应该这样做，因为我们会试图一次多次地写到同一个文件。所以我们只让第一个进程做这件事，而其他所有的进程在这段时间内闲置（或者为下一次迭代开始工作，或者干脆把它们的CPU让给碰巧在同一时间运行的其他作业）。第二件事是，我们不仅要输出解决方案的向量，还要输出一个向量，表明每个单元属于哪个子域。这将使一些分区域的图片变得很好。
//
// 为了实现这一点，过程0需要一个完整的本地向量中的解决方案组件。就像前面的函数一样，有效的方法是重新使用在[2.x.608]函数中已经创建的向量，但是为了使事情更加自洽，我们在这里简单地从分布式解决方案向量中重新创建一个向量。
//
// 需要认识到的一个重要问题是，我们在所有的进程中都做了这个定位操作，而不是只有那个实际需要数据的进程。然而，这一点是无法避免的，在本教程程序中，我们对向量使用的MPI简化通信模型。MPI没有办法查询另一个进程的数据，双方必须在同一时间启动通信。因此，即使大多数进程不需要本地化的解决方案，我们也必须把将分布式转换为本地化向量的语句放在那里，以便所有进程都执行它。
//
// （这项工作的一部分实际上可以避免。我们所做的是将所有进程的本地部分发送给所有其他进程。我们真正需要做的是在所有进程上发起一个操作，每个进程只需将其本地的数据块发送给进程0，因为只有这个进程才真正需要它，也就是说，我们需要类似于收集操作的东西。PETSc可以做到这一点，但是为了简单起见，我们在这里并不试图利用这一点。我们没有这样做，因为我们所做的事情在整个计划中并不昂贵：它是所有进程之间的一个矢量通信，这必须与我们在求解线性系统、为预处理程序设置块状ILU以及其他操作时必须进行的通信数量相比较。)
//
[0.x.4835] 
[0.x.4836] 
[0.x.4837] 
[0.x.4838] 
//
// 这样做后，零进程继续设置输出文件，如 [2.x.609] ，并将（本地化的）解决方案矢量附加到输出对象上。
//
[0.x.4839] 
[0.x.4840] 
[0.x.4841] 
//
[0.x.4842] 
[0.x.4843] 
//
[0.x.4844] 
[0.x.4845] 
[0.x.4846] 
[0.x.4847] 
[0.x.4848] 
[0.x.4849] 
[0.x.4850] 
[0.x.4851] 
[0.x.4852] 
[0.x.4853] 
[0.x.4854] 
[0.x.4855] 
[0.x.4856] 
[0.x.4857] 
[0.x.4858] 
[0.x.4859] 
[0.x.4860] 
[0.x.4861] 
//
[0.x.4862] 
//
// 我们在这里做的唯一其他事情是，我们也为每个单元格输出一个值，表明它属于哪个子域（即MPI进程）。这需要一些转换工作，因为库提供给我们的数据不是输出类所期望的数据，但这并不困难。首先，设置一个整数向量，每个单元格一个，然后由每个单元格的子域id填充。
//
// 这个向量的元素在第二步中被转换为浮点向量，这个向量被添加到DataOut对象中，然后它去创建VTK格式的输出。
//
[0.x.4863] 
[0.x.4864] 
//
[0.x.4865] 
[0.x.4866] 
//
[0.x.4867] 
//
[0.x.4868] 
[0.x.4869] 
[0.x.4870] 
[0.x.4871] 
//[2.x.610] 
//
// 最后，这里是驱动程序的功能。它与[2.x.611]几乎完全没有变化，只是我们替换了[2.x.612]流。除此以外，唯一的表面变化是我们输出了每个进程有多少个自由度，以及线性求解器花了多少次收敛。
//
[0.x.4872] 
[0.x.4873] 
[0.x.4874] 
[0.x.4875] 
[0.x.4876] 
[0.x.4877] 
//
[0.x.4878] 
[0.x.4879] 
[0.x.4880] 
[0.x.4881] 
[0.x.4882] 
[0.x.4883] 
[0.x.4884] 
//
[0.x.4885] 
[0.x.4886] 
//
[0.x.4887] 
//
[0.x.4888] 
[0.x.4889] 
[0.x.4890] 
[0.x.4891] 
[0.x.4892] 
[0.x.4893] 
[0.x.4894] 
//
[0.x.4895] 
[0.x.4896] 
//
[0.x.4897] 
[0.x.4898] 
//
[0.x.4899] 
[0.x.4900] 
[0.x.4901] 
[0.x.4902] 
//[2.x.613] 
//
// [2.x.614]的工作方式与其他示例程序中的大多数主函数相同，即它将工作委托给管理对象的[2.x.615]函数，并且只将所有内容包装成一些代码来捕获异常。
//
[0.x.4903] 
[0.x.4904] 
[0.x.4905] 
[0.x.4906] 
[0.x.4907] 
[0.x.4908] 
//
// 这里是唯一真正的区别。MPI和PETSc都要求我们在程序开始时初始化这些库，并在结束时解除初始化。MPI_InitFinalize类处理了所有这些。后面的参数`1`意味着我们确实想让每个MPI进程以单线程运行，这是PETSc并行线性代数的前提条件。
//
[0.x.4909] 

[0.x.4910] 
[0.x.4911] 
[0.x.4912] 
[0.x.4913] 
[0.x.4914] 
[0.x.4915] 
[0.x.4916] 
[0.x.4917] 
[0.x.4918] 
[0.x.4919] 
[0.x.4920] 
[0.x.4921] 
[0.x.4922] 
[0.x.4923] 
//
[0.x.4924] 
[0.x.4925] 
[0.x.4926] 
[0.x.4927] 
[0.x.4928] 
[0.x.4929] 
[0.x.4930] 
[0.x.4931] 
[0.x.4932] 
[0.x.4933] 
[0.x.4934] 
[0.x.4935] 
[0.x.4936] 
[0.x.4937] 
//
[0.x.4938] 
[0.x.4939] 
[0.x.4940] 
[0.x.4941] 
[0.x.4942] 
[0.x.4943] 
[0.x.4944] 
[0.x.4945] 
[0.x.4946] 
[0.x.4947] 
[0.x.4948] 
[0.x.4949] 
[0.x.4950] 
[0.x.4951] 
[0.x.4952] 
[0.x.4953] 
//
[0.x.4954] 
[0.x.4955] 
[0.x.4956] 
[0.x.4957] 
//
// 首先是通常的头文件列表，这些文件已经在以前的示例程序中使用过了。
//
[0.x.4958] 
[0.x.4959] 
[0.x.4960] 
[0.x.4961] 
[0.x.4962] 
[0.x.4963] 
[0.x.4964] 
[0.x.4965] 
[0.x.4966] 
[0.x.4967] 
[0.x.4968] 
[0.x.4969] 
[0.x.4970] 
[0.x.4971] 
[0.x.4972] 
[0.x.4973] 
[0.x.4974] 
[0.x.4975] 
[0.x.4976] 
[0.x.4977] 
[0.x.4978] 
[0.x.4979] 
[0.x.4980] 
[0.x.4981] 
[0.x.4982] 
[0.x.4983] 
[0.x.4984] 
[0.x.4985] 
[0.x.4986] 
[0.x.4987] 
[0.x.4988] 
//
// 这里是头文件中仅有的三个新东西：一个包含文件，其中实现了等级为2和4的对称张量，正如介绍中所介绍的那样。
//
[0.x.4989] 
//
// 最后是一个包含一些函数的头文件，这些函数将帮助我们计算域中特定点的局部坐标系的旋转矩阵。
//
[0.x.4990] 
//
// 然后，这又是简单的C++。
//
[0.x.4991] 
[0.x.4992] 
[0.x.4993] 
//
// 最后一步和以前所有的程序一样。
//
[0.x.4994] 
[0.x.4995] 
[0.x.4996] 
//[2.x.616] 
//
// 正如介绍中提到的，我们必须在正交点存储旧的应力，这样我们就可以在下一个时间步骤中计算这一点的残余力。仅仅这一点还不能保证只有一个成员的结构，但在更复杂的应用中，我们还必须在正交点上存储更多的信息，比如塑性的历史变量等。从本质上讲，我们必须在这里存储所有影响材料当前状态的信息，在塑性中，这些信息是由变形历史变量决定的。
//
// 除了能够存储数据之外，我们不会给这个类任何有意义的功能，也就是说，没有构造函数、析构函数或其他成员函数。在这种 "哑巴 "类的情况下，我们通常选择将其声明为 [2.x.617] ，以表明它们更接近于C语言风格的结构而不是C++风格的类。
//
[0.x.4997] 
[0.x.4998] 
[0.x.4999] 
[0.x.5000] 
[0.x.5001] 
//[2.x.618] 
//
// 接下来，我们定义弹性中的应力和应变的线性关系。它由一个等级为4的张量给出，通常被写成 [2.x.619] 的形式。这个张量将等级2的对称张量映射到等级2的对称张量。对于Lam&eacute;常数[2.x.620]和[2.x.621]的给定值，一个实现其创建的函数是直接的。
//
[0.x.5002] 
[0.x.5003] 
[0.x.5004] 
[0.x.5005] 
[0.x.5006] 
[0.x.5007] 
[0.x.5008] 
[0.x.5009] 
[0.x.5010] 
[0.x.5011] 
[0.x.5012] 
[0.x.5013] 
[0.x.5014] 
[0.x.5015] 
//
// 通过这个函数，我们将在下面的主类中定义一个静态成员变量，在整个程序中作为应力-应变张量使用。请注意，在更复杂的程序中，这可能是某个类的成员变量，或者是一个根据其他输入返回应力-应变关系的函数。例如，在损伤理论模型中，Lam&eacute;常数被认为是一个点的先前应力/应变历史的函数。相反，在塑性中，如果材料在某一点达到了屈服应力，那么应力-应变张量的形式就会被修改，而且可能还取决于其先前的历史。
//
// 然而，在本程序中，我们假设材料是完全弹性和线性的，恒定的应力-应变张量对我们目前的目的来说是足够的。
//
// [2.x.622] 
//
// 在程序的其他部分之前，这里有几个我们需要的函数作为工具。这些是在内循环中调用的小函数，所以我们把它们标记为 [2.x.623] 。
//
// 第一个是通过形成这个形状函数的对称梯度来计算形状函数[2.x.624]的对称应变张量。当我们想形成矩阵时，我们需要这样做，比如说。
//
// 我们应该注意到，在以前处理矢量值问题的例子中，我们总是问有限元对象在哪个矢量分量中的形状函数实际上是不为零的，从而避免计算任何我们反正可以证明为零的项。为此，我们使用了[2.x.625]函数来返回形状函数在哪个分量中为零，同时[2.x.626]和[2.x.627]函数只返回形状函数的单个非零分量的值和梯度，如果这是一个矢量值元素。
//
// 这是一个优化，如果不是非常关键的时间，我们可以用一个更简单的技术来解决：只需向[2.x.628]询问一个给定形状函数的给定分量在给定正交点的值或梯度。这就是 [2.x.629] 调用的作用：返回形状函数 [2.x.631] 的第 [2.x.632] 个分量在正交点的全部梯度。如果某个形状函数的某个分量总是为零，那么这将简单地总是返回零。
//
// 如前所述，使用[2.x.633]而不是[2.x.634]和[2.x.635]的组合可能效率较低，但其实现已针对这种情况进行了优化，应该不会有很大的减慢。我们在这里演示这个技术，因为它是如此的简单和直接。
//
[0.x.5016] 
[0.x.5017] 
[0.x.5018] 
[0.x.5019] 
[0.x.5020] 
//
// 声明一个将保存返回值的暂存器。
//
[0.x.5021] 
//
// 首先，填充对角线项，这只是矢量值形状函数的方向[2.x.636]分量的导数。
//
[0.x.5022] 
[0.x.5023] 
//
// 然后填充应变张量的其余部分。注意，由于张量是对称的，我们只需要计算一半（这里：右上角）的非对角线元素，[2.x.637]类的实现确保至少到外面的对称条目也被填充（实际上，这个类当然只存储一份）。在这里，我们选择了张量的右上半部分，但是左下半部分也一样好。
//
[0.x.5024] 
[0.x.5025] 
[0.x.5026] 
[0.x.5027] 
[0.x.5028] 
[0.x.5029] 
//
[0.x.5030] 
[0.x.5031] 
//
// 第二个函数做了非常类似的事情（因此被赋予相同的名字）：从一个矢量值场的梯度计算对称应变张量。如果你已经有了一个解场，[2.x.638]函数允许你在一个正交点上提取解场的每个分量的梯度。它返回的是一个秩-1张量的矢量：解的每个矢量分量有一个秩-1张量（梯度）。由此，我们必须通过转换数据存储格式和对称化来重建（对称的）应变张量。我们用和上面一样的方法来做，也就是说，我们通过首先填充对角线，然后只填充对称张量的一半来避免一些计算（[2.x.639]类确保只写两个对称分量中的一个就足够了）。
//
// 不过在我们这样做之前，我们要确保输入有我们期望的那种结构：即有[2.x.640]个矢量分量，即每个坐标方向有一个位移分量。我们用[2.x.641]宏来测试这一点，如果不符合条件，我们的程序就会被终止。
//
[0.x.5032] 
[0.x.5033] 
[0.x.5034] 
[0.x.5035] 
[0.x.5036] 
//
[0.x.5037] 
[0.x.5038] 
[0.x.5039] 
//
[0.x.5040] 
[0.x.5041] 
[0.x.5042] 
//
[0.x.5043] 
[0.x.5044] 
//
// 最后，下面我们将需要一个函数来计算某一点的位移所引起的旋转矩阵。当然，事实上，单点的位移只有一个方向和一个幅度，诱发旋转的是方向和幅度的变化。实际上，旋转矩阵可以通过位移的梯度来计算，或者更具体地说，通过卷曲来计算。
//
// 确定旋转矩阵的公式有点笨拙，特别是在三维中。对于2D来说，有一个更简单的方法，所以我们把这个函数实现了两次，一次用于2D，一次用于3D，这样我们就可以在两个空间维度上编译和使用这个程序，如果需要的话--毕竟，deal.II是关于独立维度编程和重复使用算法的，在2D的廉价计算中经过测试，在3D的更昂贵的计算中使用。下面是一种情况，我们必须为2D和3D实现不同的算法，但可以用独立于空间维度的方式来编写程序的其余部分。
//
// 所以，不用再多说了，来看看2D的实现。
//
[0.x.5045] 
[0.x.5046] 
//
// 首先，根据梯度计算出速度场的卷曲。注意，我们是在2d中，所以旋转是一个标量。
//
[0.x.5047] 
//
// 由此计算出旋转的角度。
//
[0.x.5048] 
//
// 由此，建立反对称的旋转矩阵。我们希望这个旋转矩阵能够代表本地坐标系相对于全局直角坐标系的旋转，所以我们用一个负的角度来构建它。因此，这个旋转矩阵代表了从本地坐标系移动到全局坐标系所需的旋转。
//
[0.x.5049] 
[0.x.5050] 
//
// 三维的情况就比较复杂了。
//
[0.x.5051] 
[0.x.5052] 
//
// 同样首先计算速度场的卷曲。这一次，它是一个实数向量。
//
[0.x.5053] 
[0.x.5054] 
[0.x.5055] 
//
// 从这个矢量中，利用它的大小，计算出旋转角度的正切值，并由此计算出相对于直角坐标系的实际旋转角度。
//
[0.x.5056] 
[0.x.5057] 
//
// 现在，这里有一个问题：如果旋转角度太小，那就意味着没有旋转发生（例如平移运动）。在这种情况下，旋转矩阵就是身份矩阵。
//
// 我们强调这一点的原因是，在这种情况下，我们有 [2.x.642] 。再往下看，我们在计算旋转轴的时候需要除以这个数字，这样做除法的时候会遇到麻烦。因此，让我们走捷径，如果旋转角度真的很小，就简单地返回同一矩阵。
//
[0.x.5058] 
[0.x.5059] 
[0.x.5060] 
[0.x.5061] 
[0.x.5062] 
[0.x.5063] 
//
// 否则计算真实的旋转矩阵。为此，我们再次依靠一个预定义的函数来计算本地坐标系的旋转矩阵。
//
[0.x.5064] 
[0.x.5065] 
[0.x.5066] 
[0.x.5067] 
//
// [2.x.643] 
//
// 这就是程序的主类。由于命名空间已经表明了我们要解决的问题，让我们用它的作用来称呼它：它引导着程序的流程，也就是说，它是顶层驱动。
//
// 这个类的成员变量基本上和以前一样，即它必须有一个三角形，一个DoF处理程序和相关的对象，如约束条件，描述线性系统的变量等。现在还有很多成员函数，我们将在下面解释。
//
// 然而，该类的外部接口是不变的：它有一个公共的构造函数和析构函数，并且它有一个[2.x.644]函数来启动所有的工作。
//
[0.x.5068] 
[0.x.5069] 
[0.x.5070] 
[0.x.5071] 
[0.x.5072] 
[0.x.5073] 
[0.x.5074] 
//
[0.x.5075] 
//
// 私有接口比 [2.x.645] 中的更加广泛。首先，我们显然需要创建初始网格的函数，设置描述当前网格上的线性系统的变量（即矩阵和向量），然后是实际组装系统的函数，指导每个时间步长中必须解决的问题，一个解决每个时间步长中出现的线性系统的函数（并返回它的迭代次数），最后在正确的网格上输出解向量。
//
[0.x.5076] 
//
[0.x.5077] 
//
[0.x.5078] 
//
[0.x.5079] 
//
[0.x.5080] 
//
[0.x.5081] 
//
// 除了前两个，所有这些函数都在每个时间步中被调用。由于第一个时间步骤有点特殊，我们有单独的函数来描述一个时间步骤中必须发生的事情：一个用于第一个时间步骤，一个用于所有后续时间步骤。
//
[0.x.5082] 
//
[0.x.5083] 
//
// 然后我们需要一大堆函数来做各种事情。第一个是细化初始网格：我们从原始状态的粗网格开始，解决这个问题，然后看一下，并相应地细化网格，然后重新开始同样的过程，再次以原始状态。因此，细化初始网格比在两个连续的时间步骤之间细化网格要简单一些，因为它不涉及将数据从旧的三角测量转移到新的三角测量，特别是存储在每个正交点的历史数据。
//
[0.x.5084] 
//
// 在每个时间步骤结束时，我们要根据这个时间步骤计算的增量位移来移动网格顶点。这就是完成这个任务的函数。
//
[0.x.5085] 
//
// 接下来是两个处理存储在每个正交点的历史变量的函数。第一个函数在第一个时间步长之前被调用，为历史变量设置一个原始状态。它只对属于当前处理器的单元上的正交点起作用。
//
[0.x.5086] 
//
// 第二项是在每个时间段结束时更新历史变量。
//
[0.x.5087] 
//
// 这是新的共享三角法。
//
[0.x.5088] 
//
[0.x.5089] 
//
[0.x.5090] 
//
[0.x.5091] 
//
// 这个程序的一个不同之处在于，我们在类声明中声明了正交公式。原因是在所有其他程序中，如果我们在计算矩阵和右手边时使用不同的正交公式，并没有什么坏处，比如说。然而，在目前的情况下，它确实如此：我们在正交点中存储了信息，所以我们必须确保程序的所有部分都同意它们的位置以及每个单元格上有多少个。因此，让我们首先声明将在整个程序中使用的正交公式...。
//
[0.x.5092] 
//
// ......然后也有一个历史对象的向量，在我们负责的那些单元格上的每个正交点都有一个（也就是说，我们不为其他处理器拥有的单元格上的正交点存储历史数据）。请注意，我们可以像在 [2.x.646] 中那样使用 CellDataStorage 类来代替我们自己存储和管理这些数据。然而，为了演示的目的，在这种情况下，我们手动管理存储。
//
[0.x.5093] 
//
// 这个对象的访问方式是通过每个单元格、面或边持有的[2.x.647]：它是一个[2.x.648]指针，可以被应用程序用来将任意的数据与单元格、面或边联系起来。程序对这些数据的实际操作属于自己的职责范围，库只是为这些指针分配了一些空间，而应用程序可以设置和读取这些对象中的每个指针。
//
// 进一步说：我们需要待解的线性系统的对象，即矩阵、右手边的向量和解向量。由于我们预计要解决大问题，我们使用了与[2.x.649]中相同的类型，即建立在PETSc库之上的分布式%并行矩阵和向量。方便的是，它们也可以在只在一台机器上运行时使用，在这种情况下，这台机器正好是我们的%并行宇宙中唯一的机器。
//
// 然而，与[2.x.650]不同的是，我们不以分布式方式存储解向量--这里是在每个时间步骤中计算的增量位移。也就是说，在计算时它当然必须是一个分布式矢量，但紧接着我们确保每个处理器都有一个完整的副本。原因是我们已经在[2.x.651]中看到，许多函数需要一个完整的副本。虽然得到它并不难，但这需要在网络上进行通信，因此很慢。此外，这些都是重复的相同操作，这当然是不可取的，除非不必总是存储整个向量的收益超过了它。在编写这个程序时，事实证明，我们在很多地方都需要一份完整的解决方案，以至于只在必要时才获得它似乎不值得。相反，我们选择一劳永逸地获得完整的副本，而立即摆脱分散的副本。因此，请注意，[2.x.652]的声明并没有像中间命名空间[2.x.653]所表示的那样，表示一个分布式向量。
//
[0.x.5094] 
//
[0.x.5095] 
//
[0.x.5096] 
//
// 接下来的变量块与问题的时间依赖性有关：它们表示我们要模拟的时间间隔的长度，现在的时间和时间步数，以及现在时间步数的长度。
//
[0.x.5097] 
[0.x.5098] 
[0.x.5099] 
[0.x.5100] 
//
// 然后是几个与%并行处理有关的变量：首先，一个变量表示我们使用的MPI通信器，然后是两个数字，告诉我们有多少个参与的处理器，以及我们在这个世界上的位置。最后，一个流对象，确保只有一个处理器实际产生输出到控制台。这与 [2.x.654] 中的所有内容相同。
//
[0.x.5101] 
//
[0.x.5102] 
//
[0.x.5103] 
//
[0.x.5104] 
//
// 我们正在存储本地拥有的和本地相关的索引。
//
[0.x.5105] 
[0.x.5106] 
//
// 最后，我们有一个静态变量，表示应力和应变之间的线性关系。由于它是一个不依赖任何输入的常量对象（至少在这个程序中不依赖），我们把它作为一个静态变量，并将在我们定义这个类的构造函数的同一个地方初始化它。
//
[0.x.5107] 
[0.x.5108] 
//[2.x.655] 
//
// 在我们进入这个程序的主要功能之前，我们必须定义哪些力将作用在我们想要研究的变形的体上。这些力可以是体力，也可以是边界力。体力通常是由四种基本的物理力类型之一所介导的：重力、强弱相互作用和电磁力。除非人们想考虑亚原子物体（对于这些物体，无论如何准静态变形是不相关的，也是不合适的描述），否则只需要考虑引力和电磁力。为了简单起见，让我们假设我们的身体有一定的质量密度，但要么是非磁性的，不导电的，要么周围没有明显的电磁场。在这种情况下，身体的力只是[2.x.656]是材料密度，[2.x.657]是一个负Z方向的矢量，大小为9.81米/秒^2。 密度和[2.x.658]都是在函数中定义的，我们把7700 kg/m^3作为密度，这是对钢材通常假定的值。
//
// 为了更普遍一点，也为了能够在2d中进行计算，我们意识到体力总是一个返回[2.x.659]维矢量的函数。我们假设重力沿着最后一个，即[2.x.660]个坐标的负方向作用。考虑到以前的例子程序中的类似定义，这个函数的其余实现应该大部分是不言自明的。请注意，身体的力量与位置无关；为了避免编译器对未使用的函数参数发出警告，我们因此注释了[2.x.661]函数的第一个参数的名称。
//
[0.x.5109] 
[0.x.5110] 
[0.x.5111] 
[0.x.5112] 
[0.x.5113] 
//
[0.x.5114] 
[0.x.5115] 
//
[0.x.5116] 
[0.x.5117] 
[0.x.5118] 
[0.x.5119] 
//
[0.x.5120] 
[0.x.5121] 
[0.x.5122] 
[0.x.5123] 
//
[0.x.5124] 
[0.x.5125] 
[0.x.5126] 
[0.x.5127] 
[0.x.5128] 
//
[0.x.5129] 
[0.x.5130] 
//
[0.x.5131] 
[0.x.5132] 
[0.x.5133] 
//
[0.x.5134] 
[0.x.5135] 
[0.x.5136] 
[0.x.5137] 
[0.x.5138] 
[0.x.5139] 
//
[0.x.5140] 
[0.x.5141] 
//
[0.x.5142] 
[0.x.5143] 
[0.x.5144] 
//
// [2.x.662] 
//
// 除了身体的力之外，运动还可以由边界力和强制边界位移引起。后一种情况相当于以这样的方式选择力，使其诱发某种位移。
//
// 对于准静态位移，典型的边界力是对一个体的压力，或者对另一个体的切向摩擦。我们在这里选择了一种更简单的情况：我们规定了边界（部分）的某种运动，或者至少是位移矢量的某些分量。我们用另一个矢量值函数来描述，对于边界上的某一点，返回规定的位移。
//
// 由于我们有一个随时间变化的问题，边界的位移增量等于在时间段内累积的位移。因此，该类必须同时知道当前时间和当前时间步长，然后可以将位移增量近似为当前速度乘以当前时间步长。
//
// 在本程序中，我们选择了一种简单的边界位移形式：我们以恒定的速度向下位移顶部的边界。边界的其余部分要么是固定的（然后用一个[2.x.663]类型的对象来描述），要么是自由的（Neumann类型，在这种情况下不需要做任何特殊的事情）。 利用我们在前面所有的例子程序中获得的知识，描述持续向下运动的类的实现应该是很明显的。
//
[0.x.5145] 
[0.x.5146] 
[0.x.5147] 
[0.x.5148] 
[0.x.5149] 
[0.x.5150] 
//
[0.x.5151] 
[0.x.5152] 
//
[0.x.5153] 
[0.x.5154] 
[0.x.5155] 
//
[0.x.5156] 
[0.x.5157] 
[0.x.5158] 
[0.x.5159] 
[0.x.5160] 
//
[0.x.5161] 
[0.x.5162] 
[0.x.5163] 
[0.x.5164] 
[0.x.5165] 
[0.x.5166] 
[0.x.5167] 
[0.x.5168] 
[0.x.5169] 
//
[0.x.5170] 
[0.x.5171] 
[0.x.5172] 
[0.x.5173] 
[0.x.5174] 
[0.x.5175] 
//
[0.x.5176] 
[0.x.5177] 
[0.x.5178] 
//
[0.x.5179] 
[0.x.5180] 
[0.x.5181] 
[0.x.5182] 
[0.x.5183] 
[0.x.5184] 
//
[0.x.5185] 
[0.x.5186] 
//
[0.x.5187] 
[0.x.5188] 
[0.x.5189] 
//
// [2.x.664] 
//
// 现在是主类的实现。首先，我们初始化应力应变张量，我们将其声明为一个静态常量变量。我们选择了适合于钢铁的Lam&eacute;常数。
//
[0.x.5190] 
[0.x.5191] 
[0.x.5192] 
//
//mu = [2.x.665] 7.617e10)。
//
// [2.x.666] 
//
// 下一步是构造函数和析构函数的定义。这里没有什么惊喜：我们为解的每个[2.x.667]矢量分量选择线性和连续的有限元，以及每个坐标方向上有2个点的高斯正交公式。解构器应该是显而易见的。
//
[0.x.5193] 
[0.x.5194] 
[0.x.5195] 
[0.x.5196] 
[0.x.5197] 
[0.x.5198] 
[0.x.5199] 
[0.x.5200] 
[0.x.5201] 
[0.x.5202] 
[0.x.5203] 
[0.x.5204] 
[0.x.5205] 
[0.x.5206] 
[0.x.5207] 
//
[0.x.5208] 
[0.x.5209] 
[0.x.5210] 
[0.x.5211] 
[0.x.5212] 
//
// 最后一个公共函数是指导所有工作的函数， [2.x.668] 。它初始化了描述我们目前所处时间位置的变量，然后运行第一个时间步骤，再循环所有其他时间步骤。请注意，为了简单起见，我们使用一个固定的时间步长，而一个更复杂的程序当然要以某种更合理的方式自适应地选择它。
//
[0.x.5213] 
[0.x.5214] 
[0.x.5215] 
[0.x.5216] 
//
[0.x.5217] 
[0.x.5218] 
[0.x.5219] 
//[2.x.669] 
//
// 按照上面声明的顺序，下一个函数是创建粗略网格的函数，我们从这里开始。在这个示例程序中，我们想计算一个圆柱体在轴向压缩下的变形。因此第一步是生成一个长度为3，内外半径分别为0.8和1的圆柱体的网格。幸运的是，有一个库函数可以生成这样的网格。
//
// 在第二步中，我们必须在圆柱体的上表面和下表面关联边界条件。我们为边界面选择一个边界指示器0，这些边界面的中点的Z坐标为0（底面），Z=3的指示器为1（顶面）；最后，我们对圆柱体外壳内部的所有面使用边界指示器2，外部使用3。
//
[0.x.5220] 
[0.x.5221] 
[0.x.5222] 
[0.x.5223] 
[0.x.5224] 
[0.x.5225] 
[0.x.5226] 
[0.x.5227] 
[0.x.5228] 
[0.x.5229] 
//
[0.x.5230] 
[0.x.5231] 
[0.x.5232] 
[0.x.5233] 
[0.x.5234] 
[0.x.5235] 
[0.x.5236] 
[0.x.5237] 
[0.x.5238] 
[0.x.5239] 
[0.x.5240] 
//
// 一旦完成了这些，我们就可以对网格进行一次全面的细化。
//
[0.x.5241] 
//
// 作为最后一步，我们需要设置一个干净的数据状态，我们将这些数据存储在目前处理器上处理的所有单元的正交点中。
//
[0.x.5242] 
[0.x.5243] 
//
// [2.x.670] 
//
// 下一个函数是为一个给定的网格设置数据结构。这与[2.x.671]中的方法基本相同：分配自由度，然后对这些自由度进行排序，使每个处理器得到一个连续的块。请注意，每个处理器的细分块是在创建或完善网格的函数中处理的，与之前的例子程序不同（发生这种情况的时间点主要是口味问题；在这里，我们选择在创建网格时进行，因为在[2.x.672]和[2.x.673]函数中，我们想在还没有调用当前函数的时候输出每个处理器上的单元数量）。
//
[0.x.5244] 
[0.x.5245] 
[0.x.5246] 
[0.x.5247] 
[0.x.5248] 
[0.x.5249] 
//
// 下一步是设置由于悬挂节点而产生的约束。这在以前已经处理过很多次了。
//
[0.x.5250] 
[0.x.5251] 
[0.x.5252] 
[0.x.5253] 
//
// 然后我们要设置矩阵。这里我们偏离了 [2.x.674] ，在那里我们简单地使用了PETSc的能力，即只知道矩阵的大小，随后分配那些被写入的非零元素。虽然从正确性的角度来看，这样做很好，但是效率却不高：如果我们不给PETSc提供关于哪些元素被写入的线索，那么当我们第一次设置矩阵中的元素时（即在第一个时间步中），它的速度会慢得令人难以忍受。后来，当元素被分配后，一切都快多了。在我们所做的实验中，如果我们指示PETSc哪些元素将被使用，哪些不被使用，那么第一个时间步骤可以加快近两个数量级。
//
// 要做到这一点，我们首先要生成我们要处理的矩阵的稀疏模式，并确保浓缩的悬挂节点约束在稀疏模式中增加必要的额外条目。
//
[0.x.5254] 
[0.x.5255] 
[0.x.5256] 
[0.x.5257] 
//
//保持约束性道夫 [2.x.675] 假的)。
//
[0.x.5258] 
[0.x.5259] 
[0.x.5260] 
[0.x.5261] 
//
// 注意，我们在这里使用了已经在[2.x.677]中介绍过的[2.x.676]类，而不是我们在所有其他情况下使用的[2.x.678]类。其原因是，为了使后一个类发挥作用，我们必须给每一行的条目数提供一个初始的上限，这项任务传统上是由[2.x.679]完成。然而，这个函数有一个严重的问题：它必须计算每一行中非零项的数量的上限，而这是一个相当复杂的任务，特别是在3D中。实际上，虽然它在2D中相当准确，但在3D中经常得出太大的数字，在这种情况下，[2.x.680]一开始就分配了太多的内存，经常是几百MB。后来当[2.x.681]被调用时，我们意识到我们不需要那么多的内存，但这时已经太晚了：对于大问题，临时分配太多的内存会导致内存不足的情况。
//
// 为了避免这种情况，我们采用了[2.x.682]类，该类速度较慢，但不需要预先估计每行非零条目的数量。因此，它在任何时候都只分配它所需要的内存，而且我们甚至可以为大型的三维问题建立它。
//
// 值得注意的是，由于[2.x.683]的特殊性，我们构建的稀疏模式是全局的，即包括所有的自由度，无论它们是属于我们所在的处理器还是另一个处理器（如果这个程序是通过MPI并行运行的）。这当然不是最好的--它限制了我们可以解决的问题的规模，因为在每个处理器上存储整个稀疏模式（即使只是短时间）的规模并不大。然而，在程序中还有几个地方我们是这样做的，例如，我们总是把全局三角测量和DoF处理对象保留在周围，即使我们只对它们的一部分进行工作。目前，deal.II没有必要的设施来完全分配这些对象（事实上，这项任务在自适应网格中很难实现，因为随着网格的自适应细化，领域的均衡分区往往会变得不均衡）。
//
// 有了这个数据结构，我们就可以进入PETSc稀疏矩阵，告诉它预先分配所有我们以后要写入的条目。
//
[0.x.5262] 
[0.x.5263] 
[0.x.5264] 
[0.x.5265] 
//
// 在这一点上，不再需要对稀疏模式有任何明确的了解，我们可以让[2.x.684]这个变量离开范围，不会有任何问题。
//
// 这个函数的最后一个任务是将右侧向量和求解向量重置为正确的大小；记住，求解向量是一个本地向量，不像右侧向量是一个分布式的%并行向量，因此需要知道MPI通信器，它应该通过这个通信器来传输消息。
//
[0.x.5266] 
[0.x.5267] 
[0.x.5268] 
//
// [2.x.685] 
//
// 同样，组装系统矩阵和右手边的结构与之前许多例子程序中的结构相同。特别是，它主要等同于[2.x.686]，除了不同的右手边，现在只需要考虑到内部应力。此外，通过使用[2.x.687]类，组装矩阵明显变得更加透明：请注意形成2级和4级对称张量的标量积的优雅性。这个实现也更加通用，因为它与我们可能使用或不使用各向同性的弹性张量这一事实无关。
//
// 汇编程序的第一部分和以往一样。
//
[0.x.5269] 
[0.x.5270] 
[0.x.5271] 
[0.x.5272] 
[0.x.5273] 
//
[0.x.5274] 
[0.x.5275] 
[0.x.5276] 
[0.x.5277] 
//
[0.x.5278] 
[0.x.5279] 
//
[0.x.5280] 
[0.x.5281] 
//
[0.x.5282] 
//
[0.x.5283] 
[0.x.5284] 
[0.x.5285] 
//
// 如同在 [2.x.688] 中一样，我们只需要在属于当前处理器的所有单元中进行循环。
//
[0.x.5286] 
[0.x.5287] 
[0.x.5288] 
[0.x.5289] 
[0.x.5290] 
//
[0.x.5291] 
//
// 然后在所有指数i,j和正交点上循环，并从这个单元中组合出系统矩阵的贡献。 注意我们如何从[2.x.689]对象中提取给定正交点的形状函数的对称梯度（应变），以及我们如何优雅地形成三重收缩[2.x.690]；后者需要与[2.x.691]中需要的笨拙计算进行比较，无论是在介绍中还是在程序的相应位置。
//
[0.x.5292] 
[0.x.5293] 
[0.x.5294] 
[0.x.5295] 
[0.x.5296] 
[0.x.5297] 
[0.x.5298] 
//
[0.x.5299] 
[0.x.5300] 
[0.x.5301] 
[0.x.5302] 
[0.x.5303] 
[0.x.5304] 
//
// 然后也要组装本地的右手边贡献。为此，我们需要访问这个正交点的先验应力值。为了得到它，我们使用该单元的用户指针，该指针指向全局数组中与当前单元的第一个正交点相对应的正交点数据，然后添加一个与我们现在考虑的正交点的索引相对应的偏移量。
//
[0.x.5305] 
[0.x.5306] 
//
// 此外，我们还需要这个单元上的正交点的外体力值。
//
[0.x.5307] 
[0.x.5308] 
//
// 然后，我们可以循环计算这个单元上的所有自由度，并计算出对右侧的局部贡献。
//
[0.x.5309] 
[0.x.5310] 
[0.x.5311] 
[0.x.5312] 
//
[0.x.5313] 
[0.x.5314] 
[0.x.5315] 
[0.x.5316] 
//
[0.x.5317] 
[0.x.5318] 
[0.x.5319] 
[0.x.5320] 
[0.x.5321] 
[0.x.5322] 
[0.x.5323] 
//
// 现在我们有了对线性系统的局部贡献，我们需要将其转移到全局对象中。这与 [2.x.692] 中的做法完全相同。
//
[0.x.5324] 
//
[0.x.5325] 
[0.x.5326] 
[0.x.5327] 
[0.x.5328] 
[0.x.5329] 
[0.x.5330] 
//
// 现在压缩矢量和系统矩阵。
//
[0.x.5331] 
[0.x.5332] 
//
// 最后一步是再次修复边界值，就像我们在以前的程序中已经做的那样。一个稍微复杂的问题是，[2.x.693]函数希望有一个与矩阵和右手边兼容的解向量（即这里是一个分布式的%并行向量，而不是我们在这个程序中使用的顺序向量），以便用正确的边界值预设解向量的条目。我们以临时向量的形式提供这样一个兼容向量，然后将其复制到顺序向量中。
//
// 我们通过展示边界值的灵活使用来弥补这种复杂性：按照我们创建三角形的方式，有三个不同的边界指标用来描述领域，分别对应于底面和顶面，以及内/外表面。我们希望施加以下类型的边界条件。内外圆柱体表面没有外力，这一事实对应于自然（诺伊曼型）边界条件，我们不需要做任何事情。在底部，我们希望完全没有运动，对应于圆柱体在边界的这一部分被夹住或粘住。然而，在顶部，我们希望有一个规定的垂直向下的运动来压缩圆柱体；此外，我们只希望限制垂直运动，而不是水平运动--可以把这种情况看作是一块油性良好的板坐在圆柱体的顶部将其向下推：圆柱体的原子被迫向下移动，但它们可以自由地沿着板水平滑动。
//
//描述这种情况的方法如下：对于边界指标为零（底面）的边界，我们使用一个二维的零函数，代表在任何坐标方向都没有运动。对于指标1（顶面）的边界，我们使用[2.x.694]类，但我们为[2.x.695]函数指定一个额外的参数，表示它应该适用于哪些矢量分量；这是一个针对每个矢量分量的bools矢量，由于我们只想限制垂直运动，它只有最后一个分量的设置。
//
[0.x.5333] 
[0.x.5334] 
[0.x.5335] 
[0.x.5336] 
[0.x.5337] 
[0.x.5338] 
[0.x.5339] 
[0.x.5340] 
[0.x.5341] 
[0.x.5342] 
[0.x.5343] 
[0.x.5344] 
//
[0.x.5345] 
[0.x.5346] 
[0.x.5347] 
[0.x.5348] 
[0.x.5349] 
//
// [2.x.696] 
//
// 下一个函数是控制一个时间段内必须发生的所有事情的函数。从函数名称上看，事情的顺序应该是相对不言自明的。
//
[0.x.5350] 
[0.x.5351] 
[0.x.5352] 
[0.x.5353] 
[0.x.5354] 
[0.x.5355] 
//
[0.x.5356] 
//
[0.x.5357] 
[0.x.5358] 
//
[0.x.5359] 
[0.x.5360] 
[0.x.5361] 
[0.x.5362] 
//
// [2.x.697] 
//
// 再次求解线性系统的工作原理与之前基本相同。唯一不同的是，我们只想保留一份完整的本地解向量，而不是从PETSc的求解程序中得到的分布式向量。为此，我们为分布式向量声明一个本地临时变量，并用本地变量的内容对其进行初始化（记得[2.x.698]中调用的[2.x.699]函数预设了该向量中边界节点的值），用它进行求解，并在函数结束时将其再次复制到我们声明为成员变量的完整本地向量中。然后，挂起的节点约束只分布在本地拷贝上，也就是说，在每个处理器上都是独立的。
//
[0.x.5363] 
[0.x.5364] 
[0.x.5365] 
[0.x.5366] 
[0.x.5367] 
[0.x.5368] 
//
[0.x.5369] 
[0.x.5370] 
//
[0.x.5371] 
//
[0.x.5372] 
//
[0.x.5373] 
[0.x.5374] 
[0.x.5375] 
[0.x.5376] 
//
[0.x.5377] 
//
[0.x.5378] 
//
[0.x.5379] 
[0.x.5380] 
//
// [2.x.700] 
//
// 这个函数生成.vtu格式的图形输出，正如介绍中所解释的。每个进程将只对其拥有的单元格进行工作，然后将结果写入自己的文件中。此外，处理器0将写下引用所有.vtu文件的记录文件。
//
// 这个函数的关键部分是给[2.x.701]类提供一种方法，使其只对当前进程拥有的单元格进行工作。
//
[0.x.5381] 
[0.x.5382] 
[0.x.5383] 
[0.x.5384] 
[0.x.5385] 
//然后，
//就像在[2.x.702]中一样，定义求解变量的名称（这里是位移增量）并排队输出求解向量。请注意在下面的开关中，我们如何确保如果空间维度应该不被处理，我们抛出一个异常，说我们还没有实现这种情况（另一个防御性编程的案例）。
//
[0.x.5386] 
[0.x.5387] 
[0.x.5388] 
[0.x.5389] 
[0.x.5390] 
[0.x.5391] 
[0.x.5392] 
[0.x.5393] 
[0.x.5394] 
[0.x.5395] 
[0.x.5396] 
[0.x.5397] 
[0.x.5398] 
[0.x.5399] 
[0.x.5400] 
[0.x.5401] 
[0.x.5402] 
[0.x.5403] 
//
[0.x.5404] 
//
// 接下来的事情是，我们想输出类似于我们在每个单元中存储的应力的平均规范。这看起来很复杂，因为在目前的处理器上，我们只在那些实际属于目前进程的单元格上存储正交点的应力。换句话说，我们似乎无法计算出所有单元的平均应力。然而，请记住，我们源自[2.x.703]的类只迭代那些实际属于当前处理器的单元，也就是说，我们不必为所有其他单元计算任何东西，因为这些信息不会被触及。下面的小循环就是这样做的。我们将整个区块包围在一对大括号中，以确保迭代器变量不会在它们被使用的区块结束后仍然意外地可见。
//
[0.x.5405] 
[0.x.5406] 
//
// 在所有的单元格上循环...
//
[0.x.5407] 
[0.x.5408] 
[0.x.5409] 
//
// 在这些单元上，将所有正交点的应力相加...
//
[0.x.5410] 
[0.x.5411] 
[0.x.5412] 
[0.x.5413] 
[0.x.5414] 
//
// ...然后把平均值的常数写到它们的目的地。
//
[0.x.5415] 
[0.x.5416] 
[0.x.5417] 
//
// 在我们不感兴趣的单元格上，将向量中各自的值设置为一个假值（规范必须是正值，大的负值应该能吸引你的眼球），以确保如果我们的假设有误，即这些元素不会出现在输出文件中，我们会通过观察图形输出发现。
//
[0.x.5418] 
[0.x.5419] 
[0.x.5420] 
//
// 最后把这个向量也附在上面，以便进行输出处理。
//
[0.x.5421] 
//
// 作为最后一个数据，如果这是一个并行作业，让我们也把域划分为与处理器相关的子域。这与[2.x.704]程序中的工作方式完全相同。
//
[0.x.5422] 
[0.x.5423] 
[0.x.5424] 
[0.x.5425] 
[0.x.5426] 
[0.x.5427] 
//
// 最后，有了这些数据，我们可以指示deal.II对信息进行整合，并产生一些中间数据结构，其中包含所有这些解决方案和其他数据向量。
//
[0.x.5428] 
//
// 让我们调用一个函数，打开必要的输出文件，将我们生成的数据写入其中。该函数根据给定的目录名（第一个参数）和文件名基数（第二个参数）自动构建文件名。它通过由时间步数和 "片数 "产生的片断来增加所产生的字符串，"片数 "对应于整个域的一部分，可以由一个或多个子域组成。
//
// 该函数还为Paraview写了一个记录文件（后缀为`.pvd`），描述了所有这些输出文件如何组合成这个单一时间步骤的数据。
//
[0.x.5429] 
[0.x.5430] 
//
// 记录文件必须只写一次，而不是由每个处理器来写，所以我们在0号处理器上做这个。
//
[0.x.5431] 
[0.x.5432] 
//
// 最后，我们写入paraview记录，它引用了所有.pvtu文件和它们各自的时间。注意，变量times_and_names被声明为静态的，所以它将保留前几个时间段的条目。
//
[0.x.5433] 
[0.x.5434] 
[0.x.5435] 
[0.x.5436] 
[0.x.5437] 
[0.x.5438] 
[0.x.5439] 
//
// [2.x.705] 
//
// 这个函数和下一个函数分别处理第一个和下一个时间步骤的整体结构。第一个时间步骤的工作量稍大，因为我们要在连续细化的网格上多次计算，每次都从一个干净的状态开始。在这些计算的最后，我们每次都计算增量位移，我们使用最后得到的增量位移的结果来计算产生的应力更新并相应地移动网格。在这个新的网格上，我们再输出解决方案和任何我们认为重要的附加数据。
//
// 所有这些都会穿插着产生输出到控制台，以更新屏幕上的人正在发生的事情。如同在[2.x.706]中一样，使用[2.x.707]可以确保只有一个并行进程实际在向控制台写数据，而不需要在每个产生输出的地方明确地编码一个if语句。
//
[0.x.5440] 
[0.x.5441] 
[0.x.5442] 
[0.x.5443] 
[0.x.5444] 
[0.x.5445] 
[0.x.5446] 
//
[0.x.5447] 
[0.x.5448] 
[0.x.5449] 
//
[0.x.5450] 
[0.x.5451] 
[0.x.5452] 
[0.x.5453] 
//
[0.x.5454] 
[0.x.5455] 
[0.x.5456] 
[0.x.5457] 
[0.x.5458] 
[0.x.5459] 
[0.x.5460] 
//
[0.x.5461] 
//
[0.x.5462] 
[0.x.5463] 
[0.x.5464] 
[0.x.5465] 
[0.x.5466] 
[0.x.5467] 
[0.x.5468] 
//
[0.x.5469] 
[0.x.5470] 
//
[0.x.5471] 
[0.x.5472] 
//
[0.x.5473] 
[0.x.5474] 
//
// [2.x.708] 
//
// 后续的时间步骤比较简单，鉴于上面对前一个函数的解释，可能不需要更多的文件。
//
[0.x.5475] 
[0.x.5476] 
[0.x.5477] 
[0.x.5478] 
[0.x.5479] 
[0.x.5480] 
[0.x.5481] 
[0.x.5482] 
[0.x.5483] 
[0.x.5484] 
[0.x.5485] 
[0.x.5486] 
//
[0.x.5487] 
//
[0.x.5488] 
[0.x.5489] 
//
[0.x.5490] 
[0.x.5491] 
//[2.x.709] 
//
// 当在连续细化的网格上求解第一个时间步骤时，调用以下函数。每次迭代后，它都会计算一个细化准则，细化网格，并将每个正交点的历史变量再次设置为干净状态。
//
[0.x.5492] 
[0.x.5493] 
[0.x.5494] 
//
// 首先，让每个进程计算其拥有的单元格的误差指标。
//
[0.x.5495] 
[0.x.5496] 
[0.x.5497] 
[0.x.5498] 
[0.x.5499] 
[0.x.5500] 
[0.x.5501] 
[0.x.5502] 
[0.x.5503] 
[0.x.5504] 
[0.x.5505] 
//
// 然后建立一个全局向量，我们将来自每个%并行进程的局部指标合并到其中。
//
[0.x.5506] 
[0.x.5507] 
//
[0.x.5508] 
[0.x.5509] 
//
[0.x.5510] 
[0.x.5511] 
[0.x.5512] 
[0.x.5513] 
//
// 一旦我们有了这个，就把它复制回所有处理器上的本地副本，并相应地完善网格。
//
[0.x.5514] 
[0.x.5515] 
[0.x.5516] 
[0.x.5517] 
[0.x.5518] 
[0.x.5519] 
//
// 最后，在新的网格上再次设置正交点数据，并且只在那些我们已经确定是我们的单元上设置。
//
[0.x.5520] 
[0.x.5521] 
//
// [2.x.710] 
//
// 在每个时间步骤结束时，我们根据这个时间步骤计算的增量位移来移动网格的节点。为了做到这一点，我们保留一个标志的向量，为每个顶点指示我们是否已经移动过它，然后在所有单元中循环，移动那些尚未移动的单元顶点。值得注意的是，我们从某个顶点相邻的单元中移动这个顶点并不重要：因为我们使用连续有限元计算位移，位移场也是连续的，我们可以从每个相邻的单元中计算某个顶点的位移。我们只需要确保每个节点都精确地移动一次，这就是为什么我们要保留标志的矢量。
//
// 在这个函数中，有两个值得注意的地方。首先，我们如何使用[2.x.711]函数获得给定顶点的位移场，该函数返回给定单元的[2.x.712]的索引。在本例中，k-th坐标方向的位移对应于有限元的k-th分量。使用这样的函数有一定的风险，因为它使用了我们在[2.x.713]元素中为这个程序共同采取的元素顺序的知识。如果我们决定增加一个额外的变量，例如用于稳定的压力变量，并碰巧将其作为元素的第一个变量插入，那么下面的计算将开始产生无意义的结果。此外，这种计算还依赖于其他假设：首先，我们使用的元素确实有与顶点相关的自由度。对于目前的Q1元素来说确实如此，对于所有多项式阶的Qp元素来说也是如此 [2.x.714] 。然而，这对不连续的元素或混合公式的元素来说是不成立的。其次，它还建立在这样的假设上：一个顶点的位移只由与这个顶点相关的自由度的值决定；换句话说，所有对应于其他自由度的形状函数在这个特定的顶点是零。同样，对于目前的元素来说是这样的，但对于目前在deal.II中的所有元素来说并非如此。尽管有风险，我们还是选择使用这种方式，以便提出一种查询与顶点相关的单个自由度的方法。
//
// 在这种情况下，指出一种更普遍的方法是很有意义的。对于一般的有限元来说，应该采用正交公式，将正交点放在单元的顶点上。梯形规则的[2.x.715]公式正是这样做的。有了这个正交公式，我们就可以在每个单元格中初始化一个[2.x.716]对象，并使用[2.x.717]函数来获得正交点，即单元格顶点的解函数值。这些是我们真正需要的唯一数值，也就是说，我们对与这个特定正交公式相关的权重（或[2.x.718]值）完全不感兴趣，这可以作为[2.x.719]构造器的最后一个参数来指定。这个方案中唯一的一点小麻烦是，我们必须弄清楚哪个正交点对应于我们目前考虑的顶点，因为它们可能是以相同的顺序排列，也可能不是。
//
// 如果有限元在顶点上有支持点（这里的支持点是有的；关于支持点的概念，见[2.x.720]"支持点"），这种不便就可以避免了。对于这种情况，我们可以使用[2.x.721]构建一个自定义的正交规则，然后第一个[2.x.722]正交点将对应于单元格的顶点，其顺序与[2.x.723]一致，同时考虑到矢量元素的支持点将被重复[2.x.724]次。
//
// 关于这个短函数值得解释的另一点是三角形类输出其顶点信息的方式：通过[2.x.725]函数，它公布了三角形中有多少个顶点。并非所有的顶点都是一直在使用的--有些是之前被粗化的单元的遗留物，自从deal.II以来一直存在，一旦一个顶点出现，即使数量较少的顶点消失了，也不会改变它的编号。其次，[2.x.726]返回的位置不仅是一个类型为[2.x.727]的只读对象，而且事实上是一个可以写入的引用。这允许相对容易地移动网格的节点，但值得指出的是，使用该功能的应用程序有责任确保所得到的单元仍然有用，即没有扭曲到单元退化的程度（例如，用负的雅各布系数表示）。请注意，我们在这个函数中没有任何规定来实际保证这一点，我们只是有信心。
//
// 在这个冗长的介绍之后，下面是全部20行左右的代码。
//
[0.x.5522] 
[0.x.5523] 
[0.x.5524] 
[0.x.5525] 
//
[0.x.5526] 
[0.x.5527] 
[0.x.5528] 
[0.x.5529] 
[0.x.5530] 
[0.x.5531] 
//
[0.x.5532] 
[0.x.5533] 
[0.x.5534] 
[0.x.5535] 
//
[0.x.5536] 
[0.x.5537] 
[0.x.5538] 
//[2.x.728] 
//
// 在计算的开始，我们需要设置历史变量的初始值，例如材料中的现有应力，我们将其存储在每个正交点中。如上所述，我们使用每个单元中都有的[2.x.729]来做这个。
//
// 为了从更大的角度看这个问题，我们注意到，如果我们的模型中有先前可用的应力（为了这个程序的目的，我们假定这些应力不存在），那么我们就需要将先前存在的应力场插值到正交点上。同样，如果我们要模拟具有硬化/软化的弹塑性材料，那么我们就必须在每个正交点存储额外的历史变量，如累积塑性应变的当前屈服应力。预先存在的硬化或弱化也将通过在当前函数中插值这些变量来实现。
//
[0.x.5539] 
[0.x.5540] 
[0.x.5541] 
//
// 为了慎重起见，我们把所有单元格的用户指针，不管是不是我们的，都设置为空指针。这样，如果我们访问了不应该访问的单元格的用户指针，一个分段故障将让我们知道这不应该发生。
//
[0.x.5542] 
//
// 接下来，分配属于这个处理器职责范围内的正交对象。当然，这等于属于这个处理器的单元格的数量乘以我们的正交公式在每个单元格上的正交点的数量。由于`resize()`函数在要求的新大小小于旧大小的情况下，实际上并没有缩小分配的内存量，所以我们采用了一个技巧，首先释放所有的内存，然后再重新分配：我们声明一个空向量作为临时变量，然后交换旧向量和这个临时变量的内容。这就确保了`正交点历史'现在确实是空的，我们可以让现在保存着以前的向量内容的临时变量超出范围并被销毁。在下一步中，我们可以根据需要重新分配尽可能多的元素，矢量默认初始化`PointHistory`对象，这包括将压力变量设置为零。
//
[0.x.5543] 
[0.x.5544] 
[0.x.5545] 
[0.x.5546] 
[0.x.5547] 
[0.x.5548] 
//
// 最后再次循环所有单元，并将属于本处理器的单元的用户指针设置为指向此类对象的向量中与本单元对应的第一个正交点对象。
//
[0.x.5549] 
[0.x.5550] 
[0.x.5551] 
[0.x.5552] 
[0.x.5553] 
[0.x.5554] 
[0.x.5555] 
//
// 最后，为了慎重起见，确保我们对元素的计数是正确的，而且我们已经用完了之前分配的所有对象，并且没有指向任何超出向量末端的对象。这样的防御性编程策略总是很好的检查，以避免意外的错误，并防止将来对这个函数的修改忘记同时更新一个变量的所有用途。回顾一下，使用[2.x.730]宏的构造在优化模式下被优化掉了，所以不影响优化运行的运行时间。
//
[0.x.5556] 
[0.x.5557] 
[0.x.5558] 
//
// [2.x.731] 
//
// 在每个时间步骤结束时，我们应该计算出一个增量的位移更新，使材料在其新的配置中能够容纳这个时间步骤中施加的外部体和边界力减去通过预先存在的内部应力施加的力之间的差异。为了在下一个时间步骤中获得预先存在的应力，我们必须用本时间步骤中计算的增量位移引起的应力来更新预先存在的应力。理想情况下，所产生的内应力之和将完全抵消所有的外力。事实上，一个简单的实验可以确保这一点：如果我们选择边界条件和体力与时间无关，那么强迫项（外力和内应力之和）应该正好是零。如果你做了这个实验，你会从每个时间步长的右手边的规范输出中意识到这几乎是事实：它并不完全是零，因为在第一个时间步长中，增量位移和应力的更新是相对于未变形的网格计算的，然后再进行变形。在第二个时间步骤中，我们再次计算位移和应力的更新，但这次是在变形的网格中 -- 在那里，结果的更新非常小但不完全是零。这可以迭代，在每一次迭代中，残差，即右手边向量的法线，都会减少；如果做这个小实验，就会发现这个残差的法线会随着迭代次数的增加而呈指数下降，在最初的快速下降之后，每次迭代大约会减少3.5倍（对于我看的一个测试案例，其他测试案例和其他未知数都会改变这个系数，但不会改变指数下降的情况）。
//
// 在某种意义上，这可以被认为是一个准时序方案，以解决在一个以拉格朗日方式移动的网格上解决大变形弹性的非线性问题。
//
// 另一个复杂的问题是，现有的（旧的）应力是在旧的网格上定义的，我们将在更新应力后移动这个网格。如果这个网格的更新涉及到单元的旋转，那么我们也需要对更新的应力进行旋转，因为它是相对于旧单元的坐标系计算的。
//
// 因此，我们需要的是：在当前处理器拥有的每个单元上，我们需要从每个正交点存储的数据中提取旧的应力，计算应力更新，将两者相加，然后将结果与从当前正交点的增量位移计算出来的增量旋转一起旋转。下面我们将详细介绍这些步骤。
//
[0.x.5559] 
[0.x.5560] 
[0.x.5561] 
//
// 首先，建立一个[2.x.732]对象，我们将通过它来评估正交点的增量位移及其梯度，还有一个保存这些信息的向量。
//
[0.x.5562] 
[0.x.5563] 
[0.x.5564] 
//
[0.x.5565] 
[0.x.5566] 
//
// 然后在所有单元格上循环，在属于我们子域的单元格中进行工作。
//
[0.x.5567] 
[0.x.5568] 
[0.x.5569] 
//
// 接下来，获得一个指向当前单元本地正交点历史数据的指针，作为防御措施，确保这个指针在全局数组的范围内。
//
[0.x.5570] 
[0.x.5571] 
[0.x.5572] 
[0.x.5573] 
[0.x.5574] 
[0.x.5575] 
[0.x.5576] 
[0.x.5577] 
//
// 然后在本单元上初始化[2.x.733]对象，并提取正交点上的位移梯度，以便以后计算应变。
//
[0.x.5578] 
[0.x.5579] 
[0.x.5580] 
//
// 然后在这个单元的正交点上循环。
//
[0.x.5581] 
[0.x.5582] 
//
// 在每个正交点上，从梯度中计算出应变增量，并将其乘以应力-应变张量，得到应力更新。然后将此更新添加到该点已有的应变中。
//
[0.x.5583] 
[0.x.5584] 
[0.x.5585] 
[0.x.5586] 
//
// 最后，我们要对结果进行旋转。为此，我们首先要从增量位移中计算出目前正交点的旋转矩阵。事实上，它可以从梯度中计算出来，而且我们已经有一个函数用于这个目的。
//
[0.x.5587] 
[0.x.5588] 
//
// 注意这个结果，即旋转矩阵，一般来说是一个等级为2的反对称张量，所以我们必须把它作为一个完整的张量来存储。
//
// 有了这个旋转矩阵，在我们将对称张量[2.x.734]扩展为全张量之后，我们可以通过从左和右的收缩来计算旋转的张量。
//
[0.x.5589] 
[0.x.5590] 
[0.x.5591] 
//
// 注意，虽然这三个矩阵的乘法结果应该是对称的，但由于浮点舍入的原因，它并不是对称的：我们得到的结果的非对角线元素有1e-16的不对称性。当把结果赋给一个[2.x.735]时，该类的构造函数会检查对称性并意识到它不是完全对称的；然后它会引发一个异常。为了避免这种情况，我们明确地对结果进行对称，使其完全对称。
//
// 所有这些操作的结果会被写回到原来的地方。
//
[0.x.5592] 
[0.x.5593] 
[0.x.5594] 
[0.x.5595] 
[0.x.5596] 
//
// 这就结束了项目特定的命名空间 [2.x.736] 。其余的和往常一样，并且在 [2.x.737] 中已经显示：一个 [2.x.738] 函数初始化和终止 PETSc，调用做实际工作的类，并确保我们捕捉所有传播到这一点的异常。
//
[0.x.5597] 
//
[0.x.5598] 
[0.x.5599] 
[0.x.5600] 
[0.x.5601] 
[0.x.5602] 
[0.x.5603] 
//
[0.x.5604] 
//
[0.x.5605] 
[0.x.5606] 
[0.x.5607] 
[0.x.5608] 
[0.x.5609] 
[0.x.5610] 
[0.x.5611] 
[0.x.5612] 
[0.x.5613] 
[0.x.5614] 
[0.x.5615] 
[0.x.5616] 
[0.x.5617] 
[0.x.5618] 
//
[0.x.5619] 
[0.x.5620] 
[0.x.5621] 
[0.x.5622] 
[0.x.5623] 
[0.x.5624] 
[0.x.5625] 
[0.x.5626] 
[0.x.5627] 
[0.x.5628] 
[0.x.5629] 
[0.x.5630] 
[0.x.5631] 
[0.x.5632] 
//
[0.x.5633] 
[0.x.5634] 
[0.x.5635] 
[0.x.5636] 
[0.x.5637] 
[0.x.5638] 
[0.x.5639] 
[0.x.5640] 
[0.x.5641] 
[0.x.5642] 
[0.x.5643] 
[0.x.5644] 
[0.x.5645] 
[0.x.5646] 
[0.x.5647] 
[0.x.5648] 
//
[0.x.5649] 
[0.x.5650] 
[0.x.5651] 
//[2.x.739] 
//
// 本程序中使用的大部分include文件都是[2.x.740]和类似程序中众所周知的。
//
[0.x.5652] 
//
[0.x.5653] 
[0.x.5654] 
[0.x.5655] 
[0.x.5656] 
[0.x.5657] 
[0.x.5658] 
[0.x.5659] 
//
[0.x.5660] 
[0.x.5661] 
//
[0.x.5662] 
[0.x.5663] 
[0.x.5664] 
[0.x.5665] 
//
[0.x.5666] 
[0.x.5667] 
//
[0.x.5668] 
[0.x.5669] 
[0.x.5670] 
//
// 新的只有以下三个。第一个声明了DiscreteTime类，它帮助我们在时间相关的模拟中跟踪时间。后面两个提供了所有的粒子功能，即记录位于网格上的粒子的方法（[2.x.741]类）和为可视化目的输出这些粒子的位置及其属性的能力（[2.x.742] 类）。
//
[0.x.5671] 
[0.x.5672] 
[0.x.5673] 
//
[0.x.5674] 
//
[0.x.5675] 
//[2.x.743] 
//
// 按照惯例，我们把所有与程序细节相对应的东西都放到一个自己的命名空间中。在顶部，我们定义了一些常量，我们宁愿使用符号名称而不是硬编码的数字。
//
// 具体来说，我们为几何学的各个部分定义了[2.x.744]"边界指标 "的数字，以及电子的物理属性和我们在这里使用的其他具体设置。
//
// 对于边界指标，让我们从某个随机值101开始列举。这里的原则是要使用*不常见的数字。如果之前有`GridGenerator'函数设置的预定义边界指标，它们很可能是从0开始的小整数，但不是在这个相当随机的范围内。使用下面这样的数字可以避免冲突的可能性，同时也减少了在程序中直接拼出这些数字的诱惑（因为你可能永远不会记得哪个是哪个，而如果它们从0开始，你可能会受到诱惑）。
//
[0.x.5676] 
[0.x.5677] 
[0.x.5678] 
[0.x.5679] 
[0.x.5680] 
[0.x.5681] 
[0.x.5682] 
[0.x.5683] 
[0.x.5684] 
//
[0.x.5685] 
[0.x.5686] 
[0.x.5687] 
[0.x.5688] 
//
[0.x.5689] 
//
[0.x.5690] 
//
[0.x.5691] 
[0.x.5692] 
//[2.x.745] 
//
// 然后，下面是这个程序的主类。从根本上说，它的结构与[2.x.746]和其他许多教程程序相同。这包括大部分的成员函数（其余部分的目的可能从它们的名字中不难看出），以及超出[2.x.747]的少量成员变量，所有这些都与处理粒子有关。
//
[0.x.5693] 
[0.x.5694] 
[0.x.5695] 
[0.x.5696] 
[0.x.5697] 
//
[0.x.5698] 
//
[0.x.5699] 
[0.x.5700] 
[0.x.5701] 
[0.x.5702] 
[0.x.5703] 
[0.x.5704] 
//
[0.x.5705] 
[0.x.5706] 
[0.x.5707] 
[0.x.5708] 
[0.x.5709] 
//
[0.x.5710] 
[0.x.5711] 
//
[0.x.5712] 
[0.x.5713] 
[0.x.5714] 
[0.x.5715] 
[0.x.5716] 
//
[0.x.5717] 
[0.x.5718] 
//
[0.x.5719] 
[0.x.5720] 
//
[0.x.5721] 
[0.x.5722] 
[0.x.5723] 
[0.x.5724] 
[0.x.5725] 
//
[0.x.5726] 
[0.x.5727] 
//
// [2.x.748] 
//[2.x.749] 
//
// 那么，让我们开始执行。构造函数所做的实际上只是对顶部的所有成员变量进行简单的初始化。唯一值得一提的是`particle_handler'，它被交给了一个指向粒子所在的三角形的引用（目前当然还是空的，但是粒子处理程序存储了这个引用，一旦粒子被添加，就会使用它--这发生在三角形被构建之后）。它得到的另一个信息是每个粒子需要存储多少 "属性"。在这里，我们需要每个粒子记住的是它当前的速度，也就是一个带有`dim`分量的矢量。然而，每个粒子还有其他的内在属性，[2.x.750]类会自动并始终确保这些属性是可用的；特别是，这些属性是粒子的当前位置、它所在的单元格、它在该单元格中的参考位置，以及粒子的ID。
//
// 唯一感兴趣的其他变量是 "时间"，一个DiscreteTime类型的对象。它记录了我们在一个随时间变化的模拟中的当前时间，并以开始时间（零）和结束时间（[2.x.751]）初始化。我们以后将在`update_timestep_size()`中设置时间步长。
//
// 构造函数的主体由我们在介绍中已经讨论过的一段代码组成。也就是说，我们要确保每次有粒子离开域时，`track_lost_particle()`函数都会被`particle_handler`对象调用。
//
[0.x.5728] 
[0.x.5729] 
[0.x.5730] 
[0.x.5731] 
[0.x.5732] 
[0.x.5733] 
[0.x.5734] 
[0.x.5735] 
[0.x.5736] 
[0.x.5737] 
[0.x.5738] 
[0.x.5739] 
[0.x.5740] 
[0.x.5741] 
[0.x.5742] 
[0.x.5743] 
[0.x.5744] 
[0.x.5745] 
//
// [2.x.752] 
//
// 下一个函数是负责生成我们要解决的网格。回顾一下域的样子。   [2.x.753] 我们把这个几何体细分为[2.x.754]个单元的网格，看起来像这样。[1.x.23] 这样做的方法是首先定义[2.x.755]顶点的位置--在这里，我们说它们在整数点上，左边的中间点向右移动了`delta=0.5`的值。
//
// 在下文中，我们必须说明哪些顶点共同组成了8个单元。下面的代码就完全等同于我们在[2.x.756]中的做法。
//
[0.x.5746] 
[0.x.5747] 
[0.x.5748] 
[0.x.5749] 
[0.x.5750] 
//
[0.x.5751] 
[0.x.5752] 
[0.x.5753] 
//
[0.x.5754] 
[0.x.5755] 
[0.x.5756] 
[0.x.5757] 
[0.x.5758] 
[0.x.5759] 
[0.x.5760] 
[0.x.5761] 
[0.x.5762] 
[0.x.5763] 
[0.x.5764] 
[0.x.5765] 
[0.x.5766] 
[0.x.5767] 
[0.x.5768] 
[0.x.5769] 
[0.x.5770] 
//
[0.x.5771] 
[0.x.5772] 
[0.x.5773] 
[0.x.5774] 
[0.x.5775] 
//
[0.x.5776] 
[0.x.5777] 
[0.x.5778] 
[0.x.5779] 
//
// 有了这些数组，我们可以转向稍高的高层数据结构。我们创建一个CellData对象的向量，为每个要创建的单元存储相关的顶点以及[2.x.757]"材料ID"（我们在这里将其简单地设置为0，因为我们在程序中不使用它）。
//
// 然后，这些信息将被传递给[2.x.758]函数，并对网格进行两次全局细化。
//
[0.x.5780] 
[0.x.5781] 
[0.x.5782] 
[0.x.5783] 
[0.x.5784] 
[0.x.5785] 
//
[0.x.5786] 
[0.x.5787] 
[0.x.5788] 
[0.x.5789] 
//
[0.x.5790] 
//
// 该函数的其余部分循环所有的单元格和它们的面，如果一个面在边界上，则决定哪个边界指标应该应用于它。如果你将代码与上面的几何图形相比较，各种条件应该是有意义的。
//
// 一旦完成了这一步，我们再全局地细化一下网格。
//
[0.x.5791] 
[0.x.5792] 
[0.x.5793] 
[0.x.5794] 
[0.x.5795] 
[0.x.5796] 
[0.x.5797] 
[0.x.5798] 
[0.x.5799] 
[0.x.5800] 
[0.x.5801] 
[0.x.5802] 
[0.x.5803] 
[0.x.5804] 
[0.x.5805] 
//
[0.x.5806] 
[0.x.5807] 
//[2.x.759] 
//
// 本程序中的下一个函数是处理与解决偏微分方程有关的各种对象的设置。它本质上是对[2.x.760]中相应函数的复制，不需要进一步讨论。
//
[0.x.5808] 
[0.x.5809] 
[0.x.5810] 
[0.x.5811] 
//
[0.x.5812] 
[0.x.5813] 
//
 
[0.x.5815] 
//
[0.x.5816] 
[0.x.5817] 
[0.x.5818] 
[0.x.5819] 
[0.x.5820] 
[0.x.5821] 
[0.x.5822] 
[0.x.5823] 
[0.x.5824] 
[0.x.5825] 
[0.x.5826] 
[0.x.5827] 
[0.x.5828] 
[0.x.5829] 
[0.x.5830] 
[0.x.5831] 
//
[0.x.5832] 
[0.x.5833] 
[0.x.5834] 
[0.x.5835] 
//
//keep_constrained_dofs = [2.x.761] false）。)
//
[0.x.5836] 

[0.x.5837] 
[0.x.5838] 
//[2.x.762] 
//
// 计算矩阵项的函数实质上还是复制了 [2.x.763] 中的相应函数。
//
[0.x.5839] 
[0.x.5840] 
[0.x.5841] 
[0.x.5842] 
[0.x.5843] 
//
[0.x.5844] 
//
[0.x.5845] 
[0.x.5846] 
[0.x.5847] 
[0.x.5848] 
//
[0.x.5849] 
//
[0.x.5850] 
[0.x.5851] 
//
[0.x.5852] 
//
[0.x.5853] 
[0.x.5854] 
[0.x.5855] 
[0.x.5856] 
//
[0.x.5857] 
//
[0.x.5858] 
[0.x.5859] 
[0.x.5860] 
[0.x.5861] 
[0.x.5862] 
[0.x.5863] 
[0.x.5864] 
[0.x.5865] 
[0.x.5866] 
//
// 这个函数唯一有趣的部分是它是如何形成线性系统的右手边的。回顾一下，PDE的右边是[1.x.24]，在这里我们用[2.x.764]来索引粒子，以避免与形状函数[2.x.765]混淆；[2.x.766]是第[2.x.767]个粒子的位置。
//
// 当与测试函数[2.x.768]相乘并在域上积分时，会得到一个右手边的向量[1.x.25] 注意最后一行不再包含一个积分，因此也没有出现[2.x.769]，这需要在我们的代码中出现`JxW`符号。
//
// 对于一个给定的单元[2.x.770]，这个单元对右边的贡献是[1.x.26]，也就是说，我们只需要担心那些实际位于当前单元[2.x.771]上的粒子。
//
// 在实践中，我们在这里所做的是以下几点。如果当前单元格上有任何粒子，那么我们首先获得一个迭代器范围，指向该单元格的第一个粒子以及该单元格上最后一个粒子之后的粒子（或结束迭代器）--即C++函数中常见的半开放范围。现在知道了粒子的列表，我们查询它们的参考位置（相对于参考单元），评估这些参考位置的形状函数，并根据上面的公式计算力（没有任何 [2.x.772] ）。
//[2.x.773] 值得指出的是，调用[2.x.774]和[2.x.775]函数在有大量粒子的问题上不是很有效。但是它说明了写这个算法的最简单的方法，所以我们愿意为了说明问题而暂时承担这个代价。  我们在下面的[1.x.27]中更详细地讨论了这个问题，并在[2.x.776]中使用了一个更好的方法，例如：。
//
[0.x.5867] 
[0.x.5868] 
[0.x.5869] 
[0.x.5870] 
[0.x.5871] 
[0.x.5872] 
[0.x.5873] 
[0.x.5874] 
[0.x.5875] 
[0.x.5876] 
[0.x.5877] 
//
// 最后，我们可以把这个单元格的贡献复制到全局矩阵和右边的向量中。
//
[0.x.5878] 
[0.x.5879] 
[0.x.5880] 
[0.x.5881] 
[0.x.5882] 
//[2.x.777] 
//
// 解决线性系统的函数又与[2.x.778]中的完全一样。
//
[0.x.5883] 
[0.x.5884] 
[0.x.5885] 
[0.x.5886] 
[0.x.5887] 
//
[0.x.5888] 
[0.x.5889] 
//
[0.x.5890] 
//
[0.x.5891] 
[0.x.5892] 
//[2.x.779] 
//
// 最后一个与场相关的函数是细化网格的函数。我们将在第一个时间步骤中多次调用它，以获得一个能很好地适应解的结构的网格，特别是解决解中由于重心角和边界条件类型变化的地方而产生的各种奇异现象。你可能想再参考一下[2.x.780]以了解更多的细节。
//
[0.x.5893] 
[0.x.5894] 
[0.x.5895] 
[0.x.5896] 
//
[0.x.5897] 
[0.x.5898] 
[0.x.5899] 
[0.x.5900] 
[0.x.5901] 
//
[0.x.5902] 
[0.x.5903] 
[0.x.5904] 
[0.x.5905] 
//
[0.x.5906] 
[0.x.5907] 
//[2.x.781] 
//
// 现在让我们来看看处理粒子的函数。第一个是关于粒子的创建。正如介绍中提到的，如果电场[2.x.782]超过某个阈值，即如果[2.x.783]，并且如果电场进一步指向域内（即如果[2.x.784]），我们希望在阴极的各点创建一个粒子。正如有限元方法中常见的那样，我们在特定的评估点评估场（及其导数）；通常，这些是 "正交点"，因此我们创建了一个 "正交公式"，我们将用它来指定我们要评估解决方案的点。在这里，我们将简单地采用QMidpoint，意味着我们将只在面的中点检查阈值条件。然后我们用它来初始化一个FEFaceValues类型的对象来评估这些点的解。
//
// 然后，所有这些将被用于所有单元格、它们的面，特别是那些位于边界的面，而且是边界的阴极部分的循环中。
//
[0.x.5908] 
[0.x.5909] 
[0.x.5910] 
[0.x.5911] 
[0.x.5912] 
[0.x.5913] 
[0.x.5914] 
[0.x.5915] 
//
[0.x.5916] 
[0.x.5917] 
//
[0.x.5918] 
[0.x.5919] 
[0.x.5920] 
[0.x.5921] 
[0.x.5922] 
[0.x.5923] 
//
// 所以我们已经找到了阴极上的一个面。接下来，我们让FEFaceValues对象计算每个 "正交 "点的解的梯度，并通过[2.x.785]"矢量值问题 "文件模块中讨论的方法，以张量变量的形式从梯度中提取电场向量。
//
[0.x.5924] 
[0.x.5925] 
[0.x.5926] 
[0.x.5927] 
[0.x.5928] 
[0.x.5929] 
[0.x.5930] 
//
// 只有当电场强度超过阈值时，电子才能逃离阴极，而且关键是，如果电场指向*域内，电子才能逃离阴极。      一旦我们检查了这一点，我们就在这个位置创建一个新的[2.x.786]对象，并将其插入到[2.x.787]对象中，并设置一个唯一的ID。            这里唯一不明显的是，我们还将这个粒子与我们当前所在的单元格的参考坐标中的位置联系起来。这样做是因为我们将在下游函数中计算诸如粒子位置的电场等量（例如，在每个时间步长中更新其位置时计算作用于它的力）。在任意坐标上评估有限元场是一个相当昂贵的操作，因为形状函数实际上只定义在参考单元上，所以当要求一个任意点的电场时，我们首先要确定这个点的参考坐标是什么。为了避免反复操作，我们一次性地确定这些坐标，然后将这些参考坐标直接存储在粒子上。
//
[0.x.5931] 
[0.x.5932] 
[0.x.5933] 
[0.x.5934] 
[0.x.5935] 
//
[0.x.5936] 
[0.x.5937] 
[0.x.5938] 
[0.x.5939] 
[0.x.5940] 
[0.x.5941] 
//
[0.x.5942] 
[0.x.5943] 
[0.x.5944] 
[0.x.5945] 
//
// 在所有这些插入结束时，我们让`particle_handler`更新它所存储的粒子的一些内部统计数据。
//
[0.x.5946] 
[0.x.5947] 
//[2.x.788] 
//
// 第二个与粒子有关的函数是在每个时间步骤中移动粒子的函数。要做到这一点，我们必须在所有的单元格、每个单元格中的粒子上循环，并评估每个粒子位置的电场。
//
// 这里使用的方法在概念上与`assemble_system()`函数中使用的相同。我们在所有单元中循环，找到位于那里的粒子（同样要注意这里用来寻找这些粒子的算法的低效率），并使用FEPointEvaluation对象来评估这些位置的梯度。
//
[0.x.5948] 
[0.x.5949] 
[0.x.5950] 
[0.x.5951] 
//
[0.x.5952] 
[0.x.5953] 
//
[0.x.5954] 
[0.x.5955] 
[0.x.5956] 
[0.x.5957] 
[0.x.5958] 
[0.x.5959] 
//
[0.x.5960] 
[0.x.5961] 
[0.x.5962] 
//
[0.x.5963] 
//
// 然后，我们可以向FEPointEvaluation对象询问这些位置的解决方案的梯度（即电场[2.x.789]），并在各个粒子上循环。
//
[0.x.5964] 
[0.x.5965] 
[0.x.5966] 
//
[0.x.5967] 
[0.x.5968] 
[0.x.5969] 
[0.x.5970] 
[0.x.5971] 
[0.x.5972] 
[0.x.5973] 
[0.x.5974] 
[0.x.5975] 
//
// 现在我们已经得到了其中一个粒子位置的电场，我们首先用它来更新速度，然后更新位置。为此，我们首先从粒子的属性中获取旧的速度，计算加速度，更新速度，并将这个新的速度再次存储在粒子的属性中。回顾一下，这对应于介绍中所讨论的以下一组更新方程中的第一个。      [1.x.28]
//
[0.x.5976] 
//
[0.x.5977] 
[0.x.5978] 
//
[0.x.5979] 
[0.x.5980] 
//
[0.x.5981] 
//
// 有了新的速度，我们也就可以更新粒子的位置，并告诉粒子这个位置。
//
[0.x.5982] 
[0.x.5983] 
[0.x.5984] 
[0.x.5985] 
[0.x.5986] 
[0.x.5987] 
//
// 在更新了所有粒子的位置和属性（即速度）之后，我们需要确保`particle_handler`再次知道它们在哪个单元中，以及它们在参考单元坐标系中的位置。下面的函数就是这样做的。(它还确保在并行计算中，如果粒子从一个处理器拥有的子域移动到另一个处理器拥有的子域，那么粒子会从一个处理器移动到另一个处理器。)
//
[0.x.5988] 
[0.x.5989] 
//[2.x.790] 
//
// 最后一个与粒子相关的函数是当一个粒子从模拟中丢失时被调用的函数。这通常发生在它离开域的时候。如果发生这种情况，这个函数会同时调用单元（我们可以询问它的新位置）和它之前所在的单元。然后，该函数不断跟踪更新这个时间步骤中丢失的粒子数，丢失的粒子总数，然后估计该粒子是否通过阳极中间的孔离开。我们这样做，首先检查它最后所在的单元是否有一个[2.x.791]坐标在右边边界的左边（位于[2.x.792]），而粒子现在的位置在右边边界的右边。如果是这样的话，我们就计算出它的运动方向矢量，这个方向矢量被归一化了，所以方向矢量的[2.x.793]分量等于[2.x.794] 。有了这个方向矢量，我们可以计算出它与直线[2.x.795]的相交位置。如果这个相交点在[2.x.796]和[2.x.797]之间，那么我们就声称粒子从孔中离开，并增加一个计数器。
//
[0.x.5990] 
[0.x.5991] 
[0.x.5992] 
[0.x.5993] 
[0.x.5994] 
[0.x.5995] 
[0.x.5996] 
//
[0.x.5997] 
[0.x.5998] 
//
[0.x.5999] 
[0.x.6000] 
[0.x.6001] 
[0.x.6002] 
[0.x.6003] 
//
[0.x.6004] 
[0.x.6005] 
[0.x.6006] 
[0.x.6007] 
[0.x.6008] 
[0.x.6009] 
[0.x.6010] 
[0.x.6011] 
//
// [2.x.798] 
//
// 正如在介绍中详细讨论的那样，我们需要尊重一个时间步长条件，即颗粒在一个时间步长中不能移动超过一个单元。为了确保这一点，我们首先计算每个单元上所有粒子的最大速度，然后用该速度除以单元大小。然后，我们使用介绍中讨论的安全系数，将下一个时间步长计算为所有单元上这个量的最小值，并使用[2.x.799]函数将其设定为所需的时间步长。
//
[0.x.6012] 
[0.x.6013] 
[0.x.6014] 
[0.x.6015] 
[0.x.6016] 
[0.x.6017] 
//
[0.x.6018] 
[0.x.6019] 
[0.x.6020] 
[0.x.6021] 
//
[0.x.6022] 
//
[0.x.6023] 
[0.x.6024] 
[0.x.6025] 
[0.x.6026] 
[0.x.6027] 
[0.x.6028] 
[0.x.6029] 
//
[0.x.6030] 
[0.x.6031] 
[0.x.6032] 
[0.x.6033] 
[0.x.6034] 
//
[0.x.6035] 
[0.x.6036] 
[0.x.6037] 
[0.x.6038] 
//
// 正如在介绍中提到的，我们必须以不同的方式对待第一个时间步长，因为在那里，粒子还没有出现，或者还没有我们计算合理步长所需的相关信息。下面的公式遵循介绍中的讨论。
//
[0.x.6039] 
[0.x.6040] 
[0.x.6041] 
[0.x.6042] 
//
[0.x.6043] 
//
[0.x.6044] 
//
[0.x.6045] 
[0.x.6046] 
[0.x.6047] 
[0.x.6048] 
//
[0.x.6049] 
[0.x.6050] 
//
[0.x.6051] 
[0.x.6052] 
[0.x.6053] 
//
[0.x.6054] 
[0.x.6055] 
[0.x.6056] 
[0.x.6057] 
[0.x.6058] 
[0.x.6059] 
[0.x.6060] 
//
[0.x.6061] 
[0.x.6062] 
[0.x.6063] 
//
// [2.x.800] 
//
// 实现整个算法的最后一个函数是生成图形输出的函数。在目前的情况下，我们想同时输出电势场以及粒子的位置和速度。但我们也想输出电场，即解决方案的梯度。
//
// deal.II有一个一般的方法，可以从解决方案中计算出派生量，并输出这些量。在这里，这是电场，但也可以是其他的量--比如说，电场的法线，或者事实上任何其他人们想从解[2.x.801]或其导数中计算的量。这个一般的解决方案使用了DataPostprocessor类，在像这里的情况下，我们想输出一个代表矢量场的量，则使用DataPostprocessorVector类。
//
// 与其尝试解释这个类是如何工作的，不如让我们简单地参考一下DataPostprocessorVector类的文档，这个案例基本上是一个有据可查的例子。
//
[0.x.6064] 
[0.x.6065] 
[0.x.6066] 
[0.x.6067] 
[0.x.6068] 
[0.x.6069] 
[0.x.6070] 
//
[0.x.6071] 
[0.x.6072] 
[0.x.6073] 
[0.x.6074] 
[0.x.6075] 
[0.x.6076] 
//
[0.x.6077] 
[0.x.6078] 
[0.x.6079] 
[0.x.6080] 
[0.x.6081] 
[0.x.6082] 
[0.x.6083] 
[0.x.6084] 
//
// 有了这个，`output_results()`函数就变得相对简单了。我们使用DataOut类，就像我们在以前几乎所有的教程程序中使用的那样，来输出解决方案（"电动势"），我们使用上面定义的后处理程序来输出其梯度（"电场"）。这些都被写入一个VTU格式的文件中，同时将当前时间和时间步长与该文件联系起来。
//
[0.x.6085] 
[0.x.6086] 
[0.x.6087] 
[0.x.6088] 
[0.x.6089] 
[0.x.6090] 
[0.x.6091] 
[0.x.6092] 
[0.x.6093] 
[0.x.6094] 
//
[0.x.6095] 
[0.x.6096] 
//
[0.x.6097] 
[0.x.6098] 
[0.x.6099] 
[0.x.6100] 
[0.x.6101] 
//
// 输出粒子的位置和属性并不复杂。[2.x.802]类扮演了粒子的DataOut类的角色，我们所要做的就是告诉该类从哪里获取粒子，以及如何解释属性中的`dim`分量--即作为表示速度的单一矢量，而不是作为`dim`标量属性。剩下的就和上面一样了。
//
[0.x.6102] 
[0.x.6103] 
[0.x.6104] 
[0.x.6105] 
[0.x.6106] 
[0.x.6107] 
[0.x.6108] 
//
[0.x.6109] 
[0.x.6110] 
//
[0.x.6111] 
[0.x.6112] 
[0.x.6113] 
[0.x.6114] 
[0.x.6115] 
[0.x.6116] 
//[2.x.803] 
//
// 这个程序的主类的最后一个成员函数是驱动。在顶层，它通过在一连串越来越细的网格上求解问题（尚未创建粒子），对网格进行多次细化。
//
[0.x.6117] 
[0.x.6118] 
[0.x.6119] 
[0.x.6120] 
//
//在前面做几个细化循环
//
[0.x.6121] 
[0.x.6122] 
[0.x.6123] 
[0.x.6124] 
[0.x.6125] 
[0.x.6126] 
[0.x.6127] 
[0.x.6128] 
[0.x.6129] 
[0.x.6130] 
//
// 现在进行时间上的循环。这个步骤的顺序紧跟介绍中讨论的算法大纲。正如在DiscreteTime类的文档中详细讨论的那样，虽然我们将场和粒子信息向前移动了一个时间步长，但存储在`time`变量中的时间与这些量的（部分）位置不一致（在DiscreteTime的字典中，这就是 "更新阶段"）。对`time.advance_time()`的调用通过将`time`变量设置为场和粒子已经处于的时间而使一切重新保持一致，一旦我们处于这个 "一致阶段"，我们就可以生成图形输出并将模拟的当前状态的信息写入屏幕。
//
[0.x.6131] 
[0.x.6132] 
[0.x.6133] 
[0.x.6134] 
[0.x.6135] 
[0.x.6136] 
//
[0.x.6137] 
[0.x.6138] 
//
[0.x.6139] 
[0.x.6140] 
[0.x.6141] 
//
[0.x.6142] 
[0.x.6143] 
[0.x.6144] 
//
[0.x.6145] 
//
[0.x.6146] 
//
[0.x.6147] 
[0.x.6148] 
[0.x.6149] 
[0.x.6150] 
[0.x.6151] 
[0.x.6152] 
[0.x.6153] 
//
[0.x.6154] 
[0.x.6155] 
[0.x.6156] 
[0.x.6157] 
[0.x.6158] 
[0.x.6159] 
[0.x.6160] 
[0.x.6161] 
[0.x.6162] 
//
// [2.x.804] 
//
// 程序的最后一个函数又是`main()`函数。自[2.x.805]以来，它在所有的教程程序中都没有变化，因此没有什么新的内容需要讨论。
//
[0.x.6163] 
[0.x.6164] 
[0.x.6165] 
[0.x.6166] 
[0.x.6167] 
[0.x.6168] 
[0.x.6169] 
[0.x.6170] 
[0.x.6171] 
[0.x.6172] 
[0.x.6173] 
[0.x.6174] 
[0.x.6175] 
[0.x.6176] 
[0.x.6177] 
[0.x.6178] 
[0.x.6179] 
[0.x.6180] 
//
[0.x.6181] 
[0.x.6182] 
[0.x.6183] 
[0.x.6184] 
[0.x.6185] 
[0.x.6186] 
[0.x.6187] 
[0.x.6188] 
[0.x.6189] 
[0.x.6190] 
[0.x.6191] 
[0.x.6192] 
[0.x.6193] 
[0.x.6194] 
[0.x.6195] 
[0.x.6196] 
[0.x.6197] 
[0.x.6198] 
[0.x.6199] 
[0.x.6200] 
[0.x.6201] 
[0.x.6202] 
[0.x.6203] 
[0.x.6204] 
[0.x.6205] 
[0.x.6206] 
[0.x.6207] 
[0.x.6208] 
[0.x.6209] 
[0.x.6210] 
//
[0.x.6211] 
[0.x.6212] 
[0.x.6213] 
//
// 前面几个包括的内容和前面的程序一样，所以不需要额外的注释。
//
[0.x.6214] 
[0.x.6215] 
//
// 然而，下一个文件是新的。我们需要这个包含文件来将自由度（DoF）与顶点、直线和单元联系起来。
//
[0.x.6216] 
//
// 以下文件包含了对双线性有限元的描述，包括它在三角形的每个顶点上有一个自由度，但在面和单元内部没有自由度。
//
// (事实上，该文件包含了对拉格朗日元素的一般描述，即还有二次、三次等版本，而且不仅是2d，还有1d和3d。)
//
[0.x.6217] 
//
// 在下面的文件中，可以找到几个操作自由度的工具。
//
[0.x.6218] 
//
// 我们将使用一个稀疏矩阵来可视化自由度在网格上的分布所产生的非零条目模式。这个类可以在这里找到。
//
[0.x.6219] 
//
// 我们还需要使用一个中间的稀疏模式结构，可以在这个文件中找到。
//
[0.x.6220] 
//
// 我们希望使用一种特殊的算法来重新计算自由度。它被声明在这里。
//
[0.x.6221] 
//
// 而这又是C++输出所需要的。
//
[0.x.6222] 
//
// 最后，和[2.x.806]一样，我们将deal.II命名空间导入到全局范围。
//
[0.x.6223] 
//[2.x.807] 
//
// 这就是前面[2.x.808]例子程序中产生圆形网格的函数，细化步骤较少。唯一不同的是，它通过其参数返回它所产生的网格。
//
[0.x.6224] 
[0.x.6225] 
[0.x.6226] 
[0.x.6227] 
[0.x.6228] 
[0.x.6229] 
//
[0.x.6230] 
[0.x.6231] 
[0.x.6232] 
[0.x.6233] 
[0.x.6234] 
[0.x.6235] 
[0.x.6236] 
//
[0.x.6237] 
[0.x.6238] 
[0.x.6239] 
[0.x.6240] 
[0.x.6241] 
[0.x.6242] 
[0.x.6243] 
//
[0.x.6244] 
[0.x.6245] 
[0.x.6246] 
//[2.x.809] 
//
// 到目前为止，我们只有一个网格，即一些几何信息（顶点的位置）和一些拓扑信息（顶点如何与线相连，线与单元格相连，以及哪些单元格与哪些其他单元格相邻）。要使用数值算法，还需要一些逻辑信息：我们希望将自由度数字与每个顶点（或线，或单元，如果我们使用高阶元素的话）联系起来，以便以后生成描述三角形上有限元场的矩阵和矢量。
//
// 这个函数显示了如何做到这一点。要考虑的对象是[2.x.810]类模板。 然而，在这之前，我们首先需要一些东西来描述这些对象中的每一个要与多少个自由度相关联。由于这是有限元空间定义的一个方面，有限元基类存储了这个信息。在目前的情况下，我们因此创建了一个描述拉格朗日元素的派生类[2.x.811]的对象。它的构造函数需要一个参数，说明元素的多项式程度，这里是1（表示一个双线性元素）；这就对应于每个顶点的一个自由度，而线和四边形内部没有自由度。如果给构造函数的值是3，我们就会得到一个双立方体元素，每个顶点有一个自由度，每条线有两个自由度，单元内有四个自由度。一般来说，[2.x.812]表示具有完整多项式（即张量积多项式）的连续元素家族，直到指定的顺序。
//
// 我们首先需要创建一个这个类的对象，然后把它传递给[2.x.813]对象，为自由度分配存储空间（用deal.II的行话说：我们[1.x.29]）。
//
[0.x.6247] 
[0.x.6248] 
[0.x.6249] 
[0.x.6250] 
//
// 现在我们已经将自由度与每个顶点的全局数字联系起来，我们想知道如何将其可视化？ 没有简单的方法可以直接将与每个顶点相关的自由度数字可视化。然而，这样的信息几乎不会真正重要，因为编号本身或多或少是任意的。还有更重要的因素，我们将在下文中展示其中一个。
//
// 与三角形的每个顶点相关的是一个形状函数。假设我们想解决类似拉普拉斯方程的问题，那么不同的矩阵条目将是每对这样的形状函数的梯度的积分。显然，由于形状函数只在与它们相关的顶点相邻的单元格上是非零的，所以只有当与该列和行%号相关的形状函数的支持相交时，矩阵条目才是非零的。这只是相邻形状函数的情况，因此也只是相邻顶点的情况。现在，由于顶点被上述函数[2.x.814]或多或少地随机编号，矩阵中非零项的模式将有些参差不齐，我们现在就来看看它。
//
// 首先，我们要创建一个结构，用来存储非零元素的位置。然后，这个结构可以被一个或多个稀疏矩阵对象使用，这些对象在这个稀疏模式所存储的位置上存储条目的值。存储这些位置的类是SparsityPattern类。然而，事实证明，当我们试图立即填充这个类时，它有一些缺点：它的数据结构的设置方式是，我们需要对我们可能希望在每一行的最大条目数有一个估计。在两个空间维度上，通过[2.x.815]函数可以得到合理的估计值，但是在三个维度上，该函数几乎总是严重高估真实的数字，导致大量的内存浪费，有时对于所使用的机器来说太多，即使未使用的内存可以在计算稀疏模式后立即释放。为了避免这种情况，我们使用了一个中间对象DynamicSparsityPattern，该对象使用了一个不同的%内部数据结构，我们可以随后将其复制到SparsityPattern对象中，而不需要太多的开销。关于这些数据结构的一些更多信息可以在[2.x.816]模块中找到）。为了初始化这个中间数据结构，我们必须给它提供矩阵的大小，在我们的例子中，矩阵是正方形的，行和列的数量与网格上的自由度相同。
//
[0.x.6251] 
[0.x.6252] 
//
// 然后我们在这个对象中填入非零元素的位置，考虑到目前自由度的编号。
//
[0.x.6253] 
//
// 现在我们已经准备好创建实际的稀疏模式了，以后我们可以用在我们的矩阵上。它将包含已经在DynamicSparsityPattern中集合的数据。
//
[0.x.6254] 
[0.x.6255] 
//
// 有了这个，我们现在可以把结果写到一个文件里。
//
[0.x.6256] 
[0.x.6257] 
//
// 结果被存储在一个[2.x.817]文件中，矩阵中的每个非零条目都对应于图像中的一个红色方块。输出结果将显示如下。
//
// 如果你看一下，你会注意到稀疏性模式是对称的。这不应该是一个惊喜，因为我们没有给[2.x.818]任何信息，表明我们的双线性形式可能以非对称的方式耦合形状函数。你还会注意到它有几个明显的区域，这源于编号从最粗的单元开始，然后到较细的单元；由于它们都是围绕原点对称分布的，这在稀疏模式中再次显示出来。
//
[0.x.6258] 
//[2.x.819] 
//
// 在上面产生的稀疏模式中，非零条目在对角线上延伸得很远。对于某些算法来说，例如不完全LU分解或Gauss-Seidel预处理，这是不利的，我们将展示一个简单的方法来改善这种情况。
//
// 请记住，为了使矩阵中的一个条目[2.x.820]不为零，形状函数i和j的支持需要相交（否则在积分中，积分将到处为零，因为在某个点上，一个或另一个形状函数为零）。然而，形状函数的支撑点只有在彼此相邻的情况下才会相交，所以为了使非零条目聚集在对角线周围（其中[2.x.821]等于[2.x.822]），我们希望相邻的形状函数的索引（DoF编号）相差不大。
//
// 这可以通过一个简单的前行算法来实现，即从一个给定的顶点开始，给它的索引为0。然后，依次对其邻居进行编号，使其指数接近于原始指数。然后，他们的邻居，如果还没有被编号，也被编号，以此类推。
//
// 有一种算法沿着这些思路增加了一点复杂性，那就是Cuthill和McKee的算法。我们将在下面的函数中使用它来对自由度进行重新编号，从而使产生的稀疏模式在对角线周围更加本地化。该函数唯一有趣的部分是对[2.x.823]的第一次调用，其余部分基本上与以前一样。
//
[0.x.6259] 
[0.x.6260] 
[0.x.6261] 
//
[0.x.6262] 
[0.x.6263] 
[0.x.6264] 
//
[0.x.6265] 
[0.x.6266] 
//
[0.x.6267] 
[0.x.6268] 
[0.x.6269] 
//
// 再次，输出如下。请注意，非零项在对角线附近的聚类情况要比以前好得多。这种效果对于较大的矩阵来说更加明显（目前的矩阵有1260行和列，但是大的矩阵往往有几十万行）。
//
// 值得注意的是，[2.x.824]类也提供了一些其他的算法来重新编号自由度。例如，如果所有的耦合都在矩阵的下三角或上三角部分，那当然是最理想的，因为这样的话，解决线性系统就只需要向前或向后替换。当然，这对于对称稀疏模式来说是无法实现的，但在一些涉及传输方程的特殊情况下，通过列举从流入边界沿流线到流出边界的自由度，这是可能的。毫不奇怪，[2.x.825]也有这方面的算法。
//
// [2.x.826] 
//
// 最后，这是主程序。它所做的唯一一件事就是分配和创建三角形，然后创建一个[2.x.827]对象并将其与三角形相关联，最后对其调用上述两个函数。
//
[0.x.6270] 
[0.x.6271] 
[0.x.6272] 
[0.x.6273] 
//
[0.x.6274] 
//
[0.x.6275] 
[0.x.6276] 
[0.x.6277] 
[0.x.6278] 
[0.x.6279] 
[0.x.6280] 
[0.x.6281] 
[0.x.6282] 
[0.x.6283] 
[0.x.6284] 
[0.x.6285] 
[0.x.6286] 
[0.x.6287] 
[0.x.6288] 
[0.x.6289] 
[0.x.6290] 
[0.x.6291] 
[0.x.6292] 
//[2.x.828] 
//
// 由于这个程序只是对[2.x.829]的改编，所以在头文件方面没有太多的新东西。在deal.II中，我们通常按照base-lac-grid-dofs-fe-numerics的顺序列出包含文件，然后是C++标准包含文件。
//
[0.x.6293] 
[0.x.6294] 
[0.x.6295] 
//
[0.x.6296] 
[0.x.6297] 
[0.x.6298] 
[0.x.6299] 
[0.x.6300] 
//
// 唯一值得关注的两个新头文件是LinearOperator和PackagedOperation类的文件。
//
[0.x.6301] 
[0.x.6302] 
//
[0.x.6303] 
[0.x.6304] 
[0.x.6305] 
[0.x.6306] 
[0.x.6307] 
[0.x.6308] 
[0.x.6309] 
[0.x.6310] 
[0.x.6311] 
[0.x.6312] 
[0.x.6313] 
//
[0.x.6314] 
[0.x.6315] 
//
// 这是唯一重要的新标题，即声明Raviart-Thomas有限元的标题。
//
[0.x.6316] 
//
// 最后，作为本程序中的一项奖励，我们将使用一个张量系数。由于它可能具有空间依赖性，我们认为它是一个张量值的函数。下面的include文件提供了[2.x.830]类，提供了这样的功能。
//
[0.x.6317] 
//
// 最后一步和以前所有的程序一样。我们把所有与这个程序相关的代码放到一个命名空间中。(这个想法在 [2.x.831] 中首次提出) 。
//
[0.x.6318] 
[0.x.6319] 
[0.x.6320] 
//[2.x.832] 
//
// 同样，由于这是对[2.x.833]的改编，主类与该教程程序中的主类几乎相同。就成员函数而言，主要区别在于构造函数将Raviart-Thomas元素的度数作为参数（并且有一个相应的成员变量来存储这个值），并且增加了[2.x.834]函数，在这个函数中，不出意外，我们将计算精确解和数值解之间的差异，以确定我们计算的收敛性。
//
[0.x.6321] 
[0.x.6322] 
[0.x.6323] 
[0.x.6324] 
[0.x.6325] 
[0.x.6326] 
//
[0.x.6327] 
[0.x.6328] 
[0.x.6329] 
[0.x.6330] 
[0.x.6331] 
[0.x.6332] 
//
[0.x.6333] 
//
[0.x.6334] 
[0.x.6335] 
[0.x.6336] 
//
// 第二个区别是疏散模式、系统矩阵、解和右手向量现在被封锁了。这意味着什么，人们可以用这些对象做什么，在本程序的介绍中已经解释过了，下面我们在解释这个问题的线性求解器和预处理器时也会进一步解释。
//
[0.x.6337] 
[0.x.6338] 
//
[0.x.6339] 
[0.x.6340] 
[0.x.6341] 
//[2.x.835] 
//
// 我们的下一个任务是定义我们问题的右手边（即原始拉普拉斯方程中压力的标量右手边），压力的边界值，以及一个描述压力和精确解的速度的函数，以便以后计算误差。请注意，这些函数分别有一个、一个和[2.x.836]个分量，我们将分量的数量传递给[2.x.837]基类。对于精确解，我们只声明实际一次性返回整个解向量（即其中的所有成分）的函数。下面是各自的声明。
//
[0.x.6342] 
[0.x.6343] 
[0.x.6344] 
[0.x.6345] 
//
[0.x.6346] 
[0.x.6347] 
[0.x.6348] 
[0.x.6349] 
[0.x.6350] 
[0.x.6351] 
[0.x.6352] 
//
[0.x.6353] 
[0.x.6354] 
[0.x.6355] 
//
[0.x.6356] 
[0.x.6357] 
[0.x.6358] 
[0.x.6359] 
[0.x.6360] 
[0.x.6361] 
[0.x.6362] 
//
[0.x.6363] 
[0.x.6364] 
[0.x.6365] 
//
[0.x.6366] 
[0.x.6367] 
[0.x.6368] 
[0.x.6369] 
[0.x.6370] 
[0.x.6371] 
[0.x.6372] 
//
[0.x.6373] 
[0.x.6374] 
[0.x.6375] 
//
// 然后我们还必须定义这些各自的函数，当然了。鉴于我们在介绍中讨论了解决方案应该是怎样的，下面的计算应该是很简单的。
//
[0.x.6376] 
[0.x.6377] 
[0.x.6378] 
[0.x.6379] 
[0.x.6380] 
[0.x.6381] 
//
[0.x.6382] 
[0.x.6383] 
[0.x.6384] 
[0.x.6385] 
[0.x.6386] 
[0.x.6387] 
[0.x.6388] 
[0.x.6389] 
//
[0.x.6390] 
[0.x.6391] 
[0.x.6392] 
[0.x.6393] 
[0.x.6394] 
[0.x.6395] 
//
[0.x.6396] 
[0.x.6397] 
[0.x.6398] 
[0.x.6399] 
[0.x.6400] 
//
// [2.x.838] 
//
// 除了其他方程数据外，我们还想使用渗透性张量，或者更好的是--因为这是在弱形式中出现的全部内容--渗透性张量的逆， [2.x.839] 。对于验证解的精确性和确定收敛顺序的目的来说，这个张量的作用大于帮助。因此，我们将简单地把它设置为同一矩阵。
//
// 然而，在现实生活中的多孔介质流动模拟中，空间变化的渗透率张量是不可缺少的，我们想利用这个机会来展示使用张量值函数的技术。
//
// 可能不足为奇，deal.II也有一个基类，不仅适用于标量和一般的矢量值函数（[2.x.840]基类），也适用于返回固定维度和等级的张量的函数，[2.x.841]模板。在这里，所考虑的函数返回一个dim-by-dim矩阵，即一个等级为2、维度为[2.x.842]的张量。然后我们适当地选择基类的模板参数。
//
// [2.x.843]类提供的接口本质上等同于[2.x.844]类。特别是，存在一个[2.x.845]函数，它接收一个评估函数的点的列表，并在第二个参数中返回函数的值，一个张量的列表。
//
[0.x.6401] 
[0.x.6402] 
[0.x.6403] 
[0.x.6404] 
[0.x.6405] 
[0.x.6406] 
[0.x.6407] 
//
[0.x.6408] 
[0.x.6409] 
[0.x.6410] 
[0.x.6411] 
//
// 实现起来就不那么有趣了。和以前的例子一样，我们在类的开头添加一个检查，以确保输入和输出参数的大小是相同的（关于这个技术的讨论见[2.x.846]）。然后我们在所有的评估点上循环，对于每一个评估点，将输出张量设置为身份矩阵。
//
// 在函数的顶部有一个奇怪的地方（`(void)point;`语句），值得讨论。我们放到输出`values`数组中的值实际上并不取决于函数被评估的坐标`points`数组。换句话说，`points'参数实际上是不用的，如果我们想的话，可以不给它起名字。但是我们想用`points`对象来检查`values`对象是否有正确的大小。问题是，在发布模式下，`AssertDimension`被定义为一个宏，扩展为空；然后编译器会抱怨`points`对象没有使用。消除这个警告的习惯方法是有一个评估（读取）变量的语句，但实际上不做任何事情：这就是`(void)points;`所做的：它从`points`中读取，然后将读取的结果转换为`void`，也就是什么都没有。换句话说，这句话是完全没有意义的，除了向编译器解释是的，这个变量事实上是被使用的，即使是在发布模式下。(在调试模式下，`AssertDimension`宏会扩展为从变量中读出的东西，所以在调试模式下，这个有趣的语句是没有必要的)。
//
[0.x.6412] 
[0.x.6413] 
[0.x.6414] 
[0.x.6415] 
[0.x.6416] 
[0.x.6417] 
//
[0.x.6418] 
[0.x.6419] 
[0.x.6420] 
[0.x.6421] 
//
// [2.x.847] 
//[2.x.848] 
//
// 在这个类的构造函数中，我们首先存储传入的关于我们将使用的有限元的度数的值（例如，度数为0，意味着使用RT(0)和DG(0)），然后构造属于介绍中描述的空间[2.x.849]的向量值的元素。构造函数的其余部分与早期的教程程序一样。
//
// 这里唯一值得描述的是，这个变量所属的[2.x.850]类的构造函数调用有很多不同的构造函数，它们都是指将较简单的元素绑定在一起，成为一个较大的元素。在目前的情况下，我们想把一个RT(度)元素与一个DQ(度)元素结合起来。这样做的[2.x.851]构造函数要求我们首先指定第一个基本元素（给定程度的[2.x.852]对象），然后指定这个基本元素的副本数量，然后类似地指定[2.x.853]元素的种类和数量。注意Raviart-Thomas元素已经有[2.x.854]个矢量分量，所以耦合元素将有[2.x.855]个矢量分量，其中第一个[2.x.856]个对应于速度变量，最后一个对应于压力。
//
// 我们从基本元素中构建这个元素的方式与我们在[2.x.857]中的方式也值得比较：在那里，我们将其构建为[2.x.858]，即我们简单地使用[2.x.859]元素，每个坐标方向上的位移都有一份。
//
[0.x.6422] 
[0.x.6423] 
[0.x.6424] 
[0.x.6425] 
[0.x.6426] 
[0.x.6427] 
//
// [2.x.860] 
//
// 接下来的函数开始于众所周知的函数调用，创建和细化一个网格，然后将自由度与之关联。
//
[0.x.6428] 
[0.x.6429] 
[0.x.6430] 
[0.x.6431] 
[0.x.6432] 
//
[0.x.6433] 
//
// 然而，接下来事情就变得不同了。正如介绍中提到的，我们要将矩阵细分为对应于速度和压力这两种不同的变量的块。为此，我们首先要确保与速度和压力相对应的指数不会混在一起。首先是所有速度自由度，然后是所有压力自由度。这样一来，全局矩阵就很好地分离成一个[2.x.861]系统。为了达到这个目的，我们必须根据自由度的矢量分量对其重新编号，这个操作已经很方便地实现了。
//
[0.x.6434] 
//
// 接下来，我们要弄清楚这些块的大小，以便我们可以分配适当的空间量。为此，我们调用了[2.x.862]函数，该函数计算了某个向量分量的形状函数非零的数量。我们有[2.x.863]个向量分量，[2.x.864]将计算有多少个形状函数属于这些分量中的每个。
//
// 这里有一个问题。正如该函数的文档所描述的，它 [1.x.30] 将 [2.x.865] -速度形状函数的数量放入 [2.x.866] 中，将 [2.x.867] -速度形状函数的数量放入 [2.x.868] 中（以及类似的3d），并将压力形状函数的数量放入 [2.x.869] 中 。但是，Raviart-Thomas元素的特殊性在于它是非[2.x.870]"原始 "的，也就是说，对于Raviart-Thomas元素，所有的速度形状函数在所有分量中都是非零。换句话说，该函数不能区分[2.x.871]和[2.x.872]速度函数，因为[1.x.31]没有这种区分。因此，它将速度的总体数量放入[2.x.873] , [2.x.874]中的每一个。另一方面，压力变量的数量等于在dim-th分量中不为零的形状函数的数量。
//
// 利用这些知识，我们可以从[2.x.876]的第一个[2.x.875]元素中的任何一个得到速度形状函数的数量，然后用下面这个来初始化向量和矩阵块的大小，以及创建输出。
//
// [2.x.877] 如果你觉得这个概念难以理解，你可以考虑用函数 [2.x.878] 来代替，就像我们在 [2.x.879] 的相应代码中做的那样。你可能还想阅读一下术语表中[2.x.880]"块 "和[2.x.881]"组件 "的区别。
//
[0.x.6435] 
[0.x.6436] 
[0.x.6437] 
[0.x.6438] 
//
[0.x.6439] 
[0.x.6440] 
[0.x.6441] 
[0.x.6442] 
[0.x.6443] 
[0.x.6444] 
//
// 下一个任务是为我们将要创建的矩阵分配一个稀疏模式。我们使用与前面步骤一样的压缩稀疏模式，但是由于[2.x.882]是一个块状矩阵，我们使用[2.x.883]类，而不仅仅是[2.x.884] 。这种块状稀疏模式在[2.x.885]模式下有四个块。块的大小取决于[2.x.886]，它持有速度和压力变量的数量。在第二步中，我们必须指示块系统更新它所管理的块的大小的知识；这发生在[2.x.887]的调用中。
//
[0.x.6445] 
[0.x.6446] 
[0.x.6447] 
[0.x.6448] 
[0.x.6449] 
[0.x.6450] 
[0.x.6451] 
//
// 我们以与非区块版本相同的方式使用压缩的区块稀疏模式，以创建稀疏模式，然后创建系统矩阵。
//
[0.x.6452] 
[0.x.6453] 
//
// 然后，我们必须以与块压缩稀疏度模式完全相同的方式调整解决方案和右侧向量的大小。
//
[0.x.6454] 
[0.x.6455] 
[0.x.6456] 
[0.x.6457] 
//
[0.x.6458] 
[0.x.6459] 
[0.x.6460] 
[0.x.6461] 
[0.x.6462] 
//[2.x.888] 
//
// 同样地，组装线性系统的函数在这个例子的介绍中已经讨论过很多了。在它的顶部，发生的是所有常见的步骤，此外，我们不仅为单元项分配正交和[2.x.889]对象，而且还为面项分配。之后，我们为变量定义通常的缩写，并为本地矩阵和右手贡献分配空间，以及保存当前单元的全局自由度数的数组。
//
[0.x.6463] 
[0.x.6464] 
[0.x.6465] 
[0.x.6466] 
[0.x.6467] 
//
[0.x.6468] 
[0.x.6469] 
[0.x.6470] 
[0.x.6471] 
[0.x.6472] 
[0.x.6473] 
[0.x.6474] 
[0.x.6475] 
[0.x.6476] 
//
[0.x.6477] 
[0.x.6478] 
[0.x.6479] 
//
[0.x.6480] 
[0.x.6481] 
//
[0.x.6482] 
//
// 下一步是声明代表方程中源项、压力边界值和系数的对象。除了这些代表连续函数的对象外，我们还需要数组来保存它们在各个单元格（或面，对于边界值）的正交点的值。请注意，在系数的情况下，数组必须是矩阵的一种。
//
[0.x.6483] 
[0.x.6484] 
[0.x.6485] 
[0.x.6486] 
//
[0.x.6487] 
[0.x.6488] 
[0.x.6489] 
//
// 最后，我们需要几个提取器，用来获取矢量值形状函数的速度和压力成分。它们的功能和使用在[2.x.890]vector_valued报告中有详细描述。基本上，我们将把它们作为下面FEValues对象的下标：FEValues对象描述了形状函数的所有矢量分量，而在订阅后，它将只指速度（一组从零分量开始的[2.x.891]分量）或压力（位于[2.x.892]位置的标量分量）。
//
[0.x.6490] 
[0.x.6491] 
//
// 有了这些，我们就可以继续对所有单元进行循环。这个循环的主体已经在介绍中讨论过了，这里就不再做任何评论了。
//
[0.x.6492] 
[0.x.6493] 
[0.x.6494] 
[0.x.6495] 
[0.x.6496] 
//
[0.x.6497] 
[0.x.6498] 
[0.x.6499] 
[0.x.6500] 
//
[0.x.6501] 
[0.x.6502] 
[0.x.6503] 
[0.x.6504] 
[0.x.6505] 
[0.x.6506] 
//
[0.x.6507] 
[0.x.6508] 
[0.x.6509] 
[0.x.6510] 
[0.x.6511] 
[0.x.6512] 
[0.x.6513] 
//
[0.x.6514] 
[0.x.6515] 
[0.x.6516] 
[0.x.6517] 
[0.x.6518] 
[0.x.6519] 
//
[0.x.6520] 
[0.x.6521] 
//
[0.x.6522] 
[0.x.6523] 
[0.x.6524] 
[0.x.6525] 
//
[0.x.6526] 
[0.x.6527] 
//
[0.x.6528] 
[0.x.6529] 
[0.x.6530] 
[0.x.6531] 
[0.x.6532] 
[0.x.6533] 
[0.x.6534] 
//
// 循环所有单元的最后一步是将局部贡献转移到全局矩阵和右手向量中。请注意，我们使用的接口与之前的例子完全相同，尽管我们现在使用的是块状矩阵和向量，而不是常规的。换句话说，对于外界来说，块对象具有与矩阵和向量相同的接口，但它们还允许访问单个块。
//
[0.x.6535] 
[0.x.6536] 
[0.x.6537] 
[0.x.6538] 
[0.x.6539] 
[0.x.6540] 
[0.x.6541] 
[0.x.6542] 
[0.x.6543] 
[0.x.6544] 
//[2.x.893] 
//
// 我们在这个例子中使用的线性求解器和预处理器已经在介绍中进行了详细的讨论。因此，我们在这里不再讨论我们的方法的原理，而只是对剩下的一些实现方面进行评论。
//
// [2.x.894] 
//
// 正如在介绍中所概述的那样，求解函数基本上由两个步骤组成。首先，我们必须形成涉及舒尔补数的第一个方程，并求解压力（解决方案的第一部分）。然后，我们可以从第二个方程（解的第0部分）中重构速度。
//
[0.x.6545] 
[0.x.6546] 
[0.x.6547] 
//
// 作为第一步，我们声明对矩阵的所有块状成分、右手边和我们将需要的解向量的引用。
//
[0.x.6548] 
[0.x.6549] 
//
[0.x.6550] 
[0.x.6551] 
//
[0.x.6552] 
[0.x.6553] 
//
// 然后，我们将创建相应的LinearOperator对象并创建[2.x.895]运算器。
//
[0.x.6554] 
[0.x.6555] 
//
[0.x.6556] 
[0.x.6557] 
[0.x.6558] 
//
[0.x.6559] 
//
[0.x.6560] 
//
// 这样我们就可以声明舒尔补数 [2.x.896] 和近似舒尔补数 [2.x.897] 。
//
[0.x.6561] 
[0.x.6562] 
[0.x.6563] 
//
// 我们现在从[2.x.898]中创建一个预处理程序，应用固定数量的30次（便宜的）CG迭代。
//
[0.x.6564] 
[0.x.6565] 
//
[0.x.6566] 
[0.x.6567] 
//
// 现在来看看第一个方程。它的右边是[2.x.899] ，这就是我们在前几行计算的结果。然后我们用CG求解器和我们刚刚声明的预处理程序来解决第一个方程。
//
[0.x.6568] 
//
[0.x.6569] 
[0.x.6570] 
//
[0.x.6571] 
//
[0.x.6572] 
//
[0.x.6573] 
[0.x.6574] 
[0.x.6575] 
//
// 得到压力后，我们可以计算速度。方程为[2.x.900] ，我们通过首先计算右手边，然后与代表质量矩阵逆的对象相乘来解决这个问题。
//
[0.x.6576] 
[0.x.6577] 
//[2.x.901] 
//[2.x.902] 
//
// 在我们处理完线性求解器和预处理器之后，我们继续实现我们的主类。特别是，下一个任务是计算我们数值解的误差，包括压力和速度。
//
// 为了计算解的误差，我们已经在 [2.x.904] 和 [2.x.905] 中介绍了 [2.x.903] 函数。然而，在那里我们只处理了标量解，而在这里我们有一个矢量值的解，其组成部分甚至表示不同的量，并且可能有不同的收敛阶数（由于所使用的有限元的选择，这里不是这种情况，但在混合有限元应用中经常出现这种情况）。因此，我们要做的是 "掩盖 "我们感兴趣的成分。这很容易做到：[2.x.906]函数将一个指向权重函数的指针作为其参数之一（该参数默认为空指针，意味着单位权重）。我们要做的是传递一个函数对象，在我们感兴趣的成分中等于1，而在其他成分中等于0。例如，为了计算压力误差，我们应该传入一个函数，该函数在分量[2.x.907]中代表单位值的常数向量，而对于速度，常数向量在第一个[2.x.908]分量中应该是1，而在压力的位置是0。
//
// 在deal.II中，[2.x.909]正是这样做的：它想知道它要表示的函数应该有多少个向量分量（在我们的例子中，这将是[2.x.910]，用于联合速度-压力空间），哪个个体或范围的分量应该等于1。因此，我们在函数的开头定义了两个这样的掩码，接下来是一个代表精确解的对象和一个向量，我们将在其中存储由[2.x.911]计算的单元误差。
//
[0.x.6578] 
[0.x.6579] 
[0.x.6580] 
[0.x.6581] 
[0.x.6582] 
[0.x.6583] 
//
[0.x.6584] 
[0.x.6585] 
//
// 正如在[2.x.912]中已经讨论过的那样，我们必须认识到，不可能精确地整合误差。我们所能做的就是用正交法对这个积分进行近似。这实际上在这里提出了一个小小的转折：如果我们像人们可能倾向于做的那样天真地选择一个[2.x.913]类型的对象（这就是我们用于积分线性系统的对象），就会发现误差非常小，根本不遵循预期的收敛曲线。现在的情况是，对于这里使用的混合有限元，高斯点恰好是超收敛点，其中的点误差要比其他地方小得多（而且收敛的阶数更高）。因此，这些点不是特别好的积分点。为了避免这个问题，我们只需使用梯形法则，并在每个坐标方向上迭代[2.x.914]次（同样如[2.x.915]中的解释）。
//
[0.x.6586] 
[0.x.6587] 
//
// 有了这个，我们就可以让库计算出误差并将其输出到屏幕上。
//
[0.x.6588] 
[0.x.6589] 
[0.x.6590] 
[0.x.6591] 
[0.x.6592] 
[0.x.6593] 
[0.x.6594] 
[0.x.6595] 
[0.x.6596] 
[0.x.6597] 
[0.x.6598] 
//
[0.x.6599] 
[0.x.6600] 
[0.x.6601] 
[0.x.6602] 
[0.x.6603] 
[0.x.6604] 
[0.x.6605] 
[0.x.6606] 
[0.x.6607] 
[0.x.6608] 
[0.x.6609] 
//
[0.x.6610] 
[0.x.6611] 
[0.x.6612] 
//[2.x.916] 
//
// 最后一个有趣的函数是我们生成图形输出的函数。请注意，所有的速度分量都得到相同的解名 "u"。再加上使用[2.x.917]，这将导致[2.x.918]生成各个速度分量的矢量表示，更多信息请参见[2.x.919]或[2.x.920]模块中的 "生成图形输出 "部分。最后，对于高阶元素来说，在图形输出中每个单元只显示一个双线性四边形似乎不合适。因此，我们生成大小为(度数+1)x(度数+1)的斑块来捕捉解决方案的全部信息内容。有关这方面的更多信息，请参见[2.x.922]的教程程序。
//
[0.x.6613] 
[0.x.6614] 
[0.x.6615] 
[0.x.6616] 
[0.x.6617] 
[0.x.6618] 
[0.x.6619] 
[0.x.6620] 
[0.x.6621] 
//
[0.x.6622] 
[0.x.6623] 
[0.x.6624] 
[0.x.6625] 
[0.x.6626] 
//
[0.x.6627] 
//
[0.x.6628] 
[0.x.6629] 
[0.x.6630] 
//
// [2.x.923] 
//
// 这是我们主类的最后一个函数。它唯一的工作是按照自然顺序调用其他函数。
//
[0.x.6631] 
[0.x.6632] 
[0.x.6633] 
[0.x.6634] 
[0.x.6635] 
[0.x.6636] 
[0.x.6637] 
[0.x.6638] 
[0.x.6639] 
[0.x.6640] 
//[2.x.924] 
//
// 我们从 [2.x.925] 而不是 [2.x.926] 那里偷来的主函数。它几乎等同于[2.x.927]中的函数（当然，除了改变的类名），唯一的例外是我们将有限元空间的度数传递给混合拉普拉斯问题的构造函数（这里，我们使用零阶元素）。
//
[0.x.6641] 
[0.x.6642] 
[0.x.6643] 
[0.x.6644] 
[0.x.6645] 
//
[0.x.6646] 
[0.x.6647] 
[0.x.6648] 
[0.x.6649] 
[0.x.6650] 
[0.x.6651] 
[0.x.6652] 
[0.x.6653] 
[0.x.6654] 
[0.x.6655] 
[0.x.6656] 
[0.x.6657] 
[0.x.6658] 
[0.x.6659] 
[0.x.6660] 
//
[0.x.6661] 
[0.x.6662] 
[0.x.6663] 
[0.x.6664] 
[0.x.6665] 
[0.x.6666] 
[0.x.6667] 
[0.x.6668] 
[0.x.6669] 
[0.x.6670] 
[0.x.6671] 
[0.x.6672] 
[0.x.6673] 
[0.x.6674] 
//
[0.x.6675] 
[0.x.6676] 
[0.x.6677] 
[0.x.6678] 
[0.x.6679] 
[0.x.6680] 
[0.x.6681] 
[0.x.6682] 
[0.x.6683] 
[0.x.6684] 
[0.x.6685] 
[0.x.6686] 
[0.x.6687] 
[0.x.6688] 
[0.x.6689] 
[0.x.6690] 
//
[0.x.6691] 
[0.x.6692] 
[0.x.6693] 
//
// 这个程序是对 [2.x.928] 的改编，包括一些来自 [2.x.929] 的DG方法的技术。因此，该程序的很大一部分与 [2.x.930] 非常相似，我们将不再对这些部分进行评论。只有新的东西才会被详细讨论。
//
// [2.x.931] 
//
// 这些include文件以前都用过了。
//
[0.x.6694] 
[0.x.6695] 
[0.x.6696] 
//
[0.x.6697] 
[0.x.6698] 
[0.x.6699] 
[0.x.6700] 
[0.x.6701] 
[0.x.6702] 
//
[0.x.6703] 
[0.x.6704] 
[0.x.6705] 
//
[0.x.6706] 
[0.x.6707] 
[0.x.6708] 
//
[0.x.6709] 
[0.x.6710] 
[0.x.6711] 
[0.x.6712] 
//
[0.x.6713] 
[0.x.6714] 
[0.x.6715] 
//
[0.x.6716] 
[0.x.6717] 
//
// 在这个程序中，我们使用一个张量值的系数。由于它可能具有空间依赖性，我们认为它是一个张量值的函数。下面的include文件提供了提供这种功能的[2.x.932]类。
//
[0.x.6718] 
//
// 此外，我们使用[2.x.933]类来执行与时间递增有关的操作。
//
[0.x.6719] 
//
// 最后一步和以前所有的程序一样。
//
[0.x.6720] 
[0.x.6721] 
[0.x.6722] 
//[2.x.934] 
//
// 这是该程序的主类。它与[2.x.935]中的类很接近，但增加了一些功能。
//
// [2.x.936] 
//[2.x.937] 
//[2.x.938]集合了饱和度方程的右侧。正如介绍中所解释的，这不能被集成到[2.x.939]中，因为它取决于在时间步长的第一部分计算的速度。
//
// [2.x.940] 
//[2.x.941]的作用正如其名称所示。这个函数用于计算时间步长。
//
// [2.x.942] 
//[2.x.943] 将所有饱和度小于0的自由度重置为0，所有饱和度大于1的自由度重置为1。  [2.x.944] 
//
// 该类的其余部分应该是非常明显的。变量[2.x.945]存储粘度[2.x.946]，它进入了非线性方程中的几个公式。变量[2.x.947]记录了模拟过程中的时间信息。
//
[0.x.6723] 
[0.x.6724] 
[0.x.6725] 
[0.x.6726] 
[0.x.6727] 
[0.x.6728] 
//
[0.x.6729] 
[0.x.6730] 
[0.x.6731] 
[0.x.6732] 
[0.x.6733] 
[0.x.6734] 
[0.x.6735] 
[0.x.6736] 
//
[0.x.6737] 
//
[0.x.6738] 
[0.x.6739] 
[0.x.6740] 
//
[0.x.6741] 
[0.x.6742] 
//
[0.x.6743] 
//
[0.x.6744] 
[0.x.6745] 
//
[0.x.6746] 
[0.x.6747] 
[0.x.6748] 
[0.x.6749] 
//[2.x.948] 
//[2.x.949] 
//
// 目前，压力方程的右侧仅仅是零函数。但是，如果需要的话，程序的其余部分完全可以处理其他的东西。
//
[0.x.6750] 
[0.x.6751] 
[0.x.6752] 
[0.x.6753] 
[0.x.6754] 
[0.x.6755] 
[0.x.6756] 
//
[0.x.6757] 
[0.x.6758] 
[0.x.6759] 
[0.x.6760] 
[0.x.6761] 
[0.x.6762] 
//
// [2.x.950] 
//
// 接下来是压力边界值。正如介绍中提到的，我们选择一个线性压力场。
//
[0.x.6763] 
[0.x.6764] 
[0.x.6765] 
[0.x.6766] 
[0.x.6767] 
[0.x.6768] 
[0.x.6769] 
//
[0.x.6770] 
[0.x.6771] 
[0.x.6772] 
[0.x.6773] 
[0.x.6774] 
[0.x.6775] 
//
// [2.x.951] 
//
// 然后，我们还需要边界的流入部分的边界值。某物是否为流入部分的问题是在组装右手边时决定的，我们只需要提供边界值的功能描述。这正如介绍中所解释的。
//
[0.x.6776] 
[0.x.6777] 
[0.x.6778] 
[0.x.6779] 
[0.x.6780] 
[0.x.6781] 
[0.x.6782] 
//
[0.x.6783] 
[0.x.6784] 
[0.x.6785] 
[0.x.6786] 
[0.x.6787] 
[0.x.6788] 
[0.x.6789] 
[0.x.6790] 
[0.x.6791] 
//
// [2.x.952] 
//
// 最后，我们需要初始数据。实际上，我们只需要饱和度的初始数据，但我们很懒，所以以后在第一个时间步骤之前，我们会简单地从一个包含所有矢量分量的函数中插值出前一个时间步骤的整个解决方案。
//
因此，//我们简单地创建一个所有分量都返回0的函数。我们通过简单地将每个函数转发到[2.x.953]类来做到这一点。为什么不在这个程序中我们目前使用[2.x.954]类的地方立即使用呢？因为这样，以后再回去选择不同的函数来做初始值就更简单了。
//
[0.x.6792] 
[0.x.6793] 
[0.x.6794] 
[0.x.6795] 
[0.x.6796] 
[0.x.6797] 
[0.x.6798] 
//
[0.x.6799] 
[0.x.6800] 
[0.x.6801] 
[0.x.6802] 
[0.x.6803] 
//
[0.x.6804] 
[0.x.6805] 
[0.x.6806] 
[0.x.6807] 
[0.x.6808] 
[0.x.6809] 
//
// [2.x.955] 
//
// 正如介绍中所宣布的，我们实现了两个不同的渗透率张量场。我们把它们各自放入一个命名空间，这样以后就可以很容易地在代码中用另一个来代替一个。
//
// [2.x.956] 
//
// 渗透率的第一个函数是模拟单个弯曲裂缝的函数。它在[2.x.957]的结尾已经使用过了，它的函数形式在本教程程序的介绍中给出。和以前的一些程序一样，我们必须声明KInverse类的一个（似乎是不必要的）默认构造函数，以避免某些编译器的警告。
//
[0.x.6810] 
[0.x.6811] 
[0.x.6812] 
[0.x.6813] 
[0.x.6814] 
[0.x.6815] 
[0.x.6816] 
[0.x.6817] 
[0.x.6818] 
//
[0.x.6819] 
[0.x.6820] 
[0.x.6821] 
[0.x.6822] 
[0.x.6823] 
[0.x.6824] 
//
[0.x.6825] 
[0.x.6826] 
[0.x.6827] 
//
[0.x.6828] 
[0.x.6829] 
//
[0.x.6830] 
[0.x.6831] 
[0.x.6832] 
[0.x.6833] 
//
[0.x.6834] 
[0.x.6835] 
[0.x.6836] 
[0.x.6837] 
[0.x.6838] 
[0.x.6839] 
//[2.x.958] 
//
// 这个函数的作用与介绍中公布的一样，即在随机的地方创建一个叠加的指数。对于这个类，有一件事值得考虑。这个问题的核心是，这个类使用随机函数创建指数的中心。如果我们因此在每次创建本类型的对象时都创建中心，我们每次都会得到一个不同的中心列表。这不是我们对这种类型的类的期望：它们应该可靠地表示同一个函数。
//
// 解决这个问题的方法是使中心列表成为这个类的静态成员变量，也就是说，在整个程序中只存在一个这样的变量，而不是为这个类型的每个对象。这正是我们所要做的。
//
// 然而，接下来的问题是，我们需要一种方法来初始化这个变量。由于这个变量是在程序开始时初始化的，我们不能使用普通的成员函数来实现，因为当时身边可能没有这个类型的对象。因此C++标准规定，只有非成员函数和静态成员函数可以用来初始化静态变量。我们通过定义一个函数[2.x.959]来使用后一种可能性，该函数在调用时计算中心点的列表。
//
// 注意，这个类在2D和3D中都能正常工作，唯一的区别是我们在3D中使用了更多的点：通过实验我们发现，我们在3D中比2D中需要更多的指数（毕竟我们有更多的地方需要覆盖，如果我们想保持中心之间的距离大致相等），所以我们在2D中选择40，在3D中选择100。对于任何其他维度，该函数目前不知道该怎么做，所以只是抛出一个异常，表明这一点。
//
[0.x.6840] 
[0.x.6841] 
[0.x.6842] 
[0.x.6843] 
[0.x.6844] 
[0.x.6845] 
[0.x.6846] 
[0.x.6847] 
[0.x.6848] 
//
[0.x.6849] 
[0.x.6850] 
[0.x.6851] 
[0.x.6852] 
[0.x.6853] 
[0.x.6854] 
//
[0.x.6855] 
[0.x.6856] 
[0.x.6857] 
//
[0.x.6858] 
[0.x.6859] 
[0.x.6860] 
[0.x.6861] 
//
[0.x.6862] 
[0.x.6863] 
//
[0.x.6864] 
[0.x.6865] 
[0.x.6866] 
[0.x.6867] 
//
[0.x.6868] 
[0.x.6869] 
//
[0.x.6870] 
[0.x.6871] 
[0.x.6872] 
[0.x.6873] 
//
[0.x.6874] 
[0.x.6875] 
[0.x.6876] 
[0.x.6877] 
//
[0.x.6878] 
[0.x.6879] 
[0.x.6880] 
//
[0.x.6881] 
[0.x.6882] 
[0.x.6883] 
[0.x.6884] 
//
// [2.x.960] 
//
// 还有两个数据我们需要描述，即反流动性函数和饱和度曲线。它们的形式也在介绍中给出。
//
[0.x.6885] 
[0.x.6886] 
[0.x.6887] 
[0.x.6888] 
//
[0.x.6889] 
[0.x.6890] 
[0.x.6891] 
[0.x.6892] 
//
// [2.x.961] 
//
// 我们使用的线性求解器也完全类似于 [2.x.962] 中使用的。因此，下面的类是逐字逐句从那里复制过来的。请注意，这里的类不仅是从[2.x.963]中复制的，而且在deal.II中也有重复的类。在这个例子的未来版本中，它们应该被一个有效的方法所取代，不过。有一个变化：如果线性系统的尺寸很小，即当网格很粗时，那么在[2.x.964]函数中的求解器收敛之前，设置[2.x.965]CG迭代的最大值有时是不够的。(当然，这是数值取舍的结果，因为我们知道在纸面上，CG方法最多在[2.x.966]步内收敛)。因此，我们将最大的迭代次数设定为等于线性系统的最大规模和200。
//
[0.x.6893] 
[0.x.6894] 
[0.x.6895] 
[0.x.6896] 
[0.x.6897] 
[0.x.6898] 
[0.x.6899] 
//
[0.x.6900] 
[0.x.6901] 
[0.x.6902] 
[0.x.6903] 
[0.x.6904] 
//
[0.x.6905] 
//
[0.x.6906] 
[0.x.6907] 
//
[0.x.6908] 
[0.x.6909] 
[0.x.6910] 
//
[0.x.6911] 
[0.x.6912] 
[0.x.6913] 
[0.x.6914] 
[0.x.6915] 
[0.x.6916] 
[0.x.6917] 
[0.x.6918] 
[0.x.6919] 
[0.x.6920] 
//
[0.x.6921] 
[0.x.6922] 
[0.x.6923] 
[0.x.6924] 
[0.x.6925] 
[0.x.6926] 
//
[0.x.6927] 
[0.x.6928] 
[0.x.6929] 
//
[0.x.6930] 
[0.x.6931] 
//
[0.x.6932] 
[0.x.6933] 
[0.x.6934] 
[0.x.6935] 
[0.x.6936] 
[0.x.6937] 
[0.x.6938] 
[0.x.6939] 
//
[0.x.6940] 
[0.x.6941] 
[0.x.6942] 
[0.x.6943] 
[0.x.6944] 
[0.x.6945] 
//
[0.x.6946] 
[0.x.6947] 
//
[0.x.6948] 
[0.x.6949] 
//
// [2.x.967] 
//
// 现在是主类的实现。它的大部分内容实际上是从 [2.x.968] 中复制过来的，所以我们不会对它进行详细的评论。你应该试着先熟悉一下那个程序，然后这里发生的大部分事情就应该很清楚了。
//
// [2.x.969] 
//
// 首先是构造函数。我们使用[2.x.970]空间。对于初始化DiscreteTime对象，我们不在构造函数中设置时间步长，因为我们还没有它的值。时间步长最初被设置为零，但在需要增量时间之前，它将被计算出来，正如介绍的一个小节中所描述的。时间对象在内部阻止自己在[2.x.971]时被递增，迫使我们在推进时间之前为[2.x.972]设置一个非零的期望大小。
//
[0.x.6950] 
[0.x.6951] 
[0.x.6952] 
[0.x.6953] 
[0.x.6954] 
[0.x.6955] 
[0.x.6956] 
[0.x.6957] 
[0.x.6958] 
[0.x.6959] 
[0.x.6960] 
[0.x.6961] 
[0.x.6962] 
[0.x.6963] 
//
// [2.x.973] 
//
// 下一个函数从众所周知的函数调用开始，创建和细化一个网格，然后将自由度与之关联。它所做的事情与[2.x.974]中的相同，只是现在是三个组件而不是两个。
//
[0.x.6964] 
[0.x.6965] 
[0.x.6966] 
[0.x.6967] 
[0.x.6968] 
//
[0.x.6969] 
[0.x.6970] 
//
[0.x.6971] 
[0.x.6972] 
[0.x.6973] 
[0.x.6974] 
[0.x.6975] 
//
[0.x.6976] 
[0.x.6977] 
[0.x.6978] 
[0.x.6979] 
[0.x.6980] 
//
[0.x.6981] 
//
[0.x.6982] 
[0.x.6983] 
[0.x.6984] 
[0.x.6985] 
[0.x.6986] 
[0.x.6987] 
[0.x.6988] 
[0.x.6989] 
[0.x.6990] 
[0.x.6991] 
//
[0.x.6992] 
//
[0.x.6993] 
[0.x.6994] 
//
[0.x.6995] 
//
[0.x.6996] 
[0.x.6997] 
[0.x.6998] 
[0.x.6999] 
[0.x.7000] 
//
[0.x.7001] 
[0.x.7002] 
[0.x.7003] 
[0.x.7004] 
[0.x.7005] 
//
[0.x.7006] 
[0.x.7007] 
[0.x.7008] 
[0.x.7009] 
[0.x.7010] 
[0.x.7011] 
//[2.x.975] 
//
// 这是组装线性系统的函数，或者至少是除了(1,3)块之外的所有东西，它取决于在这个时间步长中计算的仍然未知的速度（我们在[2.x.976]中处理这个问题）。它的大部分内容与[2.x.977]一样，但这次我们必须处理一些非线性的问题。 然而，该函数的顶部与往常一样（注意我们在开始时将矩阵和右手边设置为零&mdash; 对于静止问题我们不必这样做，因为在那里我们只使用一次矩阵对象，而且在开始时它是空的）。
//
// 注意，在目前的形式下，该函数使用[2.x.978]类中实现的渗透率。切换到单曲裂缝渗透率函数就像改变命名空间名称一样简单。
//
[0.x.7012] 
[0.x.7013] 
[0.x.7014] 
[0.x.7015] 
[0.x.7016] 
//
[0.x.7017] 
[0.x.7018] 
//
[0.x.7019] 
[0.x.7020] 
[0.x.7021] 
[0.x.7022] 
[0.x.7023] 
[0.x.7024] 
[0.x.7025] 
[0.x.7026] 
[0.x.7027] 
//
[0.x.7028] 
//
[0.x.7029] 
[0.x.7030] 
//
[0.x.7031] 
[0.x.7032] 
//
[0.x.7033] 
//
[0.x.7034] 
[0.x.7035] 
[0.x.7036] 
//
[0.x.7037] 
[0.x.7038] 
[0.x.7039] 
//
[0.x.7040] 
[0.x.7041] 
[0.x.7042] 
[0.x.7043] 
//
[0.x.7044] 
[0.x.7045] 
[0.x.7046] 
//
[0.x.7047] 
[0.x.7048] 
[0.x.7049] 
[0.x.7050] 
[0.x.7051] 
//
// 这里是第一个重要的区别。我们必须在正交点上获得前一个时间步骤的饱和函数值。为此，我们可以使用[2.x.979]（之前已经在[2.x.980]、[2.x.981]和[2.x.982]中使用），这个函数接收一个解向量并返回当前单元的正交点的函数值列表。事实上，它返回每个正交点的完整矢量值解，即不仅是饱和度，还有速度和压力。
//
[0.x.7052] 
//
// 然后，我们还必须得到压力的右手边和反渗透性张量在正交点的数值。
//
[0.x.7053] 
[0.x.7054] 
[0.x.7055] 
[0.x.7056] 
//
// 有了这些，我们现在可以在这个单元格上的所有正交点和形状函数上进行循环，并将我们在这个函数中处理的矩阵和右手边的那些部分组合起来。考虑到引言中所述的双线性形式的明确形式，贡献中的各个条款应该是不言自明的。
//
[0.x.7057] 
[0.x.7058] 
[0.x.7059] 
[0.x.7060] 
//
[0.x.7061] 
[0.x.7062] 
[0.x.7063] 
[0.x.7064] 
//
[0.x.7065] 
[0.x.7066] 
[0.x.7067] 
[0.x.7068] 
[0.x.7069] 
[0.x.7070] 
[0.x.7071] 
[0.x.7072] 
//
[0.x.7073] 
[0.x.7074] 
[0.x.7075] 
[0.x.7076] 
[0.x.7077] 
[0.x.7078] 
[0.x.7079] 
//
[0.x.7080] 
[0.x.7081] 
[0.x.7082] 
//
// 接下来，我们还必须处理压力边界值。这一点，还是和[2.x.983]中一样。
//
[0.x.7083] 
[0.x.7084] 
[0.x.7085] 
[0.x.7086] 
//
[0.x.7087] 
[0.x.7088] 
//
[0.x.7089] 
[0.x.7090] 
[0.x.7091] 
[0.x.7092] 
[0.x.7093] 
//
[0.x.7094] 
[0.x.7095] 
[0.x.7096] 
[0.x.7097] 
[0.x.7098] 
//
// 在所有单元的循环中，最后一步是将局部贡献转移到全局矩阵和右侧向量中。
//
[0.x.7099] 
[0.x.7100] 
[0.x.7101] 
[0.x.7102] 
[0.x.7103] 
[0.x.7104] 
//
[0.x.7105] 
[0.x.7106] 
[0.x.7107] 
[0.x.7108] 
//
// 矩阵和右手边的组装就这么多了。请注意，我们不需要插值和应用边界值，因为它们都已经在弱式中被处理过了。
//
// [2.x.984] 
//
// 正如在介绍中所解释的，我们只有在计算出速度后才能评估饱和方程的右边。因此，我们有这个单独的函数来实现这个目的。
//
[0.x.7109] 
[0.x.7110] 
[0.x.7111] 
[0.x.7112] 
[0.x.7113] 
[0.x.7114] 
[0.x.7115] 
[0.x.7116] 
[0.x.7117] 
[0.x.7118] 
[0.x.7119] 
[0.x.7120] 
[0.x.7121] 
[0.x.7122] 
[0.x.7123] 
[0.x.7124] 
[0.x.7125] 
//
[0.x.7126] 
[0.x.7127] 
[0.x.7128] 
//
[0.x.7129] 
//
[0.x.7130] 
[0.x.7131] 
[0.x.7132] 
[0.x.7133] 
[0.x.7134] 
[0.x.7135] 
[0.x.7136] 
[0.x.7137] 
[0.x.7138] 
[0.x.7139] 
[0.x.7140] 
[0.x.7141] 
//
[0.x.7142] 
[0.x.7143] 
//
[0.x.7144] 
//
[0.x.7145] 
//
[0.x.7146] 
[0.x.7147] 
[0.x.7148] 
[0.x.7149] 
//
[0.x.7150] 
[0.x.7151] 
//
// 首先是单元格条款。按照介绍中的公式，这些是 [2.x.985] ，其中 [2.x.986] 是测试函数的饱和成分。
//
[0.x.7152] 
[0.x.7153] 
[0.x.7154] 
[0.x.7155] 
[0.x.7156] 
[0.x.7157] 
[0.x.7158] 
//
[0.x.7159] 
[0.x.7160] 
[0.x.7161] 
//
[0.x.7162] 
[0.x.7163] 
[0.x.7164] 
[0.x.7165] 
[0.x.7166] 
[0.x.7167] 
//
// 其次，我们必须处理面的边界上的通量部分。这就有点麻烦了，因为我们首先要确定哪些是细胞边界的流入和流出部分。如果我们有一个流入的边界，我们需要评估面的另一边的饱和度（或者边界值，如果我们在域的边界上）。
//
// 所有这些都有点棘手，但在 [2.x.987] 中已经有了一些详细的解释。请看这里，这应该是如何工作的!
//
[0.x.7168] 
[0.x.7169] 
[0.x.7170] 
//
[0.x.7171] 
[0.x.7172] 
[0.x.7173] 
[0.x.7174] 
//
[0.x.7175] 
[0.x.7176] 
[0.x.7177] 
[0.x.7178] 
[0.x.7179] 
[0.x.7180] 
[0.x.7181] 
[0.x.7182] 
//
[0.x.7183] 
//
[0.x.7184] 
[0.x.7185] 
//
[0.x.7186] 
[0.x.7187] 
[0.x.7188] 
[0.x.7189] 
//
[0.x.7190] 
[0.x.7191] 
[0.x.7192] 
[0.x.7193] 
[0.x.7194] 
//
[0.x.7195] 
[0.x.7196] 
//
[0.x.7197] 
//
[0.x.7198] 
[0.x.7199] 
[0.x.7200] 
[0.x.7201] 
[0.x.7202] 
[0.x.7203] 
[0.x.7204] 
[0.x.7205] 
[0.x.7206] 
[0.x.7207] 
[0.x.7208] 
//
[0.x.7209] 
[0.x.7210] 
[0.x.7211] 
[0.x.7212] 
[0.x.7213] 
//
// [2.x.988] 
//
// 在所有这些准备工作之后，我们最终以与 [2.x.989] 相同的方式解决速度和压力的线性系统。在这之后，我们必须处理饱和方程（见下文）。
//
[0.x.7214] 
[0.x.7215] 
[0.x.7216] 
[0.x.7217] 
[0.x.7218] 
[0.x.7219] 
[0.x.7220] 
[0.x.7221] 
//
// 首先是压力，使用前两个方程的压力舒尔补。
//
[0.x.7222] 
[0.x.7223] 
[0.x.7224] 
[0.x.7225] 
//
[0.x.7226] 
//
[0.x.7227] 
//
[0.x.7228] 
[0.x.7229] 
//
[0.x.7230] 
[0.x.7231] 
[0.x.7232] 
//
[0.x.7233] 
//
[0.x.7234] 
[0.x.7235] 
[0.x.7236] 
//
// 现在是速度。
//
[0.x.7237] 
[0.x.7238] 
[0.x.7239] 
[0.x.7240] 
//
[0.x.7241] 
[0.x.7242] 
//
// 最后，我们必须处理好饱和度方程。在这里，我们要做的第一件事是使用介绍中的公式来确定时间步长。知道了我们领域的形状，以及我们通过有规律地划分单元来创建网格，我们可以很容易地计算出每个单元的直径（事实上我们使用的是单元坐标方向上的线性扩展，而不是直径）。请注意，我们将在[2.x.990]中学习一种更通用的方法，在那里我们使用[2.x.991]函数。
//
// 我们使用一个辅助函数来计算下面定义的最大速度，有了这些，我们就可以评估我们新的时间步长了。我们使用方法[2.x.992]来向DiscreteTime对象建议新的时间步长的计算值。在大多数情况下，时间对象使用精确提供的值来增加时间。在某些情况下，时间对象可以进一步修改步骤大小。例如，如果计算出的时间增量超过了结束时间，它将被相应地截断。
//
[0.x.7243] 
[0.x.7244] 
//
// 下一步是组装右手边，然后把所有的东西都传给解。最后，我们把饱和度投射回物理上合理的范围。
//
[0.x.7245] 
[0.x.7246] 
[0.x.7247] 
[0.x.7248] 
[0.x.7249] 
[0.x.7250] 
[0.x.7251] 
[0.x.7252] 
[0.x.7253] 
//
[0.x.7254] 
//
[0.x.7255] 
[0.x.7256] 
[0.x.7257] 
//
[0.x.7258] 
[0.x.7259] 
//[2.x.993] 
//
// 这里没有什么值得惊讶的。由于程序会做大量的时间步骤，我们只在每第五个时间步骤创建一个输出文件，并在文件的顶部已经跳过所有其他时间步骤。
//
// 在为接近函数底部的输出创建文件名时，我们将时间步长的数字转换为字符串表示，用前导零填充到四位数。我们这样做是因为这样所有的输出文件名都有相同的长度，因此在创建目录列表时可以很好地排序。
//
[0.x.7260] 
[0.x.7261] 
[0.x.7262] 
[0.x.7263] 
[0.x.7264] 
//
[0.x.7265] 
[0.x.7266] 
[0.x.7267] 
[0.x.7268] 
[0.x.7269] 
[0.x.7270] 
//
[0.x.7271] 
[0.x.7272] 
[0.x.7273] 
//
[0.x.7274] 
[0.x.7275] 
[0.x.7276] 
//
[0.x.7277] 
//
[0.x.7278] 
[0.x.7279] 
//
[0.x.7280] 
//
[0.x.7281] 
[0.x.7282] 
[0.x.7283] 
[0.x.7284] 
[0.x.7285] 
//
// [2.x.994] 
//
// 在这个函数中，我们简单地遍历所有的饱和自由度，并确保如果它们离开了物理上的合理范围，它们将被重置到区间 [2.x.995] 。要做到这一点，我们只需要循环解决向量的所有饱和分量；这些分量存储在块2中（块0是速度，块1是压力）。
//
// 值得注意的是，当时间步长选择如介绍中提到的那样时，这个函数几乎从未触发过，这一点可能很有启发。然而，如果我们只选择稍大的时间步长，我们会得到大量超出适当范围的数值。严格来说，如果我们选择的时间步长足够小，这个函数因此是不必要的。从某种意义上说，这个函数只是一个安全装置，以避免由于个别自由度在几个时间步长之前变得不符合物理条件而导致我们的整个解决方案变得不符合物理条件的情况。
//
[0.x.7286] 
[0.x.7287] 
[0.x.7288] 
[0.x.7289] 
[0.x.7290] 
[0.x.7291] 
[0.x.7292] 
[0.x.7293] 
[0.x.7294] 
//[2.x.996] 
//
// 下面的函数用于确定允许的最大时间步长。它的作用是在域中的所有正交点上循环，找出速度的最大幅度。
//
[0.x.7295] 
[0.x.7296] 
[0.x.7297] 
[0.x.7298] 
[0.x.7299] 
//
[0.x.7300] 
[0.x.7301] 
[0.x.7302] 
[0.x.7303] 
//
[0.x.7304] 
[0.x.7305] 
[0.x.7306] 
[0.x.7307] 
//
[0.x.7308] 
[0.x.7309] 
[0.x.7310] 
[0.x.7311] 
[0.x.7312] 
//
[0.x.7313] 
[0.x.7314] 
[0.x.7315] 
//
[0.x.7316] 
[0.x.7317] 
//[2.x.997] 
//
// 这是我们主类的最后一个函数。它的简洁不言自明。只有两点是值得注意的。首先，该函数在开始时将初始值投射到有限元空间上；[2.x.998]函数这样做需要一个表明悬挂节点约束的参数。我们在这个程序中没有（我们在一个均匀细化的网格上计算），但是这个函数当然需要这个参数。所以我们必须创建一个约束对象。在原始状态下，约束对象是没有排序的，在使用前必须进行排序（使用[2.x.999]函数）。这就是我们在这里所做的，这也是为什么我们不能简单地用一个匿名的临时对象[2.x.1001]作为第二个参数来调用[2.x.1000]函数。
//
// 值得一提的第二点是，我们只在求解每个时间步长对应的线性系统的过程中计算当前时间步长。因此，我们只有在时间步长结束时才能输出一个时间步长的当前时间。我们通过调用循环内的方法[2.x.1002]来增加时间。由于我们在增量后报告时间和dt，我们必须调用方法[2.x.1003]，而不是[2.x.1004]。 经过许多步，当模拟到达结束时间时，最后的dt由DiscreteTime类选择，其方式是最后一步正好在结束时间完成。
//
[0.x.7318] 
[0.x.7319] 
[0.x.7320] 
[0.x.7321] 
//
[0.x.7322] 
[0.x.7323] 
[0.x.7324] 
//
[0.x.7325] 
[0.x.7326] 
[0.x.7327] 
[0.x.7328] 
[0.x.7329] 
[0.x.7330] 
//
[0.x.7331] 
[0.x.7332] 
[0.x.7333] 
//
[0.x.7334] 
//
[0.x.7335] 
//
[0.x.7336] 
//
[0.x.7337] 
[0.x.7338] 
[0.x.7339] 
[0.x.7340] 
[0.x.7341] 
[0.x.7342] 
[0.x.7343] 
[0.x.7344] 
[0.x.7345] 
//[2.x.1005] 
//
// 这就是了。在主函数中，我们将有限元空间的度数传递给TwoPhaseFlowProblem对象的构造函数。 这里，我们使用零度元素，即[2.x.1006] 。其余部分与其他所有程序一样。
//
[0.x.7346] 
[0.x.7347] 
[0.x.7348] 
[0.x.7349] 
[0.x.7350] 
//
[0.x.7351] 
[0.x.7352] 
[0.x.7353] 
[0.x.7354] 
[0.x.7355] 
[0.x.7356] 
[0.x.7357] 
[0.x.7358] 
[0.x.7359] 
[0.x.7360] 
[0.x.7361] 
[0.x.7362] 
[0.x.7363] 
[0.x.7364] 
//
[0.x.7365] 
[0.x.7366] 
[0.x.7367] 
[0.x.7368] 
[0.x.7369] 
[0.x.7370] 
[0.x.7371] 
[0.x.7372] 
[0.x.7373] 
[0.x.7374] 
[0.x.7375] 
[0.x.7376] 
[0.x.7377] 
[0.x.7378] 
//
[0.x.7379] 
[0.x.7380] 
[0.x.7381] 
[0.x.7382] 
[0.x.7383] 
[0.x.7384] 
[0.x.7385] 
[0.x.7386] 
[0.x.7387] 
[0.x.7388] 
[0.x.7389] 
[0.x.7390] 
[0.x.7391] 
[0.x.7392] 
[0.x.7393] 
[0.x.7394] 
//
[0.x.7395] 
[0.x.7396] 
[0.x.7397] 
//[2.x.1007] 
//
// 像往常一样，我们从包括一些著名的文件开始。
//
[0.x.7398] 
[0.x.7399] 
[0.x.7400] 
[0.x.7401] 
//
[0.x.7402] 
[0.x.7403] 
[0.x.7404] 
[0.x.7405] 
[0.x.7406] 
[0.x.7407] 
//
[0.x.7408] 
[0.x.7409] 
[0.x.7410] 
[0.x.7411] 
//
[0.x.7412] 
[0.x.7413] 
[0.x.7414] 
//
[0.x.7415] 
[0.x.7416] 
[0.x.7417] 
//
[0.x.7418] 
[0.x.7419] 
[0.x.7420] 
[0.x.7421] 
//
// 然后我们需要包括稀疏直接求解器UMFPACK的头文件。
//
[0.x.7422] 
//
// 这包括不完全LU因子化的库，它将被用作3D的预处理程序。
//
[0.x.7423] 
//
// 这是C++语言。
//
[0.x.7424] 
[0.x.7425] 
[0.x.7426] 
//
// 和所有的程序一样，名字空间dealii被包括在内。
//
[0.x.7427] 
[0.x.7428] 
[0.x.7429] 
//[2.x.1008] 
//
// 正如介绍中所解释的，我们将分别对两个和三个空间维度使用不同的预处理程序。我们通过使用空间维度作为模板参数来区分它们。关于模板的细节，请参见[2.x.1009]。我们不打算在这里创建任何预处理对象，我们所做的只是创建一个持有确定预处理类的本地别名的类，这样我们就可以以独立于维度的方式编写我们的程序。
//
[0.x.7430] 
[0.x.7431] 
//
// 在二维中，我们将使用一个稀疏的直接求解器作为预处理程序。
//
[0.x.7432] 
[0.x.7433] 
[0.x.7434] 
[0.x.7435] 
[0.x.7436] 
//
// 还有三维的ILU预处理，由SparseILU调用。
//
[0.x.7437] 
[0.x.7438] 
[0.x.7439] 
[0.x.7440] 
[0.x.7441] 
//[2.x.1010] 
//
// 这是对[2.x.1011]的改编，所以主类和数据类型与那里使用的几乎相同。唯一不同的是，我们有一个额外的成员 [2.x.1012] ，用于预处理Schur补码，以及一个相应的稀疏模式 [2.x.1013] 。此外，我们没有依赖LinearOperator，而是实现了我们自己的InverseMatrix类。
//
// 在这个例子中，我们还使用了自适应网格细化，其处理方式与 [2.x.1014] 类似。根据介绍中的讨论，我们也将使用AffineConstraints对象来实现Dirichlet边界条件。因此，我们改变名称 [2.x.1015] 。
//
[0.x.7442] 
[0.x.7443] 
[0.x.7444] 
[0.x.7445] 
[0.x.7446] 
[0.x.7447] 
//
[0.x.7448] 
[0.x.7449] 
[0.x.7450] 
[0.x.7451] 
[0.x.7452] 
[0.x.7453] 
//
[0.x.7454] 
//
[0.x.7455] 
[0.x.7456] 
[0.x.7457] 
//
[0.x.7458] 
//
[0.x.7459] 
[0.x.7460] 
//
[0.x.7461] 
[0.x.7462] 
//
[0.x.7463] 
[0.x.7464] 
//
// 这一条是新的：我们将使用一个所谓的共享指针结构来访问预处理程序。共享指针本质上只是指针的一种方便形式。几个共享指针可以指向同一个对象（就像普通的指针一样），但是当最后一个指向前提器对象的共享指针对象被删除时（例如共享指针对象超出了范围，它所在的类被销毁，或者指针被分配给了不同的前提器对象），那么指向的前提器对象也被销毁。这确保了我们不必手动跟踪有多少地方仍在引用一个前置条件器对象，它永远不会产生内存泄漏，也不会产生一个指向已被销毁对象的悬空指针。
//
[0.x.7465] 
[0.x.7466] 
//[2.x.1016] 
//
// 与[2.x.1017]和其他大多数例子程序一样，下一个任务是定义PDE的数据：对于斯托克斯问题，我们将在部分边界上使用自然边界值（即同质诺伊曼型），对于这些边界，我们不必做任何特殊处理（同质性意味着弱形式中的相应项只是零），而在边界的其余部分使用速度的边界条件（迪里希勒型），如介绍中所述。
//
// 为了强制执行速度上的Dirichlet边界值，我们将像往常一样使用[2.x.1018]函数，这要求我们写一个具有与有限元一样多分量的函数对象。换句话说，我们必须在[2.x.1019]-空间上定义函数，但在插值边界值时，我们要过滤掉压力分量。
//
// 下面的函数对象是介绍中描述的边界值的表示。
//
[0.x.7467] 
[0.x.7468] 
[0.x.7469] 
[0.x.7470] 
[0.x.7471] 
[0.x.7472] 
[0.x.7473] 
//
[0.x.7474] 
[0.x.7475] 
//
[0.x.7476] 
[0.x.7477] 
[0.x.7478] 
//
[0.x.7479] 
[0.x.7480] 
[0.x.7481] 
[0.x.7482] 
[0.x.7483] 
[0.x.7484] 
//
[0.x.7485] 
[0.x.7486] 
[0.x.7487] 
[0.x.7488] 
//
[0.x.7489] 
[0.x.7490] 
[0.x.7491] 
[0.x.7492] 
[0.x.7493] 
[0.x.7494] 
[0.x.7495] 
//
// 我们为右手边实现类似的函数，在目前的例子中，右手边只是零。
//
[0.x.7496] 
[0.x.7497] 
[0.x.7498] 
[0.x.7499] 
[0.x.7500] 
[0.x.7501] 
[0.x.7502] 
//
[0.x.7503] 
[0.x.7504] 
//
[0.x.7505] 
[0.x.7506] 
[0.x.7507] 
//
[0.x.7508] 
[0.x.7509] 
[0.x.7510] 
[0.x.7511] 
[0.x.7512] 
[0.x.7513] 
//
[0.x.7514] 
[0.x.7515] 
[0.x.7516] 
[0.x.7517] 
[0.x.7518] 
[0.x.7519] 
[0.x.7520] 
//[2.x.1020] 
//
// 在介绍中广泛讨论了线性求解器和预处理器。在这里，我们创建将被使用的各自对象。
//
// [2.x.1021] [2.x.1022]类表示逆矩阵的数据结构。与[2.x.1023]不同，我们用一个类来实现，而不是用辅助函数inverse_linear_operator()，我们将把这个类应用于不同种类的矩阵，这些矩阵需要不同的预处理程序（在[2.x.1024]中，我们只对质量矩阵使用非同一性预处理程序）。矩阵和预处理器的类型通过模板参数传递给这个类，当创建[2.x.1025]对象时，这些类型的矩阵和预处理器对象将被传递给构造器。成员函数[2.x.1026]是通过解决一个线性系统得到的。
//
[0.x.7521] 
[0.x.7522] 
[0.x.7523] 
[0.x.7524] 
[0.x.7525] 
[0.x.7526] 
//
[0.x.7527] 
//
[0.x.7528] 
[0.x.7529] 
[0.x.7530] 
[0.x.7531] 
//
[0.x.7532] 
[0.x.7533] 
[0.x.7534] 
[0.x.7535] 
[0.x.7536] 
[0.x.7537] 
[0.x.7538] 
//
// 这就是[2.x.1027]函数的实现。
//
// 在这个类中，我们对解算器控制使用了一个相当大的容忍度。这样做的原因是，该函数被频繁使用，因此，任何使CG求解中的残差变小的额外努力都会使求解更加昂贵。请注意，我们不仅将该类作为Schur补码的预处理程序，而且在形成拉普拉斯矩阵的逆时也使用该类；因此，该类直接对解本身的精度负责，所以我们也不能选择太大的公差。
//
[0.x.7539] 
[0.x.7540] 
[0.x.7541] 
[0.x.7542] 
[0.x.7543] 
[0.x.7544] 
[0.x.7545] 
//
[0.x.7546] 
//
[0.x.7547] 
[0.x.7548] 
//[2.x.1028] 
//
// 这个类实现了介绍中讨论的Schur补码。它与 [2.x.1029] 相类似。 不过，我们现在用一个模板参数[2.x.1030]来调用它，以便在指定逆矩阵类的各自类型时访问它。作为上述定义的结果，声明 [2.x.1031] 现在包含了上述预处理类的第二个模板参数，这也影响到 [2.x.1032] 。
//
[0.x.7549] 
[0.x.7550] 
[0.x.7551] 
[0.x.7552] 
[0.x.7553] 
[0.x.7554] 
[0.x.7555] 
//
[0.x.7556] 
//
[0.x.7557] 
[0.x.7558] 
[0.x.7559] 
[0.x.7560] 
[0.x.7561] 
//
[0.x.7562] 
[0.x.7563] 
//
[0.x.7564] 
[0.x.7565] 
[0.x.7566] 
[0.x.7567] 
[0.x.7568] 
[0.x.7569] 
[0.x.7570] 
[0.x.7571] 
[0.x.7572] 
//
[0.x.7573] 
[0.x.7574] 
[0.x.7575] 
[0.x.7576] 
[0.x.7577] 
[0.x.7578] 
[0.x.7579] 
[0.x.7580] 
[0.x.7581] 
//[2.x.1033] 
//[2.x.1034] 
//
// 这个类的构造函数看起来与 [2.x.1035] 的构造函数非常相似。构造函数初始化了多项式程度、三角形、有限元系统和dof处理器的变量。矢量速度分量的基础多项式函数的阶数为[2.x.1036]，压力的阶数为[2.x.1037]。 这就得到了LBB稳定元对[2.x.1038]，通常被称为泰勒-霍德元。
//
// 请注意，我们用MeshSmoothing参数初始化三角形，这可以确保单元的细化是以PDE解的近似保持良好的方式进行的（如果网格过于非结构化就会出现问题），详情请参见[2.x.1039]的文档。
//
[0.x.7582] 
[0.x.7583] 
[0.x.7584] 
[0.x.7585] 
[0.x.7586] 
[0.x.7587] 
[0.x.7588] 
//[2.x.1040] 
//
// 给定一个网格，该函数将自由度与之关联，并创建相应的矩阵和向量。在开始的时候，它还释放了指向预处理对象的指针（如果共享指针在此时指向任何东西的话），因为在这之后肯定不会再需要它了，在组装矩阵后必须重新计算，并将稀疏矩阵从其稀疏模式对象中解开。
//
// 然后，我们继续分配自由度并重新编号。为了使ILU预处理程序（在3D中）有效地工作，重要的是以这样的方式列举自由度，以减少矩阵的带宽，或者也许更重要的是：以这样的方式使ILU尽可能地接近于真正的LU分解。另一方面，我们需要保留在 [2.x.1041] 和 [2.x.1042] 中已经看到的速度和压力的块状结构。这将分两步完成。首先，对所有的道次进行重新编号，以改善ILU，然后我们再一次按组件重新编号。由于[2.x.1043]没有触及单个块内的重新编号，所以第一步的基本重新编号仍然存在。至于如何对自由度进行重新编号以提高ILU：deal.II有许多算法试图找到排序以提高ILU，或减少矩阵的带宽，或优化其他方面。DoFRenumbering命名空间显示了我们在本教程程序中基于这里讨论的测试案例而获得的几种算法的结果比较。在这里，我们将使用传统的Cuthill-McKee算法，该算法已经在之前的一些教程程序中使用。 在[1.x.32]中我们将更详细地讨论这个问题。
//与以前的教程程序相比，
//还有一个变化。没有理由对[2.x.1044]的速度成分进行单独排序。事实上，与其先列举所有[2.x.1045]-velocities，再列举所有[2.x.1046]-velocities，等等，我们希望将所有速度放在一起，只在速度（所有分量）和压力之间分开。默认情况下，[2.x.1047]函数不是这样做的：它把每个矢量分量分开处理；我们要做的是把几个分量分成 "块"，并把这个块结构传递给该函数。因此，我们分配一个矢量[2.x.1048]，有多少个元素就有多少个分量，描述所有的速度分量对应于块0，而压力分量将形成块1。
//
[0.x.7589] 
[0.x.7590] 
[0.x.7591] 
[0.x.7592] 
[0.x.7593] 
[0.x.7594] 
//
[0.x.7595] 
[0.x.7596] 
//
[0.x.7597] 
[0.x.7598] 
[0.x.7599] 
//
// 现在是对Dirichlet边界条件的实现，在介绍中的讨论之后，这应该是很明显的。所有的变化是，这个函数已经出现在设置函数中，而我们习惯于在一些汇编例程中看到它。在我们设置网格的下面，我们将把施加Dirichlet边界条件的顶部边界与边界指标1联系起来。 我们必须将这个边界指标作为第二个参数传递给下面的插值函数。 不过，还有一件事。 描述Dirichlet条件的函数是为所有分量定义的，包括速度和压力。然而，Dirichlet条件只为速度而设置。 为此，我们使用一个只选择速度分量的ComponentMask。通过指定我们想要的特定分量，从有限元中获得该分量掩码。由于我们使用自适应细化网格，仿生约束对象需要首先填充由DoF处理程序生成的悬挂节点约束。注意这两个函数的顺序；我们首先计算悬挂节点约束，然后将边界值插入约束对象。这确保了我们在有悬挂节点的边界上尊重H<sup>1</sup>一致性（在三个空间维度上），悬挂节点需要支配Dirichlet边界值。
//
[0.x.7600] 
[0.x.7601] 
//
[0.x.7602] 
[0.x.7603] 
[0.x.7604] 
[0.x.7605] 
[0.x.7606] 
[0.x.7607] 
[0.x.7608] 
[0.x.7609] 
//
[0.x.7610] 
//
// 与[2.x.1049]相类似，我们计算各个组件中的道夫。我们可以用与那里相同的方式来做，但我们想在我们已经用于重新编号的块结构上进行操作。函数 [2.x.1050] 的作用与 [2.x.1051] 相同，但现在通过 [2.x.1052] 将速度和压力块分组。
//
[0.x.7611] 
[0.x.7612] 
[0.x.7613] 
[0.x.7614] 
//
[0.x.7615] 
[0.x.7616] 
[0.x.7617] 
[0.x.7618] 
//
// 下一个任务是为我们将创建的系统矩阵分配一个稀疏模式，为预处理矩阵分配一个稀疏模式。我们可以用与[2.x.1053]相同的方式来做这件事，即通过[2.x.1054]直接建立一个SparsityPattern类型的对象，但是，有一个重要的理由不这样做。在3D中，函数[2.x.1055]对各个道夫之间的耦合产生了一个保守但相当大的数字，因此，最初为创建矩阵的稀疏模式提供的内存太多--实际上，对于中等大小的3D问题，初始稀疏模式甚至无法放入大多数系统的物理内存中，也请参见[2.x.1056] 中的讨论。相反，我们首先建立临时对象，使用不同的数据结构，不需要分配更多的内存，但不适合作为SparseMatrix或BlockSparseMatrix对象的基础；在第二步，我们将这些对象复制到BlockSparsityPattern类型的对象中。这完全类似于我们在 [2.x.1057] 和 [2.x.1058] 中已经做过的事情。特别是，我们利用了这样一个事实，即我们永远不会写入系统矩阵的[2.x.1059]块中，而且这是唯一需要填充的预处理矩阵块。
//
// 所有这些都是在新范围内完成的，这意味着一旦信息被复制到 [2.x.1061] ， [2.x.1060] 的内存将被释放。
//
[0.x.7619] 
[0.x.7620] 
//
[0.x.7621] 
[0.x.7622] 
[0.x.7623] 
[0.x.7624] 
//
[0.x.7625] 
//
[0.x.7626] 
//
[0.x.7627] 
[0.x.7628] 
[0.x.7629] 
[0.x.7630] 
[0.x.7631] 
[0.x.7632] 
//
[0.x.7633] 
[0.x.7634] 
//
 
[0.x.7636] 
//
[0.x.7637] 
[0.x.7638] 
//
[0.x.7639] 
[0.x.7640] 
[0.x.7641] 
[0.x.7642] 
//
[0.x.7643] 
//
[0.x.7644] 
//
[0.x.7645] 
[0.x.7646] 
[0.x.7647] 
[0.x.7648] 
[0.x.7649] 
[0.x.7650] 
//
[0.x.7651] 
[0.x.7652] 
[0.x.7653] 
[0.x.7654] 
[0.x.7655] 
//
[0.x.7656] 
[0.x.7657] 
//
// 最后，与 [2.x.1062] 中的方法类似，从块状结构中创建系统矩阵、前导矩阵、解决方案和右侧向量。
//
[0.x.7658] 
[0.x.7659] 
//
[0.x.7660] 
[0.x.7661] 
[0.x.7662] 
[0.x.7663] 
//
[0.x.7664] 
[0.x.7665] 
[0.x.7666] 
[0.x.7667] 
[0.x.7668] 
//[2.x.1063] 
//
// 汇编过程遵循[2.x.1064]和介绍中的讨论。我们使用众所周知的缩写来表示保存本单元自由度的局部矩阵、右手边和全局编号的数据结构。
//
[0.x.7669] 
[0.x.7670] 
[0.x.7671] 
[0.x.7672] 
[0.x.7673] 
[0.x.7674] 
//
[0.x.7675] 
//
[0.x.7676] 
[0.x.7677] 
[0.x.7678] 
[0.x.7679] 
//
[0.x.7680] 
//
[0.x.7681] 
//
[0.x.7682] 
[0.x.7683] 
[0.x.7684] 
[0.x.7685] 
//
[0.x.7686] 
//
[0.x.7687] 
[0.x.7688] 
//
// 接下来，我们需要两个对象，作为FEValues对象的提取器。它们的用途在 [2.x.1065] vector_valued 的报告中详细解释。
//
[0.x.7689] 
[0.x.7690] 
//
// 作为对[2.x.1066]和[2.x.1067]的扩展，我们包括了一些优化，使这个特定问题的装配速度大大加快。这些改进是基于这样的观察：当我们像[2.x.1068]那样做时，我们做了太多次的计算：对称梯度实际上在每个正交点有[2.x.1069]个不同的值，但是我们从FEValues对象中提取了[2.x.1070]次。
//
// - 在[2.x.1071]的循环和[2.x.1072]的内循环中。在3D中，这意味着评估它[2.x.1073]次而不是[2.x.1074]次，这是一个不小的差别。
//
// 所以我们在这里要做的是，在开始对单元上的道夫进行循环之前，在正交点得到一个秩-2张量的向量（类似的还有压力上的发散和基函数值）来避免这种重复计算。首先，我们创建各自的对象来保存这些值。然后，我们开始在所有单元上进行循环，并在正交点上进行循环，在那里我们首先提取这些值。我们在这里还实现了一个优化：本地矩阵（以及全局矩阵）将是对称的，因为所有涉及的操作都是相对于[2.x.1075]和[2.x.1076]对称的。这可以通过简单地运行内循环而不是[2.x.1077]来实现，即外循环的索引。
//
[0.x.7691] 
[0.x.7692] 
[0.x.7693] 
//
[0.x.7694] 
[0.x.7695] 
[0.x.7696] 
[0.x.7697] 
[0.x.7698] 
[0.x.7699] 
//
[0.x.7700] 
[0.x.7701] 
//
[0.x.7702] 
[0.x.7703] 
[0.x.7704] 
[0.x.7705] 
[0.x.7706] 
[0.x.7707] 
[0.x.7708] 
[0.x.7709] 
[0.x.7710] 
//
// 最后是系统矩阵和我们用于预处理程序的矩阵的双线性形式。回顾一下，这两个的公式分别是[1.x.33]和[1.x.34]，其中[2.x.1078]和[2.x.1079]是[2.x.1080]th形状函数的速度和压力成分。然后，上述各种术语在下面的实现中很容易识别。
//
[0.x.7711] 
[0.x.7712] 
[0.x.7713] 
[0.x.7714] 
[0.x.7715] 
[0.x.7716] 
[0.x.7717] 
[0.x.7718] 
[0.x.7719] 
//
[0.x.7720] 
[0.x.7721] 
[0.x.7722] 
[0.x.7723] 
//
// 注意在上述（1）的实现中，`operator*`被重载用于对称张量，产生两个张量之间的标量乘积。            对于右手边，我们利用形状函数只在一个分量中不为零的事实（因为我们的元素是原始的）。 我们不是将代表形状函数i的dim+1值的张量与整个右手边的向量相乘，而是只看唯一的非零分量。函数[2.x.1081]将返回这个形状函数所处的分量（0=x速度，1=y速度，2=2d中的压力），我们用它来挑选出右手边向量的正确分量来相乘。
//
[0.x.7724] 
[0.x.7725] 
[0.x.7726] 
[0.x.7727] 
[0.x.7728] 
[0.x.7729] 
[0.x.7730] 
//
// 在我们将局部数据写入全局矩阵之前（同时使用AffineConstraints对象来应用Dirichlet边界条件并消除悬挂的节点约束，正如我们在介绍中讨论的那样），我们必须注意一件事。由于对称性，我们只建立了一半的局部矩阵，但我们要保存完整的矩阵，以便使用标准函数进行解算。这是通过翻转指数来实现的，以防我们指向本地矩阵的空部分。
//
[0.x.7731] 
[0.x.7732] 
[0.x.7733] 
[0.x.7734] 
[0.x.7735] 
[0.x.7736] 
[0.x.7737] 
//
[0.x.7738] 
[0.x.7739] 
[0.x.7740] 
[0.x.7741] 
[0.x.7742] 
[0.x.7743] 
[0.x.7744] 
[0.x.7745] 
[0.x.7746] 
[0.x.7747] 
//
// 在我们要解决这个线性系统之前，我们为速度-速度矩阵生成一个预处理程序，即系统矩阵中的[2.x.1082]。如上所述，这取决于空间维度。由于[2.x.1083]别名所描述的两个类具有相同的接口，因此无论我们想使用稀疏直接求解器还是ILU，都不需要做任何不同的事情。
//
[0.x.7748] 
//
[0.x.7749] 
[0.x.7750] 
[0.x.7751] 
[0.x.7752] 
[0.x.7753] 
[0.x.7754] 
//
// [2.x.1084] 
//
// 经过前面介绍中的讨论和各自类的定义，[2.x.1085]函数的实现是相当直接的，其方式与[2.x.1086]类似。首先，我们需要一个[2.x.1087]类的对象，代表矩阵A的逆。正如在介绍中所描述的，在 [2.x.1088] 类型的内部预处理器的帮助下，生成了逆。
//
[0.x.7755] 
[0.x.7756] 
[0.x.7757] 
[0.x.7758] 
[0.x.7759] 
[0.x.7760] 
[0.x.7761] 
//
// 这与 [2.x.1089] 中的情况一样。我们生成 Schur 补数的右手边 [2.x.1090] 和一个代表各自线性运算的对象 [2.x.1091] ，现在有一个模板参数表示预处理器
//
// - 按照类的定义。
//
[0.x.7762] 
[0.x.7763] 
[0.x.7764] 
[0.x.7765] 
[0.x.7766] 
//
[0.x.7767] 
[0.x.7768] 
//
// 解算器调用的常规控制结构被创建...
//
[0.x.7769] 
[0.x.7770] 
[0.x.7771] 
//
// 现在是对舒尔补码的预处理。正如介绍中所解释的，预处理是由压力变量的质量矩阵来完成的。
//
// 实际上，求解器需要有[2.x.1092]形式的预处理，所以我们需要创建一个逆运算。我们再次使用一个[2.x.1093]类的对象，它实现了求解器需要的[2.x.1094]操作。 在这种情况下，我们必须对压力质量矩阵进行反转。正如在早期的教程程序中已经证明的那样，质量矩阵的反转是一个相当便宜和简单的操作（与拉普拉斯矩阵等相比）。带有ILU预处理的CG方法在5-10步内收敛，与网格大小无关。 这正是我们在这里所做的。我们选择另一个ILU预处理，并通过相应的模板参数将其带入InverseMatrix对象。 然后在逆矩阵的vmult操作中调用一个CG求解器。
//
// 另一种方法是选择因子为1.2的SSOR预处理器，这种方法构建成本较低，但之后需要更多的迭代。它需要大约两倍的迭代次数，但其生成的成本几乎可以忽略不计。
//
[0.x.7772] 
[0.x.7773] 
[0.x.7774] 
//
[0.x.7775] 
[0.x.7776] 
//
// 有了舒尔补码和高效的预处理程序，我们可以用通常的方法解决压力的相关方程（即解向量中的0块）。
//
[0.x.7777] 
//
// 在这第一个求解步骤之后，必须将悬挂的节点约束分布到求解中，以实现一致的压力场。
//
[0.x.7778] 
//
[0.x.7779] 
[0.x.7780] 
[0.x.7781] 
[0.x.7782] 
//
// 和[2.x.1095]一样，我们最后需要解速度方程，在这里我们插入压力方程的解。这只涉及我们已经知道的对象
//
// 所以我们只需用[2.x.1096]乘以[2.x.1097]，减去右边的部分，再乘以[2.x.1098]的逆数。最后，我们需要分配悬挂节点的约束，以获得一个一致的流场。
//
[0.x.7783] 
[0.x.7784] 
[0.x.7785] 
[0.x.7786] 
//
[0.x.7787] 
//
[0.x.7788] 
[0.x.7789] 
[0.x.7790] 
//[2.x.1099] 
//
// 下一个函数生成图形输出。在这个例子中，我们将使用VTK文件格式。 我们给问题中的各个变量附上名字：[2.x.1100]速度的组成部分和[2.x.1101]压力的组成部分。
//
// 并非所有的可视化程序都有能力将各个矢量分量组合成一个矢量来提供矢量图；特别是对于一些基于VTK的可视化程序来说，这一点是成立的。在这种情况下，在包含数据的文件中应该已经描述了组件的逻辑分组为矢量的情况。换句话说，我们需要做的是为我们的输出编写者提供一种方法，让他们知道有限元的哪些分量在逻辑上形成一个矢量（在[2.x.1103]空间维度上有[2.x.1102]分量），而不是让他们假设我们只是有一堆标量场。 这是用[2.x.1104]命名空间的成员实现的：和文件名一样，我们创建一个矢量，其中第一个[2.x.1105]分量指的是速度，并被赋予[2.x.1106]标签，我们最后推一个标签[2.x.1107]来描述压力变量的分组。
//
// 然后函数的其余部分与 [2.x.1108] 中的相同。
//
[0.x.7791] 
[0.x.7792] 
[0.x.7793] 
[0.x.7794] 
[0.x.7795] 
[0.x.7796] 
//
[0.x.7797] 
[0.x.7798] 
[0.x.7799] 
[0.x.7800] 
[0.x.7801] 
//
[0.x.7802] 
[0.x.7803] 
[0.x.7804] 
[0.x.7805] 
[0.x.7806] 
[0.x.7807] 
[0.x.7808] 
//
[0.x.7809] 
[0.x.7810] 
[0.x.7811] 
[0.x.7812] 
//[2.x.1109] 
//
// 这是[2.x.1110]类中最后一个有趣的函数。 正如它的名字所示，它获取问题的解决方案，并在需要时细化网格。其过程与[2.x.1111]中的相应步骤相同，不同的是我们只根据压力的变化进行细化，也就是说，我们用ComponentMask类型的掩码对象调用Kelly误差估计器，选择我们感兴趣的压力的单一标量分量（我们通过指定我们想要的分量从有限元类中得到这样一个掩码）。此外，我们没有再次粗化网格。
//
[0.x.7813] 
[0.x.7814] 
[0.x.7815] 
[0.x.7816] 
//
[0.x.7817] 
[0.x.7818] 
[0.x.7819] 
[0.x.7820] 
[0.x.7821] 
[0.x.7822] 
[0.x.7823] 
[0.x.7824] 
//
[0.x.7825] 
[0.x.7826] 
[0.x.7827] 
[0.x.7828] 
[0.x.7829] 
[0.x.7830] 
//[2.x.1112] 
//
// 在斯托克斯类中的最后一步，像往常一样，是生成初始网格的函数，并按各自的顺序调用其他函数。
//
// 我们从一个大小为[2.x.1113]（2D）或[2.x.1114]（3D）的矩形开始，在[2.x.1115]中分别放置为[2.x.1116]或[2.x.1117] 。在每个方向上以相等的网格大小开始是很自然的，所以我们在第一个坐标方向上将初始矩形细分四次。为了将创建网格所涉及的变量的范围限制在我们实际需要的范围内，我们将整个块放在一对大括号之间。
//
[0.x.7831] 
[0.x.7832] 
[0.x.7833] 
[0.x.7834] 
[0.x.7835] 
[0.x.7836] 
//
[0.x.7837] 
[0.x.7838] 
[0.x.7839] 
//
[0.x.7840] 
[0.x.7841] 
[0.x.7842] 
//
[0.x.7843] 
[0.x.7844] 
[0.x.7845] 
[0.x.7846] 
[0.x.7847] 
//
// 边界指标1被设置为所有受Dirichlet边界条件约束的边界，即位于最后一个坐标方向上的0的面。详见上面的例子描述。
//
[0.x.7848] 
[0.x.7849] 
[0.x.7850] 
[0.x.7851] 
//
// 然后，在第一次求解之前，我们应用一个初始细化。在3D中，会有更多的自由度，所以我们在那里细化得更少。
//
[0.x.7852] 
//
// 正如在[2.x.1118]中第一次看到的那样，我们在不同的细化级别上循环细化（除了第一个循环），设置自由度和矩阵，组装，求解和创建输出。
//
[0.x.7853] 
[0.x.7854] 
[0.x.7855] 
[0.x.7856] 
//
[0.x.7857] 
[0.x.7858] 
//
[0.x.7859] 
//
[0.x.7860] 
[0.x.7861] 
//
[0.x.7862] 
[0.x.7863] 
//
[0.x.7864] 
//
[0.x.7865] 
[0.x.7866] 
[0.x.7867] 
[0.x.7868] 
//[2.x.1119] 
//
// 主函数与 [2.x.1120] 中的相同。我们将元素度数作为参数传递，并在众所周知的模板槽中选择空间尺寸。
//
[0.x.7869] 
[0.x.7870] 
[0.x.7871] 
[0.x.7872] 
[0.x.7873] 
//
[0.x.7874] 
[0.x.7875] 
[0.x.7876] 
[0.x.7877] 
[0.x.7878] 
[0.x.7879] 
[0.x.7880] 
[0.x.7881] 
[0.x.7882] 
[0.x.7883] 
[0.x.7884] 
[0.x.7885] 
[0.x.7886] 
[0.x.7887] 
//
[0.x.7888] 
[0.x.7889] 
[0.x.7890] 
[0.x.7891] 
[0.x.7892] 
[0.x.7893] 
[0.x.7894] 
[0.x.7895] 
[0.x.7896] 
[0.x.7897] 
[0.x.7898] 
[0.x.7899] 
[0.x.7900] 
[0.x.7901] 
//
[0.x.7902] 
[0.x.7903] 
[0.x.7904] 
[0.x.7905] 
[0.x.7906] 
[0.x.7907] 
[0.x.7908] 
[0.x.7909] 
[0.x.7910] 
[0.x.7911] 
[0.x.7912] 
[0.x.7913] 
[0.x.7914] 
[0.x.7915] 
[0.x.7916] 
[0.x.7917] 
//
[0.x.7918] 
[0.x.7919] 
[0.x.7920] 
//[2.x.1121] 
//
// 我们从通常的各种各样的包含文件开始，我们在以前的许多测试中都看到过。
//
[0.x.7921] 
[0.x.7922] 
//
[0.x.7923] 
[0.x.7924] 
[0.x.7925] 
[0.x.7926] 
[0.x.7927] 
[0.x.7928] 
//
[0.x.7929] 
[0.x.7930] 
//
[0.x.7931] 
[0.x.7932] 
//
[0.x.7933] 
//
[0.x.7934] 
//
[0.x.7935] 
[0.x.7936] 
//
// 这里是仅有的三个有一些新兴趣的包含文件。第一个文件已经被使用了，例如，用于[2.x.1122]和[2.x.1123]函数。然而，我们在这里使用该类中的另一个函数，[2.x.1124]来计算我们的初始值，作为连续初始值的[2.x.1125]投影。此外，我们使用 [2.x.1126] 来生成积分 [2.x.1127] 。这些以前总是由[2.x.1128]或应用程序代码中的类似函数手工生成。然而，我们太懒了，不能在这里这么做，所以干脆使用库函数。
//
[0.x.7937] 
//
// 与此非常相似，我们也懒得写代码来组装质量矩阵和拉普拉斯矩阵，尽管这只需要从以前的任何一个教程程序中复制相关代码。相反，我们想把重点放在这个程序中真正新的东西上，因此使用了[2.x.1129]和[2.x.1130]函数。它们被声明在这里。
//
[0.x.7938] 
//
// 最后，这里有一个include文件，它包含了人们有时需要的各种工具函数。特别是，我们需要[2.x.1131]类，该类在给定一个整数参数后，返回它的字符串表示。它特别有用，因为它允许第二个参数，表明我们希望结果用前导零填充的数字数。我们将用它来写输出文件，其形式为[2.x.1132]表示时间步数，并且总是由三位数组成，即使我们仍然处于个位或两位数的时间步数中。
//
[0.x.7939] 
//
// 最后一步和以前所有的程序一样。
//
[0.x.7940] 
[0.x.7941] 
[0.x.7942] 
//[2.x.1133] 
//
// 接下来是主类的声明。它的公共函数接口与其他大多数教程程序一样。值得一提的是，我们现在必须存储四个矩阵，而不是一个：质量矩阵 [2.x.1134] ，拉普拉斯矩阵 [2.x.1135] ，用于求解 [2.x.1137] 的矩阵 [2.x.1136] ，以及用于求解 [2.x.1138] 的带有边界条件的质量矩阵副本。请注意，在周围有一个额外的质量矩阵副本是有点浪费的。我们将在可能的改进部分讨论如何避免这种情况的策略。
//
// 同样，我们需要[2.x.1139]的解向量，以及前一个时间步骤[2.x.1140]的相应向量。[2.x.1141]将用于我们在每个时间步骤中求解两个线性系统之一时的任何右手向量。这些将在两个函数 [2.x.1142] 和 [2.x.1143] 中解决。
//
// 最后，变量[2.x.1144]用来表示参数[2.x.1145]，该参数用于定义使用哪种时间步进方案，这在介绍中已经说明。剩下的就不言而喻了。
//
[0.x.7943] 
[0.x.7944] 
[0.x.7945] 
[0.x.7946] 
[0.x.7947] 
[0.x.7948] 
//
[0.x.7949] 
[0.x.7950] 
[0.x.7951] 
[0.x.7952] 
[0.x.7953] 
//
[0.x.7954] 
[0.x.7955] 
[0.x.7956] 
//
[0.x.7957] 
//
[0.x.7958] 
[0.x.7959] 
[0.x.7960] 
[0.x.7961] 
[0.x.7962] 
//
[0.x.7963] 
[0.x.7964] 
[0.x.7965] 
//
[0.x.7966] 
[0.x.7967] 
[0.x.7968] 
[0.x.7969] 
[0.x.7970] 
//
// [2.x.1146] 
//
// 在我们继续填写主类的细节之前，让我们定义与问题相对应的方程数据，即解[2.x.1147]及其时间导数[2.x.1148]的初始值和边界值，以及一个右手类。我们使用从Function类模板派生出来的类来做这件事，这个模板以前已经用过很多次了，所以下面的内容不应该是一个惊喜。
//
// 我们从初始值开始，对数值[2.x.1149]以及它的时间导数，即速度[2.x.1150]都选择零。
//
[0.x.7971] 
[0.x.7972] 
[0.x.7973] 
[0.x.7974] 
[0.x.7975] 
[0.x.7976] 
[0.x.7977] 
[0.x.7978] 
[0.x.7979] 
[0.x.7980] 
[0.x.7981] 
[0.x.7982] 
//
[0.x.7983] 
[0.x.7984] 
[0.x.7985] 
[0.x.7986] 
[0.x.7987] 
[0.x.7988] 
[0.x.7989] 
[0.x.7990] 
[0.x.7991] 
[0.x.7992] 
[0.x.7993] 
[0.x.7994] 
//
// 其次，我们有右手边的强制项。无聊的是，我们在这里也选择零。
//
[0.x.7995] 
[0.x.7996] 
[0.x.7997] 
[0.x.7998] 
[0.x.7999] 
[0.x.8000] 
[0.x.8001] 
[0.x.8002] 
[0.x.8003] 
[0.x.8004] 
[0.x.8005] 
[0.x.8006] 
//
// 最后，我们有 [2.x.1151] 和 [2.x.1152] 的边界值。它们与介绍中描述的一样，一个是另一个的时间导数。
//
[0.x.8007] 
[0.x.8008] 
[0.x.8009] 
[0.x.8010] 
[0.x.8011] 
[0.x.8012] 
[0.x.8013] 
[0.x.8014] 
[0.x.8015] 
//
[0.x.8016] 
[0.x.8017] 
[0.x.8018] 
[0.x.8019] 
[0.x.8020] 
[0.x.8021] 
[0.x.8022] 
//
[0.x.8023] 
[0.x.8024] 
[0.x.8025] 
[0.x.8026] 
[0.x.8027] 
[0.x.8028] 
[0.x.8029] 
[0.x.8030] 
[0.x.8031] 
//
[0.x.8032] 
[0.x.8033] 
[0.x.8034] 
[0.x.8035] 
[0.x.8036] 
[0.x.8037] 
[0.x.8038] 
//
// [2.x.1153] 
//
// 实际逻辑的实现实际上是相当短的，因为我们把组装矩阵和右手边的向量等事情交给了库。其余的实际代码不超过130行，其中相当一部分是可以从以前的例子程序中获取的模板代码（例如，解决线性系统的函数，或生成输出的函数）。
//
// 我们从构造函数开始（关于时间步长的选择的解释，请参见介绍中关于Courant, Friedrichs, and Lewy的部分）。
//
[0.x.8039] 
[0.x.8040] 
[0.x.8041] 
[0.x.8042] 
[0.x.8043] 
[0.x.8044] 
[0.x.8045] 
[0.x.8046] 
[0.x.8047] 
//[2.x.1154] 
//
// 下一个函数是在程序开始时，也就是在第一个时间步骤之前，设置网格、DoFHandler以及矩阵和向量。如果你已经阅读了至少到[2.x.1155]为止的教程程序，那么前几行是相当标准的。
//
[0.x.8048] 
[0.x.8049] 
[0.x.8050] 
[0.x.8051] 
[0.x.8052] 
//
[0.x.8053] 
[0.x.8054] 
//
[0.x.8055] 
//
[0.x.8056] 
[0.x.8057] 
[0.x.8058] 
//
[0.x.8059] 
[0.x.8060] 
[0.x.8061] 
//
// 然后，我们必须初始化程序过程中需要的3个矩阵：质量矩阵、拉普拉斯矩阵和在每个时间步长中求解[2.x.1156]时使用的矩阵[2.x.1157]。
//
// 在设置这些矩阵时，请注意它们都是利用了相同的稀疏模式对象。最后，在deal.II中矩阵和稀疏模式是独立对象的原因（与其他许多有限元或线性代数类不同）变得很清楚：在相当一部分应用中，我们必须持有几个恰好具有相同稀疏模式的矩阵，它们没有理由不共享这一信息，而不是重新建立并多次浪费内存。
//
// 在初始化所有这些矩阵后，我们调用库函数来建立拉普拉斯和质量矩阵。它们所需要的只是一个DoFHandler对象和一个将用于数值积分的正交公式对象。请注意，在许多方面，这些函数比我们通常在应用程序中做的要好，例如，如果一台机器有多个处理器，它们会自动并行构建矩阵：更多信息见WorkStream的文档或[2.x.1158]"多处理器并行计算 "模块。解决线性系统的矩阵将在run()方法中被填充，因为我们需要在每个时间步长中重新应用边界条件。
//
[0.x.8062] 
[0.x.8063] 
[0.x.8064] 
[0.x.8065] 
//
[0.x.8066] 
[0.x.8067] 
[0.x.8068] 
[0.x.8069] 
[0.x.8070] 
[0.x.8071] 
//
// 该函数的其余部分用于将矢量大小设置为正确的值。最后一行关闭了悬挂的节点约束对象。由于我们在一个均匀细化的网格上工作，所以不存在或没有计算过约束条件（即没有必要像其他程序那样调用[2.x.1159]），但无论如何，我们需要在下面的一个地方进一步设置一个约束对象。
//
[0.x.8072] 
[0.x.8073] 
[0.x.8074] 
[0.x.8075] 
[0.x.8076] 
//
[0.x.8077] 
[0.x.8078] 
//
// [2.x.1160] 
//
// 接下来的两个函数是解决与 [2.x.1161] 和 [2.x.1162] 的方程有关的线性系统。这两个函数并不特别有趣，因为它们基本沿用了前面所有教程程序中的方案。
//
// 我们可以对我们要反转的两个矩阵的预处理程序做一些小实验。然而，事实证明，对于这里的矩阵，使用雅可比或SSOR预处理器可以稍微减少解决线性系统所需的迭代次数，但由于应用预处理器的成本，在运行时间方面并不占优势。这也不是什么损失，但让我们保持简单，只做不做。
//
[0.x.8079] 
[0.x.8080] 
[0.x.8081] 
[0.x.8082] 
[0.x.8083] 
//
[0.x.8084] 
//
[0.x.8085] 
[0.x.8086] 
[0.x.8087] 
//
[0.x.8088] 
[0.x.8089] 
[0.x.8090] 
[0.x.8091] 
[0.x.8092] 
//
[0.x.8093] 
//
[0.x.8094] 
[0.x.8095] 
[0.x.8096] 
//
// [2.x.1163] 
//
// 同样地，下面的函数也和我们之前做的差不多。唯一值得一提的是，这里我们使用[2.x.1164]函数的第二个参数，生成了一个用前导零填充的时间步长的字符串表示，长度为3个字符。
//
[0.x.8097] 
[0.x.8098] 
[0.x.8099] 
[0.x.8100] 
//
[0.x.8101] 
[0.x.8102] 
[0.x.8103] 
//
[0.x.8104] 
//
[0.x.8105] 
[0.x.8106] 
//
// 像 [2.x.1165] 一样，由于我们在每个时间步长写输出（而且我们要解决的系统相对简单），我们指示DataOut使用zlib压缩算法，该算法针对速度而不是磁盘使用进行了优化，因为否则绘制输出会成为一个瓶颈。
//
[0.x.8107] 
[0.x.8108] 
[0.x.8109] 
[0.x.8110] 
[0.x.8111] 
[0.x.8112] 
[0.x.8113] 
//
// [2.x.1166] 
//
// 下面是程序中唯一有趣的功能。它包含了所有时间步骤的循环，但在这之前我们必须设置网格、DoFHandler和矩阵。此外，我们必须以某种方式从初始值开始。为此，我们使用[2.x.1167]函数，该函数接收一个描述连续函数的对象，并计算该函数在DoFHandler对象所描述的有限元空间的[2.x.1168]投影。没有比这更简单的了。
//
[0.x.8114] 
[0.x.8115] 
[0.x.8116] 
[0.x.8117] 
//
[0.x.8118] 
[0.x.8119] 
[0.x.8120] 
[0.x.8121] 
[0.x.8122] 
[0.x.8123] 
[0.x.8124] 
[0.x.8125] 
[0.x.8126] 
[0.x.8127] 
//
// 接下来是循环所有的时间步骤，直到我们到达结束时间（本例中为[2.x.1169]）。在每个时间步骤中，我们首先要解决[2.x.1170]，使用方程 [2.x.1171] 。
//[2.x.1172] 
//[2.x.1173] . 请注意，我们在所有的时间步骤中使用相同的网格，因此，[2.x.1174] 和 [2.x.1175] 。因此，我们首先要做的是将[2.x.1176]和强制项相加，并将结果放入[2.x.1177]向量中。(对于这些加法，我们需要在循环之前声明一个临时向量，以避免在每个时间步骤中重复分配内存)。
//
// 这里需要意识到的是我们如何将时间变量传达给描述右手边的对象：每个从函数类派生出来的对象都有一个时间字段，可以用[2.x.1178]来设置，用[2.x.1179]来读取。 实质上，使用这种机制，所有空间和时间的函数因此被认为是在某个特定时间评估的空间的函数。这与我们在有限元程序中的典型需求非常吻合，在有限元程序中，我们几乎总是在一个时间步长上工作，而且从来没有发生过，例如，人们想在任何给定的空间位置上为所有时间评估一个时空函数。
//
[0.x.8128] 
[0.x.8129] 
//
[0.x.8130] 
[0.x.8131] 
[0.x.8132] 
[0.x.8133] 
//
[0.x.8134] 
//
[0.x.8135] 
[0.x.8136] 
//
[0.x.8137] 
[0.x.8138] 
//
[0.x.8139] 
[0.x.8140] 
[0.x.8141] 
[0.x.8142] 
[0.x.8143] 
[0.x.8144] 
[0.x.8145] 
[0.x.8146] 
//
[0.x.8147] 
[0.x.8148] 
[0.x.8149] 
[0.x.8150] 
[0.x.8151] 
//
[0.x.8152] 
//
[0.x.8153] 
//
// 如此构建了第一个方程的右手向量后，我们要做的就是应用正确的边界值。至于右手边，这是一个在特定时间评估的时空函数，我们在边界节点插值，然后像通常那样用结果来应用边界值。然后将结果交给solve_u()函数。
//
[0.x.8154] 
[0.x.8155] 
[0.x.8156] 
//
[0.x.8157] 
[0.x.8158] 
[0.x.8159] 
[0.x.8160] 
[0.x.8161] 
//
// solve_u()的矩阵在每个时间步骤中都是相同的，所以人们可以认为只在模拟开始时做一次就足够了。然而，由于我们需要对线性系统应用边界值（消除了一些矩阵的行和列，并对右手边做出了贡献），在实际应用边界数据之前，我们必须在每个时间步骤中重新填充该矩阵。实际内容非常简单：它是质量矩阵和加权拉普拉斯矩阵的总和。
//
[0.x.8162] 
[0.x.8163] 
[0.x.8164] 
[0.x.8165] 
[0.x.8166] 
[0.x.8167] 
[0.x.8168] 
[0.x.8169] 
//
// 第二步，即求解[2.x.1180]，工作原理类似，只是这次左边的矩阵是质量矩阵（我们再次复制，以便能够应用边界条件，而右边是[2.x.1181]加上强制项。边界值的应用方式与之前相同，只是现在我们必须使用BoundaryValuesV类。
//
[0.x.8170] 
[0.x.8171] 
//
[0.x.8172] 
[0.x.8173] 
//
[0.x.8174] 
[0.x.8175] 
//
[0.x.8176] 
//
[0.x.8177] 
[0.x.8178] 
[0.x.8179] 
//
[0.x.8180] 
[0.x.8181] 
[0.x.8182] 
[0.x.8183] 
[0.x.8184] 
[0.x.8185] 
[0.x.8186] 
[0.x.8187] 
[0.x.8188] 
[0.x.8189] 
[0.x.8190] 
[0.x.8191] 
//
// 最后，在计算完两个解的组成部分后，我们输出结果，计算解中的能量，并在将现在的解移入持有上一个时间步长的解的向量后，继续下一个时间步长。注意函数[2.x.1182]可以在一个步骤中计算[2.x.1183]和[2.x.1184]，为我们节省了一个临时向量和几行代码的费用。
//
[0.x.8192] 
//
[0.x.8193] 
[0.x.8194] 
[0.x.8195] 
[0.x.8196] 
[0.x.8197] 
//
[0.x.8198] 
[0.x.8199] 
[0.x.8200] 
[0.x.8201] 
[0.x.8202] 
//[2.x.1185] 
//
//剩下的就是程序的主要功能了。这里没有什么是在前面几个程序中没有展示过的。
//
[0.x.8203] 
[0.x.8204] 
[0.x.8205] 
[0.x.8206] 
[0.x.8207] 
//
[0.x.8208] 
[0.x.8209] 
[0.x.8210] 
[0.x.8211] 
[0.x.8212] 
[0.x.8213] 
[0.x.8214] 
[0.x.8215] 
[0.x.8216] 
[0.x.8217] 
[0.x.8218] 
[0.x.8219] 
[0.x.8220] 
[0.x.8221] 
//
[0.x.8222] 
[0.x.8223] 
[0.x.8224] 
[0.x.8225] 
[0.x.8226] 
[0.x.8227] 
[0.x.8228] 
[0.x.8229] 
[0.x.8230] 
[0.x.8231] 
[0.x.8232] 
[0.x.8233] 
[0.x.8234] 
[0.x.8235] 
//
[0.x.8236] 
[0.x.8237] 
[0.x.8238] 
[0.x.8239] 
[0.x.8240] 
[0.x.8241] 
[0.x.8242] 
[0.x.8243] 
[0.x.8244] 
[0.x.8245] 
[0.x.8246] 
[0.x.8247] 
[0.x.8248] 
[0.x.8249] 
[0.x.8250] 
[0.x.8251] 
//
[0.x.8252] 
[0.x.8253] 
[0.x.8254] 
//[2.x.1186] 
//
// 以下内容之前都已经介绍过了。
//
[0.x.8255] 
[0.x.8256] 
[0.x.8257] 
[0.x.8258] 
//
[0.x.8259] 
[0.x.8260] 
[0.x.8261] 
[0.x.8262] 
[0.x.8263] 
[0.x.8264] 
[0.x.8265] 
//
[0.x.8266] 
[0.x.8267] 
//
[0.x.8268] 
[0.x.8269] 
//
[0.x.8270] 
[0.x.8271] 
//
[0.x.8272] 
[0.x.8273] 
[0.x.8274] 
//
[0.x.8275] 
[0.x.8276] 
//
// 这是唯一一个新的。我们将需要一个定义在GridTools命名空间的库函数，用来计算最小的单元格直径。
//
[0.x.8277] 
//
// 最后一步和以前所有的程序一样。
//
[0.x.8278] 
[0.x.8279] 
[0.x.8280] 
//[2.x.1187] 
//
// 主类的第一部分与[2.x.1188]中的内容完全一致（除了名字）。
//
[0.x.8281] 
[0.x.8282] 
[0.x.8283] 
[0.x.8284] 
[0.x.8285] 
[0.x.8286] 
//
[0.x.8287] 
[0.x.8288] 
[0.x.8289] 
[0.x.8290] 
[0.x.8291] 
//
[0.x.8292] 
[0.x.8293] 
[0.x.8294] 
//
[0.x.8295] 
//
[0.x.8296] 
[0.x.8297] 
[0.x.8298] 
[0.x.8299] 
//
[0.x.8300] 
[0.x.8301] 
[0.x.8302] 
//
[0.x.8303] 
[0.x.8304] 
[0.x.8305] 
//
// 下面是新的内容：首先，我们需要从吸收边界条件出来的那个边界质量矩阵[2.x.1189]。同样，由于这次我们考虑的是一个现实的介质，我们必须有一个衡量波速的标准[2.x.1190]，它将进入所有与拉普拉斯矩阵（我们仍然定义为[2.x.1191]）有关的公式。
//
[0.x.8306] 
[0.x.8307] 
//
// 我们必须注意的最后一件事是，我们想在一定数量的检测器位置评估解决方案。我们需要一个数组来保存这些位置，在这里声明并在构造函数中填充。
//
[0.x.8308] 
[0.x.8309] 
//[2.x.1192] 
//
// 像往常一样，我们必须定义我们的初始值、边界条件和右手边的函数。这次事情有点简单：我们考虑的是一个由初始条件驱动的问题，所以没有右手函数（尽管你可以在[2.x.1193]中查找，看看如何做到这一点）。其次，没有边界条件：域的整个边界由吸收性边界条件组成。这就只剩下初始条件了，这里的事情也很简单，因为对于这个特殊的应用，只规定了压力的非零初始条件，而没有规定速度的非零初始条件（速度在初始时间为零）。
//
// 所以这就是我们所需要的：一个指定压力初始条件的类。在本程序所考虑的物理环境中，这些是小的吸收器，我们将其建模为一系列的小圆圈，我们假设压力盈余为1，而其他地方没有吸收，因此没有压力盈余。我们是这样做的（注意，如果我们想把这个程序扩展到不仅可以编译，而且可以运行，我们将不得不用三维源的位置来初始化源）。
//
[0.x.8310] 
[0.x.8311] 
[0.x.8312] 
[0.x.8313] 
[0.x.8314] 
[0.x.8315] 
[0.x.8316] 
[0.x.8317] 
[0.x.8318] 
[0.x.8319] 
[0.x.8320] 
[0.x.8321] 
[0.x.8322] 
//
[0.x.8323] 
[0.x.8324] 
[0.x.8325] 
//
[0.x.8326] 
[0.x.8327] 
//
 
[0.x.8329] 
[0.x.8330] 
[0.x.8331] 
[0.x.8332] 
[0.x.8333] 
[0.x.8334] 
//
[0.x.8335] 
[0.x.8336] 
[0.x.8337] 
[0.x.8338] 
//[2.x.1194] 
//
// 让我们再从构造函数开始。设置成员变量是很直接的。我们使用矿物油的声波速度（单位为毫米/微秒，是实验性生物医学成像中的常用单位），因为我们想和输出的许多实验都是在这里进行的。再次使用Crank-Nicolson方案，即theta被设定为0.5。随后选择时间步长以满足[2.x.1195]：这里我们把它初始化为一个无效的数字。
//
[0.x.8339] 
[0.x.8340] 
[0.x.8341] 
[0.x.8342] 
[0.x.8343] 
[0.x.8344] 
[0.x.8345] 
[0.x.8346] 
[0.x.8347] 
[0.x.8348] 
//
// 构造函数中的第二个任务是初始化存放检测器位置的数组。这个程序的结果与实验进行了比较，其中检测器间距的步长为2.25度，对应160个检测器位置。扫描圆的半径被选为中心和边界之间的一半，以避免不完善的边界条件带来的剩余反射破坏我们的数值结果。
//
// 然后按顺时针顺序计算探测器的位置。请注意，下面的内容当然只有在我们以2D计算时才有效，我们用一个断言来保护这个条件。如果我们以后想在三维中运行同样的程序，我们将不得不在这里添加代码来初始化三维中的探测器位置。由于断言的存在，我们不可能忘记这样做。
//
[0.x.8349] 
//
[0.x.8350] 
[0.x.8351] 
//
[0.x.8352] 
[0.x.8353] 
[0.x.8354] 
[0.x.8355] 
[0.x.8356] 
[0.x.8357] 
//
// [2.x.1196] 
//
// 下面的系统几乎就是我们在 [2.x.1197] 中已经做过的，但有两个重要的区别。首先，我们必须在原点周围创建一个半径为1的圆形（或球形）网格。这并不新鲜：我们之前在[2.x.1198]和[2.x.1199]中已经这样做了，在那里我们还解释了PolarManifold或SphericalManifold对象如何在细化单元时将新点放在同心圆上，我们在这里也将使用它。
//
// 我们必须确保的一点是，时间步长满足 [2.x.1200] 的介绍中讨论的 CFL 条件。在那个程序中，我们通过设置一个与网格宽度相匹配的时间步长来确保这一点，但是这很容易出错，因为如果我们再细化一次网格，我们也必须确保时间步长有所改变。在这里，我们自动做到了这一点：我们向一个库函数询问任何单元的最小直径。然后我们设置[2.x.1201] 。唯一的问题是：[2.x.1202]到底是什么？关键是，对于波浪方程来说，这个问题确实没有好的理论。众所周知，对于由矩形组成的均匀细化网格，[2.x.1203]是最小边长。但对于一般四边形的网格，确切的关系似乎是未知的，也就是说，不知道单元格的什么属性与CFL条件有关。问题是，CFL条件来自于对拉普拉斯矩阵最小特征值的了解，而这只能对简单结构的网格进行分析计算。
//
// 这一切的结果是，我们并不十分确定我们应该对[2.x.1204]采取什么措施。函数[2.x.1205]计算了所有单元的最小直径。如果单元格都是正方形或立方体，那么最小边长就是最小直径除以[2.x.1206] 。我们简单地将此概括为非均匀网格的情况，没有理论上的理由。
//
// 唯一的其他重大变化是我们需要建立边界质量矩阵。我们将在下文中进一步评论这个问题。
//
[0.x.8358] 
[0.x.8359] 
[0.x.8360] 
[0.x.8361] 
[0.x.8362] 
[0.x.8363] 
//
[0.x.8364] 
[0.x.8365] 
//
[0.x.8366] 
[0.x.8367] 
//
[0.x.8368] 
//
[0.x.8369] 
[0.x.8370] 
[0.x.8371] 
//
[0.x.8372] 
[0.x.8373] 
[0.x.8374] 
//
[0.x.8375] 
[0.x.8376] 
[0.x.8377] 
//
[0.x.8378] 
[0.x.8379] 
[0.x.8380] 
[0.x.8381] 
[0.x.8382] 
[0.x.8383] 
//
// 如前所述，与[2.x.1207]的第二个区别是，我们需要建立从吸收性边界条件中生长出来的边界质量矩阵。
//
// 第一个观察结果是，这个矩阵比常规质量矩阵要稀疏得多，因为没有一个具有纯内部支持的形状函数对这个矩阵有贡献。因此，我们可以根据这种情况优化存储模式，建立第二个稀疏模式，只包含我们需要的非零项。这里有一个权衡：首先，我们必须要有第二个稀疏模式对象，所以这需要花费内存。其次，与该稀疏性模式相连的矩阵将更小，因此需要更少的内存；用它进行矩阵-向量乘法也会更快。然而，最后一个论点是提示规模的论点：我们主要感兴趣的不是单独对边界矩阵进行矩阵-向量运算（尽管我们需要在每个时间步长对右侧向量进行一次运算），而是主要希望将其与两个方程中的第一个方程使用的其他矩阵相加，因为这是CG方法每个迭代都要与之相乘的，即明显更频繁。现在的情况是，[2.x.1208]类允许将一个矩阵添加到另一个矩阵中，但前提是它们使用相同的稀疏模式（原因是我们不能在稀疏模式创建后向矩阵添加非零条目，所以我们只是要求这两个矩阵具有相同的稀疏模式）。
//
// 所以，我们就用这个方法吧。
//
[0.x.8384] 
//
// 第二件要做的事是实际建立矩阵。在这里，我们需要对单元格的面进行积分，所以首先我们需要一个能在[2.x.1209]维对象上工作的正交对象。其次，FEValues的变体FEFaceValues，正如它的名字所暗示的，它可以在面上工作。最后，其他的变量是组装机器的一部分。所有这些我们都放在大括号里，以便将这些变量的范围限制在我们真正需要它们的地方。
//然后
//组装矩阵的实际行为是相当直接的：我们在所有单元中循环，在每个单元的所有面中循环，然后只在特定的面位于域的边界时做一些事情。像这样。
//
[0.x.8385] 
[0.x.8386] 
[0.x.8387] 
[0.x.8388] 
[0.x.8389] 
//
[0.x.8390] 
[0.x.8391] 
//
[0.x.8392] 
//
[0.x.8393] 
//
[0.x.8394] 
[0.x.8395] 
[0.x.8396] 
[0.x.8397] 
[0.x.8398] 
//
[0.x.8399] 
//
[0.x.8400] 
[0.x.8401] 
[0.x.8402] 
[0.x.8403] 
[0.x.8404] 
[0.x.8405] 
//
[0.x.8406] 
[0.x.8407] 
[0.x.8408] 
[0.x.8409] 
[0.x.8410] 
[0.x.8411] 
[0.x.8412] 
[0.x.8413] 
//
[0.x.8414] 
[0.x.8415] 
[0.x.8416] 
[0.x.8417] 
[0.x.8418] 
//
[0.x.8419] 
[0.x.8420] 
[0.x.8421] 
//
[0.x.8422] 
[0.x.8423] 
[0.x.8424] 
//
[0.x.8425] 
[0.x.8426] 
//[2.x.1210] 
//
// 下面两个函数，解决压力和速度变量的线性系统，几乎是逐字逐句地从[2.x.1213]中提取的（除了主变量的名字从[2.x.1211]改为[2.x.1212]）。
//
[0.x.8427] 
[0.x.8428] 
[0.x.8429] 
[0.x.8430] 
[0.x.8431] 
//
[0.x.8432] 
//
[0.x.8433] 
[0.x.8434] 
[0.x.8435] 
//
[0.x.8436] 
[0.x.8437] 
[0.x.8438] 
[0.x.8439] 
[0.x.8440] 
//
[0.x.8441] 
//
[0.x.8442] 
[0.x.8443] 
[0.x.8444] 
//
// [2.x.1214] 
//
// 这里也是如此：该函数来自 [2.x.1215] 。
//
[0.x.8445] 
[0.x.8446] 
[0.x.8447] 
[0.x.8448] 
//
[0.x.8449] 
[0.x.8450] 
[0.x.8451] 
//
[0.x.8452] 
//
[0.x.8453] 
[0.x.8454] 
[0.x.8455] 
[0.x.8456] 
[0.x.8457] 
[0.x.8458] 
[0.x.8459] 
[0.x.8460] 
//
// [2.x.1216] 
//
// 这个做大部分工作的函数又和[2.x.1217]中的差不多，尽管我们通过使用介绍中提到的向量G1和G2使事情变得更加清晰。与程序的整体内存消耗相比，引入几个临时向量并没有什么坏处。
//
// 这个函数唯一的变化是：首先，我们不必为速度[2.x.1218]预测初始值，因为我们知道它是零。其次，我们在构造函数中计算的检测器位置上评估解决方案。这是用[2.x.1219]函数完成的。然后，这些值被写入我们在函数开始时打开的一个文件中。
//
[0.x.8461] 
[0.x.8462] 
[0.x.8463] 
[0.x.8464] 
//
[0.x.8465] 
[0.x.8466] 
[0.x.8467] 
[0.x.8468] 
[0.x.8469] 
[0.x.8470] 
//
[0.x.8471] 
//
[0.x.8472] 
[0.x.8473] 
[0.x.8474] 
//
[0.x.8475] 
[0.x.8476] 
[0.x.8477] 
[0.x.8478] 
[0.x.8479] 
[0.x.8480] 
[0.x.8481] 
//
[0.x.8482] 
[0.x.8483] 
[0.x.8484] 
//
[0.x.8485] 
[0.x.8486] 
[0.x.8487] 
//
[0.x.8488] 
[0.x.8489] 
//
[0.x.8490] 
[0.x.8491] 
//
[0.x.8492] 
//
[0.x.8493] 
[0.x.8494] 
[0.x.8495] 
//
[0.x.8496] 
[0.x.8497] 
//
[0.x.8498] 
//
[0.x.8499] 
//
[0.x.8500] 
[0.x.8501] 
[0.x.8502] 
[0.x.8503] 
[0.x.8504] 
[0.x.8505] 
[0.x.8506] 
[0.x.8507] 
//
[0.x.8508] 
[0.x.8509] 
[0.x.8510] 
[0.x.8511] 
[0.x.8512] 
//
// [2.x.1220] 
//
// 剩下的就是程序的主要功能了。这里没有什么是在前面几个程序中没有展示过的。
//
[0.x.8513] 
[0.x.8514] 
[0.x.8515] 
[0.x.8516] 
[0.x.8517] 
//
[0.x.8518] 
[0.x.8519] 
[0.x.8520] 
[0.x.8521] 
[0.x.8522] 
[0.x.8523] 
[0.x.8524] 
[0.x.8525] 
[0.x.8526] 
[0.x.8527] 
[0.x.8528] 
[0.x.8529] 
[0.x.8530] 
[0.x.8531] 
//
[0.x.8532] 
[0.x.8533] 
[0.x.8534] 
[0.x.8535] 
[0.x.8536] 
[0.x.8537] 
[0.x.8538] 
[0.x.8539] 
[0.x.8540] 
[0.x.8541] 
[0.x.8542] 
[0.x.8543] 
[0.x.8544] 
[0.x.8545] 
//
[0.x.8546] 
[0.x.8547] 
[0.x.8548] 
[0.x.8549] 
[0.x.8550] 
[0.x.8551] 
[0.x.8552] 
[0.x.8553] 
[0.x.8554] 
[0.x.8555] 
[0.x.8556] 
[0.x.8557] 
[0.x.8558] 
[0.x.8559] 
[0.x.8560] 
[0.x.8561] 
//
[0.x.8562] 
[0.x.8563] 
[0.x.8564] 
//[2.x.1221] 
//
// 关于包含文件的解释，读者应该参考示例程序 [2.x.1222] 到 [2.x.1223] 。它们的标准顺序是 [2.x.1224] -- [2.x.1225] （因为每一类大致都是建立在前面的基础上），然后是一些用于文件输入/输出和字符串流的C++头文件。
//
[0.x.8565] 
[0.x.8566] 
[0.x.8567] 
//
[0.x.8568] 
[0.x.8569] 
[0.x.8570] 
[0.x.8571] 
[0.x.8572] 
[0.x.8573] 
[0.x.8574] 
//
[0.x.8575] 
[0.x.8576] 
//
[0.x.8577] 
[0.x.8578] 
//
[0.x.8579] 
[0.x.8580] 
//
[0.x.8581] 
[0.x.8582] 
[0.x.8583] 
//
[0.x.8584] 
[0.x.8585] 
//
// 最后一步和以前所有的程序一样。
//
[0.x.8586] 
[0.x.8587] 
[0.x.8588] 
//[2.x.1226] 
//
// 解决问题的整个算法被封装在这个类中。和以前的例子程序一样，这个类在声明时有一个模板参数，就是空间维度，这样我们就可以在一个、两个或三个空间维度上解决正弦-戈登方程。关于这个问题的独立于维度的类封装的更多信息，读者应该参考 [2.x.1227] 和 [2.x.1228] 。
//
// 与[2.x.1229]和[2.x.1230]相比，在程序的总体结构中没有任何值得注意的地方（当然，在各种函数的内部运作中也有！）。最明显的区别是出现了两个新的函数[2.x.1231]和[2.x.1232]，计算系统矩阵的非线性贡献和第一个方程的右手边，正如在介绍中讨论的那样。此外，我们还必须有一个向量[2.x.1233]，它包含在每个牛顿步骤中对解向量的非线性更新。
//
// 正如介绍中也提到的，我们在这个程序中不存储速度变量，而是质量矩阵乘以速度。这是在[2.x.1234]变量中完成的（"x "是代表 "次数"）。
//
// 最后，[2.x.1235]变量存储了在生成图形输出前每次所需的时间步数。这一点在使用精细网格（因此时间步数较小）时非常重要，在这种情况下，我们会运行大量的时间步数，并创建大量的输出文件，这些文件中的解决方案在后续文件中看起来几乎是一样的。这只会堵塞我们的可视化程序，我们应该避免创建比我们真正感兴趣的更多的输出。因此，如果这个变量被设置为大于1的值[2.x.1236]，那么只有在每一个[2.x.1237]的时间步长时才会产生输出。
//
[0.x.8589] 
[0.x.8590] 
[0.x.8591] 
[0.x.8592] 
[0.x.8593] 
[0.x.8594] 
//
[0.x.8595] 
[0.x.8596] 
[0.x.8597] 
[0.x.8598] 
[0.x.8599] 
[0.x.8600] 
[0.x.8601] 
[0.x.8602] 
[0.x.8603] 
[0.x.8604] 
[0.x.8605] 
//
[0.x.8606] 
[0.x.8607] 
[0.x.8608] 
//
[0.x.8609] 
[0.x.8610] 
[0.x.8611] 
[0.x.8612] 
//
[0.x.8613] 
//
[0.x.8614] 
[0.x.8615] 
[0.x.8616] 
//
[0.x.8617] 
[0.x.8618] 
[0.x.8619] 
//
[0.x.8620] 
[0.x.8621] 
//[2.x.1238] 
//
// 在下面两类中，我们首先实现了本程序介绍中提到的一维、二维和三维的精确解。如果想通过比较数值解和分析解来测试程序的准确性，那么这个时空解可能会有独立的意义（但是请注意，程序使用的是有限域，而这些是无界域的分析解）。例如，这可以用[2.x.1239]函数来完成。再次注意（正如在[2.x.1240]中已经讨论过的），我们如何将时空函数描述为依赖于时间变量的空间函数，该变量可以使用FunctionTime基类的[2.x.1241]和[2.x.1242]成员函数进行设置和查询。
//
[0.x.8622] 
[0.x.8623] 
[0.x.8624] 
[0.x.8625] 
[0.x.8626] 
[0.x.8627] 
[0.x.8628] 
//
[0.x.8629] 
[0.x.8630] 
[0.x.8631] 
[0.x.8632] 
//
[0.x.8633] 
[0.x.8634] 
[0.x.8635] 
[0.x.8636] 
[0.x.8637] 
[0.x.8638] 
[0.x.8639] 
[0.x.8640] 
[0.x.8641] 
[0.x.8642] 
[0.x.8643] 
//
[0.x.8644] 
[0.x.8645] 
[0.x.8646] 
[0.x.8647] 
[0.x.8648] 
[0.x.8649] 
[0.x.8650] 
[0.x.8651] 
[0.x.8652] 
[0.x.8653] 
[0.x.8654] 
//
[0.x.8655] 
[0.x.8656] 
[0.x.8657] 
[0.x.8658] 
[0.x.8659] 
[0.x.8660] 
[0.x.8661] 
[0.x.8662] 
[0.x.8663] 
[0.x.8664] 
[0.x.8665] 
[0.x.8666] 
[0.x.8667] 
//
[0.x.8668] 
[0.x.8669] 
[0.x.8670] 
[0.x.8671] 
[0.x.8672] 
[0.x.8673] 
//
// 在本节的第二部分，我们提供初始条件。我们很懒惰（也很谨慎），不想第二次实现与上面相同的函数。相反，如果我们被查询到初始条件，我们会创建一个对象[2.x.1243]，将其设置为正确的时间，并让它计算当时的精确解的任何值。
//
[0.x.8674] 
[0.x.8675] 
[0.x.8676] 
[0.x.8677] 
[0.x.8678] 
[0.x.8679] 
[0.x.8680] 
//
[0.x.8681] 
[0.x.8682] 
[0.x.8683] 
[0.x.8684] 
[0.x.8685] 
[0.x.8686] 
//[2.x.1244] 
//
// 让我们继续讨论主类的实现，因为它实现了介绍中概述的算法。
//
// [2.x.1245] 
//
// 这是[2.x.1246]类的构造函数。它指定了所需的有限元的多项式程度，关联了一个[2.x.1247]对象（就像在示例程序[2.x.1248]和[2.x.1249]中一样），初始化了当前或初始时间、最终时间、时间步长，以及时间步长方案的[2.x.1250]值。由于我们在这里计算的解是时间周期性的，所以开始时间的实际值并不重要，我们选择它是为了让我们在一个有趣的时间开始。
//
// 请注意，如果我们选择显式欧拉时间步进方案（[2.x.1251]），那么我们必须选择一个时间步进[2.x.1252]，否则该方案不稳定，解中可能出现振荡。Crank-Nicolson方案（[2.x.1253]）和隐式Euler方案（[2.x.1254]）不存在这个缺陷，因为它们是无条件稳定的。然而，即使如此，时间步长也应选择在[2.x.1255]的数量级上，以获得一个好的解决方案。由于我们知道我们的网格是由矩形的均匀细分而来，我们可以很容易地计算出这个时间步长；如果我们有一个不同的域，[2.x.1256]中的技术使用[2.x.1257]也是可以的。
//
[0.x.8687] 
[0.x.8688] 
[0.x.8689] 
[0.x.8690] 
[0.x.8691] 
[0.x.8692] 
[0.x.8693] 
[0.x.8694] 
[0.x.8695] 
[0.x.8696] 
[0.x.8697] 
//[2.x.1258] 
//
// 这个函数创建了一个[2.x.1259]维度的矩形网格，并对其进行了多次细化。同时，一旦自由度被集合起来，[2.x.1260]类的所有矩阵和向量成员都被初始化为相应的大小。像[2.x.1261]一样，我们使用[2.x.1262]函数来生成质量矩阵[2.x.1263]和拉普拉斯矩阵[2.x.1264]，并在程序的剩余时间里将它们存储在适当的变量中。
//
[0.x.8698] 
[0.x.8699] 
[0.x.8700] 
[0.x.8701] 
[0.x.8702] 
//
[0.x.8703] 
[0.x.8704] 
[0.x.8705] 
[0.x.8706] 
//
[0.x.8707] 
//
[0.x.8708] 
[0.x.8709] 
//
[0.x.8710] 
[0.x.8711] 
[0.x.8712] 
//
[0.x.8713] 
[0.x.8714] 
[0.x.8715] 
//
[0.x.8716] 
[0.x.8717] 
[0.x.8718] 
[0.x.8719] 
[0.x.8720] 
[0.x.8721] 
//
[0.x.8722] 
[0.x.8723] 
[0.x.8724] 
[0.x.8725] 
[0.x.8726] 
[0.x.8727] 
//[2.x.1265] 
//
// 这个函数为牛顿方法的每次迭代组装系统矩阵和右手向量。关于系统矩阵和右手边的明确公式，读者应该参考导论。
//
// 请注意，在每个时间步长中，我们必须把对矩阵和右手边的各种贡献加起来。与[2.x.1266]和[2.x.1267]相比，这需要集合更多的项，因为它们取决于前一个时间步骤或前一个非线性步骤的解。我们使用函数[2.x.1268]和[2.x.1269]来做到这一点，而本函数提供了顶层逻辑。
//
[0.x.8728] 
[0.x.8729] 
[0.x.8730] 
//
// 首先我们组装雅各布矩阵[2.x.1270] ，其中[2.x.1271]为方便起见被储存在向量[2.x.1272]中。
//
[0.x.8731] 
[0.x.8732] 
//
[0.x.8733] 
[0.x.8734] 
[0.x.8735] 
//
// 接下来我们计算右手边的向量。这只是介绍中对[2.x.1273]的描述所暗示的矩阵-向量的组合。
//
[0.x.8736] 
//
[0.x.8737] 
//
[0.x.8738] 
[0.x.8739] 
[0.x.8740] 
//
[0.x.8741] 
[0.x.8742] 
[0.x.8743] 
[0.x.8744] 
//
[0.x.8745] 
//
[0.x.8746] 
[0.x.8747] 
//
[0.x.8748] 
[0.x.8749] 
//[2.x.1274] 
//
// 这个函数计算向量[2.x.1275]，它出现在分裂公式的两个方程的非线性项中。这个函数不仅简化了这个项的重复计算，而且也是我们在时间步长为隐式时使用的非线性迭代求解器的基本组成部分（即[2.x.1276] ）。此外，我们必须允许该函数接收一个 "旧 "和一个 "新 "的解决方案作为输入。这些可能不是存储在[2.x.1277]中的问题的实际解决方案，而只是我们线性化的两个函数。为了这个函数的目的，让我们在下面这个类的文档中分别调用前两个参数 [2.x.1278] 和 [2.x.1279] 。
//
// 作为一个旁注，也许值得研究一下什么阶次的正交公式最适合这种类型的积分。由于[2.x.1280]不是一个多项式，可能没有正交公式可以准确地积分这些项。通常只需确保右手边的积分达到与离散化方案相同的精度即可，但通过选择更精确的正交公式，也许可以改善渐近收敛声明中的常数。
//
[0.x.8750] 
[0.x.8751] 
[0.x.8752] 
[0.x.8753] 
[0.x.8754] 
[0.x.8755] 
[0.x.8756] 
[0.x.8757] 
[0.x.8758] 
[0.x.8759] 
[0.x.8760] 
//
[0.x.8761] 
[0.x.8762] 
//
[0.x.8763] 
[0.x.8764] 
[0.x.8765] 
[0.x.8766] 
//
[0.x.8767] 
[0.x.8768] 
[0.x.8769] 
//
// 一旦我们将[2.x.1281]实例化重新初始化到当前单元格，我们就利用[2.x.1282]例程来获取 "旧 "数据（大概在[2.x.1283]）和 "新 "数据（大概在[2.x.1284]）在所选正交公式节点的值。
//
[0.x.8770] 
[0.x.8771] 
[0.x.8772] 
//
// 现在，我们可以用所需的正交公式来评估 [2.x.1285] 。
//
[0.x.8773] 
[0.x.8774] 
[0.x.8775] 
[0.x.8776] 
[0.x.8777] 
[0.x.8778] 
//
// 我们通过将各单元的积分对全局积分的贡献相加来得出结论。
//
[0.x.8779] 
//
[0.x.8780] 
[0.x.8781] 
[0.x.8782] 
[0.x.8783] 
//[2.x.1286] 
//
// 这是处理非线性方案的第二个函数。它计算矩阵 [2.x.1287] ，它出现在 [2.x.1288] 的雅各布项的非线性项中。正如[2.x.1289]一样，我们必须让这个函数接收一个 "旧 "和一个 "新 "的解决方案作为输入，我们再次将其分别称为[2.x.1290]和[2.x.1291]，如下。
//
[0.x.8784] 
[0.x.8785] 
[0.x.8786] 
[0.x.8787] 
[0.x.8788] 
[0.x.8789] 
[0.x.8790] 
[0.x.8791] 
[0.x.8792] 
[0.x.8793] 
[0.x.8794] 
//
[0.x.8795] 
[0.x.8796] 
//
[0.x.8797] 
[0.x.8798] 
[0.x.8799] 
[0.x.8800] 
//
[0.x.8801] 
[0.x.8802] 
[0.x.8803] 
//
// 同样，首先我们将我们的[2.x.1292]实例化重新初始化为当前单元。
//
[0.x.8804] 
[0.x.8805] 
[0.x.8806] 
//
// 然后，我们用所需的正交公式评估[2.x.1293]。
//
[0.x.8807] 
[0.x.8808] 
[0.x.8809] 
[0.x.8810] 
[0.x.8811] 
[0.x.8812] 
[0.x.8813] 
[0.x.8814] 
//
// 最后，我们将各单元的积分对全局积分的贡献相加。
//
[0.x.8815] 
//
[0.x.8816] 
[0.x.8817] 
[0.x.8818] 
[0.x.8819] 
[0.x.8820] 
[0.x.8821] 
[0.x.8822] 
//
// [2.x.1294] 
//
// 正如在介绍中所讨论的，这个函数在线性方程组上使用CG迭代求解器，该方程组是由牛顿方法的每个迭代的有限元空间离散化产生的，用于分割公式中的（非线性）第一个方程。该系统的解实际上是[2.x.1295]，所以它被存储在[2.x.1296]的[2.x.1297]函数中。
//
// 注意，我们在求解前将解的更新值重新设置为零。这是没有必要的：迭代求解器可以从任何一点开始并收敛到正确的解。如果对线性系统的解有一个很好的估计，那么从这个向量开始可能是值得的，但是作为一个一般的观察，起点并不是很重要：它必须是一个非常非常好的猜测，以减少超过几个迭代的次数。事实证明，对于这个问题，使用之前的非线性更新作为起点实际上会损害收敛性并增加所需的迭代次数，所以我们简单地将其设置为零。
//
// 该函数返回收敛到一个解决方案所需的迭代次数。这个数字以后将被用来在屏幕上生成输出，显示每次非线性迭代需要多少次迭代。
//
[0.x.8823] 
[0.x.8824] 
[0.x.8825] 
[0.x.8826] 
[0.x.8827] 
//
[0.x.8828] 
[0.x.8829] 
//
[0.x.8830] 
//
[0.x.8831] 
[0.x.8832] 
//[2.x.1298] 
//
// 这个函数将结果输出到一个文件。它与 [2.x.1299] 和 [2.x.1300] 中的相应函数基本相同。
//
[0.x.8833] 
[0.x.8834] 
[0.x.8835] 
[0.x.8836] 
[0.x.8837] 
//
[0.x.8838] 
[0.x.8839] 
[0.x.8840] 
//
[0.x.8841] 
[0.x.8842] 
[0.x.8843] 
[0.x.8844] 
[0.x.8845] 
[0.x.8846] 
[0.x.8847] 
[0.x.8848] 
[0.x.8849] 
//[2.x.1301] 
//
// 这个函数对一切都有最高级别的控制：它运行（外部）时间步长循环，（内部）非线性求解器循环，并在每个时间步长后输出解。
//
[0.x.8850] 
[0.x.8851] 
[0.x.8852] 
[0.x.8853] 
//
// 为了确认初始条件，我们必须使用函数 [2.x.1302] 来计算 [2.x.1303] 。为此，下面我们将创建一个[2.x.1304]类型的对象；注意，当我们创建这个对象（它来自[2.x.1305]类）时，我们将其内部的时间变量设置为[2.x.1306]，以表明初始条件是在[2.x.1307]处评估的空间和时间的函数。
//
// 然后我们通过使用[2.x.1310]将[2.x.1309]投影到网格上，产生[2.x.1308]。我们必须使用与[2.x.1311]相同的悬挂节点约束结构：[2.x.1312]函数需要一个悬挂节点约束对象，但为了使用它，我们首先需要关闭它。
//
[0.x.8854] 
[0.x.8855] 
[0.x.8856] 
[0.x.8857] 
[0.x.8858] 
[0.x.8859] 
[0.x.8860] 
[0.x.8861] 
[0.x.8862] 
//
// 为了完整起见，我们像其他时间步长一样，将第2个时间步长输出到一个文件。
//
[0.x.8863] 
//
// 现在我们进行时间步进：在每个时间步进中，我们解决与问题的有限元离散化相对应的矩阵方程，然后根据我们在介绍中讨论的时间步进公式推进我们的解决方案。
//
[0.x.8864] 
[0.x.8865] 
[0.x.8866] 
[0.x.8867] 
[0.x.8868] 
//
[0.x.8869] 
[0.x.8870] 
[0.x.8871] 
//
// 在每个时间步长的开始，我们必须通过牛顿方法求解拆分公式中的非线性方程---即先求解[2.x.1313]，然后再计算[2.x.1314]，如此反复。这种非线性迭代的停止标准是：[2.x.1315] 。因此，我们需要记录第一次迭代中残差的规范。
//
// 在每次迭代结束时，我们向控制台输出我们花了多少次线性求解器的迭代。当下面的循环完成后，我们有（一个近似的）[2.x.1316] 。
//
[0.x.8872] 
[0.x.8873] 
[0.x.8874] 
[0.x.8875] 
[0.x.8876] 
//
[0.x.8877] 
[0.x.8878] 
//
[0.x.8879] 
//
[0.x.8880] 
//
[0.x.8881] 
[0.x.8882] 
[0.x.8883] 
[0.x.8884] 
[0.x.8885] 
[0.x.8886] 
[0.x.8887] 
//
[0.x.8888] 

// 在得到问题的第一个方程[2.x.1317]的解后，我们必须更新辅助速度变量 [2.x.1318] 。然而，我们不计算和存储[2.x.1319]，因为它不是我们在问题中直接使用的数量。因此，为了简单起见，我们直接更新[2.x.1320]。
//
[0.x.8889] 
[0.x.8890] 
[0.x.8891] 
//
[0.x.8892] 
[0.x.8893] 
//
[0.x.8894] 
[0.x.8895] 
//
// 很多时候，特别是对于细网格，我们必须选择相当小的时间步长，以使方案稳定。因此，有很多时间步长，在解的过程中 "没有什么有趣的事情发生"。为了提高整体效率--特别是加快程序速度和节省磁盘空间--我们每隔[2.x.1321]个时间步数才输出解。
//
[0.x.8896] 
[0.x.8897] 
[0.x.8898] 
[0.x.8899] 
[0.x.8900] 
//[2.x.1322] 
//
// 这是该程序的主函数。它创建一个顶层类的对象并调用其主函数。如果在执行[2.x.1323]类的运行方法时抛出了异常，我们会在这里捕获并报告它们。关于异常的更多信息，读者应该参考 [2.x.1324] 。
//
[0.x.8901] 
[0.x.8902] 
[0.x.8903] 
[0.x.8904] 
[0.x.8905] 
//
[0.x.8906] 
[0.x.8907] 
[0.x.8908] 
[0.x.8909] 
[0.x.8910] 
[0.x.8911] 
[0.x.8912] 
[0.x.8913] 
[0.x.8914] 
[0.x.8915] 
[0.x.8916] 
[0.x.8917] 
[0.x.8918] 
[0.x.8919] 
//
[0.x.8920] 
[0.x.8921] 
[0.x.8922] 
[0.x.8923] 
[0.x.8924] 
[0.x.8925] 
[0.x.8926] 
[0.x.8927] 
[0.x.8928] 
[0.x.8929] 
[0.x.8930] 
[0.x.8931] 
[0.x.8932] 
[0.x.8933] 
//
[0.x.8934] 
[0.x.8935] 
[0.x.8936] 
[0.x.8937] 
[0.x.8938] 
[0.x.8939] 
[0.x.8940] 
[0.x.8941] 
[0.x.8942] 
[0.x.8943] 
[0.x.8944] 
[0.x.8945] 
[0.x.8946] 
[0.x.8947] 
[0.x.8948] 
[0.x.8949] 
//
[0.x.8950] 
[0.x.8951] 
[0.x.8952] 
//
// 程序以通常的包含文件开始，所有这些文件你现在应该都见过了。
//
[0.x.8953] 
[0.x.8954] 
[0.x.8955] 
[0.x.8956] 
[0.x.8957] 
[0.x.8958] 
[0.x.8959] 
[0.x.8960] 
[0.x.8961] 
[0.x.8962] 
[0.x.8963] 
[0.x.8964] 
[0.x.8965] 
[0.x.8966] 
[0.x.8967] 
[0.x.8968] 
[0.x.8969] 
[0.x.8970] 
[0.x.8971] 
[0.x.8972] 
[0.x.8973] 
[0.x.8974] 
[0.x.8975] 
[0.x.8976] 
//
[0.x.8977] 
[0.x.8978] 
//
// 然后照例将这个程序的所有内容放入一个命名空间，并将deal.II命名空间导入到我们将要工作的命名空间中。
//
[0.x.8979] 
[0.x.8980] 
[0.x.8981] 
//[2.x.1325] 
//
// 下一个部分是这个程序的主类的声明。它沿用了以前的例子中公认的路径。如果你看过[2.x.1326]，例如，这里唯一值得注意的是，我们需要建立两个矩阵（质量和拉普拉斯矩阵），并保存当前和前一个时间步骤的解。然后，我们还需要存储当前时间、时间步长和当前时间步长的编号。最后一个成员变量表示介绍中讨论的theta参数，它允许我们在一个程序中处理显式和隐式欧拉方法，以及Crank-Nicolson方法和其他通用方法。
//
// 就成员函数而言，唯一可能的惊喜是[2.x.1327]函数需要最小和最大的网格细化级别的参数。这样做的目的在介绍中已经讨论过了。
//
[0.x.8982] 
[0.x.8983] 
[0.x.8984] 
[0.x.8985] 
[0.x.8986] 
[0.x.8987] 
//
[0.x.8988] 
[0.x.8989] 
[0.x.8990] 
[0.x.8991] 
[0.x.8992] 
[0.x.8993] 
//
[0.x.8994] 
[0.x.8995] 
[0.x.8996] 
//
[0.x.8997] 
//
[0.x.8998] 
[0.x.8999] 
[0.x.9000] 
[0.x.9001] 
//
[0.x.9002] 
[0.x.9003] 
[0.x.9004] 
//
[0.x.9005] 
[0.x.9006] 
[0.x.9007] 
//
[0.x.9008] 
[0.x.9009] 
//
// [2.x.1328] 
//
// 在下面的类和函数中，我们实现了定义这个问题的各种数据（右手边和边界值），这些数据在这个程序中使用，我们需要函数对象。右手边的选择是在介绍的最后讨论的。对于边界值，我们选择零值，但这很容易在下面改变。
//
[0.x.9010] 
[0.x.9011] 
[0.x.9012] 
[0.x.9013] 
[0.x.9014] 
[0.x.9015] 
[0.x.9016] 
[0.x.9017] 
//
[0.x.9018] 
[0.x.9019] 
//
[0.x.9020] 
[0.x.9021] 
[0.x.9022] 
//
[0.x.9023] 
[0.x.9024] 
[0.x.9025] 
[0.x.9026] 
[0.x.9027] 
[0.x.9028] 
[0.x.9029] 
//
[0.x.9030] 
[0.x.9031] 
[0.x.9032] 
//
[0.x.9033] 
[0.x.9034] 
[0.x.9035] 
[0.x.9036] 
[0.x.9037] 
[0.x.9038] 
[0.x.9039] 
[0.x.9040] 
[0.x.9041] 
[0.x.9042] 
[0.x.9043] 
[0.x.9044] 
[0.x.9045] 
[0.x.9046] 
[0.x.9047] 
[0.x.9048] 
[0.x.9049] 
//
[0.x.9050] 
[0.x.9051] 
[0.x.9052] 
[0.x.9053] 
[0.x.9054] 
[0.x.9055] 
[0.x.9056] 
//
[0.x.9057] 
[0.x.9058] 
[0.x.9059] 
[0.x.9060] 
[0.x.9061] 
[0.x.9062] 
[0.x.9063] 
[0.x.9064] 
//
// [2.x.1329] 
//
// 现在是实现主类的时候了。让我们从构造函数开始，它选择了一个线性元素，一个时间步长为1/500的常数（记得上面把右边的源的一个周期设置为0.2，所以我们用100个时间步长来解决每个周期），并通过设置 [2.x.1330] 选择了Crank Nicolson方法.
//
[0.x.9065] 
[0.x.9066] 
[0.x.9067] 
[0.x.9068] 
[0.x.9069] 
[0.x.9070] 
[0.x.9071] 
//
// [2.x.1331] 
//
// 下一个函数是设置DoFHandler对象，计算约束，并将线性代数对象设置为正确的大小。我们还在这里通过简单地调用库中的两个函数来计算质量和拉普拉斯矩阵。
//
// 注意我们在组装矩阵时不考虑悬挂节点的约束（两个函数都有一个AffineConstraints参数，默认为一个空对象）。这是因为我们要在结合当前时间步长的矩阵后，在run()中浓缩约束。
//
[0.x.9072] 
[0.x.9073] 
[0.x.9074] 
[0.x.9075] 
//
[0.x.9076] 
[0.x.9077] 
[0.x.9078] 
[0.x.9079] 
[0.x.9080] 
[0.x.9081] 
[0.x.9082] 
//
[0.x.9083] 
[0.x.9084] 
[0.x.9085] 
//
[0.x.9086] 
[0.x.9087] 
[0.x.9088] 
[0.x.9089] 
//
//keep_constrained_dofs = [2.x.1332] true）。)
//
[0.x.9090] 
//
[0.x.9091] 
[0.x.9092] 
[0.x.9093] 
//
[0.x.9094] 
[0.x.9095] 
[0.x.9096] 
[0.x.9097] 
[0.x.9098] 
[0.x.9099] 
//
[0.x.9100] 
[0.x.9101] 
[0.x.9102] 
[0.x.9103] 
//[2.x.1333] 
//
// 下一个函数是解决单个时间步骤的实际线性系统的函数。这里没有什么值得惊讶的。
//
[0.x.9104] 
[0.x.9105] 
[0.x.9106] 
[0.x.9107] 
[0.x.9108] 
//
[0.x.9109] 
[0.x.9110] 
//
[0.x.9111] 
//
[0.x.9112] 
//
[0.x.9113] 
[0.x.9114] 
[0.x.9115] 
//
// [2.x.1334] 
//
// 在生成图形输出方面也没有什么新东西，只是我们告诉DataOut对象当前的时间和时间步长是多少，以便将其写入输出文件中。
//
[0.x.9116] 
[0.x.9117] 
[0.x.9118] 
[0.x.9119] 
//
[0.x.9120] 
[0.x.9121] 
//
[0.x.9122] 
//
[0.x.9123] 
//
[0.x.9124] 
[0.x.9125] 
[0.x.9126] 
[0.x.9127] 
[0.x.9128] 
//[2.x.1335] 
//
// 这个函数是程序中最有趣的部分。它负责自适应网格细化的工作。这个函数执行的三个任务是：首先找出需要细化/粗化的单元，然后实际进行细化，最后在两个不同的网格之间传输解向量。第一个任务是通过使用成熟的凯利误差估计器来实现的。第二项任务是实际进行再细化。这也只涉及到基本的函数，例如[2.x.1336]，它可以细化那些具有最大估计误差的单元，这些误差加起来占60%，并粗化那些具有最小误差的单元，这些单元加起来占40%的误差。请注意，对于像当前这样的问题，即有事发生的区域正在四处移动，我们希望积极地进行粗化，以便我们能够将单元格移动到有必要的地方。
//
// 正如在介绍中已经讨论过的，太小的网格会导致太小的时间步长，而太大的网格会导致太小的分辨率。因此，在前两个步骤之后，我们有两个循环，将细化和粗化限制在一个允许的单元范围内。
//
[0.x.9129] 
[0.x.9130] 
[0.x.9131] 
[0.x.9132] 
[0.x.9133] 
//
[0.x.9134] 
[0.x.9135] 
[0.x.9136] 
[0.x.9137] 
[0.x.9138] 
[0.x.9139] 
//
[0.x.9140] 
[0.x.9141] 
[0.x.9142] 
[0.x.9143] 
//
[0.x.9144] 
[0.x.9145] 
[0.x.9146] 
[0.x.9147] 
[0.x.9148] 
[0.x.9149] 
[0.x.9150] 
//
// 上面这两个循环略有不同，但这很容易解释。在第一个循环中，我们没有调用 [2.x.1337] ，而是调用 [2.x.1338] 。这两个调用应该产生相同的迭代器，因为迭代器是按级别排序的，不应该有任何级别高于[2.x.1339]的单元格。事实上，这段代码确保了这种情况的发生。
//
// 作为网格细化的一部分，我们需要将旧的网格中的解向量转移到新的网格中。为此，我们使用了SolutionTransfer类，我们必须准备好需要转移到新网格的解向量（一旦完成细化，我们将失去旧的网格，所以转移必须与细化同时发生）。在我们调用这个函数的时候，我们将刚刚计算出解决方案，所以我们不再需要old_solution变量（它将在网格被细化后被解决方案覆盖，也就是在时间步长结束时；见下文）。换句话说，我们只需要一个求解向量，并将其复制到一个临时对象中，当我们进一步向下调用[2.x.1340]时，它就不会被重置。
//
// 因此，我们将一个SolutionTransfer对象附加到旧的DoF处理程序中，以初始化它。然后，我们准备好三角形和数据向量，以便进行细化（按照这个顺序）。
//
[0.x.9151] 
//
[0.x.9152] 
[0.x.9153] 
[0.x.9154] 
[0.x.9155] 
//
// 现在一切都准备好了，所以进行细化并在新网格上重新创建DoF结构，最后在[2.x.1341]函数中初始化矩阵结构和新的向量。接下来，我们实际执行从旧网格到新网格的插值解。最后一步是对解向量应用悬空节点约束，即确保位于悬空节点上的自由度值，使解是连续的。这是必要的，因为SolutionTransfer只对单元格进行局部操作，不考虑邻域。
//
[0.x.9156] 
[0.x.9157] 
//
[0.x.9158] 
[0.x.9159] 
[0.x.9160] 
//
// [2.x.1342] 
//
// 这是程序的主要驱动，我们在这里循环所有的时间步骤。在函数的顶部，我们通过重复第一个时间步长，设置初始全局网格细化的数量和自适应网格细化的初始周期数量。然后，我们创建一个网格，初始化我们要处理的各种对象，设置一个标签，说明我们在重新运行第一个时间步长时应该从哪里开始，并将初始解插值到网格上（我们在这里选择了零函数，当然，我们可以用更简单的方法，直接将解向量设置为零）。我们还输出一次初始时间步长。
//
// [2.x.1343] 如果你是一个有经验的程序员，你可能会对我们在这段代码中使用[2.x.1344]语句感到吃惊  [2.x.1345]语句现在已经不是特别受人欢迎了，因为计算机科学界的大师之一Edsgar Dijkstra在1968年写了一封信，叫做 "Go To Statement considered harmful"（见[1.x.35]）。这段代码的作者全心全意地赞同这一观念。 [2.x.1346]是难以理解的。事实上，deal.II几乎不包含任何出现的情况：不包括基本上是从书本上转录的代码，也不计算重复的代码片断，在写这篇笔记时，大约60万行代码中有3个位置；我们还在4个教程程序中使用它，其背景与这里完全相同。与其在这里试图证明这种情况的出现，不如先看看代码，我们在函数的最后再来讨论这个问题。
//
[0.x.9161] 
[0.x.9162] 
[0.x.9163] 
[0.x.9164] 
[0.x.9165] 
//
[0.x.9166] 
[0.x.9167] 
//
[0.x.9168] 
//
[0.x.9169] 
//
[0.x.9170] 
[0.x.9171] 
//
[0.x.9172] 
//
[0.x.9173] 
[0.x.9174] 
//
[0.x.9175] 
[0.x.9176] 
//
[0.x.9177] 
[0.x.9178] 
[0.x.9179] 
[0.x.9180] 
//
[0.x.9181] 
//
// 然后我们开始主循环，直到计算的时间超过我们的结束时间0.5。第一个任务是建立我们需要在每个时间步骤中解决的线性系统的右手边。回顾一下，它包含项[2.x.1347] 。我们把这些项放到变量system_rhs中，借助于一个临时矢量。
//
[0.x.9182] 
[0.x.9183] 
[0.x.9184] 
[0.x.9185] 
//
[0.x.9186] 
[0.x.9187] 
//
[0.x.9188] 
//
[0.x.9189] 
[0.x.9190] 
//
// 第二块是计算源项的贡献。这与术语 [2.x.1348] 相对应。下面的代码调用 [2.x.1349] 来计算向量 [2.x.1350] ，在这里我们在评估之前设置了右侧（源）函数的时间。这一切的结果最终都在forcing_terms变量中。
//
[0.x.9191] 
[0.x.9192] 
[0.x.9193] 
[0.x.9194] 
[0.x.9195] 
[0.x.9196] 
[0.x.9197] 
[0.x.9198] 
//
[0.x.9199] 
[0.x.9200] 
[0.x.9201] 
[0.x.9202] 
[0.x.9203] 
//
[0.x.9204] 
//
// 接下来，我们将强迫项加入到来自时间步长的强迫项中，同时建立矩阵[2.x.1351]，我们必须在每个时间步长中进行反转。这些操作的最后一块是消除线性系统中悬挂的节点约束自由度。
//
[0.x.9205] 
//
[0.x.9206] 
[0.x.9207] 
//
[0.x.9208] 
//
// 在解决这个问题之前，我们还需要做一个操作：边界值。为此，我们创建一个边界值对象，将适当的时间设置为当前时间步长的时间，并像以前多次那样对其进行评估。其结果也被用来在线性系统中设置正确的边界值。
//
[0.x.9209] 
[0.x.9210] 
[0.x.9211] 
//
[0.x.9212] 
[0.x.9213] 
[0.x.9214] 
[0.x.9215] 
[0.x.9216] 
//
[0.x.9217] 
[0.x.9218] 
[0.x.9219] 
[0.x.9220] 
[0.x.9221] 
//
// 有了这些，我们要做的就是解决这个系统，生成图形数据，以及......
//
[0.x.9222] 
//
[0.x.9223] 
//
// ...负责网格的细化。在这里，我们要做的是：(i)在求解过程的最开始，细化所要求的次数，之后我们跳到顶部重新开始时间迭代，(ii)之后每隔五步细化一次。
//
// 时间循环和程序的主要部分以开始进入下一个时间步骤结束，将old_solution设置为我们刚刚计算出的解决方案。
//
[0.x.9224] 
[0.x.9225] 
[0.x.9226] 
[0.x.9227] 
[0.x.9228] 
[0.x.9229] 
[0.x.9230] 
//
[0.x.9231] 
[0.x.9232] 
//
[0.x.9233] 
//
[0.x.9234] 
[0.x.9235] 
[0.x.9236] 
[0.x.9237] 
[0.x.9238] 
[0.x.9239] 
[0.x.9240] 
[0.x.9241] 
[0.x.9242] 
[0.x.9243] 
//
[0.x.9244] 
[0.x.9245] 
[0.x.9246] 
[0.x.9247] 
//
// 现在你已经看到了这个函数的作用，让我们再来看看 [2.x.1352] 的问题。从本质上讲，代码所做的事情是这样的。[1.x.36] 这里，"对结果满意 "的条件是我们想保留当前的网格，还是宁愿细化网格并在新网格上重新开始。我们当然可以用下面的方法来取代 [2.x.1353] 的使用。[1.x.37] 这样做的好处是摆脱了[2.x.1354]，但缺点是必须在两个不同的地方重复实现 "解算时间步长 "和 "后处理 "操作的代码。这可以通过将这些部分的代码（在上面的实际实现中是相当大的块）放到自己的函数中来解决，但是一个带有[2.x.1356]语句的[2.x.1355]循环并不真的比[2.x.1357]容易阅读或理解。
//
// 最后，人们可能会简单地同意，[1.x.38] 。
//[2.x.1358] 语句是个坏主意，但要务实地指出，在某些情况下，它们可以帮助避免代码重复和尴尬的控制流。这可能就是其中之一，它与Steve McConnell在他关于良好编程实践的优秀书籍 "Code Complete" [2.x.1359]中采取的立场一致（见[2.x.1360]的介绍中提到的这本书），该书花了惊人的10页来讨论一般的[2.x.1361]问题。
//
// [2.x.1362] 
//
// 走到这一步，这个程序的主函数又没有什么好讨论的了：它看起来就像自[2.x.1363]以来的所有此类函数一样。
//
[0.x.9248] 
[0.x.9249] 
[0.x.9250] 
[0.x.9251] 
[0.x.9252] 
//
[0.x.9253] 
[0.x.9254] 
[0.x.9255] 
[0.x.9256] 
[0.x.9257] 
[0.x.9258] 
[0.x.9259] 
[0.x.9260] 
[0.x.9261] 
[0.x.9262] 
[0.x.9263] 
[0.x.9264] 
[0.x.9265] 
[0.x.9266] 
//
[0.x.9267] 
[0.x.9268] 
[0.x.9269] 
[0.x.9270] 
[0.x.9271] 
[0.x.9272] 
[0.x.9273] 
[0.x.9274] 
[0.x.9275] 
[0.x.9276] 
[0.x.9277] 
[0.x.9278] 
[0.x.9279] 
[0.x.9280] 
//
[0.x.9281] 
[0.x.9282] 
[0.x.9283] 
[0.x.9284] 
[0.x.9285] 
[0.x.9286] 
[0.x.9287] 
[0.x.9288] 
[0.x.9289] 
[0.x.9290] 
[0.x.9291] 
[0.x.9292] 
[0.x.9293] 
[0.x.9294] 
[0.x.9295] 
[0.x.9296] 
//
[0.x.9297] 
[0.x.9298] 
[0.x.9299] 
[0.x.9300] 
[0.x.9301] 
//[2.x.1364] 
//
// 前面几个文件已经在前面的例子中讲过了，因此不再做进一步的评论。
//
[0.x.9302] 
[0.x.9303] 
[0.x.9304] 
[0.x.9305] 
[0.x.9306] 
[0.x.9307] 
[0.x.9308] 
[0.x.9309] 
[0.x.9310] 
[0.x.9311] 
[0.x.9312] 
[0.x.9313] 
[0.x.9314] 
[0.x.9315] 
[0.x.9316] 
[0.x.9317] 
[0.x.9318] 
[0.x.9319] 
[0.x.9320] 
[0.x.9321] 
//
// 这些是我们需要的新文件。第一个和第二个提供了FECollection和[1.x.39]版本的FEValues类，如本程序介绍中所述。下一个文件提供了自动[2.x.1365]适应的功能，为此我们将使用基于衰减系列扩展系数的估计算法，这是最后两个文件的一部分。
//
[0.x.9322] 
[0.x.9323] 
[0.x.9324] 
[0.x.9325] 
[0.x.9326] 
//
// 最后一组包含文件是标准的C++头文件。
//
[0.x.9327] 
[0.x.9328] 
//
// 最后，这和以前的程序一样。
//
[0.x.9329] 
[0.x.9330] 
[0.x.9331] 
//[2.x.1366] 
//
// 这个程序的主类看起来非常像前几个教程程序中已经使用过的，例如 [2.x.1367] 中的那个。主要的区别是我们将refine_grid和output_results函数合并为一个，因为我们还想输出一些用于决定如何细化网格的量（特别是估计的解决方案的平滑度）。
//
// 就成员变量而言，我们使用与[2.x.1368]中相同的结构，但我们需要集合来代替单个的有限元、正交和面状正交对象。我们将在类的构造函数中填充这些集合。最后一个变量，[2.x.1369]，表示所用形状函数的最大多项式程度。
//
[0.x.9332] 
[0.x.9333] 
[0.x.9334] 
[0.x.9335] 
[0.x.9336] 
[0.x.9337] 
//
[0.x.9338] 
//
[0.x.9339] 
[0.x.9340] 
[0.x.9341] 
[0.x.9342] 
[0.x.9343] 
[0.x.9344] 
//
[0.x.9345] 
//
 
 
[0.x.9348] 
[0.x.9349] 
//
[0.x.9350] 
//
[0.x.9351] 
[0.x.9352] 
//
[0.x.9353] 
[0.x.9354] 
//
[0.x.9355] 
[0.x.9356] 
//
// [2.x.1370] 
//
// 接下来，让我们为这个问题定义右手边的函数。它在1d中是[2.x.1371]，在2d中是[2.x.1372]，以此类推。
//
[0.x.9357] 
[0.x.9358] 
[0.x.9359] 
[0.x.9360] 
[0.x.9361] 
[0.x.9362] 
[0.x.9363] 
//
[0.x.9364] 
[0.x.9365] 
[0.x.9366] 
[0.x.9367] 
[0.x.9368] 
[0.x.9369] 
[0.x.9370] 
[0.x.9371] 
[0.x.9372] 
//
// [2.x.1373] 
//[2.x.1374] 
//
// 这个类的构造函数是相当直接的。它将DoFHandler对象与三角形相关联，然后将最大多项式度数设置为7（在1d和2d中）或5（在3d及以上）。我们这样做是因为使用高阶多项式度数会变得非常昂贵，尤其是在更高的空间维度上。
//
// 在这之后，我们填充有限元、单元和面的四分法对象集合。我们从二次元开始，每个正交公式的选择都是为了适合[2.x.1375]对象中的匹配有限元。
//
[0.x.9373] 
[0.x.9374] 
[0.x.9375] 
[0.x.9376] 
[0.x.9377] 
[0.x.9378] 
[0.x.9379] 
[0.x.9380] 
[0.x.9381] 
[0.x.9382] 
[0.x.9383] 
[0.x.9384] 
//[2.x.1376] 
//
// 解构器与我们在 [2.x.1377] 中已经做过的没有变化。
//
[0.x.9385] 
[0.x.9386] 
[0.x.9387] 
[0.x.9388] 
[0.x.9389] 
//[2.x.1378] 
//
// 这个函数又是对我们在 [2.x.1379] 中已经做过的事情的逐字复制。尽管函数调用的名称和参数完全相同，但内部使用的算法在某些方面是不同的，因为这里的dof_handler变量是在 [2.x.1380] -mode。
//
[0.x.9390] 
[0.x.9391] 
[0.x.9392] 
[0.x.9393] 
//
[0.x.9394] 
[0.x.9395] 
//
[0.x.9396] 
[0.x.9397] 
[0.x.9398] 
[0.x.9399] 
[0.x.9400] 
[0.x.9401] 
[0.x.9402] 
//
[0.x.9403] 
[0.x.9404] 
[0.x.9405] 
//
[0.x.9406] 
[0.x.9407] 
//
// [2.x.1381] 
//
// 这是一个从每个单元的局部贡献中集合全局矩阵和右侧向量的函数。它的主要工作与之前许多教程中描述的一样。重要的差异是[1.x.40]有限元方法所需要的。特别是，我们需要使用FEValues对象的集合（通过[2.x.1382]类实现），并且在将局部贡献复制到全局对象时，我们必须消除受限自由度。这两点在本程序的介绍中都有详细解释。
//
// 还有一个小问题是，由于我们在不同的单元格中使用了不同的多项式度数，持有局部贡献的矩阵和向量在所有单元格中的大小不尽相同。因此，在所有单元的循环开始时，我们每次都必须将它们的大小调整到正确的大小（由[2.x.1383]给出）。因为这些类的实现方式是减少矩阵或向量的大小不会释放当前分配的内存（除非新的大小为零），所以在循环开始时调整大小的过程只需要在最初几次迭代中重新分配内存。一旦我们在一个单元中找到了最大的有限元度，就不会再发生重新分配，因为所有后续的[2.x.1384]调用只会将大小设置为适合当前分配的内存。这一点很重要，因为分配内存是很昂贵的，而且每次我们访问一个新的单元时都这样做会花费大量的计算时间。
//
[0.x.9408] 
[0.x.9409] 
[0.x.9410] 
[0.x.9411] 
[0.x.9412] 
[0.x.9413] 
[0.x.9414] 
[0.x.9415] 
//
[0.x.9416] 
//
[0.x.9417] 
[0.x.9418] 
//
[0.x.9419] 
//
[0.x.9420] 
[0.x.9421] 
[0.x.9422] 
//
[0.x.9423] 
[0.x.9424] 
//
[0.x.9425] 
[0.x.9426] 
//
[0.x.9427] 
//
[0.x.9428] 
//
[0.x.9429] 
[0.x.9430] 
//
[0.x.9431] 
[0.x.9432] 
[0.x.9433] 
[0.x.9434] 
[0.x.9435] 
[0.x.9436] 
[0.x.9437] 
[0.x.9438] 
[0.x.9439] 
//
[0.x.9440] 
[0.x.9441] 
[0.x.9442] 
[0.x.9443] 
//
[0.x.9444] 
[0.x.9445] 
//
[0.x.9446] 
[0.x.9447] 
[0.x.9448] 
[0.x.9449] 
//
// [2.x.1385] 
//
// 解决线性系统的函数与之前的例子完全没有变化。我们只是试图将初始残差（相当于右手边的[2.x.1386]准则）减少一定的系数。
//
[0.x.9450] 
[0.x.9451] 
[0.x.9452] 
[0.x.9453] 
[0.x.9454] 
[0.x.9455] 
//
[0.x.9456] 
[0.x.9457] 
//
[0.x.9458] 
//
[0.x.9459] 
[0.x.9460] 
//
// [2.x.1387] 
//
// 解完线性系统后，我们要对解进行后处理。在这里，我们所做的就是估计误差，估计解的局部平滑度，如介绍中所述，然后写出图形输出，最后根据之前计算的指标细化[2.x.1388]和[2.x.1389]中的网格。我们在同一个函数中完成这一切，因为我们希望估计的误差和平滑度指标不仅用于细化，而且还包括在图形输出中。
//
[0.x.9461] 
[0.x.9462] 
[0.x.9463] 
//
// 让我们开始计算估计的误差和平滑度指标，这两个指标对于我们三角测量的每个活动单元来说都是一个数字。对于误差指标，我们一如既往地使用KellyErrorEstimator类。
//
[0.x.9464] 
[0.x.9465] 
[0.x.9466] 
[0.x.9467] 
[0.x.9468] 
[0.x.9469] 
[0.x.9470] 
//
// 估计平滑度是用介绍中所述的衰减膨胀系数的方法进行的。我们首先需要创建一个对象，能够将每一个单元上的有限元解转化为一串傅里叶级数系数。SmoothnessEstimator命名空间为这样一个[2.x.1390]对象提供了一个工厂函数，它为估计平滑度的过程进行了优化。然后在最后一个函数中实际确定每个单独单元上的傅里叶系数的衰减情况。
//
[0.x.9471] 
[0.x.9472] 
[0.x.9473] 
[0.x.9474] 
[0.x.9475] 
[0.x.9476] 
[0.x.9477] 
//
// 接下来我们要生成图形输出。除了上面得出的两个估计量之外，我们还想输出网格上每个元素所使用的有限元的多项式程度。
//
// 要做到这一点，我们需要在所有单元上循环，用 [2.x.1391] 轮询它们的活动有限元索引。然后我们使用这个操作的结果，在有限元集合中查询具有该索引的有限元，最后确定该元素的多项式程度。我们将结果放入一个矢量，每个单元有一个元素。DataOut类要求这是一个[2.x.1392]的向量，尽管我们的值都是整数，所以我们就用这个向量。
//
[0.x.9478] 
[0.x.9479] 
[0.x.9480] 
[0.x.9481] 
[0.x.9482] 
//
// 现在有了所有的数据向量--解决方案、估计误差和平滑度指标以及有限元度--我们创建一个用于图形输出的DataOut对象并附加所有数据。
//
[0.x.9483] 
//
[0.x.9484] 
[0.x.9485] 
[0.x.9486] 
[0.x.9487] 
[0.x.9488] 
[0.x.9489] 
//
// 生成输出的最后一步是确定一个文件名，打开文件，并将数据写入其中（这里，我们使用VTK格式）。
//
[0.x.9490] 
[0.x.9491] 
[0.x.9492] 
[0.x.9493] 
[0.x.9494] 
//
// 在这之后，我们想在[2.x.1393]和[2.x.1394]两个地方实际细化网格。我们要做的是：首先，我们用估计的误差来标记那些误差最大的单元，以便进行细化。这就是我们一直以来的做法。
//
[0.x.9495] 
[0.x.9496] 
[0.x.9497] 
[0.x.9498] 
[0.x.9499] 
//
// 接下来我们要弄清楚哪些被标记为细化的单元格实际上应该增加[2.x.1395]而不是减少[2.x.1396]。我们在这里选择的策略是，我们查看那些被标记为细化的单元格的平滑度指标，并为那些平滑度大于某个相对阈值的单元格增加[2.x.1397]。换句话说，对于每一个(i)细化标志被设置，(ii)平滑度指标大于阈值，以及(iii)我们在有限元集合中仍有一个多项式度数高于当前度数的有限元的单元，我们将分配一个未来的FE指数，对应于一个比当前度数高一的多项式。下面的函数正是能够做到这一点。在没有更好的策略的情况下，我们将通过在标记为细化的单元上的最小和最大平滑度指标之间进行插值来设置阈值。由于角部奇点具有很强的局部性，我们将支持[2.x.1398]。
//
// - 而不是[2.x.1399] - 精细化的数量。我们通过设置0.2的小插值系数，以低门槛实现这一点。用同样的方法，我们处理那些要被粗化的单元，当它们的平滑度指标低于在要粗化的单元上确定的相应阈值时，减少它们的多项式程度。
//
[0.x.9500] 
[0.x.9501] 
//
// 上面的函数只决定了多项式程度是否会通过未来的FE指数发生变化，但并没有操作[2.x.1400] -细化标志。因此，对于被标记为两个细化类别的单元格，我们更倾向于[2.x.1401] 。
//
// 而不是[2.x.1402] -细化。下面的函数调用确保只有[2.x.1403]中的一个
//
// - 或 [2.x.1404] - 精炼中的一种，而不是同时实施两种。
//
[0.x.9502] 
//
// 对于网格自适应细化，我们通过调用[2.x.1405]将相邻单元的细化水平差限制为1来确保2:1的网格平衡。 我们希望对相邻单元的p水平实现类似的效果：未来有限元的水平差不允许超过指定的差。通过其默认参数，调用[2.x.1406]可以确保它们的级差被限制在1以内。这不一定会减少域中的悬挂节点的数量，但可以确保高阶多项式不会被限制在面的低得多的多项式上，例如五阶多项式到二阶多项式。
//
[0.x.9503] 
[0.x.9504] 
//
// 在这个过程结束后，我们再细化网格。在这个过程中，正在进行分割的单元的子单元会继承其母单元的有限元索引。此外，未来的有限元指数将变成活动的，因此新的有限元将在下一次调用[2.x.1407]后被分配给单元。
[0.x.9505] 
[0.x.9506] 
[0.x.9507] 
//[2.x.1408] 
//
// 在创建初始网格时，会用到下面这个函数。我们想要创建的网格实际上与[2.x.1409]中的网格类似，即中间有方孔的方形域。它可以由完全相同的函数生成。然而，由于它的实现只是2d情况下的一种特殊化，我们将介绍一种不同的方法来创建这个域，它是独立于维度的。
//
// 我们首先创建一个有足够单元的超立方体三角形，这样它就已经包含了我们想要的域[2.x.1410]，并细分为[2.x.1411]单元。然后，我们通过测试每个单元上顶点的坐标值来移除域中心的那些单元。最后，我们像往常一样对如此创建的网格进行全局细化。
//
[0.x.9508] 
[0.x.9509] 
[0.x.9510] 
[0.x.9511] 
[0.x.9512] 
//
[0.x.9513] 
[0.x.9514] 
[0.x.9515] 
[0.x.9516] 
[0.x.9517] 
//
[0.x.9518] 
[0.x.9519] 
[0.x.9520] 
//
[0.x.9521] 
[0.x.9522] 
//
// [2.x.1412] 
//
// 这个函数实现了程序的逻辑，就像以前大多数程序中的相应函数一样，例如见 [2.x.1413] 。
//
// 基本上，它包含了自适应循环：在第一次迭代中创建一个粗略的网格，然后建立线性系统，对其进行组合，求解，并对解进行后处理，包括网格细化。然后再重新开始。同时，也为那些盯着屏幕试图弄清楚程序是干什么的人输出一些信息。
//
[0.x.9523] 
[0.x.9524] 
[0.x.9525] 
[0.x.9526] 
[0.x.9527] 
[0.x.9528] 
//
[0.x.9529] 
[0.x.9530] 
//
[0.x.9531] 
//
[0.x.9532] 
[0.x.9533] 
[0.x.9534] 
[0.x.9535] 
[0.x.9536] 
[0.x.9537] 
//
[0.x.9538] 
[0.x.9539] 
[0.x.9540] 
[0.x.9541] 
[0.x.9542] 
[0.x.9543] 
//[2.x.1414] 
//
// 主函数仍然是我们之前的版本：将创建和运行一个主类的对象包装成一个[2.x.1415]块，并捕捉任何抛出的异常，从而在出现问题时产生有意义的输出。
//
[0.x.9544] 
[0.x.9545] 
[0.x.9546] 
[0.x.9547] 
[0.x.9548] 
//
[0.x.9549] 
[0.x.9550] 
[0.x.9551] 
[0.x.9552] 
[0.x.9553] 
[0.x.9554] 
[0.x.9555] 
[0.x.9556] 
[0.x.9557] 
[0.x.9558] 
[0.x.9559] 
[0.x.9560] 
[0.x.9561] 
[0.x.9562] 
//
[0.x.9563] 
[0.x.9564] 
[0.x.9565] 
[0.x.9566] 
[0.x.9567] 
[0.x.9568] 
[0.x.9569] 
[0.x.9570] 
[0.x.9571] 
[0.x.9572] 
[0.x.9573] 
[0.x.9574] 
[0.x.9575] 
[0.x.9576] 
//
[0.x.9577] 
[0.x.9578] 
[0.x.9579] 
[0.x.9580] 
[0.x.9581] 
[0.x.9582] 
[0.x.9583] 
[0.x.9584] 
[0.x.9585] 
[0.x.9586] 
[0.x.9587] 
[0.x.9588] 
[0.x.9589] 
[0.x.9590] 
[0.x.9591] 
[0.x.9592] 
//
[0.x.9593] 
[0.x.9594] 
[0.x.9595] 
//[2.x.1416] 
//
// 我们从一堆包含文件开始，这些文件已经在以前的教程程序中解释过了。一个新的文件是 [2.x.1417] : 这是第一个使用Timer类的例子程序。Timer同时记录了经过的挂钟时间（即安装在墙上的时钟所测量的时间）和CPU时钟时间（当前进程在CPU上使用的时间）。我们将在下面使用一个Timer来测量每个网格细化周期所需的CPU时间。
//
[0.x.9596] 
[0.x.9597] 
[0.x.9598] 
[0.x.9599] 
[0.x.9600] 
[0.x.9601] 
//
[0.x.9602] 
[0.x.9603] 
[0.x.9604] 
[0.x.9605] 
[0.x.9606] 
[0.x.9607] 
[0.x.9608] 
[0.x.9609] 
//
[0.x.9610] 
[0.x.9611] 
[0.x.9612] 
[0.x.9613] 
//
[0.x.9614] 
[0.x.9615] 
//
[0.x.9616] 
[0.x.9617] 
//
[0.x.9618] 
[0.x.9619] 
[0.x.9620] 
[0.x.9621] 
//
[0.x.9622] 
[0.x.9623] 
//
// 我们使用下一个include文件来访问块向量，它为我们提供了一种方便的方式来管理所有能量组的解和右手向量。
//
[0.x.9624] 
//
// 这个文件是用来将解从一个网格转移到另一个不同的网格。我们在每次网格迭代后初始化解法时使用它。
//
[0.x.9625] 
//
// 当在一个网格上定义的函数与另一个网格上定义的形状函数进行整合时，我们需要一个函数 [2.x.1418] (在介绍中已经讨论过)，它定义在以下头文件中。
//
[0.x.9626] 
//
// 我们使用一个来自boost的小工具类来保存输出流的状态（见下面的[2.x.1419]函数）。
//
[0.x.9627] 
//
// 这里还有两个C++标准头，我们用它们来定义列表数据类型，以及微调我们生成的输出。
//
[0.x.9628] 
[0.x.9629] 
//
// 最后一步和以前所有的程序一样。
//
[0.x.9630] 
[0.x.9631] 
[0.x.9632] 
//[2.x.1420] 
//
// 首先，我们需要定义一个类，为主类提供材料数据（包括扩散系数、清除截面、散射截面、裂变截面和裂变光谱）。
//
// 构造函数的参数决定了我们为多少个能量组设置了相关的表格。目前，这个程序只包括2个能量组的数据，但是一个更复杂的程序可能也能为更多的能量组初始化数据结构，这取决于在参数文件中选择了多少个能量组。
//
// 对于每个不同的系数类型，都有一个函数来返回该系数在特定能量组（或能量组的组合，如分布截面[2.x.1421]或散射截面[2.x.1422]）的值。除了能量组之外，这些系数还取决于燃料或控制棒的类型，正如介绍中所解释的那样。因此，这些函数需要一个额外的参数，[2.x.1423] material_id，以确定特定种类的棒。在这个程序中，我们使用[2.x.1424]不同种类的棒子。
//
// 除了散射截面，每个系数都可以表示为一个二维浮点数组中的一个条目，该数组由能量组编号以及材料ID索引。表类模板是存储此类数据的理想方式。最后，散射系数取决于两个能量组的索引，因此需要存储在一个三维数组中，为此我们再次使用表类，这时第一个模板参数（表示数组的维度）当然需要是三。
//
[0.x.9633] 
[0.x.9634] 
[0.x.9635] 
[0.x.9636] 
//
[0.x.9637] 
[0.x.9638] 
[0.x.9639] 
[0.x.9640] 
[0.x.9641] 
[0.x.9642] 
[0.x.9643] 
[0.x.9644] 
[0.x.9645] 
[0.x.9646] 
[0.x.9647] 
[0.x.9648] 
[0.x.9649] 
[0.x.9650] 
//
[0.x.9651] 
[0.x.9652] 
[0.x.9653] 
//
[0.x.9654] 
[0.x.9655] 
[0.x.9656] 
[0.x.9657] 
[0.x.9658] 
[0.x.9659] 
//
// 该类的构造函数用于初始化所有材料数据数组。它需要能量组的数量作为参数（如果该值不等于2，就会抛出一个错误，因为目前只实现了两个能量组的数据；但是，使用这个参数，该函数仍然是灵活的，可以扩展到未来）。在开始的成员初始化部分，它也将数组的大小调整为正确的大小。
//
// 目前，材料数据被存储为8种不同类型的材料。这一点在将来也可以很容易地被扩展。
//
[0.x.9660] 
[0.x.9661] 
[0.x.9662] 
[0.x.9663] 
[0.x.9664] 
[0.x.9665] 
[0.x.9666] 
[0.x.9667] 
[0.x.9668] 
[0.x.9669] 
[0.x.9670] 
[0.x.9671] 
[0.x.9672] 
[0.x.9673] 
[0.x.9674] 
[0.x.9675] 
[0.x.9676] 
[0.x.9677] 
[0.x.9678] 
[0.x.9679] 
[0.x.9680] 
[0.x.9681] 
[0.x.9682] 
[0.x.9683] 
//
[0.x.9684] 
//
[0.x.9685] 
[0.x.9686] 
[0.x.9687] 
[0.x.9688] 
//
[0.x.9689] 
[0.x.9690] 
[0.x.9691] 
[0.x.9692] 
[0.x.9693] 
[0.x.9694] 
[0.x.9695] 
[0.x.9696] 
//
[0.x.9697] 
[0.x.9698] 
[0.x.9699] 
[0.x.9700] 
[0.x.9701] 
[0.x.9702] 
[0.x.9703] 
[0.x.9704] 
//
[0.x.9705] 
[0.x.9706] 
[0.x.9707] 
[0.x.9708] 
[0.x.9709] 
[0.x.9710] 
[0.x.9711] 
[0.x.9712] 
//
[0.x.9713] 
[0.x.9714] 
[0.x.9715] 
[0.x.9716] 
[0.x.9717] 
[0.x.9718] 
[0.x.9719] 
[0.x.9720] 
//
[0.x.9721] 
[0.x.9722] 
//
[0.x.9723] 
[0.x.9724] 
[0.x.9725] 
[0.x.9726] 
[0.x.9727] 
[0.x.9728] 
//
// 接下来是返回给定材料和能量组的系数值的函数。它们所做的就是确保给定的参数在允许的范围内，然后在相应的表格中查找相应的值。
//
[0.x.9729] 
[0.x.9730] 
[0.x.9731] 
[0.x.9732] 
[0.x.9733] 
[0.x.9734] 
[0.x.9735] 
//
[0.x.9736] 
[0.x.9737] 
//
[0.x.9738] 
[0.x.9739] 
[0.x.9740] 
[0.x.9741] 
[0.x.9742] 
[0.x.9743] 
//
[0.x.9744] 
[0.x.9745] 
//
[0.x.9746] 
[0.x.9747] 
[0.x.9748] 
[0.x.9749] 
[0.x.9750] 
[0.x.9751] 
//
[0.x.9752] 
[0.x.9753] 
//
[0.x.9754] 
[0.x.9755] 
[0.x.9756] 
[0.x.9757] 
[0.x.9758] 
[0.x.9759] 
[0.x.9760] 
[0.x.9761] 
//
[0.x.9762] 
[0.x.9763] 
//
[0.x.9764] 
[0.x.9765] 
[0.x.9766] 
[0.x.9767] 
[0.x.9768] 
[0.x.9769] 
[0.x.9770] 
//
[0.x.9771] 
[0.x.9772] 
//
// 计算裂变分布截面的函数略有不同，因为它将其值计算为另外两个系数的乘积。我们不需要在这里检查参数，因为这在我们调用其他两个相关函数时已经发生了，尽管这样做可能也无妨。
//
[0.x.9773] 
[0.x.9774] 
[0.x.9775] 
[0.x.9776] 
[0.x.9777] 
[0.x.9778] 
[0.x.9779] 
//
// [2.x.1425] 
//
// 第一个有趣的类是包含所有特定于单个能量组的东西。为了将那些属于同一个对象的东西分组，我们声明了一个结构，该结构包含了用于单个能量组的网格的Triangulation和DoFHandler对象，以及一些其他对象和成员函数，我们将在下面的章节中讨论。
//
// 这个类的主要原因如下：对于正向问题（有指定的右手边）和特征值问题，人们通常要解决一连串的问题，而不是完全耦合的问题，每个能量组。一旦意识到单一能量组的系统矩阵是对称和正定的（它只是一个扩散算子），而完全耦合问题的矩阵通常是非对称和非定值的，这就可以理解了。如果涉及几个以上的能量组，它也是非常大和相当完整的。
//
// 让我们先看看在有外部右手的情况下要解决的方程（对于时间无关的情况）。[1.x.41]
//
// 我们通常会通过将右手边的所有项与 [2.x.1426] 移到左手边来解决这个方程，并求出 [2.x.1427] 。当然，我们还不知道[2.x.1428]，因为这些变量的方程包括涉及[2.x.1429]的右侧项。在这种情况下，通常的做法是进行迭代：计算 [1.x.42] 。
//
// 换句话说，我们一个一个地解方程，如果[2.x.1432]，就用上一次迭代的[2.x.1430]的值，如果[2.x.1434]，就用本次迭代已经计算的[2.x.1433]的值。
//
// 在计算特征值时，我们做了一个非常类似的迭代，只是我们没有外部的右手边，而且每次迭代后的解都会被缩放，正如在介绍中所解释的。
//
// 在任何一种情况下，如果我们所做的只是让下面这一类人具备这些能力，那么这两种情况就可以共同处理。(i) 形成左手边的矩阵，(ii) 形成组内右手边的贡献，即涉及不相干的来源，(iii) 形成源于组 [2.x.1435] 的对右手边的贡献。这个类正是做这些工作（以及一些簿记工作，如网格细化、设置矩阵和向量等）。另一方面，这个类本身并不知道有多少个能量组，特别是它们之间的相互作用，也就是说，外部迭代的样子（以及因此我们是解决一个特征值还是一个直接问题）的决定是留给本程序下面的NeutronDiffusionProblem类。
//
// 所以让我们来看看这个类和它的接口。
//
[0.x.9780] 
[0.x.9781] 
[0.x.9782] 
[0.x.9783] 
//[2.x.1436] 
//
// 该类有相当数量的公共成员函数，因为其操作方式是由外部控制的，因此所有做重要事情的函数都需要从另一个类中调用。让我们从记账开始：该类显然需要知道它所代表的能量组，使用哪些材料数据，以及从哪个粗略的网格开始。构造函数接收这些信息，并通过这些信息初始化相关的成员变量（见下文）。
//
// 然后，我们还需要设置线性系统的函数，即在给定的有限元对象的情况下，正确地确定矩阵的大小和它的稀疏模式等。[2.x.1437]函数就是这样做的。最后，对于这个初始块，有两个函数可以返回这个对象中使用的活动单元和自由度的数量--利用这一点，我们可以使三角形和DoF处理成员变量成为私有的，不必授予外部使用，增强了封装性。
//
[0.x.9784] 
[0.x.9785] 
[0.x.9786] 
[0.x.9787] 
//
[0.x.9788] 
//
[0.x.9789] 
[0.x.9790] 
//
// 然后是为每个迭代和当前能量组组装线性系统的函数。请注意，该矩阵与迭代次数无关，因此在每个细化周期只需计算一次。对于必须在每次逆功率迭代中更新的右手边来说，情况就有点复杂了，而且由于计算它可能涉及到几个不同的网格，正如介绍中所解释的那样，这就更复杂了。为了使事情在解决正向或特征值问题方面更加灵活，我们将右手边的计算分成一个函数，将无关的源和组内贡献（我们将其称为零函数，作为特征值问题的源项）和一个计算来自另一个能量组的右手边的贡献。
//
[0.x.9791] 
[0.x.9792] 
[0.x.9793] 
//
// 接下来我们需要一组函数来实际计算线性系统的解，并对其进行处理（比如计算介绍中提到的裂变源贡献，将图形信息写入输出文件，计算误差指标，或者根据这些标准和阈值实际细化和粗化网格）。所有这些函数以后都可以从驱动类[2.x.1438]中调用，或者你想实现的任何其他类来解决涉及中子通量方程的问题。
//
[0.x.9794] 
//
[0.x.9795] 
//
[0.x.9796] 
//
[0.x.9797] 
//
[0.x.9798] 
[0.x.9799] 
[0.x.9800] 
//[2.x.1439] 
//
// 作为面向对象编程的良好实践，我们通过使它们成为私有的来隐藏大多数数据成员。然而，我们必须允许驱动进程的类访问解向量以及上一次迭代的解，因为在幂迭代中，解向量在每次迭代中都被我们正在寻找的特征值的当前猜测所缩放。
//
[0.x.9801] 
[0.x.9802] 
[0.x.9803] 
//[2.x.1440] 
//
// 其余的数据成员是私有的。与之前所有的教程程序相比，唯一的新数据成员是一个存储此对象所代表的能量组的整数，以及此对象的构造函数从驱动类中得到的材料数据对象的引用。同样地，构造函数得到了我们要使用的有限元对象的引用。
//
// 最后，我们必须在每次迭代中对线性系统应用边界值，即相当频繁。我们不是每次都插值，而是在每个新的网格上插值一次，然后和这个类的所有其他数据一起存储。
//
[0.x.9804] 
[0.x.9805] 
[0.x.9806] 
//
[0.x.9807] 
[0.x.9808] 
[0.x.9809] 
//
[0.x.9810] 
[0.x.9811] 
//
[0.x.9812] 
//
[0.x.9813] 
[0.x.9814] 
//[2.x.1441] 
//
// 在这个类中有一个私有成员函数。它递归地走过两个网格的单元，以计算跨组的右手边项。这个算法在本程序的介绍中已经解释过了。这个函数的参数是对一个对象的引用，该对象代表了我们要整合的右手项的能量组，一个指向用于当前能量组的网格单元的迭代器，一个指向另一个网格上相应单元的迭代器，以及将自由度从两个单元中较粗的单元插补到较细的单元的矩阵。
//
[0.x.9815] 
[0.x.9816] 
[0.x.9817] 
[0.x.9818] 
[0.x.9819] 
[0.x.9820] 
[0.x.9821] 
//[2.x.1442] 
//
// 这个类的前几个函数大部分是不言自明的。构造函数只设置了几个数据成员，并创建了一个给定三角形的副本，作为该能量组使用的三角形的基础。接下来的两个函数只是从私有数据成员中返回数据，从而使我们能够使这些数据成员私有化。
//
[0.x.9822] 
[0.x.9823] 
[0.x.9824] 
[0.x.9825] 
[0.x.9826] 
[0.x.9827] 
[0.x.9828] 
[0.x.9829] 
[0.x.9830] 
[0.x.9831] 
[0.x.9832] 
[0.x.9833] 
[0.x.9834] 
//
[0.x.9835] 
[0.x.9836] 
[0.x.9837] 
[0.x.9838] 
[0.x.9839] 
//
[0.x.9840] 
[0.x.9841] 
[0.x.9842] 
[0.x.9843] 
[0.x.9844] 
//
// [2.x.1443] 
//
// 第一个 "真正的 "函数是在新的网格上或网格细化后设置网格、矩阵等。我们用这个函数来初始化稀疏系统矩阵，以及右手边的向量。如果求解向量之前从未被设置过（如用零大小表示），我们也会初始化它并将其设置为默认值。如果它已经有一个非零的大小，我们就不这么做了（也就是说，这个函数是在网格细化之后调用的），因为在这种情况下，我们希望在不同的网格细化中保留解决方案（这一点我们在[2.x.1444]函数中做到了）。
//
[0.x.9845] 
[0.x.9846] 
[0.x.9847] 
[0.x.9848] 
//
[0.x.9849] 
[0.x.9850] 
[0.x.9851] 
[0.x.9852] 
//
[0.x.9853] 
//
[0.x.9854] 
[0.x.9855] 
[0.x.9856] 
[0.x.9857] 
//
[0.x.9858] 
//
[0.x.9859] 
//
[0.x.9860] 
[0.x.9861] 
[0.x.9862] 
[0.x.9863] 
[0.x.9864] 
[0.x.9865] 
[0.x.9866] 
//
// 在这个函数的最后，我们更新边界节点列表和它们的数值，首先清除这个列表和重新插值的边界数值（记住，这个函数是在第一次设置网格后，以及每次网格细化后调用）。
//
// 为了理解这段代码，有必要认识到我们使用[2.x.1445]函数来创建网格(在[2.x.1446])，其中我们将最后一个参数设置为[2.x.1447] 。这意味着域的边界被 "着色"，也就是说，域的四个（或六个，在3D）边被分配了不同的边界指标。结果是，底部边界得到指标0，顶部一个边界指标1，左右边界分别得到指标2和3。
//
// 在这个程序中，我们只模拟一个，即右上角的反应器的四分之一。也就是说，我们只想在顶部和右侧边界插值边界条件，而在底部和左侧边界不做任何事情（即施加自然的、无流量的诺伊曼边界条件）。这很容易被推广到任意维度，即我们想在指标为1、3、......的边界上插值，我们在下面的循环中这样做（注意，对[2.x.1448]的调用是加法的，即它们不首先清除边界值图）。
//
[0.x.9867] 
//
[0.x.9868] 
[0.x.9869] 
[0.x.9870] 
[0.x.9871] 
[0.x.9872] 
[0.x.9873] 
//
// [2.x.1449] 
//
// 接下来我们需要函数来组装系统矩阵和右手边。考虑到介绍中列出的方程以及我们在以前的例子程序中看到的内容，组装矩阵是很简单的。注意使用[2.x.1450]来获取一个单元的材料种类。还请注意我们是如何设置正交公式的顺序的，以便它总是适合于正在使用的有限元。
//
// 最后，请注意，由于我们在这里只组装了系统矩阵，所以我们还不能消除边界值（我们需要右边的向量来实现）。我们将其推迟到[2.x.1451]函数中，这时所有的信息都可以得到。
//
[0.x.9874] 
[0.x.9875] 
[0.x.9876] 
[0.x.9877] 
//
[0.x.9878] 
[0.x.9879] 
[0.x.9880] 
[0.x.9881] 
//
[0.x.9882] 
[0.x.9883] 
//
[0.x.9884] 
[0.x.9885] 
//
[0.x.9886] 
//
[0.x.9887] 
[0.x.9888] 
[0.x.9889] 
//
[0.x.9890] 
//
[0.x.9891] 
[0.x.9892] 
[0.x.9893] 
[0.x.9894] 
//
[0.x.9895] 
[0.x.9896] 
[0.x.9897] 
[0.x.9898] 
[0.x.9899] 
[0.x.9900] 
[0.x.9901] 
[0.x.9902] 
[0.x.9903] 
//
[0.x.9904] 
//
[0.x.9905] 
[0.x.9906] 
[0.x.9907] 
[0.x.9908] 
[0.x.9909] 
[0.x.9910] 
//
[0.x.9911] 
[0.x.9912] 
//
// [2.x.1452] 
//
// 正如[2.x.1453]类的文档中所解释的，我们将组装右手边分成两部分：组内耦合和跨组耦合。首先，我们需要一个函数来组装这里的一个特定组的右手边，即包括一个无关的源（我们将在特征值问题上设置为零）以及组内裂变贡献。 组内散射已经在清除截面的定义中得到了考虑）。这个函数的工作原理就组装右手边而言是非常标准的，因此不需要更多的评论，只是我们要提到在函数的开头将右手边的向量设置为零--这一点我们不打算为跨组项做，这些跨组项只是添加到右手边的向量。
//
[0.x.9913] 
[0.x.9914] 
[0.x.9915] 
[0.x.9916] 
[0.x.9917] 
//
[0.x.9918] 
//
[0.x.9919] 
[0.x.9920] 
//
[0.x.9921] 
[0.x.9922] 
[0.x.9923] 
[0.x.9924] 
//
[0.x.9925] 
[0.x.9926] 
[0.x.9927] 
//
[0.x.9928] 
//
[0.x.9929] 
[0.x.9930] 
[0.x.9931] 
//
[0.x.9932] 
//
[0.x.9933] 
[0.x.9934] 
//
[0.x.9935] 
[0.x.9936] 
//
[0.x.9937] 
//
[0.x.9938] 
//
[0.x.9939] 
[0.x.9940] 
[0.x.9941] 
[0.x.9942] 
[0.x.9943] 
[0.x.9944] 
//
[0.x.9945] 
[0.x.9946] 
[0.x.9947] 
[0.x.9948] 
//
// [2.x.1454] 
//
// 对于组装单一能量组方程的右手向量来说，更有趣的函数是将能量组 [2.x.1455] 和 [2.x.1456] 耦合起来。正如介绍中所解释的，我们首先要找到两个能量组的网格所共有的单元集。首先我们调用[2.x.1457]来获得这一对来自两个网格的共同单元的列表。一对单元格中的两个单元格可能都不活跃，但至少有一个是活跃的。然后我们将这些单元对中的每一个交给一个函数，该函数将递归地计算右手边的项。
//
// 注意，组内耦合在之前已经处理过了，所以我们提前退出这个函数，如果 [2.x.1458] 。
//
[0.x.9949] 
[0.x.9950] 
[0.x.9951] 
[0.x.9952] 
[0.x.9953] 
[0.x.9954] 
//
[0.x.9955] 
[0.x.9956] 
[0.x.9957] 
[0.x.9958] 
//
[0.x.9959] 
[0.x.9960] 
[0.x.9961] 
[0.x.9962] 
[0.x.9963] 
[0.x.9964] 
[0.x.9965] 
[0.x.9966] 
[0.x.9967] 
[0.x.9968] 
[0.x.9969] 
//
// [2.x.1459] 
//
// 这是最后一个处理在潜在的不同网格上递归组装右手边条款的函数，使用介绍中描述的算法。该函数接收一个代表能量组[2.x.1460]的对象的引用，以及能量组[2.x.1461]和[2.x.1462]的网格中相应单元的迭代器。起初，即从上面的函数中调用这个函数时，这两个单元将是两个网格上的匹配单元；然而，这两个单元中的一个可能被进一步细化，我们将递归地调用这个函数，两个迭代器中的一个被原始单元的一个子单元所取代。
//
// 最后一个参数是介绍中的矩阵乘积矩阵[2.x.1463]，它从两个单元中较粗的单元插值到较细的单元。如果这两个单元格匹配，那么这就是身份矩阵--正是我们最初传递给这个函数的。
//
// 该函数必须考虑两种情况：两种单元格都没有进一步细化，即没有子代，在这种情况下，我们可以最终组装这对单元格的右侧贡献；以及两种单元格中的一种被进一步细化，在这种情况下，我们必须通过循环未被激活的单元格的子代来不断地进行循环。下面将讨论这两种情况。
//
[0.x.9970] 
[0.x.9971] 
[0.x.9972] 
[0.x.9973] 
[0.x.9974] 
[0.x.9975] 
[0.x.9976] 
//
// 第一种情况是，两个单元格都没有进一步的细化。在这种情况下，我们可以组装相关条款（见介绍）。这涉及到在两个单元中较细的单元上组装质量矩阵（事实上有两个具有不同系数的质量矩阵，一个用于裂变分布截面[2.x.1464]，一个用于散射截面[2.x.1465]）。这是直截了当的，但请注意我们如何通过查看两个单元的细化程度来确定哪个是更细的单元。
//
[0.x.9977] 
[0.x.9978] 
[0.x.9979] 
[0.x.9980] 
//
[0.x.9981] 
[0.x.9982] 
[0.x.9983] 
//
[0.x.9984] 
[0.x.9985] 
[0.x.9986] 
[0.x.9987] 
//
[0.x.9988] 
[0.x.9989] 
[0.x.9990] 
[0.x.9991] 
//
[0.x.9992] 
[0.x.9993] 
[0.x.9994] 
[0.x.9995] 
//
[0.x.9996] 
[0.x.9997] 
[0.x.9998] 
[0.x.9999] 
//
[0.x.10000] 
[0.x.10001] 
[0.x.10002] 
[0.x.10003] 
[0.x.10004] 
[0.x.10005] 
[0.x.10006] 
[0.x.10007] 
[0.x.10008] 
[0.x.10009] 
[0.x.10010] 
//
// 现在我们有了所有的插值（延长）矩阵以及局部质量矩阵，所以我们只需要根据两个单元中哪一个更细，形成积[1.x.43]或[1.x.44]。我们使用[2.x.1466]函数提供的矩阵-向量乘积，或者使用[2.x.1467]与转置矩阵的乘积来完成。这样做之后，我们将结果转移到能量组的全局右侧向量中 [2.x.1468] 。
//
[0.x.10011] 
[0.x.10012] 
[0.x.10013] 
[0.x.10014] 
//
[0.x.10015] 
[0.x.10016] 
//
[0.x.10017] 
[0.x.10018] 
[0.x.10019] 
[0.x.10020] 
//
[0.x.10021] 
[0.x.10022] 
[0.x.10023] 
[0.x.10024] 
[0.x.10025] 
[0.x.10026] 
[0.x.10027] 
//
[0.x.10028] 
[0.x.10029] 
[0.x.10030] 
//
[0.x.10031] 
[0.x.10032] 
[0.x.10033] 
//
[0.x.10034] 
[0.x.10035] 
[0.x.10036] 
//
// 另一种情况是，两个单元中的一个被进一步细化。在这种情况下，我们必须在所有的子单元上循环，将现有的矩阵的插值（延长）乘以从现在的单元到其子单元的插值（使用矩阵-矩阵乘法函数[2.x.1469]），然后将结果再次交给这个非常相同的函数，但将有子单元替换为其子单元之一。
//
[0.x.10037] 
[0.x.10038] 
[0.x.10039] 
[0.x.10040] 
[0.x.10041] 
[0.x.10042] 
[0.x.10043] 
[0.x.10044] 
[0.x.10045] 
//
[0.x.10046] 
[0.x.10047] 
[0.x.10048] 
[0.x.10049] 
[0.x.10050] 
[0.x.10051] 
[0.x.10052] 
[0.x.10053] 
[0.x.10054] 
[0.x.10055] 
[0.x.10056] 
[0.x.10057] 
//[2.x.1470] 
//
// 在（反）功率迭代中，我们使用综合裂变源来更新[2.x.1471] -特征值。鉴于其定义，以下函数基本上是不言自明的。
//
[0.x.10058] 
[0.x.10059] 
[0.x.10060] 
[0.x.10061] 
[0.x.10062] 
//
[0.x.10063] 
[0.x.10064] 
[0.x.10065] 
//
[0.x.10066] 
//
[0.x.10067] 
//
[0.x.10068] 
[0.x.10069] 
[0.x.10070] 
//
[0.x.10071] 
[0.x.10072] 
//
[0.x.10073] 
//
[0.x.10074] 
[0.x.10075] 
[0.x.10076] 
[0.x.10077] 
//
[0.x.10078] 
[0.x.10079] 
//[2.x.1472] 
//
// 接下来是一个解决之前组装的线性系统的函数。事情基本是标准的，只是我们把应用边界值的时间推迟到了这里，因为在之前的所有函数中，我们还是在为右边的向量做加法。
//
[0.x.10080] 
[0.x.10081] 
[0.x.10082] 
[0.x.10083] 
[0.x.10084] 
[0.x.10085] 
[0.x.10086] 
[0.x.10087] 
//
[0.x.10088] 
[0.x.10089] 
[0.x.10090] 
//
[0.x.10091] 
[0.x.10092] 
//
[0.x.10093] 
//
[0.x.10094] 
[0.x.10095] 
//
// [2.x.1473] 
//
// 网格细化被分成两个函数。第一个函数估计每个单元的误差，用解的大小对其进行归一化处理，并将其返回到作为参数的向量中。调用函数收集所有能量组的所有误差指标，并计算出细化和粗化单元的阈值。
//
[0.x.10096] 
[0.x.10097] 
[0.x.10098] 
[0.x.10099] 
[0.x.10100] 
[0.x.10101] 
[0.x.10102] 
[0.x.10103] 
[0.x.10104] 
[0.x.10105] 
[0.x.10106] 
//
// [2.x.1474] 
//
// 第二部分是细化网格，给定前一个函数中计算的误差指标和误差阈值，超过这个阈值的单元应被细化，低于这个阈值的单元应被粗化。注意，我们在这里没有使用[2.x.1475]中的任何函数，而是自己设置细化标志。
//
// 在设置完这些标志后，我们使用SolutionTransfer类将求解向量从旧网格转移到新网格。这里使用的程序在该类的文档中已有详细描述。
//
[0.x.10107] 
[0.x.10108] 
[0.x.10109] 
[0.x.10110] 
[0.x.10111] 
[0.x.10112] 
[0.x.10113] 
[0.x.10114] 
[0.x.10115] 
[0.x.10116] 
//
[0.x.10117] 
//
[0.x.10118] 
[0.x.10119] 
//
[0.x.10120] 
[0.x.10121] 
[0.x.10122] 
//
[0.x.10123] 
[0.x.10124] 
//
// 强制执行约束条件，使插值后的解决方案在新的网格上符合要求。
//
[0.x.10125] 
//
[0.x.10126] 
[0.x.10127] 
[0.x.10128] 
//[2.x.1476] 
//
// 该类的最后一个函数在每次网格迭代后输出网格和解。这在以前已经展示过很多次了。唯一值得指出的是使用[2.x.1477]函数将一个整数转换为其字符串表示。该函数的第二个参数表示我们应使用多少个数字 -- 如果这个值大于1，那么数字将被填充前导零。
//
[0.x.10129] 
[0.x.10130] 
[0.x.10131] 
[0.x.10132] 
[0.x.10133] 
[0.x.10134] 
//
[0.x.10135] 
//
[0.x.10136] 
[0.x.10137] 
[0.x.10138] 
//
[0.x.10139] 
[0.x.10140] 
[0.x.10141] 
//
// [2.x.1478] 
//
// 这是程序的主类，并不是因为它实现了所有的功能（事实上，大部分的功能都在[2.x.1479]类中实现了），而是因为它包含了决定什么时候计算的驱动算法。它主要是像其他许多教程程序中显示的那样，它有一个公共的[2.x.1480]函数和私有函数来做其他的事情。在一些地方，我们必须为所有能源组做一些事情，在这种情况下，如果deal.II被配置为多线程，我们将为每个组启动任务，让这些事情并行运行。 关于并行化的策略，请看一下[2.x.1481]模块。
//
// 与以前的例子程序最大的不同是，我们还声明了一个嵌套类，该类有成员变量，用于所有可在输入文件中传递给程序的运行时参数。现在，这些参数是能量组的数量、细化周期的数量、要使用的有限元的多项式程度以及用于确定反幂迭代何时收敛的公差。此外，我们有一个该类的构造函数，将所有这些值设置为默认值，还有一个函数[2.x.1482]向ParameterHandler类描述输入文件中接受哪些参数，还有一个函数[2.x.1483]可以从ParameterHandler对象中提取这些参数的值。参见[2.x.1484]，了解另一个使用ParameterHandler的例子。
//
[0.x.10142] 
[0.x.10143] 
[0.x.10144] 
[0.x.10145] 
[0.x.10146] 
[0.x.10147] 
[0.x.10148] 
[0.x.10149] 
//
[0.x.10150] 
[0.x.10151] 
//
[0.x.10152] 
[0.x.10153] 
//
[0.x.10154] 
//
[0.x.10155] 
[0.x.10156] 
//
[0.x.10157] 
//
[0.x.10158] 
//
[0.x.10159] 
//[2.x.1485] 
//
// 这个类中没有那么多的成员函数，因为大部分的功能已经被移到了[2.x.1486]类中，只是从这个类的[2.x.1487]成员函数中调用。留下来的成员函数有不言自明的名字。
//
[0.x.10160] 
//
[0.x.10161] 
//
[0.x.10162] 
//[2.x.1488] 
//
// 接下来，我们有几个成员变量。特别是，这些是（i）对参数对象的引用（由本程序的主函数拥有，并传递给本类的构造函数），（ii）描述输入文件中要求的能量组数量的材料参数的对象，以及（iii）所有能量组将使用的有限元。
//
[0.x.10163] 
[0.x.10164] 
[0.x.10165] 
//
// 此外，我们有(iv)目前迭代时计算的特征值的值。事实上，这是在所有能量组之间共享的解决方案的唯一部分--解决方案的所有其他部分，如中子通量是特定于一个或另一个能量组的，因此被存储在描述单一能量组的对象中。
//
[0.x.10166] 
//
// 最后一个计算对象（v）是一个指向能量组对象的数组。当然，这个数组的长度等于参数文件中指定的能量组的数量。
//
[0.x.10167] 
//
// 最后(vi)我们有一个文件流，我们将把总结的输出保存到这个文件中。
//
[0.x.10168] 
[0.x.10169] 
//[2.x.1489] 
//
// 在继续实现外层类之前，我们必须实现参数结构的功能。这是很直接的，事实上，对于所有使用ParameterHandler功能的这类参数类来说，看起来都是一样的。因此，我们将不再对此进行评论。
//
[0.x.10170] 
[0.x.10171] 
[0.x.10172] 
[0.x.10173] 
[0.x.10174] 
[0.x.10175] 
[0.x.10176] 
//
[0.x.10177] 
[0.x.10178] 
[0.x.10179] 
[0.x.10180] 
[0.x.10181] 
[0.x.10182] 
[0.x.10183] 
[0.x.10184] 
[0.x.10185] 
[0.x.10186] 
[0.x.10187] 
[0.x.10188] 
[0.x.10189] 
[0.x.10190] 
[0.x.10191] 
[0.x.10192] 
[0.x.10193] 
[0.x.10194] 
[0.x.10195] 
[0.x.10196] 
[0.x.10197] 
[0.x.10198] 
[0.x.10199] 
//
[0.x.10200] 
[0.x.10201] 
[0.x.10202] 
[0.x.10203] 
[0.x.10204] 
[0.x.10205] 
[0.x.10206] 
[0.x.10207] 
[0.x.10208] 
//
// [2.x.1490] 
//
// 现在是[2.x.1491]类。构造函数和析构函数没有什么值得注意的地方。
//
[0.x.10209] 
[0.x.10210] 
[0.x.10211] 
[0.x.10212] 
[0.x.10213] 
[0.x.10214] 
[0.x.10215] 
[0.x.10216] 
//
// [2.x.1492] 
//
// 第一个感兴趣的函数是设置反应堆核心的几何形状的函数。这在介绍中会有更详细的描述。
//
// 该函数的第一部分定义了几何数据，然后创建了一个粗略的网格，其单元数与我们模拟的那部分反应堆堆芯中的燃料棒（或针状单元）的数量相当。正如上面插值边界值时提到的，[2.x.1493]函数的最后一个参数指定域的两侧应具有唯一的边界指标，这将使我们能够以简单的方式确定哪些边界具有诺伊曼条件，哪些边界具有迪里希特条件。
//
[0.x.10217] 
[0.x.10218] 
[0.x.10219] 
[0.x.10220] 
[0.x.10221] 
[0.x.10222] 
//
[0.x.10223] 
//
[0.x.10224] 
[0.x.10225] 
[0.x.10226] 
[0.x.10227] 
[0.x.10228] 
[0.x.10229] 
[0.x.10230] 
//
[0.x.10231] 
[0.x.10232] 
[0.x.10233] 
[0.x.10234] 
[0.x.10235] 
[0.x.10236] 
//
[0.x.10237] 
[0.x.10238] 
[0.x.10239] 
//
// 该函数的第二部分涉及每种类型的组件的引脚单元的材料数量。在这里，我们定义了四种不同类型的组件，对于这些组件，我们在以下表格中描述了燃料棒的排列。
//
// 这里描述的装配体来自于介绍中提到的基准，它们是（按照这个顺序）。 [2.x.1494] 
//[2.x.1495] 'UX'组件。二氧化铀燃料组件，带有24个导向管和一个中央可移动裂变室 [2.x.1496] 'UA' 组件。带有24个AIC的二氧化铀燃料组件和一个中央可移动裂变室 [2.x.1497] 'PX'组件。MOX燃料组件，带有24个导向管和一个中央可移动裂变室 [2.x.1498] 'R'组件：一个反射器。  [2.x.1499] 
//
// 注意这里列出的数字和从基准描述中提取的数字，以良好的老Fortran方式，是基于一的。我们以后在给各个单元分配材料时将从每个数字中减去1，以便将事情转换为C语言风格的零基索引。
//
[0.x.10240] 
[0.x.10241] 
[0.x.10242] 
[0.x.10243] 
[0.x.10244] 
[0.x.10245] 
[0.x.10246] 
[0.x.10247] 
[0.x.10248] 
[0.x.10249] 
[0.x.10250] 
[0.x.10251] 
[0.x.10252] 
[0.x.10253] 
[0.x.10254] 
[0.x.10255] 
[0.x.10256] 
[0.x.10257] 
[0.x.10258] 
[0.x.10259] 
[0.x.10260] 
[0.x.10261] 
[0.x.10262] 
[0.x.10263] 
[0.x.10264] 
[0.x.10265] 
[0.x.10266] 
[0.x.10267] 
[0.x.10268] 
[0.x.10269] 
[0.x.10270] 
[0.x.10271] 
[0.x.10272] 
[0.x.10273] 
[0.x.10274] 
[0.x.10275] 
[0.x.10276] 
[0.x.10277] 
[0.x.10278] 
[0.x.10279] 
[0.x.10280] 
[0.x.10281] 
[0.x.10282] 
[0.x.10283] 
[0.x.10284] 
[0.x.10285] 
[0.x.10286] 
[0.x.10287] 
[0.x.10288] 
[0.x.10289] 
[0.x.10290] 
[0.x.10291] 
[0.x.10292] 
[0.x.10293] 
[0.x.10294] 
[0.x.10295] 
[0.x.10296] 
[0.x.10297] 
[0.x.10298] 
[0.x.10299] 
[0.x.10300] 
[0.x.10301] 
[0.x.10302] 
[0.x.10303] 
[0.x.10304] 
[0.x.10305] 
[0.x.10306] 
[0.x.10307] 
[0.x.10308] 
[0.x.10309] 
[0.x.10310] 
//
// 在描述了组成装配体的材料之后，我们必须指定装配体在核心中的排列。我们使用一个对称的模式，实际上只使用'UX'和'PX'装配体。
//
[0.x.10311] 
[0.x.10312] 
//
// 我们现在可以为每个单元实际设置材料ID。为此，我们在所有单元中循环，查看单元中心的位置，并确定它将在哪个组件和燃料棒中。我们增加了一些检查，以确保我们计算的位置在我们必须查找材料的数组的范围内）。在循环结束时，我们相应地设置材料标识符。
//
[0.x.10313] 
[0.x.10314] 
[0.x.10315] 
//
[0.x.10316] 
[0.x.10317] 
[0.x.10318] 
//
[0.x.10319] 
[0.x.10320] 
[0.x.10321] 
//
[0.x.10322] 
[0.x.10323] 
//
[0.x.10324] 
[0.x.10325] 
[0.x.10326] 
//
[0.x.10327] 
//
[0.x.10328] 
[0.x.10329] 
//
[0.x.10330] 
[0.x.10331] 
//
// 有了这样初始化的粗网格，我们创建适当数量的能量组对象，让它们用上面生成的粗网格初始化各自的网格。
//
[0.x.10332] 
[0.x.10333] 
[0.x.10334] 
[0.x.10335] 
[0.x.10336] 
[0.x.10337] 
//[2.x.1500] 
//
// 在特征值计算中，我们需要在每次功率迭代后计算裂变中子源总量。然后用总功率来更新k-effective。
//
// 由于总裂变源是所有能量组的总和，而且每个总和都可以独立计算，所以我们实际上是以并行方式进行的。其中一个问题是，[2.x.1501]类中计算裂变源的函数会返回一个值。我们想在循环本身中把这些值加在一起：理想的情况是，每个任务计算它的值，然后立即把它加到总数中。以这种方式对数值进行加总需要两个功能。 [2.x.1502] 
//[2.x.1503] 我们需要一种存储数值的方式，使多个线程能够以防止数据竞赛的方式并发地读写（即线程安全的读写）。[2.x.1504] 
//[2.x.1505] 我们需要一种方法来增加这样一个值，而且是线程安全的。[2.x.1506] 
//[2.x.1507] 
//
// 第一个特性可以通过模板类实现 [2.x.1508] 。然而，第二个特性，由[2.x.1509]实现，只在C++20及以后的版本中可用：由于deal.II支持旧版本的C++语言标准，我们还不能使用这个特性。因此，取而代之的是，我们简单地将每个组的值写成向量中的一个条目，并在函数的最后将这些值相加。
//
[0.x.10338] 
[0.x.10339] 
[0.x.10340] 
[0.x.10341] 
[0.x.10342] 
[0.x.10343] 
[0.x.10344] 
[0.x.10345] 
[0.x.10346] 
[0.x.10347] 
//
[0.x.10348] 
[0.x.10349] 
//
// [2.x.1510] 
//
// 下一个函数让各个能量组对象细化其网格。这其中的大部分，也是可以独立并行完成的任务：首先，让所有的能量组对象并行计算它们的误差指标，然后计算所有能量组的最大误差指标，并确定细化和粗化单元的阈值，然后要求所有的能量组相应地细化它们的网格，也是并行的。
//
[0.x.10350] 
[0.x.10351] 
[0.x.10352] 
[0.x.10353] 
[0.x.10354] 
[0.x.10355] 
//
[0.x.10356] 
//
[0.x.10357] 
[0.x.10358] 
[0.x.10359] 
[0.x.10360] 
[0.x.10361] 
[0.x.10362] 
[0.x.10363] 
[0.x.10364] 
//
// [2.x.1511]的析构器连接所有线程，所以我们知道在我们退出范围时，计算已经完成。
//
[0.x.10365] 
[0.x.10366] 
[0.x.10367] 
//
[0.x.10368] 
[0.x.10369] 
[0.x.10370] 
[0.x.10371] 
[0.x.10372] 
[0.x.10373] 
[0.x.10374] 
[0.x.10375] 
[0.x.10376] 
[0.x.10377] 
//[2.x.1512] 
//
// 最后，这就是肉的函数：在一连串的网格上进行迭代，并对每一个网格进行幂级迭代，以计算特征值。
//
// 鉴于介绍中对算法的描述，实际上没有什么可评论的。
//
[0.x.10378] 
[0.x.10379] 
[0.x.10380] 
//
// 我们希望只为这个函数改变输出精度，并在这个函数返回时恢复到[2.x.1513]的状态。因此，我们需要一种方法来撤销输出格式的改变。Boost提供了一种方便的方法来保存输出流的状态，并在当前块结束时（当调用[2.x.1514]的析构器时）用[2.x.1515]类来恢复它，我们在这里使用了这种方法。
//
[0.x.10381] 
[0.x.10382] 
//
// 我们通过k_eff的变化来计算下面的误差（即k_eff_old的区别。
//
[0.x.10383] 
//
[0.x.10384] 
[0.x.10385] 
[0.x.10386] 
//
// 我们将在下面测量每个周期所需的CPU时间。计时器的构造函数调用[2.x.1516]，所以一旦我们创建了一个计时器，就可以查询它的信息。由于这个循环的许多部分是用任务并行化的，所以我们测量的CPU时间（如果我们用一个以上的线程运行）将大于墙的时间。
//
[0.x.10387] 
//
[0.x.10388] 
//
[0.x.10389] 
[0.x.10390] 
[0.x.10391] 
[0.x.10392] 
[0.x.10393] 
[0.x.10394] 
//
[0.x.10395] 
[0.x.10396] 
[0.x.10397] 
[0.x.10398] 
[0.x.10399] 
[0.x.10400] 
//
[0.x.10401] 
[0.x.10402] 
[0.x.10403] 
[0.x.10404] 
[0.x.10405] 
[0.x.10406] 
[0.x.10407] 
[0.x.10408] 
//
[0.x.10409] 
[0.x.10410] 
[0.x.10411] 
[0.x.10412] 
[0.x.10413] 
//
[0.x.10414] 
[0.x.10415] 
[0.x.10416] 
[0.x.10417] 
[0.x.10418] 
[0.x.10419] 
[0.x.10420] 
[0.x.10421] 
//
[0.x.10422] 
[0.x.10423] 
[0.x.10424] 
[0.x.10425] 
//
[0.x.10426] 
[0.x.10427] 
//
[0.x.10428] 
[0.x.10429] 
[0.x.10430] 
[0.x.10431] 
[0.x.10432] 
[0.x.10433] 
[0.x.10434] 
[0.x.10435] 
[0.x.10436] 
[0.x.10437] 
//
[0.x.10438] 
[0.x.10439] 
[0.x.10440] 
[0.x.10441] 
[0.x.10442] 
[0.x.10443] 
//
[0.x.10444] 
[0.x.10445] 
[0.x.10446] 
[0.x.10447] 
[0.x.10448] 
[0.x.10449] 
[0.x.10450] 
[0.x.10451] 
[0.x.10452] 
//
[0.x.10453] 
[0.x.10454] 
//
// 打印出关于模拟的信息以及耗费的CPU时间。我们可以不先调用[2.x.1517]，而直接调用[2.x.1518]，以获得调用该函数时的已用CPU时间。
//
[0.x.10455] 
[0.x.10456] 
[0.x.10457] 
[0.x.10458] 
[0.x.10459] 
//
[0.x.10460] 
[0.x.10461] 
[0.x.10462] 
[0.x.10463] 
//
// [2.x.1519] 
//
// 程序中的最后一件事在[2.x.1520]函数中。其结构与其他大多数教程程序一样，唯一的例外是我们在这里处理一个参数文件。 为此，我们首先看一下传递给这个函数的命令行参数：如果在命令行上没有指定输入文件，那么就使用 "project.prm"，否则就取命令行上作为第一个参数给出的文件名。
//
// 有了这个，我们创建一个ParameterHandler对象，让[2.x.1521]类声明它想在输入文件中看到的所有参数（或者，采取默认值，如果参数文件中没有列出任何参数），然后读取输入文件，要求参数对象提取数值，最后把所有东西交给[2.x.1522]类型的对象来计算特征值。
//
[0.x.10464] 
[0.x.10465] 
[0.x.10466] 
[0.x.10467] 
[0.x.10468] 
[0.x.10469] 
//
[0.x.10470] 
[0.x.10471] 
[0.x.10472] 
[0.x.10473] 
[0.x.10474] 
//
[0.x.10475] 
//
[0.x.10476] 
//
[0.x.10477] 
[0.x.10478] 
//
[0.x.10479] 
//
[0.x.10480] 
//
[0.x.10481] 
[0.x.10482] 
[0.x.10483] 
[0.x.10484] 
[0.x.10485] 
[0.x.10486] 
[0.x.10487] 
[0.x.10488] 
[0.x.10489] 
[0.x.10490] 
[0.x.10491] 
[0.x.10492] 
[0.x.10493] 
[0.x.10494] 
//
[0.x.10495] 
[0.x.10496] 
[0.x.10497] 
[0.x.10498] 
[0.x.10499] 
[0.x.10500] 
[0.x.10501] 
[0.x.10502] 
[0.x.10503] 
[0.x.10504] 
[0.x.10505] 
[0.x.10506] 
[0.x.10507] 
[0.x.10508] 
//
[0.x.10509] 
[0.x.10510] 
[0.x.10511] 
[0.x.10512] 
[0.x.10513] 
[0.x.10514] 
[0.x.10515] 
[0.x.10516] 
[0.x.10517] 
[0.x.10518] 
[0.x.10519] 
[0.x.10520] 
[0.x.10521] 
[0.x.10522] 
[0.x.10523] 
[0.x.10524] 
//
[0.x.10525] 
[0.x.10526] 
[0.x.10527] 
//[2.x.1523] 
//
// 下面的头文件以前都讨论过了。
//
[0.x.10528] 
[0.x.10529] 
[0.x.10530] 
//
[0.x.10531] 
[0.x.10532] 
[0.x.10533] 
[0.x.10534] 
//
[0.x.10535] 
[0.x.10536] 
[0.x.10537] 
//
[0.x.10538] 
[0.x.10539] 
//
[0.x.10540] 
[0.x.10541] 
//
[0.x.10542] 
[0.x.10543] 
[0.x.10544] 
//
[0.x.10545] 
[0.x.10546] 
//
// 这个头文件包含了ParameterHandler类的必要声明，我们将用它来从配置文件中读取我们的参数。
//
[0.x.10547] 
//
// 为了解决线性系统，我们将使用UMFPACK提供的稀疏LU分解（见SparseDirectUMFPACK类），为此需要以下头文件。 请注意，为了编译这个教程程序，deal.II-library需要在UMFPACK支持下构建，默认情况下是启用的。
//
[0.x.10548] 
//
// FESystem类允许我们将多个FE对象堆叠成一个复合的、矢量值的有限元场。该类的必要声明在该头文件中提供。
//
[0.x.10549] 
//
// 最后，包括声明定时器类的头文件，我们将用它来确定我们程序的每个操作需要多少时间。
//
[0.x.10550] 
//
// 作为本程序开始时的最后一步，我们将本程序中的所有内容放入其命名空间，并在其中使deal.II命名空间中的所有内容全局可用，不需要在所有内容前加上[2.x.1524] 。
//
[0.x.10551] 
[0.x.10552] 
[0.x.10553] 
//[2.x.1525] 
//
// 首先我们为代表Dirichlet边界值的函数定义一个类。这在以前已经做过很多次了，因此不需要过多解释。
//
// 由于有两个值[2.x.1526]和[2.x.1527]需要在边界处规定，我们必须告诉基类这是一个有两个分量的向量值函数，[2.x.1528]函数和它的表亲[2.x.1529]必须返回有两个条目的向量。在我们的例子中，这个函数非常简单，它只是对实部[2.x.1530]返回1，对虚部[2.x.1531]返回0，而不管它在哪个点被评估。
//
[0.x.10554] 
[0.x.10555] 
[0.x.10556] 
[0.x.10557] 
[0.x.10558] 
[0.x.10559] 
[0.x.10560] 
//
[0.x.10561] 
[0.x.10562] 
[0.x.10563] 
[0.x.10564] 
//
[0.x.10565] 
[0.x.10566] 
[0.x.10567] 
//
[0.x.10568] 
[0.x.10569] 
[0.x.10570] 
[0.x.10571] 
[0.x.10572] 
[0.x.10573] 
//
[0.x.10574] 
[0.x.10575] 
[0.x.10576] 
[0.x.10577] 
//[2.x.1532] 
//
// 下一个类负责准备ParameterHandler对象并从输入文件中读取参数。 它包括一个声明所有必要参数的函数[2.x.1533]和一个从外部调用的[2.x.1534]函数，以启动参数读取过程。
//
[0.x.10578] 
[0.x.10579] 
[0.x.10580] 
[0.x.10581] 
[0.x.10582] 
//
[0.x.10583] 
[0.x.10584] 
[0.x.10585] 
[0.x.10586] 
//
// 构造函数存储了一个传递给它的ParameterHandler对象的引用。
//
[0.x.10587] 
[0.x.10588] 
[0.x.10589] 
//[2.x.1535] 
//
// [2.x.1536]函数声明了我们的ParameterHandler对象能够从输入文件中读取的所有参数，以及它们的类型、范围条件和它们出现在哪个分段。我们将用一对大括号包住所有进入一个部分的条目，以迫使编辑器将它们缩进一级，使其更容易阅读哪些条目共同构成一个部分。
//
[0.x.10590] 
[0.x.10591] 
//
// 网格和几何参数包括应用于初始粗略网格的全局细化步数和换能器镜头的焦距[2.x.1537]。对于细化步数，我们允许在[2.x.1538]范围内的整数，其中[2.x.1539]对象的第二个参数被省略，表示半开区间。 对于焦距，任何大于零的数字都可以接受。
//
[0.x.10592] 
[0.x.10593] 
[0.x.10594] 
[0.x.10595] 
[0.x.10596] 
[0.x.10597] 
[0.x.10598] 
//
[0.x.10599] 
[0.x.10600] 
[0.x.10601] 
[0.x.10602] 
[0.x.10603] 
[0.x.10604] 
[0.x.10605] 
//
// 下一小节专门讨论方程中出现的物理参数，它们是频率 [2.x.1540] 和波速 [2.x.1541] 。同样，两者都需要位于半开区间[2.x.1542]内，通过调用[2.x.1543]类，仅以左端点为参数来表示。
//
[0.x.10606] 
[0.x.10607] 
[0.x.10608] 
//
[0.x.10609] 
[0.x.10610] 
[0.x.10611] 
//
// 最后但并非最不重要的是，我们希望能够通过配置文件中的条目来改变输出的一些属性，如文件名和格式，这就是最后一小节的目的。
//
[0.x.10612] 
[0.x.10613] 
[0.x.10614] 
[0.x.10615] 
[0.x.10616] 
[0.x.10617] 
//
// 由于不同的输出格式在生成输出时可能需要不同的参数（例如，postscript输出需要视角角度、线宽、颜色等），如果我们必须为库中支持的每一种可能的输出格式手工声明所有这些参数，那就太麻烦了。相反，每种输出格式都有一个[2.x.1544]函数，它在自己的小节中声明了该格式的所有特定参数。下面调用[2.x.1545]为所有可用的输出格式执行[2.x.1546]，这样就为每一种格式创建了一个自己的小节，为该特定的输出格式声明参数。(上面[2.x.1547]的调用中，模板参数的实际值在这里并不重要：该函数做了同样的工作，与维度无关，但恰好是在一个依赖模板参数的类中。)  要想知道哪种输出格式有哪些参数，你可以查阅DataOutBase类的文档，或者干脆在没有参数文件的情况下运行这个程序。然后它将创建一个文件，其中所有声明的参数都设置为默认值，这可以方便地作为一个起点，将参数设置为你想要的值。
//
[0.x.10618] 
[0.x.10619] 
[0.x.10620] 
[0.x.10621] 
//[2.x.1548] 
//
// 这是ParameterReader类中的主函数。 它从外部被调用，首先声明所有的参数，然后从输入文件中读取参数，文件名由调用者提供。对这个函数的调用完成后，可以用[2.x.1549]对象来检索从文件中读入的参数值。
//
[0.x.10622] 
[0.x.10623] 
[0.x.10624] 
//
[0.x.10625] 
[0.x.10626] 
//
// [2.x.1550] 
//
// 正如介绍中所提到的，我们真正追求的量是超声波强度的空间分布，它对应于 [2.x.1551] 。现在我们可以只满足于在输出中拥有[2.x.1552]和[2.x.1553]，并使用合适的可视化或后处理工具从我们计算的解决方案中得出[2.x.1554]。然而，也有一种方法可以输出从deal.II中的解决方案中得出的数据，我们在这里要利用这个机制。
//
// 到目前为止，我们一直使用[2.x.1555]函数将包含输出数据的向量添加到一个DataOut对象中。 这个函数有一个特殊的版本，除了数据向量之外，还有一个额外的参数类型为DataPostprocessor。当这个函数用于输出时，在每个要生成输出数据的点上，指定的DataPostprocessor对象的[2.x.1556]或[2.x.1557]函数被调用，从数据向量代表的有限元函数的值、梯度和二阶导数计算输出量（在面相关数据的情况下，法向量也是可用的）。因此，这使我们可以输出任何可以从解的值及其导数中局部导出的数量。 当然，超声强度[2.x.1558]就是这样一个量，它的计算甚至不涉及任何[2.x.1559]或[2.x.1560]的导数。
//
// 在实践中，DataPostprocessor类只提供了这个功能的接口，我们需要从它派生出我们自己的类，以实现接口所指定的功能。在最一般的情况下，我们必须实现几个成员函数，但是如果输出量是一个单一的标量，那么其中的一些模板代码可以由一个更专业的类DataPostprocessorScalar来处理，我们可以从这个类派生。这就是[2.x.1561]类的作用。
//
[0.x.10627] 
[0.x.10628] 
[0.x.10629] 
[0.x.10630] 
[0.x.10631] 
//
[0.x.10632] 
[0.x.10633] 
[0.x.10634] 
[0.x.10635] 
//
// 在构造函数中，我们需要用两个参数调用基类的构造函数。第一个参数表示由该类计算的单一标量在输出文件中应表示的名称。在我们的例子中，后处理程序有[2.x.1562]作为输出，所以我们使用 "Intensity"。
//
// 第二个参数是一组标志，表示后处理程序需要哪些数据来计算输出量。 这可以是update_values、update_gradients和update_hessians（如果是脸部数据，也可以是update_normal_vector）的任何一个子集，这些都在UpdateFlags中记录。 当然，导数的计算需要额外的资源，所以这里只应该给出真正需要的数据的标志，就像我们使用FEValues对象时一样。在我们的例子中，只有 [2.x.1563] 和 [2.x.1564] 的函数值需要用来计算 [2.x.1565] ，所以我们用 update_values 标志就可以了。
//
[0.x.10636] 
[0.x.10637] 
[0.x.10638] 
[0.x.10639] 
//
// 实际的后处理发生在下面这个函数中。它的输入是一个存储函数值的对象（这里是向量值），代表给[2.x.1566]的数据向量在我们产生输出的所有评估点的评估值，以及一些代表导数的张量对象（我们在这里没有使用，因为[2.x.1567]只是从[2.x.1568]和[2.x.1569]计算出来）。派生量在[2.x.1570]向量中返回。请记住，这个函数只能使用由 [2.x.1571] 指定的各自更新标志的数据。例如，我们可能不会在这里使用导数，因为我们对 [2.x.1572] 的实现要求只提供函数值。
//
[0.x.10640] 
[0.x.10641] 
[0.x.10642] 
[0.x.10643] 
[0.x.10644] 
[0.x.10645] 
[0.x.10646] 
[0.x.10647] 
//
// 计算本身是很简单的。我们遍历输出向量中的每个条目，并从[2.x.1574]和[2.x.1575]的相应值中计算出[2.x.1573]。我们通过创建一个复数[2.x.1576]，然后对结果调用[2.x.1577]来实现。(我们可能想调用[2.x.1578]，但是在一个历史的怪圈中，C++委员会决定[2.x.1579]应该返回绝对值的[1.x.45]--从而不满足数学家对所谓 "规范 "的属性要求。)
//
[0.x.10648] 
[0.x.10649] 
[0.x.10650] 
[0.x.10651] 
[0.x.10652] 
[0.x.10653] 
//
[0.x.10654] 
[0.x.10655] 
//
[0.x.10656] 
[0.x.10657] 
[0.x.10658] 
//[2.x.1580] 
//
// 最后这里是这个程序的主类。 它的成员函数与前面的例子非常相似，特别是[2.x.1581]，成员变量的列表也没有什么大的惊喜。传递给构造函数的ParameterHandler对象被存储为一个引用，以便于从该类的所有函数中访问参数。 由于我们正在使用矢量值的有限元，我们使用的FE对象是FESystem类型的。
//
[0.x.10659] 
[0.x.10660] 
[0.x.10661] 
[0.x.10662] 
[0.x.10663] 
[0.x.10664] 
//
[0.x.10665] 
[0.x.10666] 
[0.x.10667] 
[0.x.10668] 
[0.x.10669] 
[0.x.10670] 
//
[0.x.10671] 
//
[0.x.10672] 
[0.x.10673] 
[0.x.10674] 
//
[0.x.10675] 
[0.x.10676] 
[0.x.10677] 
[0.x.10678] 
//
// 构造函数接收ParameterHandler对象并将其存储在一个引用中。它还初始化了DoF-Handler和有限元系统，该系统由标量Q1场的两个副本组成，一个用于[2.x.1582]，一个用于[2.x.1583] 。
//
[0.x.10679] 
[0.x.10680] 
[0.x.10681] 
[0.x.10682] 
[0.x.10683] 
[0.x.10684] 
//[2.x.1584] 
//
// 这里我们为我们的领域设置网格。 正如论述中所提到的，这个几何体只是一个单位正方形（2d），其边界部分代表换能器透镜，由一个圆的扇形代替。
//
[0.x.10685] 
[0.x.10686] 
[0.x.10687] 
//
// 首先我们生成一些日志输出，并启动一个定时器，这样我们就可以在这个函数完成后计算出执行时间。
//
[0.x.10688] 
[0.x.10689] 
//
// 然后，我们从ParameterHandler对象中查询换能器镜头的焦距和网格细化步数的值。
//
[0.x.10690] 
//
[0.x.10691] 
[0.x.10692] 
//
[0.x.10693] 
//
// 接下来，为换能器镜头的位置和焦点定义了两个点，也就是圆的中心，其线段将形成边界的换能器部分。注意，这是程序中唯一一个在二维和三维中略有不同的地方。尽管本教程只涉及二维情况，但要使这个程序在三维中发挥作用，必要的补充是非常少的，所以我们选择包括它们。
//
[0.x.10694] 
[0.x.10695] 
[0.x.10696] 
[0.x.10697] 
[0.x.10698] 
//
// 作为初始粗网格，我们采用一个简单的单位正方形，每个方向上有5个细分。分区的数量是这样选择的：我们想指定为传感器边界的线段[2.x.1585]是由一个面来跨越的。然后，我们通过所有的单元格，找到换能器所在的面，事实上，这只是X轴上从0.4到0.6的一条边。这是我们希望根据圆环形边界进行细化的地方，所以我们用不同的流形指标来标记这个边缘。由于我们要在换能器上设置迪里希特边界条件，所以我们也要改变其边界指标。
//
[0.x.10699] 
//
[0.x.10700] 
[0.x.10701] 
[0.x.10702] 
[0.x.10703] 
[0.x.10704] 
[0.x.10705] 
[0.x.10706] 
[0.x.10707] 
//
// 对于换能器镜头的圆形部分，使用了一个SphericalManifold对象（当然，在2D中只是代表一个圆），中心的计算方法如上。
//
[0.x.10708] 
//
// 现在，全局细化被执行。靠近换能器位置的单元格将根据换能器透镜的圆形边界被自动细化。
//
[0.x.10709] 

// 最后，我们再生成一些日志输出。我们停止定时器，并查询自函数开始以来所经过的CPU秒数。
//
[0.x.10710] 
[0.x.10711] 
//
[0.x.10712] 
[0.x.10713] 
[0.x.10714] 
//[2.x.1586] 
//
// 系统矩阵的初始化、稀疏模式和向量与前面的例子相同，因此不需要进一步评论。和前面的函数一样，我们也输出我们在这里所做的运行时间。
//
[0.x.10715] 
[0.x.10716] 
[0.x.10717] 
[0.x.10718] 
[0.x.10719] 
//
[0.x.10720] 
//
[0.x.10721] 
[0.x.10722] 
[0.x.10723] 
//
[0.x.10724] 
[0.x.10725] 
[0.x.10726] 
//
[0.x.10727] 
[0.x.10728] 
//
[0.x.10729] 
[0.x.10730] 
[0.x.10731] 
//[2.x.1587] 
//
// 和以前一样，这个函数负责组装系统矩阵和右手边的向量。
//
[0.x.10732] 
[0.x.10733] 
[0.x.10734] 
[0.x.10735] 
[0.x.10736] 
//
// 首先我们从ParameterHandler对象中查询波速和频率，并将其存储在本地变量中，因为它们将在本函数中频繁使用。
//
[0.x.10737] 
//
[0.x.10738] 
//
[0.x.10739] 
//
// 像往常一样，计算积分时使用普通的高斯正交规则。由于我们的双线性形式涉及到[2.x.1588]上的边界积分，所以我们还需要一个正交法则来计算面的积分，这些面是[2.x.1589]维的。
//
[0.x.10740] 
[0.x.10741] 
//
[0.x.10742] 
[0.x.10743] 
[0.x.10744] 
//
// FEValues对象将为我们评估形状函数。 对于涉及到[2.x.1590]上的积分的双线性形式的部分，我们需要形状函数的值和梯度，当然还有正交权重。 对于涉及边界积分的条款，只需要形状函数值和正交权重。
//
[0.x.10745] 
[0.x.10746] 
[0.x.10747] 
[0.x.10748] 
//
[0.x.10749] 
[0.x.10750] 
[0.x.10751] 
//
// 像往常一样，系统矩阵是逐个单元组装的，我们需要一个矩阵来存储本地单元的贡献，以及一个索引向量来将单元的贡献转移到全局系统矩阵中的适当位置，然后。
//
[0.x.10752] 
[0.x.10753] 
//
[0.x.10754] 
[0.x.10755] 
//
// 在每个单元，我们首先需要重置本地贡献矩阵，并请求FEValues对象计算当前单元的形状函数。
//
[0.x.10756] 
[0.x.10757] 
//
[0.x.10758] 
[0.x.10759] 
[0.x.10760] 
[0.x.10761] 
//
// 在这一点上，重要的是要记住，我们所处理的是一个有两个组成部分的有限元系统。由于我们构造这个FESystem的方式，即作为两个标量有限元场的笛卡尔乘积，每个形状函数只有一个非零分量（用deal.II的行话说，它们是[2.x.1591] GlossPrimitive "原始"）。 因此，每个形状函数可以被看作是引言中的[2.x.1592]'s或[2.x.1593]'s之一，同样，相应的自由度也可以归属于[2.x.1594]或[2.x.1595] 。      然而，当我们遍历当前单元上的所有自由度时，它们并不以任何特定的顺序出现，因此我们无法立即决定索引为[2.x.1596]和[2.x.1597]的自由度是属于我们解决方案的实部还是虚部。 另一方面，如果你看一下介绍中的系统矩阵的形式，这个区别是至关重要的，因为它将决定当前一对DoF的贡献将归入系统矩阵的哪个块，因此我们需要从给定的两个形状函数中计算哪个数量。 幸运的是，FESystem对象可以为我们提供这些信息，即它有一个函数[2.x.1598]，为每个局部的DoF索引返回一对整数，其中第一个表示该DoF属于系统的哪个组成部分。这对整数中的第二个整数表示该DoF在标量基有限元场中的索引，但这一信息在这里并不相关。如果你想知道更多关于这个函数和原始向量值元素背后的基本方案，可以看看[2.x.1599]或[2.x.1600]模块，那里对这些主题有深入的解释。
//
[0.x.10762] 
[0.x.10763] 
[0.x.10764] 
//
// 如果DoF[2.x.1601]和[2.x.1602]都属于同一个分量，即它们的形状函数都是[2.x.1603]的，或者都是[2.x.1604]的，贡献将最终出现在我们系统矩阵的一个对角块中，由于相应的条目是由同一个公式计算的，我们不必理会它们实际上是[2.x.1605]还是[2.x.1606]形状函数。我们可以简单地通过遍历所有正交点并将其贡献相加来计算条目，其中形状函数的值和梯度由我们的FEValues对象提供。
//
[0.x.10765] 
[0.x.10766] 
[0.x.10767] 
[0.x.10768] 
[0.x.10769] 
[0.x.10770] 
[0.x.10771] 
[0.x.10772] 
[0.x.10773] 
[0.x.10774] 
//
// 你可能认为我们在向FEValues对象请求形状函数值或梯度时，必须指定我们想评估的形状函数的哪个分量。然而，由于形状函数是原始的，它们只有一个非零分量，而且FEValues类足够聪明，它知道我们肯定对这一个非零分量感兴趣。
//
[0.x.10775] 
[0.x.10776] 
[0.x.10777] 
//
// 我们还必须增加由于边界项的贡献。为此，我们对当前单元格的所有面进行循环，首先看它是否在边界上，其次看它是否有与[2.x.1607]相关的正确的边界指标，即我们有吸收边界条件的那部分边界。
//
[0.x.10778] 
[0.x.10779] 
[0.x.10780] 
[0.x.10781] 
//
// 这些面肯定会对系统矩阵的非对角线块作出贡献，所以我们要求FEFaceValues对象为我们提供这个面上的形状函数值。
//
[0.x.10782] 
//
// 接下来，我们循环浏览当前单元格的所有DoF，找到属于不同组件且都支持当前面号的一对。
//
[0.x.10783] 
[0.x.10784] 
[0.x.10785] 
[0.x.10786] 
[0.x.10787] 
[0.x.10788] 
//
// 检查形状函数在一个面上是否有支持并不是严格必要的：如果我们不检查它，我们会简单地把本地单元矩阵的项加起来，这些项碰巧是零，因为至少有一个形状函数碰巧是零。然而，我们可以通过添加上面的检查来节省这项工作。
//
// 在任何一种情况下，这些DoFs都会对系统矩阵的对角线区块的边界积分作出贡献。为了计算积分，我们在面的所有正交点上进行循环，然后用面的正交规则提供的正交权重对贡献进行加权求和。 与对角线块上的条目不同，这里的形状函数哪一个是[2.x.1608]，哪一个是[2.x.1609]，确实很重要，因为这将决定该条目的符号。 我们通过一个简单的条件语句来说明这一点，它决定了正确的符号。由于我们已经检查了DoF [2.x.1610] 和 [2.x.1611] 属于不同的组件，这里只需测试其中一个组件属于哪个组件即可。
//
[0.x.10789] 
[0.x.10790] 
[0.x.10791] 
[0.x.10792] 
[0.x.10793] 
[0.x.10794] 
[0.x.10795] 
[0.x.10796] 
[0.x.10797] 
//
// 现在，我们已经完成了这个单元，必须将其贡献从本地系统矩阵转移到全局系统矩阵。为此，我们首先得到这个单元的全局指数列表......
//
[0.x.10798] 
//
// ...然后将这些条目逐一添加到系统矩阵中。
//
[0.x.10799] 
[0.x.10800] 
[0.x.10801] 
[0.x.10802] 
[0.x.10803] 
[0.x.10804] 
//
// 唯一剩下的是[2.x.1612]上的迪里希特边界值，其特征是边界指标1。Dirichlet值由我们上面定义的[2.x.1613]类提供。
//
[0.x.10805] 
[0.x.10806] 
[0.x.10807] 
[0.x.10808] 
[0.x.10809] 
//
[0.x.10810] 
[0.x.10811] 
[0.x.10812] 
[0.x.10813] 
//
[0.x.10814] 
[0.x.10815] 
[0.x.10816] 
//
// [2.x.1614] 
//
// 正如介绍中已经提到的，系统矩阵既不是对称的，也不是确定的，因此，如何提出一个迭代求解器和预处理器来很好地处理这个矩阵并不是很明显。 我们选择了另一种方式，用UMFPACK提供的稀疏LU分解来解决线性系统。这通常是二维问题的一个很好的首选，即使对于大量的DoF也能很好地工作。 SparseDirectUMFPACK类提供了UMFPACK的deal.II接口，它非常容易使用，使我们仅用3行代码就能解决我们的线性系统。
//
// 再次注意，为了编译这个例子程序，你需要有支持UMFPACK的deal.II库。
//
[0.x.10817] 
[0.x.10818] 
[0.x.10819] 
[0.x.10820] 
[0.x.10821] 
//
// 解决线性系统的代码很短：首先，我们分配一个正确类型的对象。下面的[2.x.1615]调用提供了我们想要反转的矩阵给SparseDirectUMFPACK对象，并同时启动了LU分解。因此，这也是这个程序中大部分计算工作发生的地方。
//
[0.x.10822] 
[0.x.10823] 
//
// 分解之后，我们可以把[2.x.1616]当作代表我们系统矩阵的逆矩阵来使用，所以要计算出解决方案，我们只需要与右边的向量相乘。
//
[0.x.10824] 
//
[0.x.10825] 
[0.x.10826] 
[0.x.10827] 
//
// [2.x.1617] 
//
// 这里我们按照参数文件中指定的格式输出我们的解[2.x.1618]和[2.x.1619]以及导出的量[2.x.1620]。从[2.x.1622]和[2.x.1623]导出[2.x.1621]的大部分工作已经在[2.x.1624]类的实现中完成，因此输出程序相当简单，与前面教程中的内容非常相似。
//
[0.x.10828] 
[0.x.10829] 
[0.x.10830] 
[0.x.10831] 
[0.x.10832] 
//
// 定义我们的 [2.x.1625] 类的对象和一个 DataOut 对象。
//
[0.x.10833] 
[0.x.10834] 
//
[0.x.10835] 
//
// 接下来我们从ParameterHandler查询输出相关的参数。[2.x.1626] 调用作为 [2.x.1628] 中 [2.x.1627] 调用的对应方。它从ParameterHandler收集所有与输出格式相关的参数，并相应地设置DataOut对象的相应属性。
//
[0.x.10836] 
//
[0.x.10837] 
[0.x.10838] 
//
[0.x.10839] 
//
// 现在，我们从ParameterHandler提供的基本名称和DataOut类提供的后缀（默认后缀被设置为正确的类型，与.prm文件中通过parse_parameters()设置的后缀相匹配）来组合文件名。
//
[0.x.10840] 
//
[0.x.10841] 
//
//解向量[2.x.1629]和[2.x.1630]以常规方式添加到DataOut对象中。
//
[0.x.10842] 
[0.x.10843] 
[0.x.10844] 
//
[0.x.10845] 
//
// 对于强度，我们只是再次调用[2.x.1631]，但这次用我们的[2.x.1632]对象作为第二个参数，这实际上是将[2.x.1633]加入到输出数据中。
//
[0.x.10846] 
//
// 最后的步骤和以前一样。注意，现在实际的输出格式是由输入文件中的内容决定的，也就是说，人们可以改变输出格式而不必重新编译这个程序。
//
[0.x.10847] 
[0.x.10848] 
//
[0.x.10849] 
[0.x.10850] 
[0.x.10851] 
//
// [2.x.1634] 
//
// 这里我们简单地一个接一个地执行我们的函数。
//
[0.x.10852] 
[0.x.10853] 
[0.x.10854] 
[0.x.10855] 
[0.x.10856] 
[0.x.10857] 
[0.x.10858] 
[0.x.10859] 
[0.x.10860] 
[0.x.10861] 
//[2.x.1635] 
//
// 最后是该程序的[2.x.1636]功能。它的结构与其他几乎所有的教程程序相同。唯一的例外是，我们定义了ParameterHandler和[2.x.1637]对象，并让后者从一个名为[2.x.1638]的文本文件中读入参数值。这样读到的值会被交给UltrasoundProblem类的一个实例。
//
[0.x.10862] 
[0.x.10863] 
[0.x.10864] 
[0.x.10865] 
[0.x.10866] 
[0.x.10867] 
//
[0.x.10868] 
[0.x.10869] 
[0.x.10870] 
//
[0.x.10871] 
[0.x.10872] 
[0.x.10873] 
[0.x.10874] 
[0.x.10875] 
[0.x.10876] 
[0.x.10877] 
[0.x.10878] 
[0.x.10879] 
[0.x.10880] 
[0.x.10881] 
[0.x.10882] 
[0.x.10883] 
[0.x.10884] 
[0.x.10885] 
[0.x.10886] 
[0.x.10887] 
[0.x.10888] 
[0.x.10889] 
[0.x.10890] 
[0.x.10891] 
[0.x.10892] 
[0.x.10893] 
[0.x.10894] 
[0.x.10895] 
[0.x.10896] 
[0.x.10897] 
[0.x.10898] 
[0.x.10899] 
[0.x.10900] 
[0.x.10901] 
[0.x.10902] 
[0.x.10903] 
[0.x.10904] 
[0.x.10905] 
[0.x.10906] 
[0.x.10907] 
[0.x.10908] 
[0.x.10909] 
[0.x.10910] 
[0.x.10911] 
[0.x.10912] 
[0.x.10913] 
[0.x.10914] 
//
[0.x.10915] 
[0.x.10916] 
[0.x.10917] 
[0.x.10918] 
//[2.x.1639] 
//
// 这些包含文件已经为你所知。它们声明了处理三角形和自由度枚举的类。
//
[0.x.10919] 
[0.x.10920] 
//
// 在这个文件中声明了创建网格的函数。
//
[0.x.10921] 
//
// 这个文件包含了对拉格朗日插值有限元的描述。
//
[0.x.10922] 
//
// 而这个文件是创建稀疏矩阵的稀疏模式所需要的，如前面的例子中所示。
//
[0.x.10923] 
//
// 接下来的两个文件是在每个单元上使用正交法组装矩阵所需要的。下面将对其中声明的类进行解释。
//
[0.x.10924] 
[0.x.10925] 
//
// 以下是我们在处理边界值时需要的三个包含文件。
//
[0.x.10926] 
[0.x.10927] 
[0.x.10928] 
//
// 我们现在几乎到了终点。第二组到最后一组include文件是用于线性代数的，我们用它来解决拉普拉斯方程的有限元离散化所产生的方程组。我们将使用向量和全矩阵在每个单元中组装方程组，并将结果转移到稀疏矩阵中。然后我们将使用共轭梯度求解器来解决这个问题，为此我们需要一个预处理程序（在这个程序中，我们使用身份预处理程序，它没有任何作用，但我们还是需要包括这个文件）。
//
[0.x.10929] 
[0.x.10930] 
[0.x.10931] 
[0.x.10932] 
[0.x.10933] 
[0.x.10934] 
//
// 最后，这是为了输出到文件和控制台。
//
[0.x.10935] 
[0.x.10936] 
[0.x.10937] 
//
// ...这是为了将deal.II命名空间导入到全局范围。
//
[0.x.10938] 
//[2.x.1640] 
//
// 在这个程序中，我们没有采用以前例子中的程序化编程，而是将所有东西都封装到一个类中。这个类由一些函数组成，这些函数分别执行有限元程序的某些方面，一个`main`函数控制先做什么和后做什么，还有一个成员变量列表。
//
// 该类的公共部分相当简短：它有一个构造函数和一个从外部调用的函数`run`，其作用类似于`main`函数：它协调该类的哪些操作应以何种顺序运行。该类中的其他东西，即所有真正做事情的函数，都在该类的私有部分。
//
[0.x.10939] 
[0.x.10940] 
[0.x.10941] 
[0.x.10942] 
//
[0.x.10943] 
//
// 然后，还有一些成员函数，它们主要是做它们名字所暗示的事情，在介绍中已经讨论过了。由于它们不需要从外部调用，所以它们是本类的私有函数。
//
[0.x.10944] 
[0.x.10945] 
[0.x.10946] 
[0.x.10947] 
[0.x.10948] 
[0.x.10949] 
//
// 最后我们还有一些成员变量。有一些变量描述了三角形和自由度的全局编号（我们将在这个类的构造函数中指定有限元的确切多项式程度）...
//
[0.x.10950] 
[0.x.10951] 
[0.x.10952] 
//
// ...拉普拉斯方程离散化产生的系统矩阵的稀疏模式和数值的变量...
//
[0.x.10953] 
[0.x.10954] 
//
// .......以及用于保存右手边和解决方案向量的变量。
//
[0.x.10955] 
[0.x.10956] 
[0.x.10957] 
//[2.x.1641] 
//
// 这里是构造函数。它除了首先指定我们需要双线性元素（由有限元对象的参数表示，它表示多项式的程度），并将dof_handler变量与我们使用的三角形相关联之外，没有做更多的工作。(注意，目前三角结构并没有设置网格，但是DoFHandler并不关心：它只想知道它将与哪个三角结构相关联，只有当你使用distribution_dofs()函数试图在网格上分布自由度时，它才开始关心实际的网格。) Step3类的所有其他成员变量都有一个默认的构造函数，它可以完成我们想要的一切。
//
[0.x.10958] 
[0.x.10959] 
[0.x.10960] 
[0.x.10961] 
//[2.x.1642] 
//
// 现在，我们要做的第一件事是生成我们想在其上进行计算的三角形，并对每个顶点进行自由度编号。我们之前在[2.x.1643]和[2.x.1644]中分别看到过这两个步骤。
//
// 这个函数做的是第一部分，创建网格。 我们创建网格并对所有单元格进行五次细化。由于初始网格（也就是正方形[2.x.1645]）只由一个单元组成，所以最终的网格有32乘以32个单元，总共是1024个。
//
// 不确定1024是否是正确的数字？我们可以通过使用三角形上的[2.x.1646]函数输出单元格的数量来检查。
//
[0.x.10962] 
[0.x.10963] 
[0.x.10964] 
[0.x.10965] 
//
[0.x.10966] 
[0.x.10967] 
[0.x.10968] 
//[2.x.1647] 我们调用[2.x.1648]函数，而不是[2.x.1649]这里，[1.x.46]指的是没有进一步提炼的单元。我们强调 "活跃 "这个形容词，因为还有更多的单元，即最细的单元的父单元，它们的父单元等等，直到构成初始网格的一个单元为止。当然，在下一个更粗的层次上，单元格的数量是最细层次上的单元格的四分之一，即256，然后是64、16、4和1。如果你在上面的代码中调用[2.x.1650]，你会因此得到一个1365的值。另一方面，单元格的数量（相对于活动单元格的数量）通常没有什么意义，所以没有很好的理由去打印它。
//
// [2.x.1651] 
//
// 接下来我们列举所有的自由度，并建立矩阵和向量对象来保存系统数据。枚举是通过使用[2.x.1652]来完成的，我们在[2.x.1653]的例子中已经看到了。由于我们使用了FE_Q类，并且在构造函数中设置了多项式的度数为1，即双线性元素，这就将一个自由度与每个顶点联系起来。当我们在生成输出时，让我们也看看有多少自由度被生成。
//
[0.x.10969] 
[0.x.10970] 
[0.x.10971] 
[0.x.10972] 
[0.x.10973] 
//
// 每个顶点应该有一个DoF。因为我们有一个32乘以32的网格，所以DoFs的数量应该是33乘以33，即1089。
//
// 正如我们在前面的例子中所看到的，我们通过首先创建一个临时结构，标记那些可能为非零的条目，然后将数据复制到SparsityPattern对象中，然后可以被系统矩阵使用，来设置一个稀疏模式。
//
[0.x.10974] 
[0.x.10975] 
[0.x.10976] 
//
// 注意，SparsityPattern对象并不保存矩阵的值，它只保存条目所在的位置。条目本身存储在SparseMatrix类型的对象中，我们的变量system_matrix就是其中之一。
//
// 稀疏模式和矩阵之间的区别是为了让几个矩阵使用相同的稀疏模式。这在这里似乎并不重要，但是当你考虑到矩阵的大小，以及建立稀疏模式可能需要一些时间时，如果你必须在程序中存储几个矩阵，这在大规模问题中就变得很重要了。
//
[0.x.10977] 
//
// 在这个函数中要做的最后一件事是将右侧向量和解向量的大小设置为正确的值。
//
[0.x.10978] 
[0.x.10979] 
[0.x.10980] 
//[2.x.1654] 
//
// 下一步是计算形成线性系统的矩阵和右手边的条目，我们从中计算出解决方案。这是每一个有限元程序的核心功能，我们在介绍中已经讨论了主要步骤。
//
// 组装矩阵和向量的一般方法是在所有单元上循环，并在每个单元上通过正交计算该单元对全局矩阵和右侧的贡献。现在要认识到的一点是，我们需要实心单元上正交点位置的形状函数值。然而，有限元形状函数和正交点都只定义在参考单元上。因此，它们对我们帮助不大，事实上，我们几乎不会直接从这些对象中查询有关有限元形状函数或正交点的信息。
//
// 相反，我们需要的是一种将这些数据从参考单元映射到实际单元的方法。能够做到这一点的类都是由Mapping类派生出来的，尽管人们常常不必直接与它们打交道：库中的许多函数都可以将映射对象作为参数，但当它被省略时，它们只是简单地诉诸于标准的双线性Q1映射。我们将走这条路，暂时不打扰它（我们将在[2.x.1655]、[2.x.1656]和[2.x.1657]中再讨论这个问题）。
//
// 所以我们现在有三个类的集合来处理：有限元、正交、和映射对象。这就太多了，所以有一种类型的类可以协调这三者之间的信息交流：FEValues类。如果给这三个对象各一个实例（或两个，以及一个隐式线性映射），它就能为你提供实心单元上正交点的形状函数值和梯度的信息。
//
// 利用所有这些，我们将把这个问题的线性系统组装在以下函数中。
//
[0.x.10981] 
[0.x.10982] 
//
// 好的，我们开始吧：我们需要一个正交公式来计算每个单元格的积分。让我们采用一个高斯公式，每个方向有两个正交点，即总共有四个点，因为我们是在二维。这个正交公式可以准确地积分三度以下的多项式（在一维）。很容易检查出，这对目前的问题来说是足够的。
//
[0.x.10983] 
//
// 然后我们初始化我们在上面简单谈及的对象。它需要被告知我们要使用哪个有限元，以及正交点和它们的权重（由一个正交对象共同描述）。如前所述，我们使用隐含的Q1映射，而不是自己明确指定一个。最后，我们必须告诉它我们希望它在每个单元上计算什么：我们需要正交点的形状函数值（对于右手[2.x.1658]），它们的梯度（对于矩阵条目[2.x.1659]），以及正交点的权重和从参考单元到实际单元的雅各布变换的行列式。
//
// 我们实际需要的信息列表是作为FEValues构造函数的第三个参数的标志集合给出的。由于这些值必须重新计算，或者说更新，每次我们进入一个新的单元时，所有这些标志都以前缀[2.x.1660]开始，然后指出我们想要更新的实际内容。如果我们想要计算形状函数的值，那么给出的标志是#update_values；对于梯度，它是#update_gradients。雅各布的行列式和正交权重总是一起使用的，所以只计算乘积（雅各布乘以权重，或者简称[2.x.1661]）；由于我们需要它们，我们必须同时列出#update_JxW_values。
//
[0.x.10984] 
[0.x.10985] 
[0.x.10986] 
//
// 这种方法的优点是，我们可以指定每个单元上究竟需要什么样的信息。很容易理解的是，这种方法可以大大加快有限元计算的速度，相比之下，所有的东西，包括二阶导数、单元的法向量等都在每个单元上计算，不管是否需要它们。
//
// [2.x.1662] <code>update_values | update_gradients | update_JxW_values</code>的语法对于那些不习惯用C语言编程多年的位操作的人来说不是很明显。首先，[2.x.1663]是[1.x.47]，也就是说，它接受两个整数参数，这些参数被解释为比特模式，并返回一个整数，其中每个比特都被设置，因为在两个参数中至少有一个的对应比特被设置。例如，考虑操作[2.x.1664]（其中前缀[2.x.1665]表示该数字将被解释为二进制数字）和[2.x.1666] 。通过每个比特，看它是否在其中一个参数中被设置，我们得出[2.x.1667]，或者用十进制符号表示，[2.x.1668] 。你需要知道的第二个信息是，各种[2.x.1669]标志都是有[1.x.48]的整数。例如，假设 [2.x.1670] , [2.x.1671] , [2.x.1672] 。那么<code>update_values | update_gradients | update_JxW_values = 0b10011 = 19</code>。换句话说，我们得到一个数字，即[1.x.49]，其中每个操作正好对应于整数中的一个位，如果等于1，意味着每个单元格上应该更新一个特定的片断，如果是0，意味着我们不需要计算它。换句话说，即使[2.x.1673]是[1.x.50]，它真正代表的是[1.x.51]。这样的二进制掩码在C语言编程中很常见，但在C++这样的高级语言中也许不是这样，但对当前的目的有很好的作用。
//
// 为了在下文中进一步使用，我们为一个将被频繁使用的值定义了一个快捷方式。也就是每个单元的自由度数的缩写（因为我们是在二维，自由度只与顶点相关，所以这个数字是4，但是我们更希望在写这个变量的定义时，不妨碍我们以后选择不同的有限元，每个单元有不同的自由度数，或者在不同的空间维度工作）。
//
// 一般来说，使用符号名称而不是硬编码这些数字是个好主意，即使你知道它们，因为例如，你可能想在某个时候改变有限元。改变元素就必须在不同的函数中进行，而且很容易忘记在程序的另一部分做相应的改变。最好不要依赖自己的计算，而是向正确的对象索取信息。在这里，我们要求有限元告诉我们每个单元的自由度数，无论我们在程序中的其他地方选择什么样的空间尺寸或多项式程度，我们都会得到正确的数字。
//
// 这里定义的快捷方式主要是为了讨论基本概念，而不是因为它节省了大量的输入，然后会使下面的循环更容易阅读。在大型程序中，你会在很多地方看到这样的快捷方式，`dofs_per_cell`就是一个或多或少是这类对象的传统名称。
//
[0.x.10987] 
//
// 现在，我们说我们想逐个单元地组装全局矩阵和向量。我们可以将结果直接写入全局矩阵，但是这样做的效率并不高，因为对稀疏矩阵元素的访问是很慢的。相反，我们首先在一个小矩阵中计算每个单元的贡献，并在这个单元的计算结束后将其转移到全局矩阵中。我们对右手边的向量也是这样做的。所以我们首先分配这些对象（这些是局部对象，所有的自由度都与所有其他的自由度耦合，我们应该使用一个完整的矩阵对象，而不是一个用于局部操作的稀疏矩阵；以后所有的东西都将转移到全局的稀疏矩阵中）。
//
[0.x.10988] 
[0.x.10989] 
//
// 在集合每个单元的贡献时，我们用自由度的局部编号（即从零到dofs_per_cell-1的编号）来做。然而，当我们将结果转移到全局矩阵时，我们必须知道自由度的全局编号。当我们查询它们时，我们需要为这些数字建立一个从头开始的（临时）数组（关于这里使用的类型，[2.x.1674]，见介绍末尾的讨论）。
//
[0.x.10990] 
//
// 现在是所有单元格的循环。我们之前已经看到这对一个三角形是如何工作的。DoFHandler的单元格迭代器与Triangulation的迭代器完全类似，但有关于你所使用的有限元的自由度的额外信息。在自由度处理程序的活动单元上进行循环操作的方法与三角法相同。
//
// 注意，这次我们将单元的类型声明为`const auto &`，而不是`auto`。在第1步中，我们通过用细化指标标记来修改三角形的单元。在这里，我们只检查单元格而不修改它们，所以把`cell`声明为`const`是很好的做法，以便执行这个不变性。
//
[0.x.10991] 
[0.x.10992] 
//
// 我们现在坐在一个单元上，我们希望计算形状函数的值和梯度，以及参考单元和真实单元之间映射的雅各布矩阵的行列式，在正交点上。由于所有这些值都取决于单元格的几何形状，我们必须让FEValues对象在每个单元格上重新计算它们。
//
[0.x.10993] 
//
// 接下来，在我们填充之前，将本地单元对全局矩阵和全局右手边的贡献重置为零。
//
[0.x.10994] 
[0.x.10995] 
//
// 现在是时候开始对单元进行积分了，我们通过对所有的正交点进行循环来完成，我们将用q_index来编号。
//
[0.x.10996] 
[0.x.10997] 
//
// 首先组装矩阵。对于拉普拉斯问题，每个单元格上的矩阵是形状函数i和j的梯度的积分。由于我们不进行积分，而是使用正交，所以这是在所有正交点的积分之和乘以正交点的雅各布矩阵的行列式乘以这个正交点的权重。你可以通过使用[2.x.1676]得到形状函数[2.x.1675]在数字q_index的正交点上的梯度；这个梯度是一个二维向量（事实上它是张量[2.x.1677]类型，这里dim=2），两个这样的向量的乘积是标量乘积，即两个shape_grad函数调用的积是点乘。这又要乘以雅各布行列式和正交点权重（通过调用[2.x.1678]得到）。最后，对所有形状函数[2.x.1679]和[2.x.1680]重复上述操作。
//
[0.x.10998] 
[0.x.10999] 
[0.x.11000] 
[0.x.11001] 
[0.x.11002] 
[0.x.11003] 
//
// 然后我们对右手边做同样的事情。在这里，积分是对形状函数i乘以右手边的函数，我们选择的是常值为1的函数（更有趣的例子将在下面的程序中考虑）。
//
[0.x.11004] 
[0.x.11005] 
[0.x.11006] 
[0.x.11007] 
[0.x.11008] 
//
// 现在我们有了这个单元的贡献，我们必须把它转移到全局矩阵和右手边。为此，我们首先要找出这个单元上的自由度有哪些全局数字。让我们简单地询问该单元的信息。
//
[0.x.11009] 
//
// 然后再次循环所有形状函数i和j，并将局部元素转移到全局矩阵中。全局数字可以用local_dof_indices[i]获得。
//
[0.x.11010] 
[0.x.11011] 
[0.x.11012] 
[0.x.11013] 
[0.x.11014] 
//
// 再来，我们对右边的向量做同样的事情。
//
[0.x.11015] 
[0.x.11016] 
[0.x.11017] 
//
// 现在，几乎所有的东西都为离散系统的求解做好了准备。然而，我们还没有照顾到边界值（事实上，没有迪里切特边界值的拉普拉斯方程甚至不是唯一可解的，因为你可以在离散解中加入一个任意的常数）。因此，我们必须对这种情况做一些处理。
//
// 为此，我们首先获得边界上的自由度列表以及形状函数在那里的值。为了简单起见，我们只对边界值函数进行插值，而不是将其投影到边界上。库中有一个函数正是这样做的。 [2.x.1681]它的参数是（省略存在默认值而我们不关心的参数）：DoFHandler对象，用于获取边界上自由度的全局数字；边界上边界值应被内插的部分；边界值函数本身；以及输出对象。
//
// 边界分量的含义如下：在很多情况下，你可能只想在边界的一部分施加某些边界值。例如，在流体力学中，你可能有流入和流出的边界，或者在身体变形计算中，身体的夹紧和自由部分。那么你就想用指标来表示边界的这些不同部分，并告诉interpolate_boundary_values函数只计算边界的某一部分（例如夹住的部分，或流入的边界）的边界值。默认情况下，所有的边界都有一个0的边界指标，除非另有规定。如果边界的部分有不同的边界条件，你必须用不同的边界指示器为这些部分编号。然后，下面的函数调用将只确定那些边界指标实际上是作为第二个参数指定的0的边界部分的边界值。
//
// 描述边界值的函数是一个Function类型的对象或一个派生类的对象。其中一个派生类是[2.x.1682]，它描述了一个到处都是零的函数（并不意外）。我们就地创建这样一个对象，并将其传递给[2.x.1683]函数。
//
// 最后，输出对象是一对全局自由度数（即边界上的自由度数）和它们的边界值（这里所有条目都是零）的列表。这种自由度数到边界值的映射是由[2.x.1684]类完成的。
//
[0.x.11018] 
[0.x.11019] 
[0.x.11020] 
[0.x.11021] 
[0.x.11022] 
//
// 现在我们得到了边界DoF的列表和它们各自的边界值，让我们用它们来相应地修改方程组。这可以通过以下函数调用来实现。
//
[0.x.11023] 
[0.x.11024] 
[0.x.11025] 
[0.x.11026] 
[0.x.11027] 
//[2.x.1685] 
//
// 下面的函数简单地求解了离散化的方程。由于该系统对于高斯消除或LU分解等直接求解器来说是一个相当大的系统，我们使用共轭梯度算法。你应该记住，这里的变量数量（只有1089个）对于有限元计算来说是一个非常小的数字，而100.000是一个比较常见的数字。 对于这个数量的变量，直接方法已经不能使用了，你不得不使用CG这样的方法。
//
[0.x.11028] 
[0.x.11029] 
//
// 首先，我们需要有一个对象，知道如何告诉CG算法何时停止。这是通过使用SolverControl对象来实现的，作为停止标准，我们说：在最多1000次迭代后停止（这远远超过了1089个变量的需要；见结果部分以了解真正使用了多少次），如果残差的规范低于[2.x.1686]就停止。在实践中，后一个标准将是停止迭代的一个标准。
//
[0.x.11030] 
//
// 然后，我们需要解算器本身。SolverCG类的模板参数是向量的类型，留下空的角括号将表明我们采取的是默认参数（即[2.x.1687] ）。然而，我们明确地提到了模板参数。
//
[0.x.11031] 
//
// 现在求解方程组。CG求解器的第四个参数是一个预处理程序。我们觉得还没有准备好深入研究这个问题，所以我们告诉它使用身份运算作为预处理。
//
[0.x.11032] 
//
// 现在求解器已经完成了它的工作，求解变量包含了求解函数的结点值。
//
[0.x.11033] 
//[2.x.1688] 
//
// 典型的有限元程序的最后一部分是输出结果，也许会做一些后处理（例如计算边界处的最大应力值，或者计算整个流出物的平均通量，等等）。我们这里没有这样的后处理，但是我们想把解决方案写到一个文件里。
//
[0.x.11034] 
[0.x.11035] 
//
// 为了将输出写入文件，我们需要一个知道输出格式等的对象。这就是DataOut类，我们需要一个该类型的对象。
//
[0.x.11036] 
//
// 现在我们必须告诉它从哪里获取它要写的值。我们告诉它使用哪个DoFHandler对象，以及求解向量（以及求解变量在输出文件中的名称）。如果我们有不止一个我们想在输出中查看的向量（例如右手边，每个单元格的错误，等等），我们也要把它们加进去。
//
[0.x.11037] 
[0.x.11038] 
//
// 在DataOut对象知道它要处理哪些数据后，我们必须告诉它把它们处理成后端可以处理的数据。原因是我们将前端（知道如何处理DoFHandler对象和数据向量）与后端（知道许多不同的输出格式）分开，使用一种中间数据格式将数据从前端传输到后端。数据通过以下函数转换为这种中间格式。
//
[0.x.11039] 
//
// 现在我们已经为实际输出做好了一切准备。只要打开一个文件，用VTK格式把数据写进去就可以了（在我们这里使用的DataOut类中还有很多其他函数，可以把数据写成postscript、AVS、GMV、Gnuplot或其他一些文件格式）。
//
[0.x.11040] 
[0.x.11041] 
[0.x.11042] 
//[2.x.1689] 
//
// 最后，这个类的最后一个函数是主函数，调用[2.x.1690]类的所有其他函数。这样做的顺序类似于大多数有限元程序的工作顺序。由于这些名字大多是不言自明的，所以没有什么可评论的。
//
[0.x.11043] 
[0.x.11044] 
[0.x.11045] 
[0.x.11046] 
[0.x.11047] 
[0.x.11048] 
[0.x.11049] 
[0.x.11050] 
//[2.x.1691] 
//
// 这是程序的主函数。由于主函数的概念大多是C++编程之前的面向对象时代的遗留物，所以它通常不做更多的事情，只是创建一个顶层类的对象并调用其原理函数。
//
// 最后，函数的第一行是用来启用deal.II可以生成的一些诊断程序的输出。 [2.x.1692]变量（代表deal-log，而不是de-allog）代表一个流，库的某些部分将输出写入其中。例如，迭代求解器将产生诊断程序（起始残差、求解器步骤数、最终残差），在运行这个教程程序时可以看到。
//
// [2.x.1693]的输出可以写到控制台，也可以写到文件，或者两者都写。两者在默认情况下都是禁用的，因为多年来我们已经知道，一个程序只应该在用户明确要求的时候才产生输出。但这是可以改变的，为了解释如何做到这一点，我们需要解释[2.x.1694]是如何工作的。当库的个别部分想要记录输出时，它们会打开一个 "上下文 "或 "部分"，这个输出将被放入其中。在想要写输出的部分结束时，人们再次退出这个部分。由于一个函数可以在这个输出部分打开的范围内调用另一个函数，所以输出实际上可以分层嵌套到这些部分。LogStream类（[2.x.1695]是一个变量）将这些部分中的每一个称为 "前缀"，因为所有的输出都以这个前缀打印在行的左端，前缀由冒号分隔。总是有一个默认的前缀叫做 "DEAL"（暗示了deal.II的历史，它是以前一个叫做 "DEAL "的库的继承者，LogStream类是被带入deal.II的少数代码之一）。
//
// 默认情况下，[2.x.1696]只输出前缀为零的行--也就是说，所有的输出都是禁用的，因为默认的 "DEAL "前缀总是存在的。但人们可以为应该输出的行设置不同的最大前缀数，以达到更大的效果，事实上在这里我们通过调用[2.x.1697]将其设置为两个。这意味着对于所有的屏幕输出，在默认的 "DEAL "之外再推一个前缀的上下文被允许将其输出打印到屏幕上（"控制台"），而所有进一步嵌套的部分将有三个或更多的前缀被激活，会写到[2.x.1698]，但[2.x.1699]并不转发这个输出到屏幕。因此，运行这个例子（或者看 "结果 "部分），你会看到解算器的统计数据前缀为 "DEAL:CG"，这是两个前缀。这对于当前程序的上下文来说已经足够了，但是你将在以后看到一些例子（例如，在[2.x.1700]中），其中求解器嵌套得更深，你可能通过设置更高的深度来获得有用的信息。
//
[0.x.11051] 
[0.x.11052] 
[0.x.11053] 
//
[0.x.11054] 
[0.x.11055] 
//
[0.x.11056] 
[0.x.11057] 
[0.x.11058] 
[0.x.11059] 
[0.x.11060] 
[0.x.11061] 
[0.x.11062] 
[0.x.11063] 
[0.x.11064] 
[0.x.11065] 
[0.x.11066] 
[0.x.11067] 
[0.x.11068] 
[0.x.11069] 
[0.x.11070] 
[0.x.11071] 
//
[0.x.11072] 
[0.x.11073] 
[0.x.11074] 
//
// deal.II包括的文件已经在前面的例子中介绍过了，因此不再做进一步的评论。
//
[0.x.11075] 
[0.x.11076] 
[0.x.11077] 
[0.x.11078] 
[0.x.11079] 
[0.x.11080] 
[0.x.11081] 
[0.x.11082] 
[0.x.11083] 
[0.x.11084] 
[0.x.11085] 
[0.x.11086] 
[0.x.11087] 
[0.x.11088] 
[0.x.11089] 
[0.x.11090] 
[0.x.11091] 
[0.x.11092] 
//
// 而这又是C++。
//
[0.x.11093] 
[0.x.11094] 
[0.x.11095] 
//
// 最后一步和以前所有的程序一样。
//
[0.x.11096] 
[0.x.11097] 
[0.x.11098] 
//[2.x.1701] 
//
// 描述方程数据的类和单个术语的实际装配几乎完全照搬自 [2.x.1702] 。我们将对差异进行评论。
//
[0.x.11099] 
[0.x.11100] 
[0.x.11101] 
[0.x.11102] 
[0.x.11103] 
[0.x.11104] 
[0.x.11105] 
[0.x.11106] 
[0.x.11107] 
[0.x.11108] 
[0.x.11109] 
//
[0.x.11110] 
[0.x.11111] 
[0.x.11112] 
//
[0.x.11113] 
[0.x.11114] 
[0.x.11115] 
[0.x.11116] 
[0.x.11117] 
[0.x.11118] 
[0.x.11119] 
[0.x.11120] 
[0.x.11121] 
[0.x.11122] 
//
[0.x.11123] 
[0.x.11124] 
[0.x.11125] 
[0.x.11126] 
[0.x.11127] 
[0.x.11128] 
[0.x.11129] 
[0.x.11130] 
[0.x.11131] 
//
[0.x.11132] 
[0.x.11133] 
[0.x.11134] 
[0.x.11135] 
//
//流场选择为逆时针方向的四分之一圆，原点为域的右半部分的中点，数值为正[2.x.1703]，而在域的左边部分，流速只是向左走，与从右边进来的流速一致。在圆形部分，流速的大小与离原点的距离成正比。这与[2.x.1704]不同，在该定义中，到处都是1。新定义导致[2.x.1705]沿单元的每个给定面的线性变化。另一方面，[2.x.1706]的解决方案与之前完全相同。
//
[0.x.11136] 
[0.x.11137] 
[0.x.11138] 
[0.x.11139] 
[0.x.11140] 
//
[0.x.11141] 
[0.x.11142] 
[0.x.11143] 
[0.x.11144] 
[0.x.11145] 
[0.x.11146] 
[0.x.11147] 
[0.x.11148] 
[0.x.11149] 
[0.x.11150] 
[0.x.11151] 
[0.x.11152] 
[0.x.11153] 
[0.x.11154] 
[0.x.11155] 
//
// [2.x.1707] 
//
// 这个类的声明完全不受我们目前的变化影响。
//
[0.x.11156] 
[0.x.11157] 
[0.x.11158] 
[0.x.11159] 
[0.x.11160] 
//
[0.x.11161] 
[0.x.11162] 
[0.x.11163] 
//
[0.x.11164] 
[0.x.11165] 
[0.x.11166] 
//
[0.x.11167] 
[0.x.11168] 
[0.x.11169] 
[0.x.11170] 
[0.x.11171] 
[0.x.11172] 
//
[0.x.11173] 
[0.x.11174] 
[0.x.11175] 
[0.x.11176] 
[0.x.11177] 
//
// 同样地，该类的构造函数以及组装对应于单元格内部和边界面的术语的函数与之前没有变化。装配单元间面术语的函数也没有改变，因为它所做的只是对两个FEFaceValuesBase类型的对象进行操作（它是FEFaceValues和FESubfaceValues的基类）。这些对象从何而来，即它们是如何被初始化的，对这个函数来说并不重要：它只是假设这两个对象所代表的面或子面上的正交点与物理空间中的相同点相对应。
//
[0.x.11178] 
[0.x.11179] 
[0.x.11180] 
[0.x.11181] 
[0.x.11182] 
[0.x.11183] 
//
[0.x.11184] 
[0.x.11185] 
[0.x.11186] 
[0.x.11187] 
[0.x.11188] 
[0.x.11189] 
[0.x.11190] 
//
[0.x.11191] 
[0.x.11192] 
//
[0.x.11193] 
[0.x.11194] 
//
[0.x.11195] 
[0.x.11196] 
[0.x.11197] 
[0.x.11198] 
[0.x.11199] 
[0.x.11200] 
//
[0.x.11201] 
[0.x.11202] 
[0.x.11203] 
[0.x.11204] 
//
[0.x.11205] 
[0.x.11206] 
[0.x.11207] 
[0.x.11208] 
[0.x.11209] 
[0.x.11210] 
[0.x.11211] 
[0.x.11212] 
//
[0.x.11213] 
[0.x.11214] 
//
[0.x.11215] 
[0.x.11216] 
//
[0.x.11217] 
[0.x.11218] 
[0.x.11219] 
[0.x.11220] 
[0.x.11221] 
[0.x.11222] 
[0.x.11223] 
[0.x.11224] 
[0.x.11225] 
[0.x.11226] 
[0.x.11227] 
[0.x.11228] 
[0.x.11229] 
[0.x.11230] 
//
[0.x.11231] 
[0.x.11232] 
[0.x.11233] 
[0.x.11234] 
[0.x.11235] 
[0.x.11236] 
[0.x.11237] 
[0.x.11238] 
[0.x.11239] 
[0.x.11240] 
[0.x.11241] 
//
[0.x.11242] 
//
[0.x.11243] 
//
[0.x.11244] 
[0.x.11245] 
[0.x.11246] 
[0.x.11247] 
[0.x.11248] 
[0.x.11249] 
[0.x.11250] 
[0.x.11251] 
[0.x.11252] 
//
[0.x.11253] 
[0.x.11254] 
[0.x.11255] 
[0.x.11256] 
[0.x.11257] 
[0.x.11258] 
[0.x.11259] 
[0.x.11260] 
[0.x.11261] 
[0.x.11262] 
[0.x.11263] 
[0.x.11264] 
[0.x.11265] 
//
[0.x.11266] 
[0.x.11267] 
[0.x.11268] 
[0.x.11269] 
[0.x.11270] 
[0.x.11271] 
[0.x.11272] 
[0.x.11273] 
//[2.x.1708] 
//
// 这个声明很像 [2.x.1709] 的声明。然而，我们引入了一个新的例程（set_anisotropic_flags）并修改了另一个例程（refine_grid）。
//
[0.x.11274] 
[0.x.11275] 
[0.x.11276] 
[0.x.11277] 
[0.x.11278] 
//
[0.x.11279] 
//
[0.x.11280] 
[0.x.11281] 
[0.x.11282] 
[0.x.11283] 
[0.x.11284] 
[0.x.11285] 
[0.x.11286] 
//
[0.x.11287] 
[0.x.11288] 
//
// 我们再次希望使用程度为1的DG元素（但这只在构造函数中指定）。如果你想使用不同程度的DG方法，请在构造函数中用新的程度替换1。
//
[0.x.11289] 
[0.x.11290] 
[0.x.11291] 
//
[0.x.11292] 
[0.x.11293] 
//
// 这是新的，在介绍中解释的各向异性跳跃指标的评估中使用的阈值。它的值在构造函数中被设置为3.0，但它可以很容易地被改变为一个大于1的不同值。
//
[0.x.11294] 
//
// 这是一个指示是否使用各向异性细化的bool标志。它由构造函数设置，构造函数需要一个同名的参数。
//
[0.x.11295] 
//
[0.x.11296] 
[0.x.11297] 
//
[0.x.11298] 
[0.x.11299] 
//
[0.x.11300] 
[0.x.11301] 
//
[0.x.11302] 
[0.x.11303] 
[0.x.11304] 
[0.x.11305] 
//
// 对于不同程度的DG方法，在这里进行修改。
//
[0.x.11306] 
[0.x.11307] 
[0.x.11308] 
[0.x.11309] 
[0.x.11310] 
[0.x.11311] 
//
// 由于β是一个线性函数，我们可以选择正交的度数，对于这个度数，所得的积分是正确的。因此，我们选择使用 [2.x.1710] 高斯点，这使我们能够准确地积分度数为 [2.x.1711] 的多项式，足以满足我们在本程序中要进行的所有积分。
//
[0.x.11312] 
[0.x.11313] 
[0.x.11314] 
[0.x.11315] 
//
[0.x.11316] 
[0.x.11317] 
[0.x.11318] 
[0.x.11319] 
[0.x.11320] 
[0.x.11321] 
[0.x.11322] 
[0.x.11323] 
[0.x.11324] 
[0.x.11325] 
//
[0.x.11326] 
//
[0.x.11327] 
//
[0.x.11328] 
//
[0.x.11329] 
[0.x.11330] 
[0.x.11331] 
//[2.x.1712] 
//
// 我们继续使用[2.x.1713]函数来实现DG离散化。这个函数与[2.x.1715]中的[2.x.1714]函数的作用相同（但没有MeshWorker）。 一个单元的邻居关系所考虑的四种情况与各向同性的情况相同，即a)单元在边界上，b)有更细的邻居单元，c)邻居既不粗也不细，d)邻居更粗。 然而，我们决定哪种情况的方式是按照介绍中描述的方式进行修改的。
//
[0.x.11332] 
[0.x.11333] 
[0.x.11334] 
[0.x.11335] 
[0.x.11336] 
[0.x.11337] 
//
[0.x.11338] 
[0.x.11339] 
[0.x.11340] 
//
[0.x.11341] 
[0.x.11342] 
[0.x.11343] 
//
[0.x.11344] 
//
[0.x.11345] 
[0.x.11346] 
[0.x.11347] 
[0.x.11348] 
[0.x.11349] 
[0.x.11350] 
[0.x.11351] 
[0.x.11352] 
[0.x.11353] 
[0.x.11354] 
[0.x.11355] 
[0.x.11356] 
[0.x.11357] 
//
[0.x.11358] 
[0.x.11359] 
//
[0.x.11360] 
[0.x.11361] 
//
[0.x.11362] 
//
[0.x.11363] 
[0.x.11364] 
[0.x.11365] 
[0.x.11366] 
//
[0.x.11367] 
//
[0.x.11368] 
//
[0.x.11369] 
//
[0.x.11370] 
[0.x.11371] 
[0.x.11372] 
//
// 情况(a)。该面在边界上。
//
[0.x.11373] 
[0.x.11374] 
[0.x.11375] 
//
[0.x.11376] 
[0.x.11377] 
[0.x.11378] 
[0.x.11379] 
[0.x.11380] 
[0.x.11381] 
[0.x.11382] 
//
// 情况(b)。这是一个内部面，邻居是精炼的（我们可以通过询问当前单元格的面是否有孩子来测试）。在这种情况下，我们需要对 "子面 "进行整合，即当前单元格的面的子女。            (有一个稍微令人困惑的角落案例。如果我们是在1d中--诚然，当前的程序和它对各向异性细化的演示并不特别相关--那么单元间的面总是相同的：它们只是顶点。换句话说，在1d中，我们不希望对不同层次的单元之间的面进行不同的处理。我们在这里检查的条件`face->has_children()`确保了这一点：在1d中，这个函数总是返回`false`，因此在1d中我们不会进入这个`if`分支。但我们将不得不在下面的情况（c）中回到这个角落。
//
[0.x.11383] 
[0.x.11384] 
//
// 我们需要知道，哪个邻居的面朝向我们单元格的方向。使用 [2.x.1716] neighbor_face_no 函数，我们可以得到粗邻和非粗邻的这些信息。
//
[0.x.11385] 
[0.x.11386] 
//
// 现在我们对所有的子脸进行循环，也就是当前脸的子脸和可能的孙子脸。
//
[0.x.11387] 
[0.x.11388] 
[0.x.11389] 
[0.x.11390] 
//
// 为了得到当前子面后面的单元，我们可以使用[2.x.1717]函数。它照顾到了所有各向异性细化和非标准面的复杂情况。
//
[0.x.11391] 
[0.x.11392] 
[0.x.11393] 
[0.x.11394] 
//
// 这个案例的其余部分没有变化。
//
[0.x.11395] 
[0.x.11396] 
[0.x.11397] 
//
[0.x.11398] 
[0.x.11399] 
//
[0.x.11400] 
[0.x.11401] 
[0.x.11402] 
[0.x.11403] 
[0.x.11404] 
[0.x.11405] 
//
[0.x.11406] 
//
[0.x.11407] 
[0.x.11408] 
[0.x.11409] 
[0.x.11410] 
[0.x.11411] 
[0.x.11412] 
[0.x.11413] 
[0.x.11414] 
[0.x.11415] 
[0.x.11416] 
[0.x.11417] 
[0.x.11418] 
[0.x.11419] 
[0.x.11420] 
[0.x.11421] 
[0.x.11422] 
[0.x.11423] 
//
//情况(c)。如果这是一个内部面，并且邻居没有进一步细化，我们就会得到这里（或者，如上所述，我们是在1d中，在这种情况下，我们对每个内部面都会得到这里）。然后我们需要决定是否要对当前面进行整合。如果邻居实际上更粗，那么我们就忽略这个面，而是在访问邻居单元并查看当前面的时候处理它（除了在1d中，如上所述，这不会发生）。
//
[0.x.11424] 
[0.x.11425] 
//
// 另一方面，如果邻居是更精细的，那么我们已经处理了上面(b)情况下的脸（1d除外）。所以对于2d和3d，我们只需要决定是要处理来自当前一侧的同一层次的单元格之间的面，还是来自邻接一侧的面。 我们通过引入一个平局来做到这一点。          我们只取索引较小的单元格（在当前细化级别内）。在1d中，我们取较粗的单元，或者如果它们在同一层次，则取该层次中指数较小的单元。这就导致了一个复杂的条件，希望在上面的描述中可以理解。
//
[0.x.11426] 
[0.x.11427] 
[0.x.11428] 
[0.x.11429] 
[0.x.11430] 
//
// 这里我们知道，邻居不是更粗的，所以我们可以使用通常的 [2.x.1718] 函数。然而，我们也可以使用更通用的[2.x.1719]函数。
//
[0.x.11431] 
[0.x.11432] 
//
[0.x.11433] 
[0.x.11434] 
[0.x.11435] 
//
[0.x.11436] 
[0.x.11437] 
//
[0.x.11438] 
[0.x.11439] 
[0.x.11440] 
[0.x.11441] 
[0.x.11442] 
[0.x.11443] 
//
[0.x.11444] 
//
[0.x.11445] 
[0.x.11446] 
[0.x.11447] 
[0.x.11448] 
[0.x.11449] 
[0.x.11450] 
[0.x.11451] 
[0.x.11452] 
[0.x.11453] 
[0.x.11454] 
[0.x.11455] 
[0.x.11456] 
[0.x.11457] 
[0.x.11458] 
//
// 我们不需要考虑情况(d)，因为这些面在情况(b)中被 "从另一侧 "处理。
//
[0.x.11459] 
[0.x.11460] 
[0.x.11461] 
//
[0.x.11462] 
[0.x.11463] 
[0.x.11464] 
//
[0.x.11465] 
[0.x.11466] 
[0.x.11467] 
[0.x.11468] 
//[2.x.1720] 
//
// 对于这个简单的问题，我们再次使用简单的Richardson迭代法。该求解器完全不受我们各向异性变化的影响。
//
[0.x.11469] 
[0.x.11470] 
[0.x.11471] 
[0.x.11472] 
[0.x.11473] 
//
[0.x.11474] 
//
[0.x.11475] 
//
[0.x.11476] 
[0.x.11477] 
//[2.x.1721] 
//
// 我们根据[2.x.1722]中使用的相同的简单细化标准来细化网格，即对解的梯度的近似。
//
[0.x.11478] 
[0.x.11479] 
[0.x.11480] 
[0.x.11481] 
//
// 我们对梯度进行近似计算。
//
[0.x.11482] 
[0.x.11483] 
[0.x.11484] 
[0.x.11485] 
//
//并对其进行缩放，以获得一个误差指标。
//
[0.x.11486] 
[0.x.11487] 
[0.x.11488] 
//
// 然后我们用这个指标来标记误差指标最高的30%的单元格来进行精炼。
//
[0.x.11489] 
[0.x.11490] 
[0.x.11491] 
[0.x.11492] 
//
// 现在，细化标志被设置为那些具有大误差指标的单元。如果不做任何改变，这些单元将被等向细化。如果给这个函数的[2.x.1723]标志被设置，我们现在调用set_anisotropic_flags()函数，该函数使用跳转指标将一些细化标志重置为各向异性细化。
//
[0.x.11493] 
[0.x.11494] 
//
// 现在执行考虑各向异性以及各向同性的细化标志的细化。
//
[0.x.11495] 
[0.x.11496] 
//
// 一旦错误指标被评估，误差最大的单元被标记为细化，我们要再次循环这些被标记的单元，以决定它们是否需要各向同性的细化或各向异性的细化更为合适。这就是在介绍中解释的各向异性跳跃指标。
//
[0.x.11497] 
[0.x.11498] 
[0.x.11499] 
//
// 我们想在被标记的单元格的面上评估跳跃，所以我们需要一些对象来评估面上的解决方案的值。
//
[0.x.11500] 
[0.x.11501] 
//
[0.x.11502] 
[0.x.11503] 
[0.x.11504] 
[0.x.11505] 
[0.x.11506] 
[0.x.11507] 
[0.x.11508] 
[0.x.11509] 
[0.x.11510] 
[0.x.11511] 
[0.x.11512] 
[0.x.11513] 
//
// 现在我们需要对所有活动单元进行循环。
//
[0.x.11514] 
//
// 我们只需要考虑那些被标记为细化的单元。
//
[0.x.11515] 
[0.x.11516] 
[0.x.11517] 
[0.x.11518] 
//
[0.x.11519] 
[0.x.11520] 
[0.x.11521] 
//
[0.x.11522] 
[0.x.11523] 
[0.x.11524] 
[0.x.11525] 
[0.x.11526] 
[0.x.11527] 
//
[0.x.11528] 
[0.x.11529] 
//
// 在汇编例程中看到的四种不同的邻居关系的情况在这里以同样的方式重复。
//
[0.x.11530] 
[0.x.11531] 
//
// 邻居被完善。 首先，我们存储信息，即邻居的哪个面指向我们当前单元的方向。这个属性将被继承给子代。
//
[0.x.11532] 
//
// 现在我们对所有的子面进行循环。
//
[0.x.11533] 
[0.x.11534] 
[0.x.11535] 
[0.x.11536] 
//
//得到一个迭代器，指向当前子面后面的单元格...
//
[0.x.11537] 
[0.x.11538] 
[0.x.11539] 
[0.x.11540] 
[0.x.11541] 
//
// ...并重新启动各自的FEFaceValues和FESSubFaceValues对象。
//
[0.x.11542] 
[0.x.11543] 
//
// 我们获得了函数值
//
[0.x.11544] 
[0.x.11545] 
[0.x.11546] 
//
//以及正交权重，乘以雅各布行列式。
//
[0.x.11547] 
[0.x.11548] 
//
// 现在我们在所有的正交点上循环。
//
[0.x.11549] 
[0.x.11550] 
[0.x.11551] 
[0.x.11552] 
//
//并整合解决方案的跳跃的绝对值，即分别从当前单元和邻近单元看到的函数值的绝对值。我们知道，前两个面与单元格上的第一个坐标方向正交，后两个面与第二个坐标方向正交，以此类推，所以我们将这些值累积成具有[2.x.1724]成分的向量。
//
[0.x.11553] 
[0.x.11554] 
//
// 我们还将缩放后的权重相加，以获得脸部的量度。
//
[0.x.11555] 
[0.x.11556] 
[0.x.11557] 
[0.x.11558] 
[0.x.11559] 
[0.x.11560] 
[0.x.11561] 
[0.x.11562] 
//
// 我们的当前单元和邻居在所考虑的面有相同的细化。除此以外，我们的做法与上述情况下的一个子单元的做法基本相同。
//
[0.x.11563] 
[0.x.11564] 
//
[0.x.11565] 
[0.x.11566] 
//
[0.x.11567] 
[0.x.11568] 
[0.x.11569] 
//
[0.x.11570] 
[0.x.11571] 
//
[0.x.11572] 
[0.x.11573] 
[0.x.11574] 
[0.x.11575] 
[0.x.11576] 
[0.x.11577] 
[0.x.11578] 
[0.x.11579] 
[0.x.11580] 
[0.x.11581] 
[0.x.11582] 
//
// 现在邻居实际上更粗了。这种情况是新的，因为它没有出现在汇编程序中。在这里，我们必须考虑它，但这并不太复杂。我们只需使用 [2.x.1725] neighbor_of_coarser_neighbor 函数，它再次自行处理各向异性的细化和非标准面的方向。
//
[0.x.11583] 
[0.x.11584] 
[0.x.11585] 
[0.x.11586] 
[0.x.11587] 
[0.x.11588] 
[0.x.11589] 
[0.x.11590] 
[0.x.11591] 
[0.x.11592] 
[0.x.11593] 
[0.x.11594] 
[0.x.11595] 
//
[0.x.11596] 
[0.x.11597] 
[0.x.11598] 
[0.x.11599] 
//
[0.x.11600] 
[0.x.11601] 
[0.x.11602] 
//
[0.x.11603] 
[0.x.11604] 
//
[0.x.11605] 
[0.x.11606] 
[0.x.11607] 
[0.x.11608] 
[0.x.11609] 
[0.x.11610] 
[0.x.11611] 
[0.x.11612] 
[0.x.11613] 
[0.x.11614] 
[0.x.11615] 
[0.x.11616] 
//
// 现在我们分析一下平均跳动的大小，我们用跳动除以各面的度量得到。
//
[0.x.11617] 
[0.x.11618] 
[0.x.11619] 
[0.x.11620] 
[0.x.11621] 
[0.x.11622] 
[0.x.11623] 
//
// 现在我们在单元格的[2.x.1726]坐标方向上进行循环，并比较与该方向正交的面的平均跳跃和与其余方向正交的面的平均跳跃。如果前者比后者大一个给定的系数，我们只沿帽轴进行细化。否则，我们不改变细化标志，导致各向同性的细化。
//
[0.x.11624] 
[0.x.11625] 
[0.x.11626] 
[0.x.11627] 
[0.x.11628] 
[0.x.11629] 
//[2.x.1727] 
//
// 程序的其余部分非常遵循之前教程程序的方案。我们以VTU格式输出网格（就像我们在[2.x.1728]中所做的那样，例如），并以VTU格式输出可视化，我们几乎总是这样做。
//
[0.x.11630] 
[0.x.11631] 
[0.x.11632] 
[0.x.11633] 
[0.x.11634] 
[0.x.11635] 
[0.x.11636] 
[0.x.11637] 
//
[0.x.11638] 
[0.x.11639] 
[0.x.11640] 
[0.x.11641] 
[0.x.11642] 
//
[0.x.11643] 
[0.x.11644] 
[0.x.11645] 
//
[0.x.11646] 
[0.x.11647] 
[0.x.11648] 
[0.x.11649] 
[0.x.11650] 
[0.x.11651] 
//
[0.x.11652] 
[0.x.11653] 
[0.x.11654] 
//
[0.x.11655] 
//
[0.x.11656] 
[0.x.11657] 
[0.x.11658] 
//
[0.x.11659] 
[0.x.11660] 
[0.x.11661] 
[0.x.11662] 
[0.x.11663] 
[0.x.11664] 
//
[0.x.11665] 
[0.x.11666] 
//
// 创建矩形域。
//
[0.x.11667] 
[0.x.11668] 
[0.x.11669] 
[0.x.11670] 
[0.x.11671] 
//
// 调整不同方向的单元数，以获得原始网格的完全各向同性的单元。
//
[0.x.11672] 
[0.x.11673] 
[0.x.11674] 
[0.x.11675] 
[0.x.11676] 
[0.x.11677] 
//
[0.x.11678] 
[0.x.11679] 
[0.x.11680] 
[0.x.11681] 
//
[0.x.11682] 
[0.x.11683] 
//
[0.x.11684] 
//
[0.x.11685] 
[0.x.11686] 
//
[0.x.11687] 
[0.x.11688] 
[0.x.11689] 
[0.x.11690] 
[0.x.11691] 
//
[0.x.11692] 
//
[0.x.11693] 
[0.x.11694] 
[0.x.11695] 
[0.x.11696] 
//
[0.x.11697] 
[0.x.11698] 
[0.x.11699] 
[0.x.11700] 
[0.x.11701] 
//
// 如果你想以3D方式运行程序，只需将下面一行改为[2.x.1729] 。
//
[0.x.11702] 
//
[0.x.11703] 
//
// 首先，我们用各向同性的细化方法进行一次运行。
//
[0.x.11704] 
[0.x.11705] 
[0.x.11706] 
[0.x.11707] 
[0.x.11708] 
[0.x.11709] 
[0.x.11710] 
//
[0.x.11711] 
//
// 现在我们进行第二次运行，这次是各向异性的细化。
//
[0.x.11712] 
[0.x.11713] 
[0.x.11714] 
[0.x.11715] 
[0.x.11716] 
[0.x.11717] 
[0.x.11718] 
[0.x.11719] 
[0.x.11720] 
[0.x.11721] 
[0.x.11722] 
[0.x.11723] 
[0.x.11724] 
[0.x.11725] 
[0.x.11726] 
[0.x.11727] 
[0.x.11728] 
[0.x.11729] 
[0.x.11730] 
[0.x.11731] 
[0.x.11732] 
[0.x.11733] 
[0.x.11734] 
[0.x.11735] 
[0.x.11736] 
[0.x.11737] 
[0.x.11738] 
[0.x.11739] 
[0.x.11740] 
[0.x.11741] 
[0.x.11742] 
[0.x.11743] 
[0.x.11744] 
[0.x.11745] 
//
[0.x.11746] 
[0.x.11747] 
[0.x.11748] 
[0.x.11749] 
[0.x.11750] 
[0.x.11751] 
[0.x.11752] 
[0.x.11753] 
[0.x.11754] 
[0.x.11755] 
[0.x.11756] 
[0.x.11757] 
[0.x.11758] 
[0.x.11759] 
[0.x.11760] 
[0.x.11761] 
[0.x.11762] 
[0.x.11763] 
[0.x.11764] 
[0.x.11765] 
//[2.x.1730] 
//
// 像往常一样，第一步是包括这些著名的deal.II库文件和一些C++头文件的功能。
//
[0.x.11766] 
[0.x.11767] 
[0.x.11768] 
//
[0.x.11769] 
[0.x.11770] 
[0.x.11771] 
[0.x.11772] 
[0.x.11773] 
//
[0.x.11774] 
[0.x.11775] 
[0.x.11776] 
[0.x.11777] 
//
[0.x.11778] 
[0.x.11779] 
[0.x.11780] 
//
[0.x.11781] 
[0.x.11782] 
[0.x.11783] 
//
[0.x.11784] 
[0.x.11785] 
[0.x.11786] 
[0.x.11787] 
//
// 然后我们需要包括一些头文件，这些文件提供了矢量、矩阵和预处理类，这些类实现了各自Trilinos类的接口。特别是，我们将需要基于Trilinos的矩阵和向量类以及Trilinos预处理程序的接口。
//
[0.x.11788] 
[0.x.11789] 
[0.x.11790] 
[0.x.11791] 
[0.x.11792] 
[0.x.11793] 
//
// 最后，这里有几个C++头文件还没有被上述头文件中的某个文件所包含。
//
[0.x.11794] 
[0.x.11795] 
[0.x.11796] 
[0.x.11797] 
//
// 在这个顶层事项的最后，我们将所有deal.II的名字导入到全局命名空间。
//
[0.x.11798] 
[0.x.11799] 
[0.x.11800] 
//[2.x.1731] 
//
// 同样，程序的下一阶段是定义方程数据，即各种边界条件、右手边和初始条件（记住，我们要解决的是一个时间依赖型系统）。这个定义的基本策略与 [2.x.1732] 中的相同。不过关于细节，还是有一些区别。
//
// 首先，我们没有在速度上设置任何不均匀的边界条件，因为正如介绍中所解释的，我们将使用无流条件 [2.x.1733] 。所以剩下的是应力张量法线分量的切向部分的条件[2.x.1734]，[2.x.1735]；我们假定这些分量的值是同质的，也就是说，一个自然的边界条件，不需要具体的动作（它作为零项出现在弱形式的右边）。
//
// 对于温度 [2.x.1736] ，我们假设没有热能通量，即 [2.x.1737] 。这也是一个边界条件，不需要我们做任何特别的事情。
//
// 第二，我们必须设定温度的初始条件（速度和压力不需要初始条件，因为我们在这里考虑的准稳态情况下的斯托克斯方程没有速度或压力的时间导数）。在这里，我们选择一个非常简单的测试案例，即初始温度为零，所有的动力学都由温度的右手边驱动。
//
// 第三，我们需要定义温度方程的右边。我们选择它在域的底部某处的三个圆（或三维球）内为常数，如介绍中所解释的那样，而在域外为零。
//
// 最后，或者说首先，在这个命名空间的顶部，我们定义我们需要的各种材料常数（[2.x.1738]，密度[2.x.1739]和热膨胀系数[2.x.1740]）。
//
[0.x.11801] 
[0.x.11802] 
[0.x.11803] 
[0.x.11804] 
[0.x.11805] 
[0.x.11806] 
//
[0.x.11807] 
[0.x.11808] 
[0.x.11809] 
[0.x.11810] 
[0.x.11811] 
[0.x.11812] 
[0.x.11813] 
//
[0.x.11814] 
[0.x.11815] 
[0.x.11816] 
[0.x.11817] 
[0.x.11818] 
//
[0.x.11819] 
[0.x.11820] 
[0.x.11821] 
[0.x.11822] 
[0.x.11823] 
[0.x.11824] 
[0.x.11825] 
//
[0.x.11826] 
[0.x.11827] 
[0.x.11828] 
[0.x.11829] 
[0.x.11830] 
[0.x.11831] 
[0.x.11832] 
//
[0.x.11833] 
[0.x.11834] 
[0.x.11835] 
[0.x.11836] 
[0.x.11837] 
[0.x.11838] 
//
[0.x.11839] 
//
[0.x.11840] 
[0.x.11841] 
[0.x.11842] 
[0.x.11843] 
[0.x.11844] 
//
[0.x.11845] 
[0.x.11846] 
[0.x.11847] 
[0.x.11848] 
[0.x.11849] 
[0.x.11850] 
//
[0.x.11851] 
[0.x.11852] 
[0.x.11853] 
[0.x.11854] 
[0.x.11855] 
[0.x.11856] 
[0.x.11857] 
[0.x.11858] 
//
// [2.x.1741] 
//
// 本节介绍了一些用于求解斯托克斯系统线性方程的对象，我们需要在每个时间步长中求解。这里使用的许多想法与[2.x.1742]相同，其中介绍了基于Schur补的预处理程序和求解器，实际接口来自[2.x.1743]（特别是[2.x.1744]中 "结果 "部分的讨论，其中我们介绍了直接Schur补方法的替代品）。但是请注意，在这里我们不使用Schur补数来解决Stokes方程，尽管预处理程序中出现了一个近似的Schur补数（压力空间的质量矩阵）。
//
[0.x.11859] 
[0.x.11860] 
//[2.x.1745] 
//
// 这个类是一个接口，用于计算 "倒置 "矩阵对向量的作用（使用[2.x.1746]操作），其方式与[2.x.1747]中的相应类相同：当请求这个类的对象的乘积时，我们使用CG方法解决与该矩阵有关的线性方程组，通过（模板化）[2.x.1748]类的预处理器加速。
//
// 与[2.x.1749]中同一类别的实现略有不同，我们让[2.x.1750]函数接受任何类型的向量类型（但是，如果矩阵不允许与这种向量进行矩阵-向量乘积，它将产生编译器错误）。
//
// 第二，我们捕捉解算器可能抛出的任何异常。原因如下。在调试这样的程序时，偶尔会犯一个错误，即把一个不确定或不对称的矩阵或预处理程序传递给当前的类。在这种情况下，求解器将不能收敛并抛出一个运行时异常。如果在这里没有被捕捉到，它就会在调用堆栈中传播，最后可能会在[2.x.1751]中出现，在那里我们会输出一个错误信息，说CG求解器失败。那么问题来了。哪个CG求解器？倒置质量矩阵的那个？用拉普拉斯算子反转左上角块的那个？还是在当前代码中我们使用线性求解器的其他几个嵌套位置中的一个CG求解器？在运行时异常中没有这方面的指示，因为它没有存储我们到达产生异常的地方的调用栈。
//
所以//与其让异常自由传播到[2.x.1752]，不如意识到如果内部求解器失败，外部函数能做的很少，不如将运行时异常转化为一个断言，该断言失败后会触发对[2.x.1753]的调用，允许我们在调试器中追溯我们如何到达当前位置。
//
[0.x.11861] 
[0.x.11862] 
[0.x.11863] 
[0.x.11864] 
[0.x.11865] 
[0.x.11866] 
//
[0.x.11867] 
[0.x.11868] 
//
[0.x.11869] 
[0.x.11870] 
[0.x.11871] 
[0.x.11872] 
//
[0.x.11873] 
[0.x.11874] 
[0.x.11875] 
[0.x.11876] 
[0.x.11877] 
[0.x.11878] 
[0.x.11879] 
//
[0.x.11880] 
[0.x.11881] 
[0.x.11882] 
[0.x.11883] 
[0.x.11884] 
[0.x.11885] 
[0.x.11886] 
[0.x.11887] 
//
[0.x.11888] 
//
[0.x.11889] 
[0.x.11890] 
[0.x.11891] 
[0.x.11892] 
[0.x.11893] 
[0.x.11894] 
[0.x.11895] 
[0.x.11896] 
[0.x.11897] 
//[2.x.1754] 
//
// 这是在介绍中详细描述的舒尔补码预处理程序的实现。与[2.x.1755]和[2.x.1756]相反，我们使用GMRES一次性解决块系统，并使用块结构矩阵的Schur补码来建立一个良好的预处理程序。
//
// 让我们看看介绍中描述的理想预处理矩阵 [2.x.1757] 。如果我们在线性系统的求解中应用这个矩阵，迭代式GMRES求解器的收敛性将受矩阵[1.x.52]的制约，这确实非常简单。基于精确矩阵的GMRES求解器将在一次迭代中收敛，因为所有的特征值都是相等的（任何Krylov方法最多需要多少次迭代就有多少个不同的特征值）。Silvester和Wathen提出了这样一个用于受阻斯托克斯系统的预处理程序（"稳定的斯托克斯系统的快速迭代解第二部分。 Using general block preconditioners", SIAM J. Numer. Anal., 31 (1994), pp.1352-1367）。)
//
//用[2.x.1759]代替[2.x.1758]可以保持这种精神：乘积[2.x.1760]仍将接近于特征值为1的矩阵，其分布不取决于问题大小。这让我们希望能够得到一个与问题规模无关的GMRES迭代次数。
//
// 已经通过[2.x.1761]和[2.x.1762]教程的deal.II用户当然可以想象我们将如何实现这一点。 我们用一些由InverseMatrix类构建的近似逆矩阵取代[2.x.1763]中的精确逆矩阵，逆舒尔补码将由压力质量矩阵[2.x.1764]近似（如介绍中提到的由[2.x.1765]加权）。正如在[2.x.1766]的结果部分所指出的，我们可以通过应用一个预处理程序来取代[2.x.1767]的精确逆，在这种情况下，如介绍中所解释的那样，在一个矢量拉普拉斯矩阵上。这确实增加了（外部）GMRES的迭代次数，但仍然比精确的逆运算便宜得多，因为[2.x.1768]的每个[2.x.1769]外部求解器步骤（使用AMG预处理程序）需要20到35次CG迭代。
//
// 考虑到上述解释，我们定义了一个具有[2.x.1770]功能的预处理类，这就是我们在程序代码中进一步与通常的求解器函数交互所需要的。
//
// 首先是声明。这与[2.x.1771]中Schur补码的定义相似，不同的是我们在构造函数中需要更多的预处理程序，而且我们在这里使用的矩阵是建立在Trilinos之上的。
//
[0.x.11898] 
[0.x.11899] 
[0.x.11900] 
[0.x.11901] 
[0.x.11902] 
[0.x.11903] 
[0.x.11904] 
[0.x.11905] 
[0.x.11906] 
//
[0.x.11907] 
[0.x.11908] 
//
[0.x.11909] 
[0.x.11910] 
[0.x.11911] 
[0.x.11912] 
[0.x.11913] 
[0.x.11914] 
[0.x.11915] 
//
[0.x.11916] 
[0.x.11917] 
//
// 当使用[2.x.1772]或[2.x.1773]时，Vector被使用IndexSet初始化。IndexSet不仅用于调整[2.x.1774]的大小，而且还将[2.x.1775]中的一个索引与一个自由度联系起来（更详细的解释见[2.x.1776]）。函数complete_index_set()创建了一个IndexSet，每个有效的索引都是这个集合的一部分。请注意，这个程序只能按顺序运行，如果并行使用，将抛出一个异常。
//
[0.x.11918] 
[0.x.11919] 
[0.x.11920] 
[0.x.11921] 
[0.x.11922] 
[0.x.11923] 
[0.x.11924] 
[0.x.11925] 
[0.x.11926] 
[0.x.11927] 
[0.x.11928] 
[0.x.11929] 
//
// 接下来是[2.x.1777]函数。我们以三个连续的步骤实现上述[2.x.1778]的动作。 在公式中，我们要计算[2.x.1779]，其中[2.x.1780]都是有两个块成分的向量。
//
// 第一步用矩阵[2.x.1781]的预处理乘以矢量的速度部分，即计算[2.x.1782] 。 然后将得到的速度矢量乘以[2.x.1783]并减去压力，即我们要计算[2.x.1784] 。这第二步只作用于压力向量，由我们矩阵类的残差函数完成，只是符号不对。因此，我们改变临时压力向量中的符号，最后乘以反压力质量矩阵，得到最终的压力向量，完成我们对斯托克斯预处理的工作。
//
[0.x.11930] 
[0.x.11931] 
[0.x.11932] 
[0.x.11933] 
[0.x.11934] 
[0.x.11935] 
[0.x.11936] 
[0.x.11937] 
[0.x.11938] 
[0.x.11939] 
[0.x.11940] 
[0.x.11941] 
//
// [2.x.1785] 
//
// 定义了解决随时间变化的Boussinesq问题的顶层逻辑的类的定义主要是基于[2.x.1786]的教程程序。主要的区别在于，现在我们还必须求解温度方程，这迫使我们为温度变量准备第二个DoFHandler对象，以及当前和之前的时间步骤的矩阵、右手边和求解向量。正如介绍中提到的，所有的线性代数对象都将使用相应的Trilinos功能的包装器。
//
// 这个类的成员函数让人想起[2.x.1787]，在那里我们也使用了一个交错的方案，首先解决流动方程（这里是斯托克斯方程，[2.x.1788]是达西流），然后更新平流量（这里是温度，那里是饱和度）。新的函数主要涉及到确定时间步长，以及人工粘性稳定的适当大小。
//
// 最后三个变量表示在下次调用相应的建立函数时，是否需要重建各种矩阵或预处理程序。这使得我们可以将相应的[2.x.1789]移到相应的函数中，从而使我们的主[2.x.1790]函数保持干净，易于阅读。
//
[0.x.11942] 
[0.x.11943] 
[0.x.11944] 
[0.x.11945] 
[0.x.11946] 
[0.x.11947] 
//
[0.x.11948] 
[0.x.11949] 
[0.x.11950] 
[0.x.11951] 
[0.x.11952] 
[0.x.11953] 
[0.x.11954] 
[0.x.11955] 
[0.x.11956] 
[0.x.11957] 
[0.x.11958] 
[0.x.11959] 
//
[0.x.11960] 
[0.x.11961] 
[0.x.11962] 
[0.x.11963] 
[0.x.11964] 
[0.x.11965] 
[0.x.11966] 
[0.x.11967] 
[0.x.11968] 
[0.x.11969] 
[0.x.11970] 
[0.x.11971] 
[0.x.11972] 
//
[0.x.11973] 
[0.x.11974] 
//
[0.x.11975] 
[0.x.11976] 
[0.x.11977] 
[0.x.11978] 
//
[0.x.11979] 
[0.x.11980] 
[0.x.11981] 
//
[0.x.11982] 
[0.x.11983] 
[0.x.11984] 
//
[0.x.11985] 
[0.x.11986] 
[0.x.11987] 
[0.x.11988] 
//
[0.x.11989] 
[0.x.11990] 
[0.x.11991] 
//
[0.x.11992] 
[0.x.11993] 
[0.x.11994] 
[0.x.11995] 
//
[0.x.11996] 
[0.x.11997] 
[0.x.11998] 
//
[0.x.11999] 
[0.x.12000] 
//
[0.x.12001] 
[0.x.12002] 
[0.x.12003] 
[0.x.12004] 
//[2.x.1791] 
//[2.x.1792] 
//
// 这个类的构造函数是对 [2.x.1793] 中的构造函数的扩展。我们需要添加涉及温度的各种变量。正如介绍中所讨论的，我们将再次使用[2.x.1794]（Taylor-Hood）元素来表示斯托克斯部分，并使用[2.x.1795]元素表示温度。然而，通过使用存储斯托克斯和温度有限元的多项式程度的变量，可以很容易地持续修改这些元素的程度以及下游使用的所有正交公式。此外，我们还初始化了时间步长以及矩阵组合和预处理的选项。
//
[0.x.12005] 
[0.x.12006] 
[0.x.12007] 
[0.x.12008] 
[0.x.12009] 
[0.x.12010] 
[0.x.12011] 
[0.x.12012] 
//
[0.x.12013] 
[0.x.12014] 
[0.x.12015] 
[0.x.12016] 
//
[0.x.12017] 
[0.x.12018] 
[0.x.12019] 
[0.x.12020] 
[0.x.12021] 
[0.x.12022] 
[0.x.12023] 
//
// [2.x.1796] 
//
// 开始这个类的真正功能是一个辅助函数，确定域内（事实上是正交点）的最大（[2.x.1797] ）速度。它是如何工作的，对所有已经达到本教程这一点的人来说应该是比较明显的。请注意，由于我们只对速度感兴趣，我们不使用[2.x.1798]来获取整个斯托克斯解的值（速度和压力），而是使用[2.x.1799]来提取速度部分。这样做的额外好处是，我们得到的是张量<1,dim>，而不是向量<double>中的一些分量，这样我们就可以马上用[2.x.1800]函数来处理它，得到速度的大小。
//
// 唯一值得思考的一点是如何选择我们在这里使用的正交点。由于这个函数的目标是通过查看每个单元格上的正交点来寻找域内的最大速度。所以我们应该问，我们应该如何最好地选择每个单元上的这些正交点。为此，回顾一下，如果我们有一个单一的[2.x.1801]场（而不是高阶的矢量值场），那么最大值将在网格的一个顶点达到。换句话说，我们应该使用QTrapezoid类，它的正交点只在单元的顶点。
//
// 对于高阶形状函数，情况更为复杂：最大值和最小值可能在形状函数的支持点之间达到（对于通常的[2.x.1802]元素，支持点是等距的Lagrange插值点）；此外，由于我们正在寻找一个矢量值的最大幅值，我们更不能肯定地说潜在的最大点集合在哪里。然而，从直觉上讲，即使不能证明，拉格朗日插值点似乎也是比高斯点更好的选择。
//
// 现在有不同的方法来产生一个正交公式，其正交点等于有限元的插值点。一种选择是使用[2.x.1803]函数，将输出减少到一组唯一的点以避免重复的函数评估，并使用这些点创建一个正交对象。另一个选择，这里选择的是使用QTrapezoid类，并将其与QIterated类相结合，该类在每个坐标方向的若干子单元上重复QTrapezoid公式。为了覆盖所有的支持点，我们需要对其进行[2.x.1804]次迭代，因为这是使用中的斯托克斯元素的多项式程度。
//
[0.x.12024] 
[0.x.12025] 
[0.x.12026] 
[0.x.12027] 
[0.x.12028] 
//
[0.x.12029] 
[0.x.12030] 
[0.x.12031] 
//
[0.x.12032] 
//
[0.x.12033] 
[0.x.12034] 
[0.x.12035] 
[0.x.12036] 
[0.x.12037] 
//
[0.x.12038] 
[0.x.12039] 
[0.x.12040] 
//
[0.x.12041] 
[0.x.12042] 
//
// [2.x.1805] 
//
// 接下来是一个函数，确定从前两个时间步长推算到当前步长时，[2.x.1806]内正交点的最低和最高温度。我们在计算人工粘性参数[2.x.1807]时需要这个信息，正如在介绍中所讨论的那样。
//
// 外推温度的公式是 [2.x.1808] 。计算的方法是在所有正交点上循环，如果当前值比前一个值大/小，则更新最大和最小值。在对所有正交点进行循环之前，我们将存储最大和最小值的变量初始化为可表示为双数的最小和最大的数字。这样我们就知道它比最小/最大值大/小，并且所有正交点的循环最终会用正确的值来更新初始值。
//
// 这里唯一值得一提的复杂情况是，在第一个时间步骤中，[2.x.1809]当然还不能使用。在这种情况下，我们只能使用[2.x.1810]，这是我们从初始温度得到的。作为正交点，我们使用与前一个函数相同的选择，但不同的是，现在重复的数量由温度场的多项式程度决定。
//
[0.x.12043] 
[0.x.12044] 
[0.x.12045] 
[0.x.12046] 
[0.x.12047] 
[0.x.12048] 
[0.x.12049] 
//
[0.x.12050] 
[0.x.12051] 
[0.x.12052] 
//
[0.x.12053] 
[0.x.12054] 
[0.x.12055] 
[0.x.12056] 
//
[0.x.12057] 
[0.x.12058] 
[0.x.12059] 
[0.x.12060] 
[0.x.12061] 
[0.x.12062] 
[0.x.12063] 
//
[0.x.12064] 
[0.x.12065] 
[0.x.12066] 
[0.x.12067] 
[0.x.12068] 
//
[0.x.12069] 
[0.x.12070] 
[0.x.12071] 
[0.x.12072] 
//
[0.x.12073] 
[0.x.12074] 
[0.x.12075] 
[0.x.12076] 
[0.x.12077] 
[0.x.12078] 
//
[0.x.12079] 
[0.x.12080] 
[0.x.12081] 
[0.x.12082] 
[0.x.12083] 
//
[0.x.12084] 
[0.x.12085] 
[0.x.12086] 
//
[0.x.12087] 
[0.x.12088] 
[0.x.12089] 
[0.x.12090] 
//
[0.x.12091] 
[0.x.12092] 
[0.x.12093] 
//
// [2.x.1811] 
//
// 最后一个工具函数计算单元[2.x.1812]上的人工粘度参数[2.x.1813]，作为外推温度、其梯度和Hessian（二阶导数）、速度、当前单元正交点上的所有右手[2.x.1814]和其他各种参数的函数，在介绍中已详细说明。
//
// 这里有一些值得一提的通用常数。首先，我们需要固定[2.x.1815]；我们选择[2.x.1816]，这个选择在本教程程序的结果部分有详细讨论。其次是指数[2.x.1817]；[2.x.1818]对于目前的程序似乎很好用，尽管选择[2.x.1819]可能会有一些额外的好处。最后，有一件事需要特别说明。在第一个时间步骤中，速度等于零，[2.x.1820]的公式没有定义。在这种情况下，我们返回[2.x.1821]，这个选择无疑更多的是出于启发式的考虑（不过，它与第二个时间步骤中大多数单元的返回值处于同一数量级）。
//
// 根据介绍中讨论的材料，该函数的其余部分应该是显而易见的。
//
[0.x.12094] 
[0.x.12095] 
[0.x.12096] 
[0.x.12097] 
[0.x.12098] 
[0.x.12099] 
[0.x.12100] 
[0.x.12101] 
[0.x.12102] 
[0.x.12103] 
[0.x.12104] 
[0.x.12105] 
[0.x.12106] 
[0.x.12107] 
[0.x.12108] 
[0.x.12109] 
[0.x.12110] 
//
[0.x.12111] 
[0.x.12112] 
//
[0.x.12113] 
//
[0.x.12114] 
[0.x.12115] 
//
[0.x.12116] 
[0.x.12117] 
[0.x.12118] 
[0.x.12119] 
//
[0.x.12120] 
[0.x.12121] 
[0.x.12122] 
[0.x.12123] 
//
[0.x.12124] 
[0.x.12125] 
[0.x.12126] 
[0.x.12127] 
//
[0.x.12128] 
[0.x.12129] 
[0.x.12130] 
[0.x.12131] 
//
[0.x.12132] 
[0.x.12133] 
[0.x.12134] 
//
[0.x.12135] 
[0.x.12136] 
[0.x.12137] 
//
[0.x.12138] 
[0.x.12139] 
[0.x.12140] 
[0.x.12141] 
[0.x.12142] 
//
// [2.x.1822] 
//
// 这是一个函数，用于设置我们这里的DoFHandler对象（一个用于斯托克斯部分，一个用于温度部分），以及将本程序中线性代数所需的各种对象设置为合适的尺寸。它的基本操作与我们在 [2.x.1823] 中的操作类似。
//
// 该函数的主体首先列举了斯托克斯和温度系统的所有自由度。对于斯托克斯部分，自由度被排序，以确保速度优先于压力自由度，这样我们就可以将斯托克斯矩阵划分为一个[2.x.1824]矩阵。作为与[2.x.1825]的区别，我们不进行任何额外的DoF重新编号。在那个程序中，它得到了回报，因为我们的求解器严重依赖ILU，而我们在这里使用AMG，它对DoF编号不敏感。用于压力质量矩阵反演的IC预处理程序当然会利用类似Cuthill-McKee的重新编号，但是与速度部分相比，其成本很低，所以额外的工作并没有得到回报。
//
// 然后，我们继续生成悬挂的节点约束，这些约束来自两个DoFHandler对象的自适应网格细化。对于速度，我们通过向已经存储了悬挂节点约束矩阵的对象添加约束来施加无流边界条件[2.x.1826]。函数中的第二个参数描述了总dof向量中的第一个速度分量，这里是零。变量[2.x.1827]表示要设置无通量边界条件的边界指标；这里是边界指标0。
//
// 做完这些后，我们计算各块中的自由度数量。
//
[0.x.12143] 
[0.x.12144] 
[0.x.12145] 
[0.x.12146] 
[0.x.12147] 
//
[0.x.12148] 
[0.x.12149] 
[0.x.12150] 
//
[0.x.12151] 
[0.x.12152] 
[0.x.12153] 
[0.x.12154] 
[0.x.12155] 
[0.x.12156] 
[0.x.12157] 
[0.x.12158] 
[0.x.12159] 
[0.x.12160] 
[0.x.12161] 
[0.x.12162] 
[0.x.12163] 
//
[0.x.12164] 
[0.x.12165] 
[0.x.12166] 
[0.x.12167] 
[0.x.12168] 
//
[0.x.12169] 
[0.x.12170] 
//
[0.x.12171] 
[0.x.12172] 
[0.x.12173] 
//
[0.x.12174] 
[0.x.12175] 
[0.x.12176] 
[0.x.12177] 
[0.x.12178] 
//
// 下一步是创建斯托克斯和温度系统矩阵的稀疏模式，以及建立斯托克斯预处理矩阵的预处理。如同在[2.x.1828]中一样，我们选择使用DynamicSparsityPattern的封锁版本来创建模式。
//
// 因此，我们首先释放存储在矩阵中的内存，然后建立一个BlockDynamicSparsityPattern类型的对象，该对象由[2.x.1829]块（用于斯托克斯系统矩阵和预处理器）或DynamicSparsityPattern（用于温度部分）组成。然后我们用非零模式填充这些对象，考虑到对于斯托克斯系统矩阵，在压力-压力块中没有条目（但所有速度矢量分量相互耦合并与压力耦合）。同样，在斯托克斯预处理矩阵中，只有对角线块是非零的，因为我们使用了介绍中讨论的矢量拉普拉斯。这个算子只把拉普拉斯的每个矢量分量与它自己联系起来，而不是与其他矢量分量联系起来。然而，应用无流量边界条件产生的约束条件将在边界处再次耦合向量分量）。
//
// 在生成稀疏模式时，我们直接应用悬挂节点和无流边界条件的约束。这种方法在[2.x.1830]中已经使用过了，但与早期教程中的方法不同，在早期教程中我们先建立原始的稀疏模式，然后才加入约束条件产生的条目。这样做的原因是，在以后的装配过程中，我们要在将本地道夫转移到全局道夫时立即分配约束。因此，在受限自由度的位置不会有数据写入，所以我们可以通过将最后一个布尔标志设置为[2.x.1832]，让[2.x.1831]函数省略这些条目。一旦稀疏性模式准备好了，我们就可以用它来初始化特里诺斯矩阵。由于Trilinos矩阵在内部存储了稀疏模式，所以在初始化矩阵之后，没有必要再保留稀疏模式。
//
[0.x.12179] 
[0.x.12180] 
[0.x.12181] 
[0.x.12182] 
[0.x.12183] 
//
[0.x.12184] 
//
[0.x.12185] 
[0.x.12186] 
[0.x.12187] 
[0.x.12188] 
//
[0.x.12189] 
//
[0.x.12190] 
//
[0.x.12191] 
[0.x.12192] 
[0.x.12193] 
[0.x.12194] 
[0.x.12195] 
[0.x.12196] 
//
[0.x.12197] 
[0.x.12198] 
//
[0.x.12199] 
[0.x.12200] 
//
[0.x.12201] 
[0.x.12202] 
[0.x.12203] 
[0.x.12204] 
//
[0.x.12205] 
//
[0.x.12206] 
[0.x.12207] 
[0.x.12208] 
[0.x.12209] 
//
[0.x.12210] 
//
[0.x.12211] 
[0.x.12212] 
[0.x.12213] 
[0.x.12214] 
[0.x.12215] 
[0.x.12216] 
[0.x.12217] 
//
[0.x.12218] 
[0.x.12219] 
//
[0.x.12220] 
[0.x.12221] 
//
// 温度矩阵（或者说是矩阵，因为我们提供了一个温度质量矩阵和一个温度刚度矩阵，它们将在时间离散化中被加在一起）的创建与斯托克斯矩阵的生成相同；只是在这里要简单得多，因为我们不需要照顾任何块或组件之间的耦合。注意我们是如何初始化三个温度矩阵的。我们只使用稀疏模式对第一个矩阵进行再初始化，而对其余两个再初始化则使用先前生成的矩阵。这样做的原因是，从一个已经生成的矩阵进行重新初始化，可以让Trilinos重新使用稀疏模式，而不是为每个副本生成一个新的模式。这样可以节省一些时间和内存。
//
[0.x.12222] 
[0.x.12223] 
[0.x.12224] 
[0.x.12225] 
//
[0.x.12226] 
[0.x.12227] 
[0.x.12228] 
[0.x.12229] 
[0.x.12230] 
//
[0.x.12231] 
[0.x.12232] 
[0.x.12233] 
[0.x.12234] 
//
// 最后，我们将斯托克斯解的向量[2.x.1833]和[2.x.1834]，以及温度[2.x.1835]、[2.x.1836]和[2.x.1837]（时间步进所需）和所有系统的右手边设置为正确的大小和块结构。
//
[0.x.12235] 
[0.x.12236] 
[0.x.12237] 
[0.x.12238] 
//
[0.x.12239] 
[0.x.12240] 
[0.x.12241] 
[0.x.12242] 
//
[0.x.12243] 
[0.x.12244] 
//
// [2.x.1838] 
//
// 这个函数组装了我们用于预处理斯托克斯系统的矩阵。我们需要的是速度分量上的矢量拉普拉斯矩阵和压力分量上的质量矩阵，并以[2.x.1839]加权。我们首先生成一个适当阶数的正交对象，即FEValues对象，它可以给出正交点的值和梯度（连同正交权重）。接下来我们为单元格矩阵和局部与全局DoF之间的关系创建数据结构。向量[2.x.1840]将保存基函数的值，以便更快地建立局部矩阵，正如在[2.x.1841]中已经完成的那样。在我们开始对所有活动单元进行循环之前，我们必须指定哪些成分是压力，哪些是速度。
//
[0.x.12245] 
[0.x.12246] 
[0.x.12247] 
[0.x.12248] 
//
[0.x.12249] 
[0.x.12250] 
[0.x.12251] 
[0.x.12252] 
[0.x.12253] 
//
[0.x.12254] 
[0.x.12255] 
//
[0.x.12256] 
[0.x.12257] 
//
[0.x.12258] 
[0.x.12259] 
//
[0.x.12260] 
[0.x.12261] 
//
[0.x.12262] 
[0.x.12263] 
[0.x.12264] 
[0.x.12265] 
//
// 本地矩阵的创建相当简单。只有一个拉普拉斯项（关于速度）和一个由[2.x.1842]加权的质量矩阵需要生成，所以本地矩阵的创建在两行中完成。一旦本地矩阵准备好了（在每个正交点上循环查看本地矩阵的行和列），我们就可以得到本地的DoF指数，并将本地信息写入全局矩阵中。我们像在[2.x.1843]中那样做，也就是说，我们直接应用本地悬挂节点的约束。这样做，我们就不必事后再做，而且我们也不会在消除约束时将矩阵的条目写成实际上将再次设置为零。
//
[0.x.12266] 
[0.x.12267] 
[0.x.12268] 
[0.x.12269] 
[0.x.12270] 
[0.x.12271] 
[0.x.12272] 
//
[0.x.12273] 
[0.x.12274] 
[0.x.12275] 
[0.x.12276] 
[0.x.12277] 
[0.x.12278] 
[0.x.12279] 
[0.x.12280] 
//
[0.x.12281] 
[0.x.12282] 
[0.x.12283] 
[0.x.12284] 
[0.x.12285] 
//
// [2.x.1844] 
//
// 这个函数生成将用于Schur互补块预处理的内部预处理。由于只有当矩阵发生变化时才需要重新生成预处理程序，因此在矩阵没有变化的情况下，该函数不需要做任何事情（即标志[2.x.1845]的值为[2.x.1846]）。否则，它的第一个任务是调用[2.x.1847]来生成预处理矩阵。
//
// 接下来，我们为速度-速度矩阵 [2.x.1848] 设置预处理程序。正如介绍中所解释的，我们将使用基于矢量拉普拉斯矩阵[2.x.1849]的AMG预处理器（它在频谱上与斯托克斯矩阵[2.x.1850]接近）。通常，[2.x.1851]类可以被看作是一个好的黑箱预处理程序，不需要任何特殊的知识。然而，在这种情况下，我们必须小心：因为我们为一个矢量问题建立了一个AMG，我们必须告诉预处理程序设置哪个道夫属于哪个矢量成分。我们使用[2.x.1852]函数来做这件事，该函数生成一组[2.x.1853]向量，其中每个向量在向量问题的相应分量中为1，在其他地方为0。因此，这些是每个分量上的常数模式，这解释了变量的名称。
//
[0.x.12286] 
[0.x.12287] 
[0.x.12288] 
[0.x.12289] 
[0.x.12290] 
//
[0.x.12291] 
//
[0.x.12292] 
//
[0.x.12293] 
//
[0.x.12294] 
[0.x.12295] 
[0.x.12296] 
[0.x.12297] 
[0.x.12298] 
[0.x.12299] 
[0.x.12300] 
[0.x.12301] 
//
// 接下来，我们再设置一些AMG预处理程序的选项。特别是，我们需要告诉AMG设置，我们对速度矩阵使用二次基函数（这意味着矩阵中有更多的非零元素，因此需要在内部选择一种更稳健的算法）。此外，我们希望能够控制粗化结构的建立方式。Trilinos平滑聚合AMG的方法是寻找哪些矩阵条目与对角线条目大小相似，以便代数式地建立一个粗网格结构。通过将参数[2.x.1854]设置为0.02，我们指定所有尺寸超过该行中一些对角线枢轴的百分之二的条目应该形成一个粗网格点。这个参数是比较特别的，对它进行一些微调会影响预处理程序的性能。根据经验，较大的[2.x.1855]值会减少迭代次数，但增加每次迭代的成本。看一下Trilinos的文档会提供更多关于这些参数的信息。有了这个数据集，我们就用我们想要的矩阵来初始化预处理程序。
//
// 最后，我们也初始化预处理程序以反转压力质量矩阵。这个矩阵是对称的，表现良好，所以我们可以选择一个简单的预处理程序。我们坚持使用不完全Cholesky（IC）因子化预处理器，它是为对称矩阵设计的。我们也可以选择SSOR预处理器，其松弛系数约为1.2，但IC对我们的例子来说更便宜。我们把预处理程序包成一个[2.x.1856]指针，这使得下次重新创建预处理程序更加容易，因为我们不必关心破坏以前使用的对象。
//
[0.x.12302] 
[0.x.12303] 
[0.x.12304] 
[0.x.12305] 
[0.x.12306] 
[0.x.12307] 
//
[0.x.12308] 
[0.x.12309] 
//
[0.x.12310] 
//
[0.x.12311] 
[0.x.12312] 
//
// [2.x.1857] 
//
// 我们用于推进耦合的斯托克斯-温度系统的时滞方案迫使我们将装配（以及线性系统的解）分成两步。第一步是创建斯托克斯系统的矩阵和右手边，第二步是创建温度道夫的矩阵和右手边，这取决于速度的线性系统的结果。
//
// 该函数在每个时间步长的开始时被调用。在第一个时间步骤中，或者如果网格已经改变，由[2.x.1858]表示，我们需要组装斯托克斯矩阵；另一方面，如果网格没有改变，矩阵已经有了，这就没有必要了，我们需要做的就是组装右手边的向量，它在每个时间步骤中都会改变。
//
// 关于实现的技术细节，与 [2.x.1859] 相比没有太大变化。我们重置矩阵和向量，在单元格上创建正交公式，然后创建相应的FEValues对象。对于更新标志，我们只在完全装配的情况下需要基函数导数，因为右手边不需要它们；像往常一样，根据当前需要选择最小的标志集，使程序中进一步调用 [2.x.1860] 的效率更高。
//
// 有一件事需要评论&ndash；因为我们有一个单独的有限元和DoFHandler来处理温度问题，所以我们需要生成第二个FEValues对象来正确评估温度解决方案。要实现这一点并不复杂：只需使用温度结构，并为我们需要用于评估温度解决方案的基函数值设置一个更新标志。这里需要记住的唯一重要部分是，两个FEValues对象使用相同的正交公式，以确保我们在循环计算两个对象的正交点时得到匹配的信息。
//
// 声明的过程中，有一些关于数组大小的快捷方式，本地矩阵和右手的创建，以及与全局系统相比，本地道夫的索引的向量。
//
[0.x.12313] 
[0.x.12314] 
[0.x.12315] 
[0.x.12316] 
//
[0.x.12317] 
[0.x.12318] 
//
[0.x.12319] 
//
[0.x.12320] 
[0.x.12321] 
[0.x.12322] 
[0.x.12323] 
[0.x.12324] 
[0.x.12325] 
//
[0.x.12326] 
[0.x.12327] 
[0.x.12328] 
//
[0.x.12329] 
[0.x.12330] 
//
[0.x.12331] 
[0.x.12332] 
//
[0.x.12333] 
//
// 接下来我们需要一个向量，它将包含前一个时间层的温度解在正交点的值，以组装动量方程右侧的源项。让我们把这个向量称为 [2.x.1861] 。
//
// 我们接下来创建的向量集包含了基函数的评估以及它们的梯度和对称梯度，将用于创建矩阵。将这些放到自己的数组中，而不是每次都向FEValues对象索取这些信息，是为了加速装配过程的优化，详情请参见[2.x.1862]。
//
// 最后两个声明是用来从整个FE系统中提取各个块（速度、压力、温度）的。
//
[0.x.12334] 
//
[0.x.12335] 
[0.x.12336] 
[0.x.12337] 
[0.x.12338] 
//
[0.x.12339] 
[0.x.12340] 
//
// 现在开始对问题中的所有单元格进行循环。我们正在为这个装配例程处理两个不同的DoFHandlers，所以我们必须为使用中的两个对象设置两个不同的单元格迭代器。这可能看起来有点奇怪，因为斯托克斯系统和温度系统都使用相同的网格，但这是保持自由度同步的唯一方法。循环中的第一条语句也是非常熟悉的，按照更新标志的规定对有限元数据进行更新，将局部数组清零，并在正交点处获得旧解的值。然后我们准备在单元格上的正交点上循环。
//
[0.x.12341] 
[0.x.12342] 
[0.x.12343] 
//
[0.x.12344] 
[0.x.12345] 
[0.x.12346] 
[0.x.12347] 
//
[0.x.12348] 
[0.x.12349] 
//
[0.x.12350] 
[0.x.12351] 
//
[0.x.12352] 
[0.x.12353] 
[0.x.12354] 
//
// 接下来我们提取与内积中的条款相关的基础函数的值和梯度。如[2.x.1863]所示，这有助于加速装配。    一旦完成，我们开始在本地矩阵的行和列上进行循环，并将相关的乘积送入矩阵。右手边是由温度驱动的重力方向（在我们的例子中是垂直方向）的强迫项。 请注意，右手边的项总是生成的，而矩阵的贡献只有在[2.x.1864]标志要求时才会更新。
//
[0.x.12355] 
[0.x.12356] 
[0.x.12357] 
[0.x.12358] 
[0.x.12359] 
[0.x.12360] 
[0.x.12361] 
[0.x.12362] 
[0.x.12363] 
[0.x.12364] 
[0.x.12365] 
[0.x.12366] 
//
[0.x.12367] 
[0.x.12368] 
[0.x.12369] 
[0.x.12370] 
[0.x.12371] 
[0.x.12372] 
[0.x.12373] 
//
[0.x.12374] 
[0.x.12375] 
[0.x.12376] 
[0.x.12377] 
[0.x.12378] 
[0.x.12379] 
[0.x.12380] 
//
// 循环所有单元的最后一步是将局部贡献输入到全局矩阵和向量结构中，并将其输入到 [2.x.1865] 指定的位置。 同样，我们让AffineConstraints类来完成将单元格矩阵元素插入全局矩阵的工作，这已经浓缩了悬挂的节点约束。
//
[0.x.12381] 
//
[0.x.12382] 
[0.x.12383] 
[0.x.12384] 
[0.x.12385] 
[0.x.12386] 
[0.x.12387] 
[0.x.12388] 
[0.x.12389] 
[0.x.12390] 
[0.x.12391] 
[0.x.12392] 
//
[0.x.12393] 
//
[0.x.12394] 
[0.x.12395] 
//
// [2.x.1866] 
//
// 这个函数组装温度方程中的矩阵。温度矩阵由两部分组成，质量矩阵和时间步长乘以刚度矩阵，由拉普拉斯项乘以扩散量给出。由于该矩阵取决于时间步长（从一个步长到另一个步长），温度矩阵需要在每个时间步长进行更新。我们可以简单地在每个时间步长中重新生成矩阵，但这并不真正有效，因为质量和拉普拉斯矩阵只有在我们改变网格时才会改变。因此，我们通过在这个函数中生成两个单独的矩阵，一个是质量矩阵，一个是刚度（扩散）矩阵，这样做更有效率。一旦我们知道了实际的时间步长，我们将把这个矩阵加上刚度矩阵乘以时间步长的总和。
//
// 所以这第一步的细节非常简单。为了防止我们需要重建矩阵（即网格发生了变化），我们将数据结构归零，得到一个正交公式和一个FEValues对象，并为基函数创建局部矩阵、局部dof指数和评估结构。
//
[0.x.12396] 
[0.x.12397] 
[0.x.12398] 
[0.x.12399] 
[0.x.12400] 
//
[0.x.12401] 
[0.x.12402] 
//
[0.x.12403] 
[0.x.12404] 
[0.x.12405] 
[0.x.12406] 
[0.x.12407] 
//
[0.x.12408] 
[0.x.12409] 
//
[0.x.12410] 
[0.x.12411] 
//
[0.x.12412] 
//
[0.x.12413] 
[0.x.12414] 
//
// 现在，让我们开始在三角结构中的所有单元上进行循环。我们需要将局部矩阵清零，更新有限元评估，然后在每个正交点上循环矩阵的行和列，然后我们创建质量矩阵和刚度矩阵（拉普拉斯项乘以扩散 [2.x.1867] 。最后，我们让约束对象将这些值插入全局矩阵中，并直接将约束条件浓缩到矩阵中。
//
[0.x.12415] 
[0.x.12416] 
[0.x.12417] 
[0.x.12418] 
//
[0.x.12419] 
//
[0.x.12420] 
[0.x.12421] 
[0.x.12422] 
[0.x.12423] 
[0.x.12424] 
[0.x.12425] 
[0.x.12426] 
//
[0.x.12427] 
[0.x.12428] 
[0.x.12429] 
[0.x.12430] 
[0.x.12431] 
[0.x.12432] 
[0.x.12433] 
[0.x.12434] 
[0.x.12435] 
[0.x.12436] 
//
[0.x.12437] 
//
[0.x.12438] 
[0.x.12439] 
[0.x.12440] 
[0.x.12441] 
[0.x.12442] 
[0.x.12443] 
[0.x.12444] 
//
[0.x.12445] 
[0.x.12446] 
//
// [2.x.1868] 
//
// 这个函数对温度矩阵进行第二部分的装配工作，实际添加压力质量和刚度矩阵（时间步长在这里起作用），以及创建依赖于速度的右手边。这个函数中的右侧装配的声明与其他装配例程中使用的声明基本相同，只是这次我们把自己限制在矢量上。我们将计算温度系统的残差，这意味着我们必须评估二阶导数，由更新标志[2.x.1869]指定。
//
// 温度方程通过流体速度与斯托克斯系统相耦合。解决方案的这两部分与不同的DoFHandlers相关联，因此我们需要再次创建第二个FEValues对象来评估正交点的速度。
//
[0.x.12447] 
[0.x.12448] 
[0.x.12449] 
[0.x.12450] 
[0.x.12451] 
//
[0.x.12452] 
[0.x.12453] 
[0.x.12454] 
[0.x.12455] 
[0.x.12456] 
[0.x.12457] 
[0.x.12458] 
[0.x.12459] 
[0.x.12460] 
[0.x.12461] 
[0.x.12462] 
[0.x.12463] 
//
[0.x.12464] 
//
[0.x.12465] 
[0.x.12466] 
[0.x.12467] 
[0.x.12468] 
[0.x.12469] 
[0.x.12470] 
[0.x.12471] 
[0.x.12472] 
[0.x.12473] 
[0.x.12474] 
//
[0.x.12475] 
[0.x.12476] 
//
[0.x.12477] 
//
[0.x.12478] 
//
// 接下来是向量的声明，用来保存旧的和更早的解决方案的值（分别作为时间级别[2.x.1870]和[2.x.1871]的符号）和当前单元的正交点的梯度。我们还声明了一个对象来保存温度的右侧值（[2.x.1872]），并且我们再次使用温度基函数的快捷方式。最终，我们需要找到温度极值和计算域的直径，这将用于稳定参数的定义（我们得到了最大速度作为这个函数的输入）。
//
[0.x.12479] 
[0.x.12480] 
[0.x.12481] 
[0.x.12482] 
[0.x.12483] 
[0.x.12484] 
[0.x.12485] 
[0.x.12486] 
//
[0.x.12487] 
[0.x.12488] 
//
[0.x.12489] 
[0.x.12490] 
//
[0.x.12491] 
[0.x.12492] 
//
[0.x.12493] 
//
// 现在，让我们开始在三角结构中的所有单元格上进行循环。同样，我们需要两个单元格迭代器，平行走过两个参与的DoFHandler对象的单元格，用于斯托克斯和温度部分。在这个循环中，我们首先将局部rhs设置为零，然后在正交点上获得旧的解函数的值和导数，因为它们将被用于稳定参数的定义和作为方程中的系数，分别需要。请注意，由于温度有自己的DoFHandler和FEValues对象，我们在正交点得到整个解（反正只有标量温度场），而对于斯托克斯部分，我们仅限于通过使用[2.x.1873]提取速度部分（而忽略压力部分）。
//
[0.x.12494] 
[0.x.12495] 
[0.x.12496] 
//
[0.x.12497] 
[0.x.12498] 
[0.x.12499] 
//
[0.x.12500] 
[0.x.12501] 
//
[0.x.12502] 
[0.x.12503] 
[0.x.12504] 
[0.x.12505] 
//
[0.x.12506] 
[0.x.12507] 
[0.x.12508] 
[0.x.12509] 
//
[0.x.12510] 
[0.x.12511] 
[0.x.12512] 
[0.x.12513] 
//
[0.x.12514] 
[0.x.12515] 
//
[0.x.12516] 
[0.x.12517] 
[0.x.12518] 
[0.x.12519] 
//
// 接下来，我们根据介绍中的讨论，使用专用函数计算用于稳定的人工粘性。有了这个，我们就可以进入正交点和局部rhs矢量分量的循环了。这里的术语相当冗长，但其定义遵循本方案介绍中开发的时间-离散系统。BDF-2方案比用于第一时间步的后向欧拉方案多需要一个旧时间步的术语（并且涉及更复杂的因素）。当所有这些都完成后，我们将局部向量分配到全局向量中（包括悬挂节点约束）。
//
[0.x.12520] 
[0.x.12521] 
[0.x.12522] 
[0.x.12523] 
[0.x.12524] 
[0.x.12525] 
[0.x.12526] 
[0.x.12527] 
[0.x.12528] 
[0.x.12529] 
[0.x.12530] 
[0.x.12531] 
[0.x.12532] 
//
[0.x.12533] 
[0.x.12534] 
[0.x.12535] 
[0.x.12536] 
[0.x.12537] 
[0.x.12538] 
[0.x.12539] 
//
[0.x.12540] 
[0.x.12541] 
[0.x.12542] 
[0.x.12543] 
[0.x.12544] 
[0.x.12545] 
//
[0.x.12546] 
[0.x.12547] 
[0.x.12548] 
[0.x.12549] 
[0.x.12550] 
//
[0.x.12551] 
[0.x.12552] 
[0.x.12553] 
[0.x.12554] 
[0.x.12555] 
//
[0.x.12556] 
[0.x.12557] 
[0.x.12558] 
[0.x.12559] 
[0.x.12560] 
[0.x.12561] 
[0.x.12562] 
[0.x.12563] 
//
[0.x.12564] 
[0.x.12565] 
[0.x.12566] 
[0.x.12567] 
[0.x.12568] 
[0.x.12569] 
//
// [2.x.1874] 
//
// 这个函数可以解决线性方程组的问题。在介绍之后，我们从斯托克斯系统开始，在这里我们需要生成我们的块状舒尔预处理器。由于所有相关的动作都在类[2.x.1875]中实现，我们所要做的就是适当地初始化这个类。我们需要传递的是一个用于压力质量矩阵的[2.x.1876]对象，我们使用相应的类和我们已经生成的IC预处理器以及用于速度-速度矩阵的AMG预处理器一起设置。注意，[2.x.1877]和[2.x.1878]都只是指针，所以我们用[2.x.1879]来传递实际的预处理对象。
//
// 一旦预处理程序准备好了，我们就为该块系统创建一个GMRES求解器。由于我们使用的是Trilinos数据结构，我们必须在求解器中设置相应的模板参数。GMRES需要在内部存储每次迭代的临时向量（见[2.x.1880]的结果部分的讨论）&ndash；它可以使用的向量越多，一般来说性能越好。为了控制内存需求，我们将向量的数量设置为100。这意味着在求解器的100次迭代中，每个临时向量都可以被存储。如果求解器需要更频繁地迭代以获得指定的容忍度，它将通过每100次迭代重新开始，在一个减少的向量集上工作。
//
// 有了这些设置，我们求解系统并在斯托克斯系统中分配约束条件，即悬挂节点和无流体边界条件，以便即使在受约束的道夫下也有适当的解值。最后，我们把迭代次数写到屏幕上。
//
[0.x.12570] 
[0.x.12571] 
[0.x.12572] 
[0.x.12573] 
//
[0.x.12574] 
[0.x.12575] 
[0.x.12576] 
[0.x.12577] 
[0.x.12578] 
//
[0.x.12579] 
[0.x.12580] 
[0.x.12581] 
[0.x.12582] 
//
[0.x.12583] 
[0.x.12584] 
//
[0.x.12585] 
[0.x.12586] 
[0.x.12587] 
//
[0.x.12588] 
[0.x.12589] 
[0.x.12590] 
//
[0.x.12591] 
//
[0.x.12592] 
//
[0.x.12593] 
[0.x.12594] 
[0.x.12595] 
//
// 一旦我们知道了斯托克斯解，我们就可以根据最大速度确定新的时间步长。我们必须这样做以满足CFL条件，因为对流项在温度方程中得到了明确的处理，正如在介绍中所讨论的那样。这里使用的时间步长公式的确切形式将在本程序的结果部分讨论。
//
// 这里有一个插曲。该公式包含了对速度最大值的除法。然而，在计算开始时，我们有一个恒定的温度场（我们以恒定的温度开始，只有在源作用的第一个时间步长后，它才会变成非恒定的）。恒定温度意味着没有浮力作用，所以速度为零。除以它不可能得到什么好结果。
//
// 为了避免产生无限的时间步长，我们问最大速度是否非常小（特别是小于我们在接下来的任何时间步长中遇到的值），如果是，我们就不除以零，而是除以一个小值，从而产生一个大的但有限的时间步长。
//
[0.x.12596] 
[0.x.12597] 
//
[0.x.12598] 
[0.x.12599] 
[0.x.12600] 
[0.x.12601] 
[0.x.12602] 
[0.x.12603] 
[0.x.12604] 
//
[0.x.12605] 
[0.x.12606] 
//
[0.x.12607] 
//
// 接下来我们用函数 [2.x.1881] 设置温度系统和右手边。 知道了温度方程的矩阵和右手边，我们设置了一个预处理程序和一个求解器。温度矩阵是一个质量矩阵（特征值在1左右）加上一个拉普拉斯矩阵（特征值在0和[2.x.1882]之间）乘以一个与时间步长成正比的小数字 [2.x.1883] 。因此，产生的对称和正定矩阵的特征值在[2.x.1884]范围内（至于常数）。这个矩阵即使对于小的网格尺寸也只是适度的条件不良，我们通过简单的方法得到一个相当好的预处理，例如用一个不完全的Cholesky分解预处理（IC），我们也用它来预处理压力质量矩阵求解器。作为一个求解器，我们选择共轭梯度法CG。和以前一样，我们通过模板参数[2.x.1885]告诉求解器使用Trilinos向量。最后，我们求解，分配悬挂节点约束，并写出迭代次数。
//
[0.x.12608] 
[0.x.12609] 
[0.x.12610] 
[0.x.12611] 
[0.x.12612] 
//
[0.x.12613] 
[0.x.12614] 
//
[0.x.12615] 
[0.x.12616] 
[0.x.12617] 
[0.x.12618] 
//
[0.x.12619] 
//
[0.x.12620] 
[0.x.12621] 
//
// 在这个函数的结尾，我们在向量中步进并读出最大和最小的温度值，我们也想输出这些值。在本程序的结果部分讨论的确定时间步长的正确常数时，这将非常有用。
//
[0.x.12622] 
[0.x.12623] 
[0.x.12624] 
[0.x.12625] 
[0.x.12626] 
[0.x.12627] 
[0.x.12628] 
[0.x.12629] 
[0.x.12630] 
//
[0.x.12631] 
[0.x.12632] 
[0.x.12633] 
[0.x.12634] 
//
// [2.x.1886] 
//
// 该函数将解决方案写入VTK输出文件，用于可视化，每隔10个时间步长就会完成。这通常是一个相当简单的任务，因为deal.II库提供的函数几乎为我们完成了所有的工作。与以前的例子相比，有一个新的函数。我们想把斯托克斯解和温度都看作一个数据集，但是我们已经根据两个不同的DoFHandler对象完成了所有的计算。幸运的是，DataOut类已经准备好处理这个问题。我们所要做的就是不要在一开始就附加一个单一的DoFHandler，然后将其用于所有添加的向量，而是为每个向量分别指定DoFHandler。剩下的就像 [2.x.1887] 中所做的那样。我们创建解决方案的名称（这些名称将出现在各个组件的可视化程序中）。第一个[2.x.1888]分量是矢量速度，然后我们有斯托克斯部分的压力，而温度是标量。这些信息是用DataComponentInterpretation辅助类读出来的。接下来，我们将数据向量与它们的DoFHandler对象连接起来，根据自由度建立补丁，这些补丁是描述可视化程序数据的（子）元素。最后，我们打开一个文件（包括时间步数）并将vtk数据写入其中。
//
[0.x.12635] 
[0.x.12636] 
[0.x.12637] 
[0.x.12638] 
[0.x.12639] 
//
[0.x.12640] 
[0.x.12641] 
[0.x.12642] 
[0.x.12643] 
[0.x.12644] 
[0.x.12645] 
[0.x.12646] 
[0.x.12647] 
//
[0.x.12648] 
[0.x.12649] 
[0.x.12650] 
[0.x.12651] 
[0.x.12652] 
[0.x.12653] 
[0.x.12654] 
[0.x.12655] 
[0.x.12656] 
//
[0.x.12657] 
[0.x.12658] 
[0.x.12659] 
[0.x.12660] 
//
// [2.x.1889] 
//
// 这个函数负责处理自适应网格细化。这个函数执行的三个任务是：首先找出需要细化/粗化的单元，然后实际进行细化，并最终在两个不同的网格之间传输解向量。第一个任务是通过对温度使用成熟的凯利误差估计器来实现的（对于这个程序，我们主要关注的是温度，我们需要在高温度梯度的区域保持精确，同时也要避免有太多的数值扩散）。第二项任务是实际进行再塑形。这也只涉及到基本函数，例如[2.x.1890]，它可以细化那些具有最大估计误差的单元，这些误差合计占80%，并粗化那些具有最小误差的单元，这些误差合计占10%。
//
// 如果像这样实施，我们会得到一个不会有太大进展的程序。请记住，我们期望的温度场几乎是不连续的（扩散率[2.x.1891]毕竟非常小），因此我们可以预期，一个自由适应的网格会越来越细化到大梯度的区域。网格大小的减少将伴随着时间步长的减少，需要大量的时间步长来解决给定的最终时间。这也会导致在几个网格细化周期后，网格的不连续性解决得比开始时好得多。
//
// 特别是为了防止时间步长的减少和相应的大量时间步长，我们限制了网格的最大细化深度。为此，在细化指标应用于单元格后，我们简单地在最细层的所有单元格上循环，如果它们会导致网格层次过高，则取消对它们的细化选择。
//
[0.x.12661] 
[0.x.12662] 
[0.x.12663] 
[0.x.12664] 
[0.x.12665] 
//
[0.x.12666] 
[0.x.12667] 
[0.x.12668] 
[0.x.12669] 
[0.x.12670] 
//
[0.x.12671] 
[0.x.12672] 
[0.x.12673] 
[0.x.12674] 
[0.x.12675] 
[0.x.12676] 
[0.x.12677] 
[0.x.12678] 
//
// 作为网格细化的一部分，我们需要将旧的网格中的解决方案向量转移到新的网格中。为此，我们使用SolutionTransfer类，我们必须准备好需要转移到新网格的解向量（一旦完成细化，我们将失去旧的网格，所以转移必须与细化同时发生）。我们肯定需要的是当前温度和旧温度（BDF-2时间步长需要两个旧的解决方案）。由于SolutionTransfer对象只支持在每个dof处理程序中传输一个对象，我们需要在一个数据结构中收集两个温度解决方案。此外，我们也选择转移斯托克斯解，因为我们需要前两个时间步长的速度，其中只有一个是在飞行中计算的。
//
// 因此，我们为斯托克斯和温度的DoFHandler对象初始化了两个SolutionTransfer对象，将它们附加到旧的dof处理程序中。有了这个，我们就可以准备三角测量和数据向量的细化了（按这个顺序）。
//
[0.x.12679] 
[0.x.12680] 
[0.x.12681] 
[0.x.12682] 
//
[0.x.12683] 
[0.x.12684] 
[0.x.12685] 
[0.x.12686] 
//
[0.x.12687] 
[0.x.12688] 
[0.x.12689] 
//
// 现在一切都准备好了，所以进行细化，在新的网格上重新创建dof结构，并初始化矩阵结构和[2.x.1892]函数中的新向量。接下来，我们实际执行网格之间的插值解。我们为温度创建另一份临时向量（现在与新网格相对应），并让插值函数完成这项工作。然后，产生的向量数组被写入各自的向量成员变量中。
//
// 记住，约束集将在setup_dofs()调用中为新的三角结构进行更新。
//
[0.x.12690] 
[0.x.12691] 
//
[0.x.12692] 
[0.x.12693] 
[0.x.12694] 
[0.x.12695] 
//
[0.x.12696] 
[0.x.12697] 
//
// 在解决方案被转移后，我们再对被转移的解决方案实施约束。
//
[0.x.12698] 
[0.x.12699] 
//
// 对于斯托克斯矢量，一切都一样&ndash;除了我们不需要另一个临时矢量，因为我们只是插值了一个矢量。最后，我们必须告诉程序，矩阵和预处理程序需要重新生成，因为网格已经改变。
//
[0.x.12700] 
//
[0.x.12701] 
//
[0.x.12702] 
[0.x.12703] 
[0.x.12704] 
[0.x.12705] 
//
// [2.x.1893] 
//
// 这个函数执行Boussinesq程序中的所有基本步骤。它首先设置一个网格（根据空间维度，我们选择一些不同级别的初始细化和额外的自适应细化步骤，然后在[2.x.1894]维度上创建一个立方体，并首次设置了道夫。由于我们想用一个自适应细化的网格开始时间步进，我们执行一些预细化步骤，包括所有的装配、求解和细化，但实际上没有在时间上推进。相反，我们使用被人诟病的[2.x.1895]语句，在网格细化后立即跳出时间循环，从[2.x.1896]标签开始的新网格上重新开始。([2.x.1897]的使用将在[2.x.1898]中讨论) 。
//
// 在我们开始之前，我们将初始值投影到网格上，并获得[2.x.1899]矢量的第一个数据。然后，我们初始化时间步数和时间步长，开始时间循环。
//
[0.x.12706] 
[0.x.12707] 
[0.x.12708] 
[0.x.12709] 
[0.x.12710] 
//
[0.x.12711] 
[0.x.12712] 
//
[0.x.12713] 
//
[0.x.12714] 
//
[0.x.12715] 
//
[0.x.12716] 
//
[0.x.12717] 
[0.x.12718] 
[0.x.12719] 
[0.x.12720] 
[0.x.12721] 
//
[0.x.12722] 
[0.x.12723] 
//
[0.x.12724] 
//
[0.x.12725] 
[0.x.12726] 
[0.x.12727] 
[0.x.12728] 
//
// 时间循环的第一步都是显而易见的；我们组装斯托克斯系统、预处理程序、温度矩阵（矩阵和预处理程序实际上只在我们之前重新处理的情况下发生变化），然后进行求解。在继续下一个时间步骤之前，我们必须检查我们是否应该首先完成预精炼步骤，或者是否应该重新啮合（每五个时间步骤），精炼到一个与初始精炼和预精炼步骤一致的水平。循环的最后一个步骤是推进解，即把解复制到下一个 "较早 "的时间层。
//
[0.x.12729] 
[0.x.12730] 
[0.x.12731] 
//
[0.x.12732] 
//
[0.x.12733] 
//
[0.x.12734] 
//
[0.x.12735] 
[0.x.12736] 
[0.x.12737] 
[0.x.12738] 
[0.x.12739] 
[0.x.12740] 
[0.x.12741] 
[0.x.12742] 
[0.x.12743] 
//
[0.x.12744] 
[0.x.12745] 
//
[0.x.12746] 
[0.x.12747] 
[0.x.12748] 
[0.x.12749] 
//
// 做以上所有的工作，直到我们到达时间100。
//
[0.x.12750] 
[0.x.12751] 
[0.x.12752] 
//
// [2.x.1900] 
//
// 主函数看起来与所有其他程序几乎一样。
//
// 有一个区别是我们必须要注意的。这个程序使用了Trilinos，而通常情况下，Trilinos被配置为可以使用MPI在%parallel中运行。这并不意味着它[1.x.53]可以在%parallel中运行，事实上这个程序（不像[2.x.1901]）根本没有尝试使用MPI在%parallel中做任何事情。然而，Trilinos希望MPI系统被初始化。我们通过创建一个类型为[2.x.1902]的对象来做到这一点，该对象使用给main()的参数（即[2.x.1903]和[2.x.1904]）初始化MPI（如果可用的话），并在对象超出范围时再次去初始化它。
//
[0.x.12753] 
[0.x.12754] 
[0.x.12755] 
[0.x.12756] 
[0.x.12757] 
[0.x.12758] 
//
[0.x.12759] 
[0.x.12760] 
//
// 这个程序只能在串行中运行。否则，将抛出一个异常。
//
[0.x.12761] 
[0.x.12762] 
[0.x.12763] 
//
[0.x.12764] 
[0.x.12765] 
[0.x.12766] 
[0.x.12767] 
[0.x.12768] 
[0.x.12769] 
[0.x.12770] 
[0.x.12771] 
[0.x.12772] 
[0.x.12773] 
[0.x.12774] 
[0.x.12775] 
[0.x.12776] 
[0.x.12777] 
//
[0.x.12778] 
[0.x.12779] 
[0.x.12780] 
[0.x.12781] 
[0.x.12782] 
[0.x.12783] 
[0.x.12784] 
[0.x.12785] 
[0.x.12786] 
[0.x.12787] 
[0.x.12788] 
[0.x.12789] 
[0.x.12790] 
[0.x.12791] 
//
[0.x.12792] 
[0.x.12793] 
[0.x.12794] 
[0.x.12795] 
[0.x.12796] 
[0.x.12797] 
[0.x.12798] 
[0.x.12799] 
[0.x.12800] 
[0.x.12801] 
[0.x.12802] 
[0.x.12803] 
[0.x.12804] 
[0.x.12805] 
[0.x.12806] 
[0.x.12807] 
//
[0.x.12808] 
[0.x.12809] 
[0.x.12810] 
[0.x.12811] 
[0.x.12812] 
//[2.x.1905] 
//
// 像往常一样，第一个任务是包括这些著名的deal.II库文件和一些C++头文件的功能。
//
[0.x.12813] 
[0.x.12814] 
[0.x.12815] 
[0.x.12816] 
[0.x.12817] 
[0.x.12818] 
[0.x.12819] 
[0.x.12820] 
//
[0.x.12821] 
[0.x.12822] 
[0.x.12823] 
[0.x.12824] 
[0.x.12825] 
[0.x.12826] 
[0.x.12827] 
[0.x.12828] 
[0.x.12829] 
[0.x.12830] 
[0.x.12831] 
//
[0.x.12832] 
[0.x.12833] 
[0.x.12834] 
[0.x.12835] 
[0.x.12836] 
[0.x.12837] 
//
[0.x.12838] 
[0.x.12839] 
[0.x.12840] 
//
[0.x.12841] 
[0.x.12842] 
[0.x.12843] 
[0.x.12844] 
[0.x.12845] 
[0.x.12846] 
//
[0.x.12847] 
[0.x.12848] 
[0.x.12849] 
[0.x.12850] 
[0.x.12851] 
//
[0.x.12852] 
[0.x.12853] 
[0.x.12854] 
[0.x.12855] 
[0.x.12856] 
//
// 这是唯一一个新的包含文件：它引入了相当于[2.x.1906]的[2.x.1907]类，用于在网格细化时将解决方案从一个网格带到下一个网格，但在并行分布式三角形计算的情况下。
//
[0.x.12857] 
//
// 以下是用于并行分布式计算的类，在[2.x.1908]中已经全部介绍过。
//
[0.x.12858] 
[0.x.12859] 
[0.x.12860] 
//
// 接下来的步骤与之前所有的教程程序一样。我们把所有东西放到一个自己的命名空间中，然后把deal.II的类和函数导入其中。
//
[0.x.12861] 
[0.x.12862] 
[0.x.12863] 
//[2.x.1909] 
//
// 在以下命名空间中，我们定义了描述问题的各种方程数据。这对应于使问题至少有一点现实性的各个方面，并且在介绍中对测试案例的描述中已经详尽地讨论了这些方面。
//
// 我们从一些具有常数的系数开始（数值后面的注释表示其物理单位）。
//
[0.x.12864] 
[0.x.12865] 
[0.x.12866] 
[0.x.12867] 
[0.x.12868] 
[0.x.12869] 
[0.x.12870] 
[0.x.12871] 
[0.x.12872] 
//
[0.x.12873] 
[0.x.12874] 
//
[0.x.12875] 
[0.x.12876] 
//
// 下一组定义是用于编码密度与温度的函数、重力矢量和温度的初始值的函数。同样，所有这些（以及它们所计算的值）都在介绍中讨论过。
//
[0.x.12877] 
[0.x.12878] 
[0.x.12879] 
[0.x.12880] 
[0.x.12881] 
[0.x.12882] 
//
[0.x.12883] 
[0.x.12884] 
[0.x.12885] 
[0.x.12886] 
[0.x.12887] 
[0.x.12888] 
//
[0.x.12889] 
[0.x.12890] 
[0.x.12891] 
[0.x.12892] 
[0.x.12893] 
[0.x.12894] 
[0.x.12895] 
//
[0.x.12896] 
[0.x.12897] 
//
[0.x.12898] 
[0.x.12899] 
[0.x.12900] 
//
[0.x.12901] 
[0.x.12902] 
[0.x.12903] 
[0.x.12904] 
[0.x.12905] 
[0.x.12906] 
//
[0.x.12907] 
[0.x.12908] 
[0.x.12909] 
[0.x.12910] 
[0.x.12911] 
//
[0.x.12912] 
[0.x.12913] 
//
[0.x.12914] 
[0.x.12915] 
[0.x.12916] 
[0.x.12917] 
[0.x.12918] 
[0.x.12919] 
[0.x.12920] 
[0.x.12921] 
//
// 正如介绍中所提到的，我们需要重新调整压力的比例，以避免动量和质量守恒方程的相对条件不良。比例系数为[2.x.1910]，其中[2.x.1911]是一个典型的长度尺度。通过实验发现，一个好的长度尺度是烟羽的直径，大约是10公里。
//
[0.x.12922] 
//
// 这个命名空间的最后一个数字是一个常数，表示每（平均，热带）年的秒数。我们只在生成屏幕输出时使用它：在内部，这个程序的所有计算都是以SI单位（公斤、米、秒）进行的，但是用秒来写地质学时间产生的数字无法与现实联系起来，所以我们用这里定义的系数转换为年。
//
[0.x.12923] 
//
[0.x.12924] 
//
// [2.x.1912] 
//
// 这个命名空间实现了预处理程序。正如介绍中所讨论的，这个预处理程序在一些关键部分与 [2.x.1913] 中使用的预处理程序不同。具体来说，它是一个右预处理程序，实现了矩阵[1.x.54]中的两个逆矩阵操作由线性求解器近似，或者，如果给这个类的构造函数加上右标志，则由速度块的单个AMG V-循环实现。[2.x.1914]函数的三个代码块实现了与该预处理矩阵的三个块的乘法运算，如果你读过[2.x.1915]或[2.x.1916]中关于组成求解器的讨论，应该是不言自明的。
//
[0.x.12925] 
[0.x.12926] 
[0.x.12927] 
[0.x.12928] 
[0.x.12929] 
[0.x.12930] 
[0.x.12931] 
[0.x.12932] 
[0.x.12933] 
[0.x.12934] 
[0.x.12935] 
[0.x.12936] 
[0.x.12937] 
[0.x.12938] 
[0.x.12939] 
[0.x.12940] 
[0.x.12941] 
//
[0.x.12942] 
[0.x.12943] 
[0.x.12944] 
[0.x.12945] 
//
[0.x.12946] 
[0.x.12947] 
//
[0.x.12948] 
//
[0.x.12949] 
[0.x.12950] 
[0.x.12951] 
[0.x.12952] 
//
[0.x.12953] 
[0.x.12954] 
//
[0.x.12955] 
[0.x.12956] 
[0.x.12957] 
[0.x.12958] 
[0.x.12959] 
//
[0.x.12960] 
[0.x.12961] 
[0.x.12962] 
[0.x.12963] 
[0.x.12964] 
[0.x.12965] 
[0.x.12966] 
[0.x.12967] 
[0.x.12968] 
[0.x.12969] 
[0.x.12970] 
[0.x.12971] 
//
[0.x.12972] 
[0.x.12973] 
[0.x.12974] 
[0.x.12975] 
[0.x.12976] 
[0.x.12977] 
[0.x.12978] 
[0.x.12979] 
[0.x.12980] 
[0.x.12981] 
//
// [2.x.1917] 
//
// 如介绍中所述，我们将使用[2.x.1918]模块中讨论的WorkStream机制来实现单台机器的处理器之间的并行操作。WorkStream类要求数据在两种数据结构中传递，一种是用于抓取数据，一种是将数据从装配函数传递到将本地贡献复制到全局对象的函数。
//
// 下面的命名空间（以及两个子命名空间）包含了服务于这一目的的数据结构的集合，介绍中讨论的四种操作中的每一种都有一对，我们将想把它们并行化。每个装配例程都会得到两组数据：一个是Scratch数组，收集所有用于计算单元格贡献的类和数组，另一个是CopyData数组，保存将被写入全局矩阵的本地矩阵和向量。而CopyData是一个容器，用来存放最终写入全局矩阵和向量的数据（因此是绝对必要的），Scratch数组只是出于性能的考虑而存在；在每个单元上设置一个FEValues对象，要比只创建一次并更新一些导数数据要昂贵得多。
//
// [2.x.1919]有四个汇编程序。一个用于斯托克斯系统的预处理矩阵，一个用于斯托克斯矩阵和右手边，一个用于温度矩阵，一个用于温度方程的右手边。我们在这里使用[2.x.1920]环境为这四个汇编组件中的每一个组织从头数组和CopyData对象（因为我们认为这些是我们传递的临时对象，而不是实现自己功能的类，尽管这是区分[2.x.1921]es的一个比较主观的观点）。
//
// 关于Scratch对象，每个结构都配备了一个构造函数，可以使用[2.x.1923]、正交、[2.x.1924]（描述弯曲边界的插值）和[2.x.1925]实例创建一个[2.x.1922]对象。此外，我们手动实现了一个复制构造函数（因为FEValues类本身是不可复制的），并提供了一些额外的矢量字段，用于在计算局部贡献时保存中间数据。
//
// 让我们从抓取数组开始，特别是用于组装斯托克斯预处理程序的数组。
//
[0.x.12982] 
[0.x.12983] 
[0.x.12984] 
[0.x.12985] 
[0.x.12986] 
[0.x.12987] 
[0.x.12988] 
[0.x.12989] 
[0.x.12990] 
[0.x.12991] 
[0.x.12992] 
//
[0.x.12993] 
//
[0.x.12994] 
//
[0.x.12995] 
[0.x.12996] 
[0.x.12997] 
//
[0.x.12998] 
[0.x.12999] 
[0.x.13000] 
[0.x.13001] 
[0.x.13002] 
[0.x.13003] 
[0.x.13004] 
[0.x.13005] 
[0.x.13006] 
[0.x.13007] 
//
[0.x.13008] 
[0.x.13009] 
[0.x.13010] 
[0.x.13011] 
[0.x.13012] 
[0.x.13013] 
[0.x.13014] 
[0.x.13015] 
[0.x.13016] 
[0.x.13017] 
//
// 下一个是用于组装完整的斯托克斯系统的从头对象。请注意，我们从上面的StokesPreconditioner类派生出StokesSystem scratch类。我们这样做是因为所有用于组装预处理程序的对象也需要用于实际的矩阵系统和右手边，还有一些额外的数据。这使得程序更加紧凑。还需要注意的是，斯托克斯系统的装配和进一步的温度右手边分别需要温度和速度的数据，所以我们实际上需要两个FEValues对象来处理这两种情况。
//
[0.x.13018] 
[0.x.13019] 
[0.x.13020] 
[0.x.13021] 
[0.x.13022] 
[0.x.13023] 
[0.x.13024] 
[0.x.13025] 
[0.x.13026] 
//
[0.x.13027] 
//
[0.x.13028] 
//
[0.x.13029] 
[0.x.13030] 
[0.x.13031] 
//
[0.x.13032] 
[0.x.13033] 
//
[0.x.13034] 
[0.x.13035] 
[0.x.13036] 
[0.x.13037] 
[0.x.13038] 
[0.x.13039] 
[0.x.13040] 
[0.x.13041] 
[0.x.13042] 
[0.x.13043] 
[0.x.13044] 
[0.x.13045] 
[0.x.13046] 
[0.x.13047] 
[0.x.13048] 
[0.x.13049] 
[0.x.13050] 
[0.x.13051] 
[0.x.13052] 
[0.x.13053] 
[0.x.13054] 
//
[0.x.13055] 
[0.x.13056] 
[0.x.13057] 
[0.x.13058] 
[0.x.13059] 
[0.x.13060] 
[0.x.13061] 
[0.x.13062] 
[0.x.13063] 
[0.x.13064] 
[0.x.13065] 
[0.x.13066] 
[0.x.13067] 
//
// 在定义了用于组装斯托克斯系统的对象之后，我们对温度系统所需的矩阵的组装也做了同样的工作。一般的结构是非常相似的。
//
[0.x.13068] 
[0.x.13069] 
[0.x.13070] 
[0.x.13071] 
[0.x.13072] 
[0.x.13073] 
//
[0.x.13074] 
//
[0.x.13075] 
//
[0.x.13076] 
[0.x.13077] 
[0.x.13078] 
//
[0.x.13079] 
[0.x.13080] 
[0.x.13081] 
[0.x.13082] 
[0.x.13083] 
[0.x.13084] 
[0.x.13085] 
[0.x.13086] 
[0.x.13087] 
[0.x.13088] 
[0.x.13089] 
[0.x.13090] 
[0.x.13091] 
//
[0.x.13092] 
[0.x.13093] 
[0.x.13094] 
[0.x.13095] 
[0.x.13096] 
[0.x.13097] 
[0.x.13098] 
[0.x.13099] 
[0.x.13100] 
[0.x.13101] 
[0.x.13102] 
//
// 最后的划痕对象被用于温度系统右侧的装配。这个对象比上面的对象要大得多，因为有更多的量进入温度方程右边的计算中。特别是，前两个时间步骤的温度值和梯度需要在正交点评估，还有速度和应变率（即速度的对称梯度），它们作为摩擦加热项进入右侧。尽管有很多条款，但以下内容应该是不言自明的。
//
[0.x.13103] 
[0.x.13104] 
[0.x.13105] 
[0.x.13106] 
[0.x.13107] 
[0.x.13108] 
[0.x.13109] 
//
[0.x.13110] 
//
[0.x.13111] 
[0.x.13112] 
//
[0.x.13113] 
[0.x.13114] 
//
[0.x.13115] 
[0.x.13116] 
//
[0.x.13117] 
[0.x.13118] 
//
[0.x.13119] 
[0.x.13120] 
[0.x.13121] 
[0.x.13122] 
[0.x.13123] 
[0.x.13124] 
[0.x.13125] 
//
[0.x.13126] 
[0.x.13127] 
[0.x.13128] 
[0.x.13129] 
[0.x.13130] 
[0.x.13131] 
[0.x.13132] 
[0.x.13133] 
[0.x.13134] 
[0.x.13135] 
[0.x.13136] 
[0.x.13137] 
[0.x.13138] 
[0.x.13139] 
[0.x.13140] 
[0.x.13141] 
[0.x.13142] 
[0.x.13143] 
[0.x.13144] 
//
[0.x.13145] 
[0.x.13146] 
[0.x.13147] 
[0.x.13148] 
[0.x.13149] 
//
[0.x.13150] 
[0.x.13151] 
[0.x.13152] 
[0.x.13153] 
[0.x.13154] 
[0.x.13155] 
[0.x.13156] 
//
[0.x.13157] 
[0.x.13158] 
[0.x.13159] 
[0.x.13160] 
[0.x.13161] 
[0.x.13162] 
[0.x.13163] 
[0.x.13164] 
[0.x.13165] 
[0.x.13166] 
[0.x.13167] 
[0.x.13168] 
[0.x.13169] 
[0.x.13170] 
//
[0.x.13171] 
[0.x.13172] 
[0.x.13173] 
[0.x.13174] 
[0.x.13175] 
//
[0.x.13176] 
[0.x.13177] 
[0.x.13178] 
[0.x.13179] 
[0.x.13180] 
[0.x.13181] 
[0.x.13182] 
[0.x.13183] 
//
// CopyData对象比Scratch对象更简单，因为它们所要做的就是存储本地计算的结果，直到它们可以被复制到全局矩阵或向量对象中。因此，这些结构只需要提供一个构造函数，一个复制操作，以及一些用于本地矩阵、本地向量和本地与全局自由度之间关系的数组（又称[2.x.1926]）。同样，我们为我们将使用WorkStream类并行化的四个操作中的每一个都有一个这样的结构。
//
[0.x.13184] 
[0.x.13185] 
[0.x.13186] 
[0.x.13187] 
[0.x.13188] 
[0.x.13189] 
[0.x.13190] 
[0.x.13191] 
//
[0.x.13192] 
[0.x.13193] 
[0.x.13194] 
//
[0.x.13195] 
[0.x.13196] 
[0.x.13197] 
[0.x.13198] 
[0.x.13199] 
[0.x.13200] 
//
[0.x.13201] 
[0.x.13202] 
[0.x.13203] 
[0.x.13204] 
[0.x.13205] 
[0.x.13206] 
//
[0.x.13207] 
[0.x.13208] 
[0.x.13209] 
[0.x.13210] 
//
[0.x.13211] 
[0.x.13212] 
//
[0.x.13213] 
[0.x.13214] 
[0.x.13215] 
[0.x.13216] 
[0.x.13217] 
//
[0.x.13218] 
[0.x.13219] 
[0.x.13220] 
[0.x.13221] 
//
[0.x.13222] 
[0.x.13223] 
[0.x.13224] 
[0.x.13225] 
//
[0.x.13226] 
[0.x.13227] 
[0.x.13228] 
[0.x.13229] 
[0.x.13230] 
[0.x.13231] 
[0.x.13232] 
[0.x.13233] 
[0.x.13234] 
//
[0.x.13235] 
[0.x.13236] 
[0.x.13237] 
[0.x.13238] 
//
[0.x.13239] 
[0.x.13240] 
[0.x.13241] 
[0.x.13242] 
//
[0.x.13243] 
[0.x.13244] 
[0.x.13245] 
[0.x.13246] 
[0.x.13247] 
[0.x.13248] 
[0.x.13249] 
[0.x.13250] 
[0.x.13251] 
[0.x.13252] 
//
// [2.x.1927] 
//
// 这是主类的声明。它与[2.x.1928]非常相似，但有一些区别我们将在下面评论。
//
// 该类的顶部与[2.x.1929]中的内容基本相同，列出了公共方法和一组做重活的私有函数。与[2.x.1930]相比，这部分只增加了两个：计算所有单元的最大CFL数的函数[2.x.1931]，然后我们根据它计算全局时间步长；以及用于计算熵值稳定的函数[2.x.1932]。它类似于我们在[2.x.1934]中用于此目的的[2.x.1933]，但它的工作对象是熵而不是温度。
//
[0.x.13253] 
[0.x.13254] 
[0.x.13255] 
[0.x.13256] 
[0.x.13257] 
[0.x.13258] 
[0.x.13259] 
//
[0.x.13260] 
[0.x.13261] 
[0.x.13262] 
[0.x.13263] 
[0.x.13264] 
[0.x.13265] 
[0.x.13266] 
[0.x.13267] 
[0.x.13268] 
[0.x.13269] 
[0.x.13270] 
[0.x.13271] 
[0.x.13272] 
[0.x.13273] 
//
[0.x.13274] 
[0.x.13275] 
[0.x.13276] 
[0.x.13277] 
[0.x.13278] 
[0.x.13279] 
[0.x.13280] 
[0.x.13281] 
[0.x.13282] 
[0.x.13283] 
[0.x.13284] 
[0.x.13285] 
[0.x.13286] 
[0.x.13287] 
[0.x.13288] 
[0.x.13289] 
//
[0.x.13290] 
//
// 第一个重要的新组件是根据介绍中的讨论为参数定义了一个结构。这个结构是在构建这个对象的过程中通过读取参数文件来初始化的。
//
[0.x.13291] 
[0.x.13292] 
[0.x.13293] 
//
[0.x.13294] 
[0.x.13295] 
//
[0.x.13296] 
//
[0.x.13297] 
[0.x.13298] 
//
[0.x.13299] 
[0.x.13300] 
//
[0.x.13301] 
//
[0.x.13302] 
[0.x.13303] 
[0.x.13304] 
//
[0.x.13305] 
[0.x.13306] 
//
[0.x.13307] 
[0.x.13308] 
//
[0.x.13309] 
[0.x.13310] 
//
// [2.x.1935]（用于[1.x.55]）对象被用来简化输出的书写：每个MPI进程都可以像往常一样使用它来产生输出，但由于这些进程中的每一个都会（希望）产生相同的输出，它只是被重复了许多次；使用ConditionalOStream类，只有一个MPI进程产生的输出会真正被打印到屏幕上，而所有其他线程的输出将只是被遗忘。
//
[0.x.13311] 
//
// 下面的成员变量将再次与[2.x.1936]中的成员变量相似（也与其他教程程序相似）。正如介绍中提到的，我们完全分布计算，所以我们将不得不使用[2.x.1937]类（见[2.x.1938] ），但这些变量的其余部分相当标准，有两个例外。
//
//
//
// -- [2.x.1939]这个变量是用来表示高阶多项式映射的。正如在介绍中提到的，我们在通过正交形成积分时使用这个映射，用于所有与我们域的内边界或外边界相邻的单元，其中边界是弯曲的。
//
//
//
// - 在命名混乱的情况下，你会注意到下面一些来自命名空间TrilinosWrappers的变量取自命名空间[2.x.1940]（比如右手边的向量），而其他变量则不是（比如各种矩阵）。这是由于遗留的原因。我们经常需要查询任意正交点的速度和温度；因此，每当我们需要访问与本地相关但属于另一个处理器的自由度时，我们不是导入矢量的幽灵信息，而是以%并行方式求解线性系统，但随后立即初始化一个矢量，包括求解的幽灵条目，以便进一步处理。因此，各种[2.x.1941]向量在以%parallel求解各自的线性系统后立即被填充，并且总是包含所有[2.x.1942]"本地相关自由度 "的值；我们从求解过程中获得的完全分布的向量，只包含[2.x.1943]"本地拥有的自由度"，在求解过程后，在我们将相关值复制到成员变量向量后立即销毁。
//
[0.x.13312] 
[0.x.13313] 
//
[0.x.13314] 
//
[0.x.13315] 
[0.x.13316] 
[0.x.13317] 
//
[0.x.13318] 
[0.x.13319] 
//
[0.x.13320] 
[0.x.13321] 
[0.x.13322] 
//
[0.x.13323] 
[0.x.13324] 
[0.x.13325] 
//
[0.x.13326] 
[0.x.13327] 
[0.x.13328] 
//
[0.x.13329] 
[0.x.13330] 
[0.x.13331] 
[0.x.13332] 
//
[0.x.13333] 
[0.x.13334] 
[0.x.13335] 
//
[0.x.13336] 
[0.x.13337] 
[0.x.13338] 
//
[0.x.13339] 
[0.x.13340] 
[0.x.13341] 
[0.x.13342] 
//
// 下一个成员变量，[2.x.1944]是用来方便地计算在某些重复输入的代码 "部分 "所花费的计算时间。例如，我们将进入（和离开）斯托克斯矩阵装配的部分，并希望在所有的时间步骤中累积在这部分花费的运行时间。每隔一段时间，以及在程序结束时（通过TimerOutput类的析构器），我们将产生一个很好的总结，即在不同部分花费的时间，我们把这个程序的运行时间归类为不同部分。
//
[0.x.13343] 
//
// 在这些成员变量之后，我们有一些辅助函数，这些函数已经从上面列出的那些函数中分解出来。具体来说，首先有三个我们从[2.x.1945]中调用的函数，然后是做线性系统组装的函数。
//
[0.x.13344] 
[0.x.13345] 
[0.x.13346] 
[0.x.13347] 
[0.x.13348] 
[0.x.13349] 
[0.x.13350] 
[0.x.13351] 
[0.x.13352] 
//
// 遵循[2.x.1946]"基于任务的并行化 "范式，我们将所有的汇编例程分成两部分：第一部分可以在某个单元上做所有的计算，而不需要照顾其他线程；第二部分（就是将本地数据写入全局矩阵和向量中），每次只能由一个线程进入。为了实现这一点，我们为这一程序中使用的所有四个汇编例程的这两个步骤分别提供了函数。下面的八个函数正是这样做的。
//
[0.x.13353] 
[0.x.13354] 
[0.x.13355] 
[0.x.13356] 
//
[0.x.13357] 
[0.x.13358] 
//
[0.x.13359] 
[0.x.13360] 
[0.x.13361] 
[0.x.13362] 
//
[0.x.13363] 
[0.x.13364] 
//
[0.x.13365] 
[0.x.13366] 
[0.x.13367] 
[0.x.13368] 
//
[0.x.13369] 
[0.x.13370] 
//
[0.x.13371] 
[0.x.13372] 
[0.x.13373] 
[0.x.13374] 
[0.x.13375] 
[0.x.13376] 
[0.x.13377] 
//
[0.x.13378] 
[0.x.13379] 
//
// 最后，我们向前声明一个成员类，我们将在以后定义这个成员类，它将被用来从我们的解决方案向量中计算一些数量，我们希望将这些数量放入输出文件中，以便进行可视化。
//
[0.x.13380] 
[0.x.13381] 
//[2.x.1947] 
//[2.x.1948] 
//
// 这里是对斯托克斯问题的参数的定义。我们允许设置模拟的结束时间、细化水平（包括全局细化和自适应细化，总的来说就是允许单元的最大细化水平），以及细化的时间间隔。
//
// 然后，我们让用户指定稳定参数的常数（如介绍中所讨论的）、斯托克斯速度空间的多项式程度、是否对压力使用基于FE_DGP元素的局部保守离散化（对压力使用FE_Q元素）、以及温度插值的多项式程度。
//
// 构造函数检查是否有有效的输入文件（如果没有，将写一个带有默认参数的文件），并最终解析参数。
//
[0.x.13382] 
[0.x.13383] 
[0.x.13384] 
[0.x.13385] 
[0.x.13386] 
[0.x.13387] 
[0.x.13388] 
[0.x.13389] 
[0.x.13390] 
[0.x.13391] 
[0.x.13392] 
[0.x.13393] 
[0.x.13394] 
[0.x.13395] 
[0.x.13396] 
[0.x.13397] 
//
[0.x.13398] 
//
[0.x.13399] 
[0.x.13400] 
[0.x.13401] 
//
[0.x.13402] 
[0.x.13403] 
//
[0.x.13404] 
[0.x.13405] 
[0.x.13406] 
[0.x.13407] 
[0.x.13408] 
[0.x.13409] 
//
[0.x.13410] 
[0.x.13411] 
[0.x.13412] 
//
// 接下来我们有一个函数，声明我们在输入文件中期望的参数，以及它们的数据类型、默认值和描述。
//
[0.x.13413] 
[0.x.13414] 
[0.x.13415] 
[0.x.13416] 
[0.x.13417] 
[0.x.13418] 
[0.x.13419] 
[0.x.13420] 
[0.x.13421] 
[0.x.13422] 
[0.x.13423] 
[0.x.13424] 
[0.x.13425] 
[0.x.13426] 
[0.x.13427] 
[0.x.13428] 
[0.x.13429] 
[0.x.13430] 
[0.x.13431] 
[0.x.13432] 
[0.x.13433] 
[0.x.13434] 
[0.x.13435] 
[0.x.13436] 
[0.x.13437] 
[0.x.13438] 
[0.x.13439] 
[0.x.13440] 
[0.x.13441] 
[0.x.13442] 
[0.x.13443] 
[0.x.13444] 
[0.x.13445] 
[0.x.13446] 
[0.x.13447] 
//
[0.x.13448] 
[0.x.13449] 
[0.x.13450] 
[0.x.13451] 
[0.x.13452] 
[0.x.13453] 
[0.x.13454] 
[0.x.13455] 
[0.x.13456] 
[0.x.13457] 
[0.x.13458] 
[0.x.13459] 
[0.x.13460] 
[0.x.13461] 
[0.x.13462] 
[0.x.13463] 
[0.x.13464] 
[0.x.13465] 
[0.x.13466] 
//
[0.x.13467] 
[0.x.13468] 
[0.x.13469] 
[0.x.13470] 
[0.x.13471] 
[0.x.13472] 
[0.x.13473] 
[0.x.13474] 
[0.x.13475] 
[0.x.13476] 
[0.x.13477] 
[0.x.13478] 
[0.x.13479] 
[0.x.13480] 
[0.x.13481] 
[0.x.13482] 
[0.x.13483] 
[0.x.13484] 
[0.x.13485] 
[0.x.13486] 
[0.x.13487] 
[0.x.13488] 
[0.x.13489] 
[0.x.13490] 
[0.x.13491] 
//
// 然后，我们需要一个函数来读取我们通过读取输入文件得到的ParameterHandler对象的内容，并将结果放入储存我们之前声明的参数值的变量。
//
[0.x.13492] 
[0.x.13493] 
[0.x.13494] 
[0.x.13495] 
[0.x.13496] 
[0.x.13497] 
[0.x.13498] 
[0.x.13499] 
//
[0.x.13500] 
[0.x.13501] 
//
[0.x.13502] 
[0.x.13503] 
[0.x.13504] 
//
[0.x.13505] 
[0.x.13506] 
[0.x.13507] 
[0.x.13508] 
[0.x.13509] 
[0.x.13510] 
[0.x.13511] 
//
[0.x.13512] 
[0.x.13513] 
[0.x.13514] 
[0.x.13515] 
[0.x.13516] 
[0.x.13517] 
[0.x.13518] 
[0.x.13519] 
[0.x.13520] 
[0.x.13521] 
//
// [2.x.1949] 
//
// 该问题的构造函数与 [2.x.1950] 中的构造函数非常相似。不同的是%并行通信。Trilinos使用消息传递接口（MPI）进行数据分配。当进入BoussinesqFlowProblem类时，我们必须决定如何进行并行化。我们选择一个相当简单的策略，让所有正在运行程序的处理器一起工作，由通信器 [2.x.1951] 指定。接下来，我们创建输出流（就像我们在[2.x.1952]中已经做的那样），它只在第一个MPI进程上产生输出，而在其他所有进程上则完全不考虑。这个想法的实现是在[2.x.1953]得到一个真实参数时检查进程号，它使用[2.x.1954]流进行输出。例如，如果我们是一个处理器五，那么我们将给出一个 [2.x.1955] ，这意味着该处理器的输出将不会被打印。除了映射对象（我们对其使用4度的多项式），除了最后的成员变量外，其他都与 [2.x.1956] 中的完全相同。
//
// 这个最后的对象，TimerOutput对象，然后被告知限制输出到[2.x.1957]流（处理器0），然后我们指定要在程序结束时得到一个汇总表，该表显示我们的壁挂时钟时间（而不是CPU时间）。我们还将在下面的[2.x.1958]函数中手动请求每隔这么多时间步的中间总结。
//
[0.x.13522] 
[0.x.13523] 
[0.x.13524] 
[0.x.13525] 
[0.x.13526] 
//
[0.x.13527] 
[0.x.13528] 
[0.x.13529] 
[0.x.13530] 
[0.x.13531] 
//
[0.x.13532] 
[0.x.13533] 
//
[0.x.13534] 
[0.x.13535] 
//
[0.x.13536] 
[0.x.13537] 
[0.x.13538] 
[0.x.13539] 
[0.x.13540] 
[0.x.13541] 
[0.x.13542] 
[0.x.13543] 
[0.x.13544] 
//
[0.x.13545] 
[0.x.13546] 
//
[0.x.13547] 
[0.x.13548] 
[0.x.13549] 
//
[0.x.13550] 
[0.x.13551] 
[0.x.13552] 
[0.x.13553] 
[0.x.13554] 
[0.x.13555] 
[0.x.13556] 
[0.x.13557] 
//
[0.x.13558] 
[0.x.13559] 
[0.x.13560] 
[0.x.13561] 
[0.x.13562] 
//
// [2.x.1959] 
//[2.x.1960] 
//
// 除了两个小细节外，计算速度全局最大值的函数与[2.x.1961]中的相同。第一个细节实际上是所有在三角形的所有单元上实现循环的函数所共有的。当以%并行方式操作时，每个处理器只能处理一大块单元，因为每个处理器只拥有整个三角结构的某一部分。我们要处理的这块单元是通过所谓的[2.x.1962]来确定的，正如我们在[2.x.1963]中做的那样。因此，我们需要改变的是只对当前进程所拥有的单元格（相对于幽灵或人造单元格）进行与单元格相关的操作，即对子域id等于进程ID的数字。由于这是一个常用的操作，所以这个操作有一个快捷方式：我们可以用[2.x.1964]询问单元格是否为当前处理器所拥有。
//
// 第二个区别是我们计算最大值的方式。以前，我们可以简单地有一个[2.x.1965]变量，在每个单元的每个正交点上进行检查。现在，我们必须更加小心，因为每个处理器只对单元格的一个子集进行操作。我们要做的是，首先让每个处理器计算其单元中的最大值，然后做一个全局通信操作[2.x.1966]，计算各个处理器所有最大值中的最大值。MPI提供了这样的调用，但更简单的是使用MPI通信器对象在命名空间[2.x.1967]中使用相应的函数，因为即使我们没有MPI并且只在一台机器上工作，这也会做正确的事情。对[2.x.1968]的调用需要两个参数，即本地最大值（input）和MPI通信器，在这个例子中是MPI_COMM_WORLD。
//
[0.x.13563] 
[0.x.13564] 
[0.x.13565] 
[0.x.13566] 
[0.x.13567] 
[0.x.13568] 
//
[0.x.13569] 
[0.x.13570] 
[0.x.13571] 
[0.x.13572] 
[0.x.13573] 
//
[0.x.13574] 
//
[0.x.13575] 
//
[0.x.13576] 
[0.x.13577] 
[0.x.13578] 
[0.x.13579] 
[0.x.13580] 
[0.x.13581] 
//
[0.x.13582] 
[0.x.13583] 
[0.x.13584] 
[0.x.13585] 
//
[0.x.13586] 
[0.x.13587] 
//[2.x.1969] 
//
// 下一个函数做了类似的事情，但我们现在计算CFL数，即一个单元上的最大速度除以单元直径。这个数字对于确定时间步长是必要的，因为我们对温度方程使用半显式的时间步长方案（讨论见[2.x.1970]）。我们用上述同样的方法计算它。在所有本地拥有的单元上计算本地最大值，然后通过MPI交换，找到全球最大值。
//
[0.x.13588] 
[0.x.13589] 
[0.x.13590] 
[0.x.13591] 
[0.x.13592] 
[0.x.13593] 
//
[0.x.13594] 
[0.x.13595] 
[0.x.13596] 
[0.x.13597] 
[0.x.13598] 
//
[0.x.13599] 
//
[0.x.13600] 
//
[0.x.13601] 
[0.x.13602] 
[0.x.13603] 
[0.x.13604] 
[0.x.13605] 
[0.x.13606] 
//
[0.x.13607] 
[0.x.13608] 
[0.x.13609] 
[0.x.13610] 
[0.x.13611] 
[0.x.13612] 
[0.x.13613] 
//
[0.x.13614] 
[0.x.13615] 
//[2.x.1971] 
//
// 接下来是计算全局熵的变化[2.x.1972]，其中熵[2.x.1973]的定义如介绍中所讨论的。 这对于评估温度方程中的稳定度是必要的，正如介绍中所解释的。实际上，只有当我们在残差计算中使用[2.x.1974]作为幂时，才需要熵的变化。无限准则是由正交点上的最大值计算出来的，就像离散计算中通常的那样。
//
// 为了计算这个量，我们首先要找到空间平均数[2.x.1975]，然后评估最大值。然而，这意味着我们需要执行两个循环。我们可以通过注意到[2.x.1976]，即正负方向上与平均熵的偏差的最大值来避免开销。我们在后一个公式中需要的四个量（最大熵、最小熵、平均熵、面积）都可以在所有单元格的同一个循环中进行评估，所以我们选择这个更简单的变体。
//
[0.x.13616] 
[0.x.13617] 
[0.x.13618] 
[0.x.13619] 
[0.x.13620] 
[0.x.13621] 
//
[0.x.13622] 
[0.x.13623] 
//
[0.x.13624] 
[0.x.13625] 
[0.x.13626] 
[0.x.13627] 
[0.x.13628] 
//
// 在上面的两个函数中，我们计算了所有非负数的最大值，所以我们知道0肯定是一个下限。另一方面，在这里我们需要找到与平均值的最大偏差，也就是说，我们需要知道熵的最大和最小值，而这些值的符号我们并不事先知道。
//
// 为了计算它，我们可以从我们可以存储在一个双精度数字中的最大和最小的可能值开始。最小值被初始化为一个更大的数字，最大值被初始化为一个比将要出现的任何一个数字都小的数字。然后，我们保证这些数字将在第一个单元的循环中被覆盖，或者，如果这个处理器不拥有任何单元，最迟在通信步骤中被覆盖。下面的循环将计算最小和最大的局部熵，并跟踪我们局部拥有的域的面积/体积，以及对其熵的积分。
//
[0.x.13629] 
[0.x.13630] 
[0.x.13631] 
//
[0.x.13632] 
[0.x.13633] 
[0.x.13634] 
[0.x.13635] 
[0.x.13636] 
[0.x.13637] 
[0.x.13638] 
[0.x.13639] 
[0.x.13640] 
[0.x.13641] 
[0.x.13642] 
[0.x.13643] 
[0.x.13644] 
[0.x.13645] 
//
[0.x.13646] 
[0.x.13647] 
[0.x.13648] 
[0.x.13649] 
[0.x.13650] 
[0.x.13651] 
//
// 现在我们只需要在处理器之间交换数据：我们需要将两个积分相加（ [2.x.1977] ），并得到最大和最小的极值。我们可以通过四个不同的数据交换来完成这个任务，但我们只需要两个就可以了。 [2.x.1978]也有一个变体，它接受一个数组的值，这些值都是要加起来的。我们还可以利用[2.x.1979]函数，认识到在最小熵上形成最小值等于在最小熵的负值上形成最大值的负值；然后这个最大值可以与在最大熵上形成最大值结合起来。
//
[0.x.13652] 
[0.x.13653] 
[0.x.13654] 
//
[0.x.13655] 
[0.x.13656] 
//
// 以这种方式计算了所有的东西之后，我们就可以计算平均熵，并通过取最大值或最小值与平均值的偏差中的较大值来找到[2.x.1980]准则。
//
[0.x.13657] 
[0.x.13658] 
[0.x.13659] 
[0.x.13660] 
[0.x.13661] 
//
// [2.x.1981] 
//
// 下一个函数是计算整个领域内外推温度的最小值和最大值。同样，这只是 [2.x.1982] 中相应函数的一个略微修改的版本。和上面的函数一样，我们收集局部最小值和最大值，然后用上面的技巧计算全局极值。
//
// 正如在[2.x.1983]中已经讨论过的，该函数需要区分第一个时间步长和所有后续时间步长，因为当至少有两个以前的时间步长时，它使用了一个高阶温度外推方案。
//
[0.x.13662] 
[0.x.13663] 
[0.x.13664] 
[0.x.13665] 
[0.x.13666] 
[0.x.13667] 
[0.x.13668] 
//
[0.x.13669] 
[0.x.13670] 
[0.x.13671] 
[0.x.13672] 
[0.x.13673] 
[0.x.13674] 
//
[0.x.13675] 
[0.x.13676] 
//
[0.x.13677] 
[0.x.13678] 
[0.x.13679] 
[0.x.13680] 
[0.x.13681] 
[0.x.13682] 
[0.x.13683] 
[0.x.13684] 
[0.x.13685] 
[0.x.13686] 
//
[0.x.13687] 
[0.x.13688] 
[0.x.13689] 
[0.x.13690] 
[0.x.13691] 
[0.x.13692] 
//
[0.x.13693] 
[0.x.13694] 
[0.x.13695] 
[0.x.13696] 
[0.x.13697] 
[0.x.13698] 
[0.x.13699] 
[0.x.13700] 
[0.x.13701] 
[0.x.13702] 
[0.x.13703] 
[0.x.13704] 
[0.x.13705] 
[0.x.13706] 
[0.x.13707] 
//
[0.x.13708] 
[0.x.13709] 
[0.x.13710] 
//
[0.x.13711] 
[0.x.13712] 
[0.x.13713] 
[0.x.13714] 
[0.x.13715] 
[0.x.13716] 
[0.x.13717] 
//
[0.x.13718] 
[0.x.13719] 
[0.x.13720] 
//
[0.x.13721] 
[0.x.13722] 
//[2.x.1984] 
//
// 计算粘度的函数是纯粹的本地函数，所以根本不需要通信。它与[2.x.1985]中的内容基本相同，但如果选择[2.x.1986]，则会有一个最新的粘度表述。
//
[0.x.13723] 
[0.x.13724] 
[0.x.13725] 
[0.x.13726] 
[0.x.13727] 
[0.x.13728] 
[0.x.13729] 
[0.x.13730] 
[0.x.13731] 
[0.x.13732] 
[0.x.13733] 
[0.x.13734] 
[0.x.13735] 
[0.x.13736] 
[0.x.13737] 
[0.x.13738] 
[0.x.13739] 
[0.x.13740] 
[0.x.13741] 
[0.x.13742] 
//
[0.x.13743] 
//
[0.x.13744] 
[0.x.13745] 
//
[0.x.13746] 
[0.x.13747] 
[0.x.13748] 
[0.x.13749] 
//
[0.x.13750] 
[0.x.13751] 
//
[0.x.13752] 
[0.x.13753] 
[0.x.13754] 
[0.x.13755] 
[0.x.13756] 
//
[0.x.13757] 
[0.x.13758] 
[0.x.13759] 
[0.x.13760] 
[0.x.13761] 
[0.x.13762] 
[0.x.13763] 
[0.x.13764] 
//
[0.x.13765] 
[0.x.13766] 
[0.x.13767] 
//
[0.x.13768] 
[0.x.13769] 
[0.x.13770] 
//
[0.x.13771] 
[0.x.13772] 
[0.x.13773] 
[0.x.13774] 
[0.x.13775] 
[0.x.13776] 
[0.x.13777] 
//
[0.x.13778] 
[0.x.13779] 
[0.x.13780] 
[0.x.13781] 
[0.x.13782] 
[0.x.13783] 
[0.x.13784] 
[0.x.13785] 
[0.x.13786] 
[0.x.13787] 
//
[0.x.13788] 
[0.x.13789] 
[0.x.13790] 
//
// [2.x.1987] 
//
// 以下三个函数设置了斯托克斯矩阵、用于斯托克斯预调节器的矩阵和温度矩阵。这些代码与[2.x.1988]中的代码基本相同，但为了简单起见，将其分成了三个自己的函数。
//
// 这里的代码与[2.x.1989]中的代码在功能上的主要区别是，我们要建立的矩阵是分布在多个处理器上的。由于我们仍然希望出于效率的原因先建立起稀疏性模式，我们可以继续将[1.x.56]的稀疏性模式作为BlockDynamicSparsityPattern来建立，正如我们在[2.x.1990]中所做的那样。然而，这将是低效的：每个处理器将建立相同的稀疏性模式，但只用它初始化矩阵的一小部分。这也违反了一个原则，即每个处理器应该只对它所拥有的单元格（如果有必要的话，还有它周围的幽灵单元格层）工作。
//
// 相反，我们使用一个类型为[2.x.1991]的对象，它（显然）是对Trilinos提供的稀疏模式对象的一个封装。这样做的好处是Trilinos稀疏模式类可以在多个处理器之间进行通信：如果这个处理器填入它所拥有的单元格产生的所有非零条目，并且其他每个处理器也这样做，那么在由[2.x.1992]调用发起的MPI通信结束后，我们将有全局组装的稀疏模式可用，全局矩阵可以被初始化。
//
// 在并行初始化Trilinos稀疏度模式时，有一个重要的方面。除了通过[2.x.1993]索引集指定矩阵的本地拥有的行和列之外，我们还提供了在某个处理器上装配时可能要写进的所有行的信息。本地相关行的集合包含了所有这样的行（可能还有一些不必要的行，但在实际获得所有单元格的索引和解决约束之前，很难找到确切的行索引）。这种额外的信息可以准确地确定在装配过程中发现的非处理器数据的结构。虽然Trilinos矩阵也能在飞行中收集这些信息（当从其他一些reinit方法初始化它们时），但效率较低，在用多线程组装矩阵时，会导致问题。在这个程序中，我们悲观地假设每次只有一个处理器可以在组装时写入矩阵（而计算是并行的），这对特里诺斯矩阵是没有问题的。在实践中，可以通过在不共享顶点的单元中提示WorkStream来做得更好，允许这些单元之间的并行性（参见图形着色算法和带有彩色迭代器的WorkStream参数）。然而，这只在只有一个MPI处理器的情况下有效，因为Trilinos的内部数据结构在飞行中积累非处理器的数据，不是线程安全。有了这里介绍的初始化，就不存在这样的问题，人们可以安全地为这个算法引入图形着色。
//
// 我们唯一需要做的改变是告诉[2.x.1994]函数，它只应该在一个单元格子集上工作，即那些[2.x.1995]等于当前处理器数量的单元格，而忽略所有其他单元格。
//
// 这个策略被复制到以下三个函数中。
//
// 注意，Trilinos 矩阵存储的信息包含在稀疏模式中，所以一旦矩阵被赋予稀疏结构，我们就可以安全地释放 [2.x.1996] 变量。
//
[0.x.13791] 
[0.x.13792] 
[0.x.13793] 
[0.x.13794] 
[0.x.13795] 
[0.x.13796] 
//
[0.x.13797] 
[0.x.13798] 
[0.x.13799] 
[0.x.13800] 
//
[0.x.13801] 
[0.x.13802] 
[0.x.13803] 
[0.x.13804] 
[0.x.13805] 
[0.x.13806] 
[0.x.13807] 
//
[0.x.13808] 
[0.x.13809] 
[0.x.13810] 
[0.x.13811] 
[0.x.13812] 
[0.x.13813] 
[0.x.13814] 
[0.x.13815] 
//
[0.x.13816] 
[0.x.13817] 
//
[0.x.13818] 
[0.x.13819] 
[0.x.13820] 
[0.x.13821] 
[0.x.13822] 
[0.x.13823] 
[0.x.13824] 
//
[0.x.13825] 
//
[0.x.13826] 
[0.x.13827] 
[0.x.13828] 
[0.x.13829] 
//
[0.x.13830] 
[0.x.13831] 
[0.x.13832] 
[0.x.13833] 
[0.x.13834] 
[0.x.13835] 
[0.x.13836] 
//
[0.x.13837] 
[0.x.13838] 
[0.x.13839] 
[0.x.13840] 
[0.x.13841] 
[0.x.13842] 
[0.x.13843] 
[0.x.13844] 
//
[0.x.13845] 
[0.x.13846] 
//
[0.x.13847] 
[0.x.13848] 
[0.x.13849] 
[0.x.13850] 
[0.x.13851] 
[0.x.13852] 
[0.x.13853] 
[0.x.13854] 
[0.x.13855] 
//
[0.x.13856] 
[0.x.13857] 
[0.x.13858] 
[0.x.13859] 
[0.x.13860] 
[0.x.13861] 
[0.x.13862] 
[0.x.13863] 
[0.x.13864] 
[0.x.13865] 
[0.x.13866] 
//
[0.x.13867] 
[0.x.13868] 
[0.x.13869] 
[0.x.13870] 
//
// 设置函数的其余部分（在拆分出上面的三个函数后）主要是处理我们需要做的跨处理器并行化的事情。因为设置所有这些都是程序的一个重要的计算时间支出，所以我们把在这里做的所有事情都放到一个定时器组中，这样我们就可以在程序结束时得到关于这部分时间的总结信息。
//
// 像往常一样，我们在顶部列举自由度，并按照组件/块进行排序，然后从零号处理器开始将它们的数字写到屏幕上。当[2.x.1997]函数应用于[2.x.1998]对象时，对自由度的排序是这样的：所有与子域0相关的自由度排在所有与子域1相关的自由度之前，等等。对于斯托克斯部分，这意味着速度和压力会混在一起，但这可以通过再次按块排序来解决；值得注意的是，后一种操作只保留了所有速度和压力的相对顺序，即在速度块内，我们仍然会将所有与子域零相关的速度放在与子域一相关的速度之前，等等。这一点很重要，因为我们把这个矩阵的每一个块都分布在所有的处理器上，并且希望这样做的方式是，每个处理器存储的矩阵部分与它将实际工作的单元上的自由度大致相等。
//
// 在打印自由度的数字时，注意如果我们使用许多处理器，这些数字将会很大。因此，我们让流在每三个数字之间放一个逗号分隔符。流的状态，使用locale，从这个操作之前保存到之后。虽然有点不透明，但这段代码是有效的，因为默认的locale（我们使用构造函数调用[2.x.1999]得到的）意味着打印数字时，每三位数字都有一个逗号分隔符（即千、百万、亿）。
//
// 在这个函数以及下面的许多函数中，我们测量了我们在这里花费的时间，并将其收集在一个叫做 "设置dof系统 "的部分，跨函数调用。这是用一个[2.x.2000]对象完成的，该对象在构建本地变量时，在上述名称为`computing_timer`的部分启动一个定时器；当`timing_section`变量的析构器被调用时，该定时器再次停止。 当然，这要么发生在函数的末尾，要么我们通过`return`语句离开函数，或者在某处抛出异常时--换句话说，只要我们以任何方式离开这个函数。因此，使用这种 "范围 "对象可以确保我们不必手动添加代码，告诉定时器在每个可能离开这个函数的地方停止。
//
[0.x.13871] 
[0.x.13872] 
[0.x.13873] 
[0.x.13874] 
//
[0.x.13875] 
//
[0.x.13876] 
[0.x.13877] 
[0.x.13878] 
//
[0.x.13879] 
//
[0.x.13880] 
[0.x.13881] 
//
[0.x.13882] 
[0.x.13883] 
[0.x.13884] 
//
[0.x.13885] 
[0.x.13886] 
[0.x.13887] 
[0.x.13888] 
[0.x.13889] 
[0.x.13890] 
[0.x.13891] 
[0.x.13892] 
//
// 在这之后，我们必须设置各种分区器（类型为[2.x.2001] ，见介绍），描述每个矩阵或向量的哪些部分将被存储在哪里，然后调用实际设置矩阵的函数，在最后还要调整我们在这个程序中保留的各种向量的大小。
//
[0.x.13893] 
[0.x.13894] 
[0.x.13895] 
[0.x.13896] 
[0.x.13897] 
[0.x.13898] 
[0.x.13899] 
[0.x.13900] 
//
[0.x.13901] 
[0.x.13902] 
[0.x.13903] 
[0.x.13904] 
[0.x.13905] 
[0.x.13906] 
//
[0.x.13907] 
[0.x.13908] 
[0.x.13909] 
[0.x.13910] 
//
// 在这之后，我们可以计算求解向量的约束，包括悬挂节点约束和斯托克斯和温度场的同质和非同质边界值。请注意，和其他一切一样，约束对象不能在每个处理器上都持有[1.x.57]约束。相反，鉴于每个处理器只在其拥有的单元上组装线性系统，因此每个处理器只需要存储那些对正确性实际必要的约束。正如在[2.x.2002]"本文 "中所讨论的，我们需要了解的约束集正是所有本地相关自由度的约束集，所以这就是我们用来初始化约束对象的。
//
[0.x.13911] 
[0.x.13912] 
[0.x.13913] 
//
[0.x.13914] 
[0.x.13915] 
//
[0.x.13916] 
[0.x.13917] 
[0.x.13918] 
[0.x.13919] 
[0.x.13920] 
[0.x.13921] 
[0.x.13922] 
//
[0.x.13923] 
[0.x.13924] 
[0.x.13925] 
[0.x.13926] 
[0.x.13927] 
[0.x.13928] 
[0.x.13929] 
[0.x.13930] 
[0.x.13931] 
[0.x.13932] 
[0.x.13933] 
[0.x.13934] 
//
[0.x.13935] 
[0.x.13936] 
[0.x.13937] 
[0.x.13938] 
[0.x.13939] 
[0.x.13940] 
[0.x.13941] 
[0.x.13942] 
[0.x.13943] 
[0.x.13944] 
[0.x.13945] 
[0.x.13946] 
[0.x.13947] 
[0.x.13948] 
//
// 做完这些，我们就可以将各种矩阵和向量对象初始化到合适的大小。在最后，我们还记录了所有的矩阵和前置条件器必须在下一个时间步长开始时重新计算。注意我们是如何初始化斯托克斯和温度右侧的向量的。这些是可写的向量（最后一个布尔参数设置为[2.x.2003]），具有正确的一对一的本地拥有元素的分区，但仍被赋予相关的分区，以弄清要立即设置的向量条目。至于矩阵，这允许用多个线程将本地贡献写入向量（总是假设同一向量条目不被多个线程同时访问）。其他向量只允许对单个元素的读取访问，包括鬼魂，但不适合求解器。
//
[0.x.13949] 
[0.x.13950] 
[0.x.13951] 
[0.x.13952] 
[0.x.13953] 
//
[0.x.13954] 
[0.x.13955] 
[0.x.13956] 
[0.x.13957] 
[0.x.13958] 
[0.x.13959] 
//
[0.x.13960] 
[0.x.13961] 
[0.x.13962] 
[0.x.13963] 
[0.x.13964] 
[0.x.13965] 
[0.x.13966] 
[0.x.13967] 
//
[0.x.13968] 
[0.x.13969] 
[0.x.13970] 
[0.x.13971] 
[0.x.13972] 
//
// [2.x.2004] 
//
// 按照介绍和[2.x.2005]模块中的讨论，我们将装配功能分成不同的部分。
//
// [2.x.2006] 
// [2.x.2007] 矩阵和右手边的局部计算，给定某个单元作为输入（这些函数被命名为下面的[2.x.2008]）。换句话说，得出的函数基本上是[2.x.2009]中所有单元格的循环体。然而，请注意，这些函数将本地计算的结果存储在CopyData命名空间的类的变量中。
//
// [2.x.2010] 然后这些对象被交给第二步，将本地数据写入全局数据结构中（这些函数被命名为下面的[2.x.2011]）。这些函数是相当琐碎的。
//
// [2.x.2012] 然后这两个子函数被用于各自的汇编例程（下面称为[2.x.2013]），在那里，一个WorkStream对象被设置并在属于处理器子域的所有单元中运行。  [2.x.2014] 
//[2.x.2015] 
//
// 让我们从构建斯托克斯预处理的函数开始。考虑到上面的讨论，其中的前两个是非常微不足道的。请特别注意，使用scratch数据对象的主要意义在于，我们希望避免每次访问新单元时在自由空间上分配任何对象。因此，下面的汇编函数只有自动的局部变量，其他的都是通过从头开始的数据对象访问的，在我们开始对所有单元进行循环之前，只分配了一次。
//
[0.x.13973] 
[0.x.13974] 
[0.x.13975] 
[0.x.13976] 
[0.x.13977] 
[0.x.13978] 
[0.x.13979] 
[0.x.13980] 
[0.x.13981] 
//
[0.x.13982] 
[0.x.13983] 
//
[0.x.13984] 
[0.x.13985] 
//
[0.x.13986] 
//
[0.x.13987] 
[0.x.13988] 
[0.x.13989] 
[0.x.13990] 
[0.x.13991] 
[0.x.13992] 
[0.x.13993] 
[0.x.13994] 
//
[0.x.13995] 
[0.x.13996] 
[0.x.13997] 
[0.x.13998] 
[0.x.13999] 
[0.x.14000] 
[0.x.14001] 
[0.x.14002] 
[0.x.14003] 
[0.x.14004] 
[0.x.14005] 
//
[0.x.14006] 
[0.x.14007] 
[0.x.14008] 
[0.x.14009] 
[0.x.14010] 
[0.x.14011] 
[0.x.14012] 
[0.x.14013] 
//
// 现在是真正把事情放在一起的函数，使用WorkStream函数。  [2.x.2016]需要一个开始和结束迭代器来列举它应该工作的单元格。通常情况下，我们会使用[2.x.2017]和[2.x.2018]来实现这一点，但在这里，我们实际上只想获得事实上由当前处理器拥有的单元格子集。这就是FilteredIterator类发挥作用的地方：你给它一个单元格范围，它提供一个迭代器，只迭代满足某个谓词的单元格子集（谓词是一个参数的函数，要么返回真，要么返回假）。我们在这里使用的谓词是[2.x.2019]，也就是说，如果单元格为当前处理器所拥有，它就会准确返回真。这样得到的迭代器范围正是我们需要的。
//
// 有了这个障碍，我们用这组单元格、scratch和copy对象以及两个函数的指针来调用[2.x.2020]函数：本地装配和copy-local-to-global函数。这些函数需要有非常具体的签名：前者有三个参数，后者有一个参数（关于这些参数的含义，请参见[2.x.2021]函数的文档）。注意我们是如何使用lambda函数来创建一个满足这一要求的函数对象的。它使用了指定单元格、抓取数据和复制数据的本地装配函数的函数参数，以及期望将数据写入全局矩阵的复制函数的函数参数（也可参见[2.x.2022]的[2.x.2023]函数中的讨论）。另一方面，成员函数的隐含的第2个参数（即该成员函数要操作的对象的[2.x.2024]指针）是[1.x.58]到当前函数的[2.x.2025]指针的，并被捕获。因此，[2.x.2026]函数不需要知道这些函数所操作的对象的任何信息。
//
// 当WorkStream被执行时，它将为几个单元创建几个第一类的本地装配例程，并让一些可用的处理器对其工作。然而，需要同步的函数，即写进全局矩阵的操作，每次只由一个线程按照规定的顺序执行。当然，这只适用于单个MPI进程上的并行化。不同的MPI进程将有自己的WorkStream对象，并完全独立地进行这项工作（并且在不同的内存空间）。在分布式计算中，一些数据将积累在不属于各自处理器的自由度上。如果每次遇到这样的自由度就把数据送来送去，那就没有效率了。取而代之的是，Trilinos稀疏矩阵将保留这些数据，并在装配结束时通过调用[2.x.2027]命令将其发送给所有者。
//
[0.x.14014] 
[0.x.14015] 
[0.x.14016] 
[0.x.14017] 
//
[0.x.14018] 
//
[0.x.14019] 
[0.x.14020] 
//
[0.x.14021] 
[0.x.14022] 
[0.x.14023] 
[0.x.14024] 
[0.x.14025] 
[0.x.14026] 
//
[0.x.14027] 
[0.x.14028] 
[0.x.14029] 
[0.x.14030] 
//
[0.x.14031] 
[0.x.14032] 
[0.x.14033] 
[0.x.14034] 
[0.x.14035] 
[0.x.14036] 
[0.x.14037] 
[0.x.14038] 
[0.x.14039] 
[0.x.14040] 
[0.x.14041] 
[0.x.14042] 
//
[0.x.14043] 
[0.x.14044] 
//
// 这个模块的最后一个函数启动了斯托克斯预处理矩阵的装配，然后实际上是建立了斯托克斯预处理程序。它与串行情况下的功能基本相同。与[2.x.2028]唯一不同的是，我们对压力质量矩阵使用雅可比预处理，而不是IC，这一点在介绍中已经讨论过。
//
[0.x.14045] 
[0.x.14046] 
[0.x.14047] 
[0.x.14048] 
[0.x.14049] 
//
[0.x.14050] 
[0.x.14051] 
[0.x.14052] 
//
[0.x.14053] 
//
[0.x.14054] 
[0.x.14055] 
[0.x.14056] 
[0.x.14057] 
[0.x.14058] 
[0.x.14059] 
//
[0.x.14060] 
[0.x.14061] 
[0.x.14062] 
//
[0.x.14063] 
[0.x.14064] 
[0.x.14065] 
[0.x.14066] 
[0.x.14067] 
[0.x.14068] 
//
[0.x.14069] 
[0.x.14070] 
[0.x.14071] 
//
[0.x.14072] 
//
[0.x.14073] 
[0.x.14074] 
//[2.x.2029] 
//
// 接下来的三个函数实现了斯托克斯系统的装配，同样分为执行局部计算的部分，将局部数据写入全局矩阵和向量的部分，以及在WorkStream类的帮助下实际运行所有单元的循环。请注意，只有在我们改变了网格的情况下才需要进行斯托克斯矩阵的组装。否则，这里只需要计算（与温度有关的）右手边。由于我们正在处理分布式矩阵和向量，我们必须在装配结束时调用相应的[2.x.2030]函数，以便将非本地数据发送到所有者进程。
//
[0.x.14075] 
[0.x.14076] 
[0.x.14077] 
[0.x.14078] 
[0.x.14079] 
[0.x.14080] 
[0.x.14081] 
[0.x.14082] 
[0.x.14083] 
[0.x.14084] 
//
[0.x.14085] 
[0.x.14086] 
//
[0.x.14087] 
//
[0.x.14088] 
[0.x.14089] 
[0.x.14090] 
//
[0.x.14091] 
[0.x.14092] 
[0.x.14093] 
//
[0.x.14094] 
[0.x.14095] 
//
[0.x.14096] 
[0.x.14097] 
[0.x.14098] 
//
[0.x.14099] 
[0.x.14100] 
[0.x.14101] 
[0.x.14102] 
[0.x.14103] 
[0.x.14104] 
[0.x.14105] 
[0.x.14106] 
[0.x.14107] 
[0.x.14108] 
[0.x.14109] 
[0.x.14110] 
[0.x.14111] 
//
[0.x.14112] 
[0.x.14113] 
[0.x.14114] 
[0.x.14115] 
[0.x.14116] 
[0.x.14117] 
[0.x.14118] 
[0.x.14119] 
[0.x.14120] 
[0.x.14121] 
[0.x.14122] 
//
[0.x.14123] 
[0.x.14124] 
//
[0.x.14125] 
[0.x.14126] 
[0.x.14127] 
[0.x.14128] 
[0.x.14129] 
//
[0.x.14130] 
[0.x.14131] 
//
[0.x.14132] 
[0.x.14133] 
[0.x.14134] 
[0.x.14135] 
[0.x.14136] 
[0.x.14137] 
[0.x.14138] 
[0.x.14139] 
[0.x.14140] 
[0.x.14141] 
[0.x.14142] 
[0.x.14143] 
[0.x.14144] 
[0.x.14145] 
[0.x.14146] 
//
[0.x.14147] 
[0.x.14148] 
[0.x.14149] 
[0.x.14150] 
[0.x.14151] 
//
[0.x.14152] 
[0.x.14153] 
//
[0.x.14154] 
//
[0.x.14155] 
//
[0.x.14156] 
[0.x.14157] 
//
[0.x.14158] 
[0.x.14159] 
[0.x.14160] 
[0.x.14161] 
[0.x.14162] 
[0.x.14163] 
[0.x.14164] 
[0.x.14165] 
[0.x.14166] 
[0.x.14167] 
[0.x.14168] 
[0.x.14169] 
[0.x.14170] 
[0.x.14171] 
[0.x.14172] 
[0.x.14173] 
[0.x.14174] 
[0.x.14175] 
[0.x.14176] 
[0.x.14177] 
[0.x.14178] 
//
[0.x.14179] 
[0.x.14180] 
[0.x.14181] 
//
[0.x.14182] 
//
[0.x.14183] 
[0.x.14184] 
//[2.x.2031] 
//
// 下面三个函数要完成的任务是计算温度系统的质量矩阵和拉普拉斯矩阵。这些将被结合起来，以产生半隐式时间步进矩阵，该矩阵由质量矩阵加上一个与时间[2.x.2032]相关的权重系数乘以拉普拉斯矩阵组成。这个函数本质上还是从[2.x.2033]开始的所有单元的循环主体。
//
// 下面两个函数的功能与上面的类似。
//
[0.x.14185] 
[0.x.14186] 
[0.x.14187] 
[0.x.14188] 
[0.x.14189] 
[0.x.14190] 
[0.x.14191] 
[0.x.14192] 
[0.x.14193] 
[0.x.14194] 
//
[0.x.14195] 
[0.x.14196] 
//
[0.x.14197] 
[0.x.14198] 
//
[0.x.14199] 
[0.x.14200] 
[0.x.14201] 
[0.x.14202] 
[0.x.14203] 
[0.x.14204] 
[0.x.14205] 
[0.x.14206] 
//
[0.x.14207] 
[0.x.14208] 
[0.x.14209] 
[0.x.14210] 
[0.x.14211] 
[0.x.14212] 
[0.x.14213] 
[0.x.14214] 
[0.x.14215] 
[0.x.14216] 
[0.x.14217] 
[0.x.14218] 
//
[0.x.14219] 
[0.x.14220] 
[0.x.14221] 
[0.x.14222] 
[0.x.14223] 
[0.x.14224] 
[0.x.14225] 
[0.x.14226] 
[0.x.14227] 
[0.x.14228] 
[0.x.14229] 
[0.x.14230] 
//
[0.x.14231] 
[0.x.14232] 
[0.x.14233] 
[0.x.14234] 
[0.x.14235] 
//
[0.x.14236] 
[0.x.14237] 
[0.x.14238] 
[0.x.14239] 
//
[0.x.14240] 
//
[0.x.14241] 
[0.x.14242] 
//
[0.x.14243] 
[0.x.14244] 
[0.x.14245] 
[0.x.14246] 
[0.x.14247] 
[0.x.14248] 
[0.x.14249] 
[0.x.14250] 
[0.x.14251] 
[0.x.14252] 
[0.x.14253] 
[0.x.14254] 
[0.x.14255] 
[0.x.14256] 
[0.x.14257] 
[0.x.14258] 
[0.x.14259] 
//
[0.x.14260] 
[0.x.14261] 
//
[0.x.14262] 
[0.x.14263] 
[0.x.14264] 
//[2.x.2034] 
//
// 这是最后一个装配函数。它计算温度系统的右侧，其中包括对流和稳定项。它包括对正交点上的旧解的大量评估（这对于计算稳定化的人工粘性是必要的），但在其他方面与其他装配函数类似。请注意，我们再次解决了具有不均匀边界条件的困境，只是在这一点上做了一个右手边（比较上面对[2.x.2035]函数的评论）。我们创建一些矩阵列，其值正好是为温度刚度矩阵输入的值，如果我们有不均匀约束的DFS的话。这将说明右边的向量与温度矩阵系统的正确平衡。
//
[0.x.14265] 
[0.x.14266] 
[0.x.14267] 
[0.x.14268] 
[0.x.14269] 
[0.x.14270] 
[0.x.14271] 
[0.x.14272] 
[0.x.14273] 
[0.x.14274] 
//
[0.x.14275] 
[0.x.14276] 
[0.x.14277] 
[0.x.14278] 
//
[0.x.14279] 
//
[0.x.14280] 
[0.x.14281] 
[0.x.14282] 
//
[0.x.14283] 
//
[0.x.14284] 
[0.x.14285] 
[0.x.14286] 
//
[0.x.14287] 
[0.x.14288] 
[0.x.14289] 
[0.x.14290] 
//
[0.x.14291] 
[0.x.14292] 
[0.x.14293] 
[0.x.14294] 
//
[0.x.14295] 
[0.x.14296] 
[0.x.14297] 
[0.x.14298] 
//
[0.x.14299] 
[0.x.14300] 
[0.x.14301] 
[0.x.14302] 
[0.x.14303] 
[0.x.14304] 
[0.x.14305] 
[0.x.14306] 
//
[0.x.14307] 
[0.x.14308] 
[0.x.14309] 
[0.x.14310] 
[0.x.14311] 
[0.x.14312] 
[0.x.14313] 
[0.x.14314] 
[0.x.14315] 
[0.x.14316] 
[0.x.14317] 
[0.x.14318] 
[0.x.14319] 
[0.x.14320] 
[0.x.14321] 
[0.x.14322] 
//
[0.x.14323] 
[0.x.14324] 
[0.x.14325] 
[0.x.14326] 
[0.x.14327] 
[0.x.14328] 
[0.x.14329] 
[0.x.14330] 
//
[0.x.14331] 
[0.x.14332] 
[0.x.14333] 
[0.x.14334] 
[0.x.14335] 
[0.x.14336] 
[0.x.14337] 
//
[0.x.14338] 
[0.x.14339] 
[0.x.14340] 
[0.x.14341] 
[0.x.14342] 
[0.x.14343] 
//
[0.x.14344] 
[0.x.14345] 
[0.x.14346] 
[0.x.14347] 
[0.x.14348] 
[0.x.14349] 
//
[0.x.14350] 
[0.x.14351] 
[0.x.14352] 
[0.x.14353] 
[0.x.14354] 
//
[0.x.14355] 
[0.x.14356] 
[0.x.14357] 
[0.x.14358] 
[0.x.14359] 
//
[0.x.14360] 
[0.x.14361] 
[0.x.14362] 
[0.x.14363] 
[0.x.14364] 
//
[0.x.14365] 
[0.x.14366] 
[0.x.14367] 
[0.x.14368] 
[0.x.14369] 
[0.x.14370] 
[0.x.14371] 
[0.x.14372] 
//
[0.x.14373] 
[0.x.14374] 
[0.x.14375] 
[0.x.14376] 
[0.x.14377] 
[0.x.14378] 
[0.x.14379] 
[0.x.14380] 
[0.x.14381] 
[0.x.14382] 
[0.x.14383] 
[0.x.14384] 
[0.x.14385] 
[0.x.14386] 
[0.x.14387] 
[0.x.14388] 
//
[0.x.14389] 
[0.x.14390] 
[0.x.14391] 
[0.x.14392] 
[0.x.14393] 
[0.x.14394] 
[0.x.14395] 
[0.x.14396] 
[0.x.14397] 
//
// 在运行实际计算右手边的WorkStream的函数中，我们也生成了最终矩阵。如上所述，它是质量矩阵和拉普拉斯矩阵的总和，再加上一些与时间[2.x.2036]相关的权重。这个权重是由BDF-2时间积分方案指定的，见 [2.x.2037] 中的介绍。这个教程程序的新内容（除了使用MPI并行化和WorkStream类），是我们现在也预先计算了温度预处理程序。原因是与求解器相比，设置雅可比预处理器需要明显的时间，因为我们通常只需要10到20次迭代来求解温度系统（这听起来很奇怪，因为雅可比实际上只包括对角线，但在特里诺斯，它是从更普遍的点松弛预处理器框架中衍生出来的，效率有点低）。因此，尽管由于时间步长可能会发生变化，矩阵条目可能会略有变化，但预先计算预处理程序的效率更高。这不是太大的问题，因为我们每隔几步就重新网格化（然后重新生成预处理程序）。
//
[0.x.14398] 
[0.x.14399] 
[0.x.14400] 
[0.x.14401] 
[0.x.14402] 
//
[0.x.14403] 
[0.x.14404] 
[0.x.14405] 
[0.x.14406] 
[0.x.14407] 
[0.x.14408] 
[0.x.14409] 
[0.x.14410] 
[0.x.14411] 
[0.x.14412] 
[0.x.14413] 
[0.x.14414] 
//
[0.x.14415] 
[0.x.14416] 
[0.x.14417] 
[0.x.14418] 
[0.x.14419] 
[0.x.14420] 
[0.x.14421] 
//
// 接下来的部分是计算右手边的向量。 为此，我们首先计算平均温度 [2.x.2038] ，我们通过残差 [2.x.2039] 来评估人工黏度的稳定。我们通过在熵粘度的定义中把最高和最低温度之间的中点定义为平均温度来做到这一点。另一种方法是使用积分平均，但结果对这种选择不是很敏感。那么剩下的就只需要再次调用[2.x.2040]，将每次调用都相同的[2.x.2041]函数的参数绑定到正确的值中。
//
[0.x.14422] 
//
[0.x.14423] 
[0.x.14424] 
[0.x.14425] 
//
[0.x.14426] 
[0.x.14427] 
[0.x.14428] 
[0.x.14429] 
//
[0.x.14430] 
[0.x.14431] 
//
[0.x.14432] 
[0.x.14433] 
[0.x.14434] 
[0.x.14435] 
[0.x.14436] 
[0.x.14437] 
[0.x.14438] 
[0.x.14439] 
[0.x.14440] 
[0.x.14441] 
[0.x.14442] 
[0.x.14443] 
//
[0.x.14444] 
[0.x.14445] 
[0.x.14446] 
//
[0.x.14447] 
[0.x.14448] 
[0.x.14449] 
[0.x.14450] 
[0.x.14451] 
[0.x.14452] 
[0.x.14453] 
[0.x.14454] 
[0.x.14455] 
//
[0.x.14456] 
[0.x.14457] 
//
// [2.x.2042] 
//
// 这个函数在Boussinesq问题的每个时间步长中求解线性系统。首先，我们在斯托克斯系统上工作，然后在温度系统上工作。从本质上讲，它与 [2.x.2043] 中的相应函数做了同样的事情。然而，这里有一些变化。
//
// 第一个变化与我们存储解决方案的方式有关：我们在每个MPI节点上保留具有本地拥有的自由度的向量加鬼魂节点。当我们进入一个应该用分布式矩阵进行矩阵-向量乘积的求解器时，这不是合适的形式，虽然。在那里，我们希望求解向量的分布方式与矩阵的分布方式相同，即没有任何重影。所以我们首先要做的是生成一个名为[2.x.2044]的分布式向量，并只将本地拥有的dof放入其中，这可以通过特里诺向量的[2.x.2045]整齐地完成。
//
// 接下来，我们为求解器缩放压力解（或者说，初始猜测），使其与矩阵中的长度尺度相匹配，正如在介绍中讨论的那样。在求解完成后，我们也会立即将压力值缩回到正确的单位。 我们还需要将悬挂节点的压力值设置为零。这一点我们在[2.x.2046]中也做过，以避免一些在求解阶段实际上无关紧要的向量项干扰舒尔补数。与[2.x.2047]不同的是，这里我们只对局部拥有的压力道夫进行了处理。在对斯托克斯解进行求解后，每个处理器将分布式解复制到解向量中，其中也包括鬼元素。
//
// 第三个也是最明显的变化是，我们有两种斯托克斯求解器的变体。一种是有时会崩溃的快速求解器，另一种是速度较慢的稳健求解器。这就是我们在介绍中已经讨论过的。以下是我们如何实现它的。首先，我们用快速求解器进行30次迭代，该求解器是基于AMG V型循环的简单预处理，而不是近似求解（这由[2.x.2048]对象的[2.x.2049]参数表示）。如果我们收敛了，一切都很好。如果我们没有收敛，求解器控制对象将抛出一个异常[2.x.2050]通常，这将中止程序，因为我们在通常的[2.x.2051]函数中没有捕捉它们。这当然不是我们想在这里发生的。相反，我们希望切换到强求解器，并继续用我们目前得到的任何矢量进行求解。因此，我们用C++的try/catch机制来捕获这个异常。然后我们在[2.x.2052]子句中简单地再次经历相同的求解器序列，这次我们将[2.x.2053]标志传递给强求解器的预处理程序，表示近似CG求解。
//
[0.x.14458] 
[0.x.14459] 
[0.x.14460] 
[0.x.14461] 
[0.x.14462] 
[0.x.14463] 
//
[0.x.14464] 
//
[0.x.14465] 
[0.x.14466] 
[0.x.14467] 
//
[0.x.14468] 
//
[0.x.14469] 
[0.x.14470] 
[0.x.14471] 
[0.x.14472] 
[0.x.14473] 
[0.x.14474] 
[0.x.14475] 
[0.x.14476] 
//
[0.x.14477] 
//
[0.x.14478] 
[0.x.14479] 
[0.x.14480] 
//
[0.x.14481] 
[0.x.14482] 
[0.x.14483] 
[0.x.14484] 
[0.x.14485] 
[0.x.14486] 
[0.x.14487] 
[0.x.14488] 
[0.x.14489] 
[0.x.14490] 
//
[0.x.14491] 
[0.x.14492] 
[0.x.14493] 
[0.x.14494] 
[0.x.14495] 
[0.x.14496] 
[0.x.14497] 
[0.x.14498] 
[0.x.14499] 
//
[0.x.14500] 
[0.x.14501] 
//
[0.x.14502] 
[0.x.14503] 
[0.x.14504] 
[0.x.14505] 
[0.x.14506] 
[0.x.14507] 
[0.x.14508] 
[0.x.14509] 
[0.x.14510] 
[0.x.14511] 
//
[0.x.14512] 
[0.x.14513] 
[0.x.14514] 
[0.x.14515] 
[0.x.14516] 
[0.x.14517] 
[0.x.14518] 
[0.x.14519] 
[0.x.14520] 
[0.x.14521] 
[0.x.14522] 
//
[0.x.14523] 
[0.x.14524] 
[0.x.14525] 
//
[0.x.14526] 
//
[0.x.14527] 
//
[0.x.14528] 
[0.x.14529] 
[0.x.14530] 
//
// 现在让我们转到温度部分。首先，我们计算时间步长。我们发现，对于壳的几何形状，我们需要三维的时间步长比二维的小。这是因为在这种情况下，单元格的变形更大（决定CFL数值的是最小的边长）。我们不是像[2.x.2054]中那样从最大速度和最小网格尺寸计算时间步长，而是计算局部的CFL数，即在每个单元上计算最大速度乘以网格尺寸，并计算它们的最大值。因此，我们需要将时间步长前面的因子选择得稍小一些。
//
// 在温度的右手边装配后，我们解决温度的线性系统（有完全分布的向量，没有任何鬼魂），应用约束条件，并将向量复制回有鬼魂的向量。
//
// 最后，我们提取与[2.x.2055]类似的温度范围，以产生一些输出（例如为了帮助我们选择稳定常数，如介绍中所讨论的）。唯一的区别是，我们需要在所有处理器上交换最大值。
//
[0.x.14531] 
[0.x.14532] 
[0.x.14533] 
//
[0.x.14534] 
//
[0.x.14535] 
[0.x.14536] 
[0.x.14537] 
//
[0.x.14538] 
[0.x.14539] 
[0.x.14540] 
[0.x.14541] 
[0.x.14542] 
[0.x.14543] 
[0.x.14544] 
//
[0.x.14545] 
[0.x.14546] 
[0.x.14547] 
//
[0.x.14548] 
[0.x.14549] 
[0.x.14550] 
//
[0.x.14551] 
[0.x.14552] 
[0.x.14553] 
//
[0.x.14554] 
[0.x.14555] 
[0.x.14556] 
//
[0.x.14557] 
[0.x.14558] 
[0.x.14559] 
[0.x.14560] 
//
[0.x.14561] 
[0.x.14562] 
//
[0.x.14563] 
[0.x.14564] 
//
[0.x.14565] 
[0.x.14566] 
[0.x.14567] 
//
[0.x.14568] 
[0.x.14569] 
[0.x.14570] 
[0.x.14571] 
[0.x.14572] 
[0.x.14573] 
[0.x.14574] 
[0.x.14575] 
[0.x.14576] 
[0.x.14577] 
[0.x.14578] 
[0.x.14579] 
//
[0.x.14580] 
[0.x.14581] 
[0.x.14582] 
//
[0.x.14583] 
[0.x.14584] 
[0.x.14585] 
[0.x.14586] 
//[2.x.2056] 
//
// 接下来是生成输出的函数。输出的数量可以像我们在 [2.x.2057] 中那样手动引入。另一种方法是把这个任务交给一个继承自DataPostprocessor类的PostProcessor，它可以被附加到DataOut。这允许我们从解决方案中输出派生量，比如本例中包含的摩擦热。它重载了虚拟函数[2.x.2058]，然后从[2.x.2059]内部调用。 我们必须给它数值解、它的导数、单元的法线、实际评估点和任何额外的数量。这与[2.x.2060]和其他程序中讨论的程序相同。
//
[0.x.14587] 
[0.x.14588] 
[0.x.14589] 
[0.x.14590] 
[0.x.14591] 
[0.x.14592] 
//
[0.x.14593] 
[0.x.14594] 
[0.x.14595] 
//
[0.x.14596] 
//
[0.x.14597] 
[0.x.14598] 
[0.x.14599] 
//
[0.x.14600] 
//
[0.x.14601] 
[0.x.14602] 
[0.x.14603] 
[0.x.14604] 
//
[0.x.14605] 
[0.x.14606] 
[0.x.14607] 
[0.x.14608] 
[0.x.14609] 
[0.x.14610] 
[0.x.14611] 
//
// 这里我们定义了要输出的变量的名称。这些是速度、压力和温度的实际求解值，以及摩擦热和对每个单元拥有的处理器的编号。这使我们能够直观地看到处理器之间的领域划分。除了速度是矢量值的，其他的量都是标量。
//
[0.x.14612] 
[0.x.14613] 
[0.x.14614] 
[0.x.14615] 
[0.x.14616] 
[0.x.14617] 
[0.x.14618] 
[0.x.14619] 
[0.x.14620] 
//
[0.x.14621] 
[0.x.14622] 
//
[0.x.14623] 
[0.x.14624] 
[0.x.14625] 
[0.x.14626] 
[0.x.14627] 
[0.x.14628] 
[0.x.14629] 
[0.x.14630] 
//
[0.x.14631] 
[0.x.14632] 
[0.x.14633] 
[0.x.14634] 
//
[0.x.14635] 
[0.x.14636] 
//
[0.x.14637] 
[0.x.14638] 
[0.x.14639] 
[0.x.14640] 
[0.x.14641] 
[0.x.14642] 
//
// 现在我们实现计算派生量的函数。正如我们对输出所做的那样，我们将速度从其SI单位重新调整为更容易阅读的单位，即厘米/年。接下来，压力被缩放为0和最大压力之间。这使得它更容易比较--本质上是使所有的压力变量变成正数或零。温度按原样计算，摩擦热按 [2.x.2061] 计算。
//
// 我们在这里输出的数量更多的是为了说明问题，而不是为了实际的科学价值。我们在本程序的结果部分简要地回到这一点，并解释人们实际上可能感兴趣的是什么。
//
[0.x.14643] 
[0.x.14644] 
[0.x.14645] 
[0.x.14646] 
[0.x.14647] 
[0.x.14648] 
[0.x.14649] 
[0.x.14650] 
[0.x.14651] 
[0.x.14652] 
[0.x.14653] 
//
[0.x.14654] 
[0.x.14655] 
[0.x.14656] 
[0.x.14657] 
[0.x.14658] 
//
[0.x.14659] 
[0.x.14660] 
[0.x.14661] 
//
[0.x.14662] 
[0.x.14663] 
//
[0.x.14664] 
[0.x.14665] 
[0.x.14666] 
[0.x.14667] 
[0.x.14668] 
[0.x.14669] 
//
[0.x.14670] 
[0.x.14671] 
[0.x.14672] 
//
// [2.x.2062]函数的任务与[2.x.2063]中的类似。然而，在这里我们将演示一种不同的技术，即如何合并来自不同DoFHandler对象的输出。我们要实现这种重组的方法是创建一个联合的DoFHandler，收集两个部分，斯托克斯解和温度解。这可以通过将两个系统的有限元结合起来形成一个FES系统来很好地完成，并让这个集体系统定义一个新的DoFHandler对象。为了确保一切都做得很正确，我们进行了一次理智的检查，确保我们从斯托克斯和温度两个系统中得到了所有的道夫，甚至是在组合系统中。然后我们将数据向量合并。不幸的是，没有直接的关系告诉我们如何将斯托克斯和温度矢量分类到联合矢量中。我们可以绕过这个麻烦的方法是依靠FES系统中收集的信息。对于一个单元上的每个dof，联合有限元知道它属于哪个方程分量（速度分量、压力或温度）--这就是我们所需要的信息！这就是我们所需要的。因此，我们通过所有单元（迭代器进入所有三个DoFHandlers同步移动），对于每个联合单元dof，我们使用[2.x.2064]函数读出该分量（关于其返回值的各个部分的描述见那里）。我们还需要跟踪我们是在斯托克斯道次还是温度道次，这包含在joint_fe.system_to_base_index(i).first.first中。最终，三个系统中的任何一个系统的dof_indices数据结构都会告诉我们全局矢量和局部dof之间的关系在当前单元上是怎样的，这就结束了这项繁琐的工作。我们确保每个处理器在建立联合求解向量时，只在其本地拥有的子域上工作（而不是在幽灵或人工单元上）。然后在[2.x.2065]中也要这样做，但该函数会自动这样做。
//
// 我们最终得到的是一组补丁，我们可以使用DataOutBase中的函数以各种输出格式编写补丁。在这里，我们必须注意，每个处理器所写的实际上只是它自己领域的一部分，也就是说，我们要把每个处理器的贡献写进一个单独的文件。我们通过在写解决方案时给文件名添加一个额外的数字来做到这一点。这其实并不新鲜，我们在 [2.x.2066] 中也是这样做的。注意，我们用压缩格式[2.x.2067]而不是普通的vtk文件来写，这样可以节省不少存储空间。
//
// 所有其余的工作都在后处理程序类中完成。
//
[0.x.14673] 
[0.x.14674] 
[0.x.14675] 
[0.x.14676] 
//
[0.x.14677] 
//
[0.x.14678] 
[0.x.14679] 
[0.x.14680] 
[0.x.14681] 
[0.x.14682] 
//
[0.x.14683] 
[0.x.14684] 
[0.x.14685] 
//
[0.x.14686] 
[0.x.14687] 
[0.x.14688] 
[0.x.14689] 
[0.x.14690] 
[0.x.14691] 
[0.x.14692] 
//
[0.x.14693] 
[0.x.14694] 
[0.x.14695] 
[0.x.14696] 
[0.x.14697] 
[0.x.14698] 
[0.x.14699] 
[0.x.14700] 
[0.x.14701] 
[0.x.14702] 
[0.x.14703] 
[0.x.14704] 
//
[0.x.14705] 
[0.x.14706] 
[0.x.14707] 
[0.x.14708] 
[0.x.14709] 
[0.x.14710] 
//
[0.x.14711] 
[0.x.14712] 
[0.x.14713] 
[0.x.14714] 
[0.x.14715] 
[0.x.14716] 
[0.x.14717] 
[0.x.14718] 
[0.x.14719] 
[0.x.14720] 
[0.x.14721] 
[0.x.14722] 
[0.x.14723] 
[0.x.14724] 
[0.x.14725] 
[0.x.14726] 
[0.x.14727] 
[0.x.14728] 
//
[0.x.14729] 
//
[0.x.14730] 
[0.x.14731] 
[0.x.14732] 
[0.x.14733] 
[0.x.14734] 
[0.x.14735] 
[0.x.14736] 
//
[0.x.14737] 
[0.x.14738] 
[0.x.14739] 
//
[0.x.14740] 
[0.x.14741] 
[0.x.14742] 
[0.x.14743] 
//
[0.x.14744] 
[0.x.14745] 
[0.x.14746] 
//
[0.x.14747] 
[0.x.14748] 
//
// [2.x.2068] 
//
// 这个函数也不是真正的新函数。因为我们在中间调用的[2.x.2069]函数有自己的定时器部分，所以我们把这个函数的定时分成两部分。这也可以让我们很容易地识别出这两个中哪个更昂贵。
//
但是，//有一点需要注意的是，我们只想在本地拥有的子域上计算错误指标。为了达到这个目的，我们向[2.x.2070]函数传递一个额外的参数。请注意，用于误差估计的向量被调整为当前进程上存在的活动单元的数量，它小于所有处理器上活动单元的总数（但大于本地拥有的活动单元的数量）；每个处理器只有本地拥有的单元周围有一些粗略的单元，这在 [2.x.2071] 中也有解释。
//
// 本地误差估计值然后被交给GridRefinement的%并行版本（在命名空间[2.x.2072]中，也见[2.x.2073]），它查看误差并通过比较各处理器的误差值找到需要细化的单元。正如在[2.x.2074]中，我们希望限制最大的网格级别。因此，万一有些单元格已经被标记为最精细的级别，我们只需清除细化标志。
//
[0.x.14749] 
[0.x.14750] 
[0.x.14751] 
[0.x.14752] 
[0.x.14753] 
[0.x.14754] 
[0.x.14755] 
[0.x.14756] 
[0.x.14757] 
//
[0.x.14758] 
[0.x.14759] 
[0.x.14760] 
//
[0.x.14761] 
//
[0.x.14762] 
[0.x.14763] 
[0.x.14764] 
[0.x.14765] 
[0.x.14766] 
[0.x.14767] 
[0.x.14768] 
[0.x.14769] 
[0.x.14770] 
[0.x.14771] 
//
[0.x.14772] 
[0.x.14773] 
//
[0.x.14774] 
[0.x.14775] 
[0.x.14776] 
[0.x.14777] 
[0.x.14778] 
[0.x.14779] 
//
// 有了所有的标记，我们就可以告诉[2.x.2075]对象准备将数据从一个网格转移到下一个网格，当Triangulation作为[2.x.2076]调用的一部分通知他们时，他们就会这样做。语法类似于非%并行解决方案的传输（例外的是这里有一个指向向量项的指针就足够了）。下面函数的其余部分是在网格细化后再次设置数据结构，并在新的网格上恢复求解向量。
//
[0.x.14780] 
[0.x.14781] 
[0.x.14782] 
[0.x.14783] 
[0.x.14784] 
[0.x.14785] 
//
[0.x.14786] 
//
[0.x.14787] 
[0.x.14788] 
//
[0.x.14789] 
[0.x.14790] 
//
[0.x.14791] 
//
[0.x.14792] 
[0.x.14793] 
[0.x.14794] 
//
[0.x.14795] 
[0.x.14796] 
[0.x.14797] 
//
[0.x.14798] 
[0.x.14799] 
[0.x.14800] 
[0.x.14801] 
//
// 强制执行约束条件，使插值后的解决方案在新的网格上符合要求。
//
[0.x.14802] 
[0.x.14803] 
//
[0.x.14804] 
[0.x.14805] 
[0.x.14806] 
//
[0.x.14807] 
[0.x.14808] 
[0.x.14809] 
//
[0.x.14810] 
[0.x.14811] 
[0.x.14812] 
//
[0.x.14813] 
//
// 强制执行约束条件，使插值后的解决方案在新的网格上符合要求。
//
[0.x.14814] 
[0.x.14815] 
//
[0.x.14816] 
[0.x.14817] 
[0.x.14818] 
[0.x.14819] 
[0.x.14820] 
//
// [2.x.2077] 
//
// 这是这个类中的最后一个控制函数。事实上，它运行了整个程序的其余部分，并且再次与 [2.x.2078] 非常相似。唯一的实质性区别是我们现在使用了一个不同的网格（一个[2.x.2079]而不是一个简单的立方体几何）。
//
[0.x.14821] 
[0.x.14822] 
[0.x.14823] 
[0.x.14824] 
[0.x.14825] 
[0.x.14826] 
[0.x.14827] 
[0.x.14828] 
[0.x.14829] 
//
[0.x.14830] 
//
[0.x.14831] 
//
[0.x.14832] 
//
[0.x.14833] 
//
[0.x.14834] 
//
[0.x.14835] 
[0.x.14836] 
[0.x.14837] 
//[2.x.2080]通过deal.II自己的本地MatrixFree框架支持具有大多数标准有限元素的并行矢量类：由于我们使用中等阶数的标准拉格朗日元素，这个函数在这里工作得很好。
//
[0.x.14838] 
[0.x.14839] 
[0.x.14840] 
[0.x.14841] 
[0.x.14842] 
//
// 在如此计算了当前的温度字段之后，让我们设置保存温度节点的成员变量。严格来说，我们真的只需要设置[2.x.2081]，因为我们要做的第一件事是计算斯托克斯解，它只需要前一个时间步长的温度场。尽管如此，如果我们想扩展我们的数值方法或物理模型，不初始化其他的向量也不会有什么好处（特别是这是一个相对便宜的操作，我们只需要在程序开始时做一次），所以我们也初始化[2.x.2082]和[2.x.2083]。这个赋值确保了左边的向量（初始化后也包含鬼魂元素）也得到了正确的鬼魂元素。换句话说，这里的赋值需要处理器之间的通信。
//
[0.x.14843] 
[0.x.14844] 
[0.x.14845] 
[0.x.14846] 
//
[0.x.14847] 
[0.x.14848] 
//
[0.x.14849] 
//
[0.x.14850] 
[0.x.14851] 
[0.x.14852] 
[0.x.14853] 
[0.x.14854] 
//
[0.x.14855] 
[0.x.14856] 
[0.x.14857] 
//
[0.x.14858] 
//
[0.x.14859] 
//
[0.x.14860] 
[0.x.14861] 
[0.x.14862] 
[0.x.14863] 
[0.x.14864] 
[0.x.14865] 
[0.x.14866] 
[0.x.14867] 
[0.x.14868] 
[0.x.14869] 
[0.x.14870] 
[0.x.14871] 
[0.x.14872] 
//
[0.x.14873] 
[0.x.14874] 
[0.x.14875] 
//
// 为了加快线性求解器的速度，我们从旧的时间水平上推断出新的解决方案。这可以提供一个非常好的初始猜测，使求解器所需的迭代次数减少一半以上。我们不需要在最后一次迭代中进行推断，所以如果我们达到了最后的时间，我们就在这里停止。
//
// 作为一个时间步长的最后一件事（在实际提高时间步长之前），我们检查当前的时间步长是否被100整除，如果是的话，我们让计算计时器打印一个到目前为止所花费的CPU时间的总结。
//
[0.x.14876] 
[0.x.14877] 
//
[0.x.14878] 
[0.x.14879] 
[0.x.14880] 
[0.x.14881] 
[0.x.14882] 
[0.x.14883] 
[0.x.14884] 
//
// Trilinos sadd不喜欢鬼魂向量，即使作为输入。暂时复制到分布式向量中。
//
[0.x.14885] 
[0.x.14886] 
[0.x.14887] 
[0.x.14888] 
[0.x.14889] 
[0.x.14890] 
[0.x.14891] 
[0.x.14892] 
[0.x.14893] 
[0.x.14894] 
[0.x.14895] 
[0.x.14896] 
[0.x.14897] 
[0.x.14898] 
[0.x.14899] 
[0.x.14900] 
[0.x.14901] 
[0.x.14902] 
[0.x.14903] 
[0.x.14904] 
[0.x.14905] 
//
[0.x.14906] 
[0.x.14907] 
//
[0.x.14908] 
[0.x.14909] 
[0.x.14910] 
[0.x.14911] 
//
// 如果我们要生成图形输出，也要对最后一个时间步骤这样做，除非我们在离开do-while循环之前刚刚这样做。
//
[0.x.14912] 
[0.x.14913] 
[0.x.14914] 
[0.x.14915] 
[0.x.14916] 
//
// [2.x.2084] 
//
// 主函数像往常一样简短，与 [2.x.2085] 中的函数非常相似。由于我们使用了一个参数文件，该文件在命令行中被指定为参数，所以我们必须在这里读取它，并将其传递给参数类进行解析。如果命令行中没有给出文件名，我们就简单地使用与程序一起分发的 [2.x.2086] 文件。
//
// 由于三维计算非常缓慢，除非你投入大量的处理器，程序默认为二维。你可以通过把下面的常数维度改为3来获得三维版本。
//
[0.x.14917] 
[0.x.14918] 
[0.x.14919] 
[0.x.14920] 
[0.x.14921] 
[0.x.14922] 
//
[0.x.14923] 
[0.x.14924] 
//
[0.x.14925] 
[0.x.14926] 
[0.x.14927] 
[0.x.14928] 
[0.x.14929] 
//
[0.x.14930] 
[0.x.14931] 
[0.x.14932] 
[0.x.14933] 
[0.x.14934] 
[0.x.14935] 
[0.x.14936] 
[0.x.14937] 
[0.x.14938] 
[0.x.14939] 
[0.x.14940] 
[0.x.14941] 
[0.x.14942] 
[0.x.14943] 
[0.x.14944] 
[0.x.14945] 
//
[0.x.14946] 
[0.x.14947] 
[0.x.14948] 
[0.x.14949] 
[0.x.14950] 
[0.x.14951] 
[0.x.14952] 
[0.x.14953] 
[0.x.14954] 
[0.x.14955] 
[0.x.14956] 
[0.x.14957] 
[0.x.14958] 
[0.x.14959] 
//
[0.x.14960] 
[0.x.14961] 
[0.x.14962] 
[0.x.14963] 
[0.x.14964] 
[0.x.14965] 
[0.x.14966] 
[0.x.14967] 
[0.x.14968] 
[0.x.14969] 
[0.x.14970] 
[0.x.14971] 
[0.x.14972] 
[0.x.14973] 
[0.x.14974] 
[0.x.14975] 
//
[0.x.14976] 
[0.x.14977] 
[0.x.14978] 
//[2.x.2087] 
//
// 首先是一套标准的deal.II包括。这里没有什么特别需要评论的。
//
[0.x.14979] 
[0.x.14980] 
[0.x.14981] 
[0.x.14982] 
[0.x.14983] 
[0.x.14984] 
//
[0.x.14985] 
[0.x.14986] 
//
[0.x.14987] 
[0.x.14988] 
[0.x.14989] 
[0.x.14990] 
[0.x.14991] 
//
[0.x.14992] 
[0.x.14993] 
//
 
[0.x.14995] 
[0.x.14996] 
[0.x.14997] 
//
[0.x.14998] 
[0.x.14999] 
[0.x.15000] 
//
// 然后，正如介绍中提到的，我们使用各种Trilinos软件包作为线性求解器以及自动微分。这些都在以下的包含文件中。
//
// 由于deal.II提供了基本的Trilinos矩阵、预处理程序和求解器的接口，我们把它们作为deal.II线性代数结构类似地包括在内。
//
[0.x.15001] 
[0.x.15002] 
[0.x.15003] 
//
// Sacado是Trilinos中的自动微分包，用于寻找全隐式牛顿迭代的雅各布系数。
//
[0.x.15004] 
//
// 这又是C++语言。
//
[0.x.15005] 
[0.x.15006] 
[0.x.15007] 
[0.x.15008] 
[0.x.15009] 
//
// 在本节结束时，将dealii库中的所有内容引入本程序内容将进入的命名空间。
//
[0.x.15010] 
[0.x.15011] 
[0.x.15012] 
//[2.x.2088] 
//
// 这里我们定义了这个特定的守恒定律系统的通量函数，以及几乎所有其他的气体动力学欧拉方程所特有的东西，原因在介绍中讨论过。我们将所有这些归入一个结构，该结构定义了所有与通量有关的东西。这个结构的所有成员都是静态的，也就是说，这个结构没有由实例成员变量指定的实际状态。更好的方法是使用命名空间，而不是一个拥有所有静态成员的结构--但是命名空间不能被模板化，而且我们希望结构中的一些成员变量取决于空间维度，我们以通常的方式用模板参数来引入。
//
[0.x.15013] 
[0.x.15014] 
[0.x.15015] 
//[2.x.2089] 
//
// 首先是几个变量，它们以一种通用的方式描述了我们的解向量的各个组成部分。这包括系统中分量的数量（欧拉方程中每个空间方向的动量都有一个条目，加上能量和密度分量，总共有[2.x.2090]个分量），以及描述第一个动量分量、密度分量和能量密度分量在解向量中的索引的函数。请注意，所有这些%数都取决于空间维度；以通用的方式定义它们（而不是以隐含的惯例）使我们的代码更加灵活，并使以后的扩展更加容易，例如，在方程中加入更多的分量。
//
[0.x.15016] 
[0.x.15017] 
[0.x.15018] 
[0.x.15019] 
//
// 在这个程序中一路生成图形输出时，我们需要指定解变量的名称，以及各种成分如何分组为矢量和标量场。我们可以在这里进行描述，但是为了使与欧拉方程有关的事情在这里得到解决，并使程序的其他部分尽可能地通用，我们在以下两个函数中提供了这类信息。
//
[0.x.15020] 
[0.x.15021] 
[0.x.15022] 
[0.x.15023] 
[0.x.15024] 
//
[0.x.15025] 
[0.x.15026] 
//
[0.x.15027] 
[0.x.15028] 
[0.x.15029] 
[0.x.15030] 
[0.x.15031] 
[0.x.15032] 
[0.x.15033] 
[0.x.15034] 
[0.x.15035] 
[0.x.15036] 
//
[0.x.15037] 
[0.x.15038] 
//[2.x.2091] 
//
// 接下来，我们定义气体常数。我们将在紧接着这个类的声明之后的定义中把它设置为1.4（与整数变量不同，比如上面的变量，静态常量浮点成员变量不能在C++的类声明中被初始化）。这个1.4的值代表了由两个原子组成的分子的气体，比如空气，它几乎完全由[2.x.2092]和[2.x.2093]组成，痕迹很小。
//
[0.x.15039] 
//
// 在下文中，我们将需要从保守变量的矢量中计算动能和压力。我们可以根据能量密度和动能[2.x.2094]来做这件事（注意，独立变量包含动量分量[2.x.2095]，而不是速度[2.x.2096]）。
//
[0.x.15040] 
[0.x.15041] 
[0.x.15042] 
[0.x.15043] 
[0.x.15044] 
[0.x.15045] 
[0.x.15046] 
[0.x.15047] 
[0.x.15048] 
//
[0.x.15049] 
[0.x.15050] 
//
[0.x.15051] 
[0.x.15052] 
[0.x.15053] 
[0.x.15054] 
[0.x.15055] 
[0.x.15056] 
[0.x.15057] 
//[2.x.2097] 
//
// 我们将通量函数[2.x.2098]定义为一个大矩阵。 这个矩阵的每一行都代表了该行成分的标量守恒定律。 这个矩阵的确切形式在介绍中给出。请注意，我们知道这个矩阵的大小：它的行数与系统的分量一样多，[2.x.2099]列数一样多；我们没有为这样的矩阵使用FullMatrix对象（它的行数和列数是可变的，因此每次创建这样的矩阵时必须在堆上分配内存），而是马上使用一个矩形的数字阵列。
//
// 我们将通量函数的数值类型模板化，这样我们就可以在这里使用自动微分类型。 同样地，我们将用不同的输入矢量数据类型来调用该函数，所以我们也对其进行模板化。
//
[0.x.15058] 
[0.x.15059] 
[0.x.15060] 
[0.x.15061] 
[0.x.15062] 
[0.x.15063] 
//
// 首先计算出现在通量矩阵中的压力，然后计算矩阵中对应于动量项的前[2.x.2100]列。
//
[0.x.15064] 
//
[0.x.15065] 
[0.x.15066] 
[0.x.15067] 
[0.x.15068] 
[0.x.15069] 
[0.x.15070] 
//
[0.x.15071] 
[0.x.15072] 
//
// 然后是密度（即质量守恒）的条款，最后是能量守恒。
//
[0.x.15073] 
[0.x.15074] 
//
[0.x.15075] 
[0.x.15076] 
[0.x.15077] 
[0.x.15078] 
[0.x.15079] 
//[2.x.2101] 
//
// 在域的边界和跨挂节点上，我们使用一个数值通量函数来强制执行边界条件。 这个程序是基本的Lax-Friedrich的通量，有一个稳定的参数 [2.x.2102] 。它的形式也已经在介绍中给出。
//
[0.x.15080] 
[0.x.15081] 
[0.x.15082] 
[0.x.15083] 
[0.x.15084] 
[0.x.15085] 
[0.x.15086] 
[0.x.15087] 
[0.x.15088] 
[0.x.15089] 
[0.x.15090] 
[0.x.15091] 
//
[0.x.15092] 
[0.x.15093] 
//
[0.x.15094] 
[0.x.15095] 
[0.x.15096] 
[0.x.15097] 
[0.x.15098] 
//
[0.x.15099] 
[0.x.15100] 
[0.x.15101] 
//[2.x.2103] 
//
// 与描述通量函数[2.x.2104]的方式相同，我们也需要有一种方法来描述右侧的强迫项。正如介绍中提到的，我们在这里只考虑重力，这导致了具体的形式[2.x.2105]，这里显示的是三维情况。更具体地说，我们将只考虑三维的[2.x.2106]，或二维的[2.x.2107]。这自然导致了以下函数。
//
[0.x.15102] 
[0.x.15103] 
[0.x.15104] 
[0.x.15105] 
[0.x.15106] 
[0.x.15107] 
//
[0.x.15108] 
[0.x.15109] 
[0.x.15110] 
[0.x.15111] 
[0.x.15112] 
[0.x.15113] 
[0.x.15114] 
[0.x.15115] 
[0.x.15116] 
[0.x.15117] 
[0.x.15118] 
[0.x.15119] 
[0.x.15120] 
//[2.x.2108] 
//
// 我们必须处理的另一件事是边界条件。为此，让我们首先定义一下我们目前知道如何处理的各种边界条件。
//
[0.x.15121] 
[0.x.15122] 
[0.x.15123] 
[0.x.15124] 
[0.x.15125] 
[0.x.15126] 
[0.x.15127] 
//
// 接下来的部分是实际决定在每一种边界上做什么。为此，请记住，从介绍中可以看出，边界条件是通过在给定的不均匀性[2.x.2110]的边界外侧选择一个值[2.x.2109]，以及可能在内部选择解的值[2.x.2111]来指定的。然后，两者都被传递给数值通量[2.x.2112]，以定义边界对双线性形式的贡献。
//
// 边界条件在某些情况下可以为解矢量的每个分量独立指定。例如，如果分量[2.x.2113]被标记为流入，那么[2.x.2114] 。如果是流出，那么[2.x.2115] 。这两种简单的情况在下面的函数中首先得到处理。
//
// 有一个小插曲，从C++语言的角度来看，这个函数是不愉快的。输出向量 [2.x.2116] 当然会被修改，所以它不应该是 [2.x.2117] 的参数。然而，在下面的实现中，它却成为了参数，而且为了使代码能够编译，它必须成为参数。原因是我们在[2.x.2118]类型为[2.x.2119]的地方调用这个函数，这是一个2d表，其指数分别代表正交点和向量分量。我们用[2.x.2120]作为最后一个参数来调用这个函数；对2d表进行下标会产生一个代表1d向量的临时访问器对象，这正是我们在这里想要的。问题是，根据C++ 1998和2003标准，临时访问器对象不能被绑定到一个函数的非静态引用参数上，就像我们在这里希望的那样（这个问题将在下一个标准中以rvalue引用的形式得到解决）。 我们在这里把输出参数变成常量，是因为[1.x.59]对象是常量，而不是它所指向的表：那个表仍然可以被写到。然而，这个黑客是不愉快的，因为它限制了可以作为这个函数的模板参数的数据类型：一个普通的向量是不行的，因为当标记为 [2.x.2121] 时，不能被写入。由于目前没有好的解决方案，我们将采用这里显示的务实的，甚至是不漂亮的解决方案。
//
[0.x.15128] 
[0.x.15129] 
[0.x.15130] 
[0.x.15131] 
[0.x.15132] 
[0.x.15133] 
[0.x.15134] 
[0.x.15135] 
[0.x.15136] 
[0.x.15137] 
[0.x.15138] 
[0.x.15139] 
[0.x.15140] 
[0.x.15141] 
[0.x.15142] 
[0.x.15143] 
//
[0.x.15144] 
[0.x.15145] 
[0.x.15146] 
[0.x.15147] 
[0.x.15148] 
//
// 规定的压力边界条件有点复杂，因为即使压力是规定的，我们在这里真正设定的是能量分量，它将取决于速度和压力。因此，尽管这似乎是一个Dirichlet类型的边界条件，但我们得到了能量对速度和密度的敏感性（除非这些也被规定了）。
//
[0.x.15149] 
[0.x.15150] 
[0.x.15151] 
[0.x.15152] 
[0.x.15153] 
[0.x.15154] 
//
[0.x.15155] 
[0.x.15156] 
[0.x.15157] 
[0.x.15158] 
[0.x.15159] 
[0.x.15160] 
[0.x.15161] 
//
[0.x.15162] 
[0.x.15163] 
//
[0.x.15164] 
[0.x.15165] 
//
[0.x.15166] 
[0.x.15167] 
//
// 我们规定了速度（我们在这里处理的是一个特定的分量，所以速度的平均值是与表面法线正交的。 这就形成了整个速度分量的敏感度。
//
[0.x.15168] 
[0.x.15169] 
[0.x.15170] 
[0.x.15171] 
[0.x.15172] 
//
[0.x.15173] 
[0.x.15174] 
[0.x.15175] 
//
[0.x.15176] 
[0.x.15177] 
[0.x.15178] 
[0.x.15179] 
//[2.x.2122] 
//
// 在这个类中，我们也要指定如何细化网格。这个类[2.x.2123]将使用我们在[2.x.2124]类中提供的所有信息，对于它所求解的特定守恒定律是不可知的：它甚至不关心一个求解向量有多少个分量。因此，它不可能知道合理的细化指标是什么。另一方面，在这里我们知道，或者至少我们可以想出一个合理的选择：我们简单地看一下密度的梯度，然后计算 [2.x.2125] ，其中 [2.x.2126] 是单元格 [2.x.2127] 的中心。
//
// 当然也有很多同样合理的细化指标，但这个指标确实如此，而且很容易计算。
//
[0.x.15180] 
[0.x.15181] 
[0.x.15182] 
[0.x.15183] 
[0.x.15184] 
[0.x.15185] 
[0.x.15186] 
[0.x.15187] 
//
[0.x.15188] 
[0.x.15189] 
[0.x.15190] 
[0.x.15191] 
[0.x.15192] 
[0.x.15193] 
//
[0.x.15194] 
[0.x.15195] 
//
[0.x.15196] 
[0.x.15197] 
[0.x.15198] 
[0.x.15199] 
[0.x.15200] 
//
[0.x.15201] 
[0.x.15202] 
[0.x.15203] 
[0.x.15204] 
//
// [2.x.2128] 
//
// 最后，我们声明一个实现数据组件后处理的类。这个类解决的问题是，我们使用的欧拉方程的表述中的变量是保守的而不是物理形式的：它们是动量密度 [2.x.2129] ，密度 [2.x.2130] ，和能量密度 [2.x.2131] 。我们还想把速度 [2.x.2132] 和压力 [2.x.2133] 放入我们的输出文件中。
//
// 此外，我们还想增加生成Schlieren图的可能性。Schlieren图是一种将冲击和其他尖锐界面可视化的方法。Schlieren "这个词是一个德语单词，可以翻译成 "条纹"--不过，用一个例子来解释可能更简单：比如说，当你把高浓度的酒精或透明的盐水倒入水中时，你会看到schlieren；这两种物质的颜色相同，但它们的折射率不同，所以在它们完全混合之前，光线会沿着弯曲的光线穿过混合物，如果你看它，会导致亮度变化。这就是 "分光"。类似的效果发生在可压缩流中，因为折射率取决于气体的压力（以及因此的密度）。
//
// 这个词的起源是指三维体积的二维投影（我们看到的是三维流体的二维图片）。在计算流体力学中，我们可以通过考虑其原因来了解这种效应：密度变化。因此，Schlieren图是通过绘制[2.x.2134]产生的；显然，[2.x.2135]在冲击和其他高度动态的地方很大。如果用户需要（通过在输入文件中指定），我们希望除了上面列出的其他派生量之外，还能生成这些希里伦图。
//
// 从解决我们问题的数量中计算出派生数量，并将其输出到数据文件中的算法的实现依赖于DataPostprocessor类。它有大量的文档，该类的其他用途也可以在 [2.x.2136] 中找到。因此，我们避免了大量的评论。
//
[0.x.15205] 
[0.x.15206] 
[0.x.15207] 
[0.x.15208] 
//
[0.x.15209] 
[0.x.15210] 
[0.x.15211] 
//
[0.x.15212] 
//
[0.x.15213] 
[0.x.15214] 
[0.x.15215] 
//
[0.x.15216] 
//
[0.x.15217] 
[0.x.15218] 
[0.x.15219] 
[0.x.15220] 
//
[0.x.15221] 
[0.x.15222] 
//
[0.x.15223] 
[0.x.15224] 
[0.x.15225] 
[0.x.15226] 
[0.x.15227] 
//
// 这是唯一值得评论的函数。在生成图形输出时，DataOut和相关的类将在每个单元格上调用这个函数，以获取每个正交点的值、梯度、Hessians和法向量（如果我们在处理面）。请注意，每个正交点的数据本身就是矢量值，即保守变量。我们在这里要做的是计算每个正交点上我们感兴趣的量。注意，为此我们可以忽略Hessians（"inputs.solution_hessians"）和法向量（"inputs.normals"）。
//
[0.x.15228] 
[0.x.15229] 
[0.x.15230] 
[0.x.15231] 
[0.x.15232] 
//
// 在函数的开始，让我们确保所有的变量都有正确的大小，这样我们就可以访问各个向量元素，而不必怀疑我们是否可能读或写无效的元素；我们还检查[2.x.2137]向量只包含我们真正需要的数据（系统知道这个，因为我们在下面的[2.x.2138]函数中这样说）。对于内向量，我们检查至少外向量的第一个元素有正确的内部大小。
//
[0.x.15233] 
//
[0.x.15234] 
[0.x.15235] 
[0.x.15236] 
//
[0.x.15237] 
[0.x.15238] 
//
[0.x.15239] 
[0.x.15240] 
//
[0.x.15241] 
[0.x.15242] 
[0.x.15243] 
[0.x.15244] 
[0.x.15245] 
[0.x.15246] 
[0.x.15247] 
[0.x.15248] 
//
// 然后在所有的正交点上循环，在那里做我们的工作。这段代码应该是不言自明的。输出变量的顺序首先是[2.x.2139]速度，然后是压力，如果需要的话，还可以是SCHLIEREN图。请注意，我们尝试使用[2.x.2140]和[2.x.2141]的信息，对输入向量中的变量顺序进行通用处理。
//
[0.x.15249] 
[0.x.15250] 
[0.x.15251] 
//
[0.x.15252] 
[0.x.15253] 
[0.x.15254] 
//
[0.x.15255] 
[0.x.15256] 
//
[0.x.15257] 
[0.x.15258] 
[0.x.15259] 
[0.x.15260] 
[0.x.15261] 
[0.x.15262] 
//
[0.x.15263] 
[0.x.15264] 
[0.x.15265] 
[0.x.15266] 
[0.x.15267] 
[0.x.15268] 
[0.x.15269] 
//
[0.x.15270] 
[0.x.15271] 
//
[0.x.15272] 
[0.x.15273] 
//
[0.x.15274] 
[0.x.15275] 
[0.x.15276] 
[0.x.15277] 
[0.x.15278] 
[0.x.15279] 
[0.x.15280] 
//
[0.x.15281] 
//
[0.x.15282] 
[0.x.15283] 
[0.x.15284] 
//
[0.x.15285] 
[0.x.15286] 
//
[0.x.15287] 
[0.x.15288] 
[0.x.15289] 
[0.x.15290] 
[0.x.15291] 
[0.x.15292] 
[0.x.15293] 
[0.x.15294] 
[0.x.15295] 
//[2.x.2142] 
//
// 我们接下来的工作是定义一些包含运行时参数的类（例如求解器的公差、迭代次数、稳定参数等等）。我们可以在主类中完成这项工作，但我们将其与主类分开，以使程序更加模块化和易于阅读。所有与运行时参数有关的东西都在以下命名空间中，而程序逻辑则在主类中。
//
// 我们将把运行时参数分成几个独立的结构，我们将把这些结构全部放在一个命名空间 [2.x.2143] 中。在这些类中，有几个类将参数分组，用于单独的组，比如用于求解器、网格细化或输出。这些类中的每一个都有函数 [2.x.2144] 和 [2.x.2145] ，分别在ParameterHandler对象中声明参数子段和条目，并从这样的对象中检索实际参数值。这些类在ParameterHandler的子段中声明它们的所有参数。
//
// 以下命名空间的最后一个类结合了前面所有的类，从它们派生出来，并负责处理输入文件顶层的一些条目，以及其他一些奇特的条目，这些条目在子段中太短了，不值得本身有一个结构。
//
// 这里值得指出的是一件事。下面这些类中没有一个构造函数可以初始化各种成员变量。不过这不是问题，因为我们将从输入文件中读取这些类中声明的所有变量（或者间接地：一个ParameterHandler对象将从那里读取，我们将从这个对象中获取数值），它们将以这种方式被初始化。如果输入文件中根本没有指定某个变量，这也不是问题。在这种情况下，ParameterHandler类将简单地采取默认值，这个默认值是在声明下面这些类的[2.x.2146]函数中的一个条目时指定的。
//
[0.x.15296] 
[0.x.15297] 
//[2.x.2147] 
//
// 这些类中的第一个是关于线性内部求解器的参数。它提供的参数表明使用哪种求解器（GMRES作为一般非对称不定式系统的求解器，或稀疏直接求解器），要产生的输出量，以及各种调整阈值不完全LU分解（ILUT）的参数，我们使用它作为GMRES的预处理器。
//
// 特别是，ILUT需要以下参数。
//
// - ilut_fill：形成ILU分解时要增加的额外条目数
//
// - ilut_atol, ilut_rtol: 在形成预处理程序时，对于某些问题，不好的条件（或者只是运气不好）会导致预处理程序的条件很差。 因此，将对角线扰动添加到原始矩阵中，并为这个稍好的矩阵形成预处理程序会有帮助。 ATOL是一个绝对扰动，在形成预处理之前加到对角线上，RTOL是一个比例因子 [2.x.2148] 。
//
// - ilut_drop: ILUT将放弃任何幅度小于此值的数值。 这是一种管理该预处理程序所使用的内存量的方法。
//
// 每个参数的含义在 [2.x.2149] 调用的第三个参数中也有简要说明 [2.x.2150] 。
//
[0.x.15298] 
[0.x.15299] 
[0.x.15300] 
[0.x.15301] 
[0.x.15302] 
[0.x.15303] 
[0.x.15304] 
[0.x.15305] 
//
[0.x.15306] 
[0.x.15307] 
[0.x.15308] 
[0.x.15309] 
[0.x.15310] 
[0.x.15311] 
//
[0.x.15312] 
[0.x.15313] 
//
[0.x.15314] 
[0.x.15315] 
[0.x.15316] 
[0.x.15317] 
//
[0.x.15318] 
[0.x.15319] 
[0.x.15320] 
//
[0.x.15321] 
[0.x.15322] 
[0.x.15323] 
[0.x.15324] 
[0.x.15325] 
[0.x.15326] 
[0.x.15327] 
[0.x.15328] 
[0.x.15329] 
[0.x.15330] 
[0.x.15331] 
[0.x.15332] 
[0.x.15333] 
[0.x.15334] 
[0.x.15335] 
[0.x.15336] 
[0.x.15337] 
[0.x.15338] 
[0.x.15339] 
[0.x.15340] 
[0.x.15341] 
[0.x.15342] 
[0.x.15343] 
[0.x.15344] 
[0.x.15345] 
[0.x.15346] 
[0.x.15347] 
[0.x.15348] 
[0.x.15349] 
[0.x.15350] 
[0.x.15351] 
[0.x.15352] 
[0.x.15353] 
[0.x.15354] 
[0.x.15355] 
[0.x.15356] 
[0.x.15357] 
[0.x.15358] 
[0.x.15359] 
[0.x.15360] 
[0.x.15361] 
[0.x.15362] 
//
[0.x.15363] 
[0.x.15364] 
[0.x.15365] 
[0.x.15366] 
[0.x.15367] 
[0.x.15368] 
[0.x.15369] 
[0.x.15370] 
[0.x.15371] 
//
[0.x.15372] 
[0.x.15373] 
[0.x.15374] 
[0.x.15375] 
[0.x.15376] 
//
[0.x.15377] 
[0.x.15378] 
[0.x.15379] 
[0.x.15380] 
[0.x.15381] 
[0.x.15382] 
[0.x.15383] 
[0.x.15384] 
[0.x.15385] 
//
// [2.x.2151] 
//
// 同样的，这里有几个参数决定了网格如何被细化（以及是否要被细化）。关于冲击参数的具体作用，请看下面的网格细化函数。
//
[0.x.15386] 
[0.x.15387] 
[0.x.15388] 
[0.x.15389] 
[0.x.15390] 
//
[0.x.15391] 
[0.x.15392] 
[0.x.15393] 
//
[0.x.15394] 
[0.x.15395] 
[0.x.15396] 
[0.x.15397] 
[0.x.15398] 
[0.x.15399] 
[0.x.15400] 
[0.x.15401] 
[0.x.15402] 
[0.x.15403] 
[0.x.15404] 
[0.x.15405] 
[0.x.15406] 
[0.x.15407] 
[0.x.15408] 
[0.x.15409] 
[0.x.15410] 
[0.x.15411] 
[0.x.15412] 
[0.x.15413] 
[0.x.15414] 
[0.x.15415] 
[0.x.15416] 
[0.x.15417] 
[0.x.15418] 
[0.x.15419] 
[0.x.15420] 
[0.x.15421] 
[0.x.15422] 
[0.x.15423] 
[0.x.15424] 
//
[0.x.15425] 
[0.x.15426] 
[0.x.15427] 
[0.x.15428] 
[0.x.15429] 
[0.x.15430] 
[0.x.15431] 
[0.x.15432] 
[0.x.15433] 
[0.x.15434] 
//
// [2.x.2152] 
//
// 接下来是关于通量修改的部分，使其更加稳定。特别是提供了两个选项来稳定Lax-Friedrichs通量：要么选择[2.x.2153]，其中[2.x.2154]是在输入文件中指定的一个固定数字，要么[2.x.2155]是一个与网格有关的值。在后一种情况下，它被选择为[2.x.2156]，其中[2.x.2157]是施加流量的面的直径，[2.x.2158]是当前的时间步长。
//
[0.x.15435] 
[0.x.15436] 
[0.x.15437] 
[0.x.15438] 
[0.x.15439] 
[0.x.15440] 
[0.x.15441] 
[0.x.15442] 
//
[0.x.15443] 
//
[0.x.15444] 
[0.x.15445] 
[0.x.15446] 
//
[0.x.15447] 
[0.x.15448] 
[0.x.15449] 
[0.x.15450] 
[0.x.15451] 
[0.x.15452] 
[0.x.15453] 
[0.x.15454] 
[0.x.15455] 
[0.x.15456] 
[0.x.15457] 
[0.x.15458] 
[0.x.15459] 
[0.x.15460] 
[0.x.15461] 
[0.x.15462] 
[0.x.15463] 
//
[0.x.15464] 
[0.x.15465] 
[0.x.15466] 
[0.x.15467] 
[0.x.15468] 
[0.x.15469] 
[0.x.15470] 
[0.x.15471] 
[0.x.15472] 
[0.x.15473] 
[0.x.15474] 
//
[0.x.15475] 
[0.x.15476] 
[0.x.15477] 
[0.x.15478] 
//
// [2.x.2159] 
//
// 然后是关于输出参数的部分。我们提供产生Schlieren图（密度的平方梯度，一种可视化冲击前沿的工具），以及图形输出的时间间隔，以防我们不希望每个时间步骤都有输出文件。
//
[0.x.15479] 
[0.x.15480] 
[0.x.15481] 
[0.x.15482] 
//
[0.x.15483] 
[0.x.15484] 
[0.x.15485] 
//
[0.x.15486] 
[0.x.15487] 
[0.x.15488] 
[0.x.15489] 
[0.x.15490] 
[0.x.15491] 
[0.x.15492] 
[0.x.15493] 
[0.x.15494] 
[0.x.15495] 
[0.x.15496] 
[0.x.15497] 
[0.x.15498] 
[0.x.15499] 
[0.x.15500] 
//
[0.x.15501] 
[0.x.15502] 
[0.x.15503] 
[0.x.15504] 
[0.x.15505] 
[0.x.15506] 
[0.x.15507] 
[0.x.15508] 
[0.x.15509] 
//
// [2.x.2160] 
//
// 最后是将这一切结合起来的类。它自己声明了一些参数，主要是参数文件顶层的参数，以及一些太小的部分，以至于不值得有自己的类。它还包含了所有实际上与空间维度有关的东西，比如初始或边界条件。
//
// 因为这个类是由上面所有的类派生出来的，所以[2.x.2161]函数也会调用基类的相应函数。
//
// 注意这个类也处理输入文件中指定的初始和边界条件的声明。为此，在这两种情况下，都有像 "w_0值 "这样的条目，它代表了[2.x.2162]方面的表达式，将初始或边界条件描述为一个公式，随后将由FunctionParser类来解析。类似的表达方式还有 "w_1"、"w_2 "等，表示欧拉系统的[2.x.2163]守恒变量。同样，我们允许在输入文件中最多使用[2.x.2164]个边界指标，这些边界指标中的每一个都可以与流入、流出或压力边界条件相关联，同质的边界条件要分别为每个组件和每个边界指标指定。
//
// 用来存储边界指标的数据结构有点复杂。它是一个[2.x.2165]元素的数组，表示将被接受的边界指标的范围。对于这个数组中的每个条目，我们在[2.x.2166]结构中存储一对数据：首先是一个大小为[2.x.2167]的数组，对于解向量的每个分量，它表明它是流入、流出还是其他类型的边界，其次是一个FunctionParser对象，它一次描述了这个边界ID的解向量的所有分量。
//
// [2.x.2168]结构需要一个构造器，因为我们需要在构造时告诉函数解析器对象它要描述多少个向量分量。因此，这个初始化不能等到我们在后面的[2.x.2169]中实际设置FunctionParser对象所代表的公式。
//
// 由于必须在构造时告诉Function对象其向量大小的同样原因，我们必须有一个[2.x.2170]类的构造函数，至少要初始化另一个FunctionParser对象，即描述初始条件的对象。
//
[0.x.15510] 
[0.x.15511] 
[0.x.15512] 
[0.x.15513] 
[0.x.15514] 
[0.x.15515] 
[0.x.15516] 
//
[0.x.15517] 
[0.x.15518] 
[0.x.15519] 
[0.x.15520] 
[0.x.15521] 
//
[0.x.15522] 
//
[0.x.15523] 
[0.x.15524] 
//
[0.x.15525] 
//
[0.x.15526] 
//
[0.x.15527] 
[0.x.15528] 
[0.x.15529] 
//
[0.x.15530] 
//
 
[0.x.15532] 
//
[0.x.15533] 
[0.x.15534] 
[0.x.15535] 
//
[0.x.15536] 
[0.x.15537] 
[0.x.15538] 
[0.x.15539] 
[0.x.15540] 
[0.x.15541] 
[0.x.15542] 
[0.x.15543] 
//
[0.x.15544] 
[0.x.15545] 
[0.x.15546] 
[0.x.15547] 
[0.x.15548] 
[0.x.15549] 
[0.x.15550] 
[0.x.15551] 
[0.x.15552] 
//
[0.x.15553] 
[0.x.15554] 
[0.x.15555] 
[0.x.15556] 
[0.x.15557] 
[0.x.15558] 
[0.x.15559] 
//
[0.x.15560] 
[0.x.15561] 
[0.x.15562] 
[0.x.15563] 
//
[0.x.15564] 
[0.x.15565] 
[0.x.15566] 
[0.x.15567] 
[0.x.15568] 
[0.x.15569] 
[0.x.15570] 
[0.x.15571] 
[0.x.15572] 
[0.x.15573] 
[0.x.15574] 
[0.x.15575] 
[0.x.15576] 
[0.x.15577] 
[0.x.15578] 
[0.x.15579] 
[0.x.15580] 
[0.x.15581] 
//
[0.x.15582] 
[0.x.15583] 
[0.x.15584] 
[0.x.15585] 
[0.x.15586] 
[0.x.15587] 
[0.x.15588] 
[0.x.15589] 
[0.x.15590] 
//
[0.x.15591] 
[0.x.15592] 
[0.x.15593] 
[0.x.15594] 
[0.x.15595] 
[0.x.15596] 
[0.x.15597] 
[0.x.15598] 
//
[0.x.15599] 
[0.x.15600] 
[0.x.15601] 
[0.x.15602] 
[0.x.15603] 
[0.x.15604] 
[0.x.15605] 
[0.x.15606] 
[0.x.15607] 
//
[0.x.15608] 
[0.x.15609] 
[0.x.15610] 
[0.x.15611] 
[0.x.15612] 
[0.x.15613] 
[0.x.15614] 
[0.x.15615] 
[0.x.15616] 
//
[0.x.15617] 
[0.x.15618] 
[0.x.15619] 
[0.x.15620] 
[0.x.15621] 
//
[0.x.15622] 
[0.x.15623] 
[0.x.15624] 
[0.x.15625] 
[0.x.15626] 
//
[0.x.15627] 
[0.x.15628] 
[0.x.15629] 
[0.x.15630] 
[0.x.15631] 
[0.x.15632] 
[0.x.15633] 
[0.x.15634] 
[0.x.15635] 
[0.x.15636] 
[0.x.15637] 
//
[0.x.15638] 
[0.x.15639] 
[0.x.15640] 
[0.x.15641] 
//
[0.x.15642] 
[0.x.15643] 
[0.x.15644] 
[0.x.15645] 
[0.x.15646] 
[0.x.15647] 
[0.x.15648] 
[0.x.15649] 
//
[0.x.15650] 
//
[0.x.15651] 
[0.x.15652] 
[0.x.15653] 
[0.x.15654] 
[0.x.15655] 
//
[0.x.15656] 
[0.x.15657] 
[0.x.15658] 
[0.x.15659] 
[0.x.15660] 
[0.x.15661] 
[0.x.15662] 
[0.x.15663] 
[0.x.15664] 
[0.x.15665] 
[0.x.15666] 
[0.x.15667] 
[0.x.15668] 
[0.x.15669] 
//
[0.x.15670] 
[0.x.15671] 
[0.x.15672] 
//
[0.x.15673] 
[0.x.15674] 
[0.x.15675] 
[0.x.15676] 
[0.x.15677] 
[0.x.15678] 
[0.x.15679] 
//
[0.x.15680] 
[0.x.15681] 
[0.x.15682] 
[0.x.15683] 
[0.x.15684] 
[0.x.15685] 
[0.x.15686] 
[0.x.15687] 
[0.x.15688] 
[0.x.15689] 
[0.x.15690] 
[0.x.15691] 
[0.x.15692] 
//
[0.x.15693] 
[0.x.15694] 
[0.x.15695] 
[0.x.15696] 
[0.x.15697] 
[0.x.15698] 
//
// [2.x.2171] 

// 这里终于出现了一个类，它实际上是对我们上面定义的所有欧拉方程和参数的具体内容做了一些事情。公共接口与以往基本相同（构造函数现在需要一个文件名来读取参数，这个文件名在命令行中传递）。私有函数接口也与通常的安排非常相似，[2.x.2172]函数被分成三个部分：一个包含所有单元的主循环，然后分别调用另外两个单元和面的积分。
//
[0.x.15699] 
[0.x.15700] 
[0.x.15701] 
[0.x.15702] 
[0.x.15703] 
[0.x.15704] 
//
[0.x.15705] 
[0.x.15706] 
//
[0.x.15707] 
[0.x.15708] 
[0.x.15709] 
[0.x.15710] 
[0.x.15711] 
[0.x.15712] 
[0.x.15713] 
[0.x.15714] 
[0.x.15715] 
[0.x.15716] 
[0.x.15717] 
[0.x.15718] 
//
[0.x.15719] 
//
[0.x.15720] 
[0.x.15721] 
//
[0.x.15722] 
//
// 前面的几个成员变量也相当标准。请注意，我们定义了一个映射对象，在整个程序中组装术语时使用（我们将把它交给每个FEValues和FEFaceValues对象）；我们使用的映射只是标准的[2.x.2173]映射--换句话说，没有什么花哨的东西--但是在这里声明一个映射并在整个程序中使用它将使以后在有必要时改变它更加简单。事实上，这一点相当重要：众所周知，对于欧拉方程的跨音速模拟，如果边界近似没有足够高的阶数，计算就不会收敛，即使像[2.x.2174]那样。
//
[0.x.15723] 
[0.x.15724] 
//
[0.x.15725] 
[0.x.15726] 
//
[0.x.15727] 
[0.x.15728] 
//
// 接下来是一些数据向量，对应于前一个时间步骤的解决方案（[2.x.2175]），当前解决方案的最佳猜测（[2.x.2176]；我们说[1.x.60]是因为计算它的牛顿迭代可能还没有收敛，而[2.x.2177]是指前一个时间步骤的完全收敛的最终结果），以及下一个时间步骤的解决方案的预测器，通过将当前和之前的解决方案推算到未来一个时间步骤计算。
//
[0.x.15729] 
[0.x.15730] 
[0.x.15731] 
//
[0.x.15732] 
//
// 这一组最后的成员变量（除了最下面的保存所有运行时参数的对象和一个屏幕输出流，它只在要求verbose输出的情况下打印一些东西）处理我们在这个程序中与Trilinos库的接口，该库为我们提供了线性求解器。与在[2.x.2178]和[2.x.2179]中包括PETSc矩阵类似，我们需要做的是创建一个Trilinos稀疏矩阵而不是标准的deal.II类。该系统矩阵在每个牛顿步骤中被用于雅各布系数。由于我们不打算并行运行这个程序（不过用Trilinos数据结构也不难），所以我们不必考虑其他的事情，比如分配自由度。
//
[0.x.15733] 
//
[0.x.15734] 
[0.x.15735] 
[0.x.15736] 
//[2.x.2180] 
//
// 关于构造函数没有什么可说的。基本上，它读取输入文件并将解析后的值填充到参数对象中。
//
[0.x.15737] 
[0.x.15738] 
[0.x.15739] 
[0.x.15740] 
[0.x.15741] 
[0.x.15742] 
[0.x.15743] 
[0.x.15744] 
[0.x.15745] 
[0.x.15746] 
[0.x.15747] 
//
[0.x.15748] 
[0.x.15749] 
//
[0.x.15750] 
[0.x.15751] 
[0.x.15752] 
//
// [2.x.2181] 
//
// 每次改变网格时都会调用下面这个（简单的）函数。它所做的就是根据我们在之前所有的教程程序中生成的稀疏模式来调整特里诺斯矩阵的大小。
//
[0.x.15753] 
[0.x.15754] 
[0.x.15755] 
[0.x.15756] 
[0.x.15757] 
//
[0.x.15758] 
[0.x.15759] 
//[2.x.2182] 
//
// 这个和下面两个函数是这个程序的核心。它们将牛顿方法应用于非线性守恒方程组所产生的线性系统组合起来。
//
// 第一个函数将所有的装配部件放在一个例行程序中，为每个单元格/面分配正确的部件。 对这些对象的装配的实际实现是在以下函数中完成的。
//
// 在函数的顶部，我们做了常规的内务处理：分配FEValues、FEFaceValues和FESubfaceValues对象，这些对象对单元、面和子面（在不同细化级别的相邻单元的情况下）进行积分。请注意，我们并不需要所有这些对象的所有信息（如值、梯度或正交点的实际位置），所以我们只让FEValues类通过指定最小的UpdateFlags集来获得实际需要的信息。例如，当使用邻接单元的FEFaceValues对象时，我们只需要形状值。给定一个特定的面，正交点和[2.x.2183]值与当前单元格相同，法向量已知为当前单元格的法向量的负值。
//
[0.x.15760] 
[0.x.15761] 
[0.x.15762] 
[0.x.15763] 
//
[0.x.15764] 
[0.x.15765] 
//
[0.x.15766] 
[0.x.15767] 
[0.x.15768] 
[0.x.15769] 
[0.x.15770] 
[0.x.15771] 
[0.x.15772] 
//
[0.x.15773] 
[0.x.15774] 
[0.x.15775] 
[0.x.15776] 
[0.x.15777] 
[0.x.15778] 
[0.x.15779] 
[0.x.15780] 
[0.x.15781] 
[0.x.15782] 
[0.x.15783] 
[0.x.15784] 
[0.x.15785] 
[0.x.15786] 
[0.x.15787] 
[0.x.15788] 
[0.x.15789] 
//
// 然后循环所有单元，初始化当前单元的FEValues对象，并调用在此单元上组装问题的函数。
//
[0.x.15790] 
[0.x.15791] 
[0.x.15792] 
[0.x.15793] 
//
[0.x.15794] 
//
// 然后在这个单元的所有面上循环。 如果一个面是外部边界的一部分，那么就在那里集合边界条件（[2.x.2184]的第五个参数表示我们是在外部面还是内部面工作；如果是外部面，表示邻居自由度指数的第四个参数被忽略，所以我们传递一个空向量）。
//
[0.x.15795] 
[0.x.15796] 
[0.x.15797] 
[0.x.15798] 
[0.x.15799] 
[0.x.15800] 
[0.x.15801] 
[0.x.15802] 
[0.x.15803] 
[0.x.15804] 
[0.x.15805] 
[0.x.15806] 
[0.x.15807] 
//
// 另一种情况是，我们正在处理一个内部面。我们需要区分两种情况：这是在同一细化水平的两个单元之间的正常面，和在不同细化水平的两个单元之间的面。
//
// 在第一种情况下，我们不需要做什么：我们使用的是连续有限元，在这种情况下，面条款不会出现在双线性表格中。第二种情况通常也不会导致面条款，如果我们强烈地执行悬挂节点约束的话（就像到目前为止，只要我们使用连续有限元的所有教程程序一样--这种执行是由AffineConstraints类和[2.x.2185]一起完成的）。 然而，在当前程序中，我们选择在不同细化水平的单元之间的面弱地执行连续性，原因有二。(i)因为我们可以，更重要的是(ii)因为我们必须通过AffineConstraints类的操作，将我们用来计算牛顿矩阵元素的自动微分穿起来。这是有可能的，但不是微不足道的，所以我们选择了这种替代方法。
//
// 需要决定的是我们坐在两个不同细化水平的单元之间的接口的哪一边。
//
// 让我们先来看看邻居更精细的情况。然后，我们必须在当前单元格的面的子代上循环，并在每个子代上进行整合。我们在代码中加入了几个断言，以确保我们试图找出邻居的哪个子面与当前单元格的某个子面重合的推理是正确的--有点防御性的编程永远不会有坏处。
//
// 然后我们调用对面进行整合的函数；由于这是一个内部面，第五个参数是假的，第六个参数被忽略了，所以我们再次传递一个无效的值。
//
[0.x.15808] 
[0.x.15809] 
[0.x.15810] 
[0.x.15811] 
[0.x.15812] 
[0.x.15813] 
//
[0.x.15814] 
[0.x.15815] 
[0.x.15816] 
[0.x.15817] 
[0.x.15818] 
[0.x.15819] 
[0.x.15820] 
//
[0.x.15821] 
[0.x.15822] 
[0.x.15823] 
[0.x.15824] 
//
[0.x.15825] 
[0.x.15826] 
//
[0.x.15827] 
//
[0.x.15828] 
[0.x.15829] 
[0.x.15830] 
[0.x.15831] 
[0.x.15832] 
[0.x.15833] 
[0.x.15834] 
[0.x.15835] 
[0.x.15836] 
[0.x.15837] 
[0.x.15838] 
//
// 我们必须关注的另一种可能性是邻居是否比当前单元更粗（特别是，由于每个面只有一个悬挂节点的通常限制，邻居必须正好比当前单元更粗一级，这是我们用断言检查的）。同样，我们在这个接口上进行整合。
//
[0.x.15839] 
[0.x.15840] 
[0.x.15841] 
[0.x.15842] 
[0.x.15843] 
[0.x.15844] 
//
[0.x.15845] 
//
[0.x.15846] 
[0.x.15847] 
[0.x.15848] 
[0.x.15849] 
[0.x.15850] 
//
[0.x.15851] 
[0.x.15852] 
[0.x.15853] 
//
[0.x.15854] 
[0.x.15855] 
[0.x.15856] 
[0.x.15857] 
//
[0.x.15858] 
[0.x.15859] 
[0.x.15860] 
[0.x.15861] 
[0.x.15862] 
[0.x.15863] 
[0.x.15864] 
[0.x.15865] 
[0.x.15866] 
[0.x.15867] 
[0.x.15868] 
[0.x.15869] 
//[2.x.2186] 
//
// 这个函数通过计算残差的单元部分来组装单元项，将其负数加到右手边的向量上，并将其相对于局部变量的导数加到雅各布系数（即牛顿矩阵）上。回顾一下，单元格对残差的贡献为[2.x.2187]。
//[2.x.2188] 
//[2.x.2189]，其中[2.x.2190] 。
//[2.x.2191] 
//[2.x.2192]为[2.x.2193]和[2.x.2194] ，[2.x.2195]为[2.x.2196]的第1个向量值测试函数。  此外，标量积[2.x.2197]可以理解为[2.x.2198]，其中[2.x.2199]是[2.x.2201]第1个测试函数的[2.x.2200]分量。
//
// 在这个函数的顶部，我们做了一些常规的内务工作，即分配一些我们以后需要的局部变量。特别是，我们将分配一些变量来保存[2.x.2203]次牛顿迭代后的当前解[2.x.2202]（变量[2.x.2204]）和上一时间步长的解[2.x.2205]（变量[2.x.2206]）的值。
//
// 除此以外，我们还需要当前变量的梯度。 我们必须计算这些是有点遗憾的，我们几乎不需要。 一个简单的守恒定律的好处是，通量一般不涉及任何梯度。 然而，我们确实需要这些梯度，用于扩散稳定化。
//
// 我们存储这些变量的实际格式需要一些解释。首先，我们需要解向量的[2.x.2207]分量在每个正交点的数值。这就构成了一个二维表，我们使用deal.II的表类（这比[2.x.2208]更有效，因为它只需要分配一次内存，而不是为外向量的每个元素分配一次）。同样地，梯度是一个三维表，Table类也支持。
//
// 其次，我们想使用自动微分。为此，我们使用[2.x.2209]模板来计算所有我们想计算导数的变量。这包括当前解和正交点的梯度（是自由度的线性组合），以及由它们计算出来的所有东西，如残差，但不包括前一个时间步长的解。这些变量都可以在函数的第一部分找到，同时还有一个变量，我们将用它来存储残差的一个分量的导数。
//
[0.x.15870] 
[0.x.15871] 
[0.x.15872] 
[0.x.15873] 
[0.x.15874] 
[0.x.15875] 
[0.x.15876] 
//
[0.x.15877] 
[0.x.15878] 
//
[0.x.15879] 
//
[0.x.15880] 
[0.x.15881] 
//
[0.x.15882] 
[0.x.15883] 
[0.x.15884] 
//
[0.x.15885] 
//
// 接下来，我们必须定义自变量，我们将尝试通过解决一个牛顿步骤来确定自变量。这些自变量是局部自由度的值，我们在这里提取。
//
[0.x.15886] 
[0.x.15887] 
[0.x.15888] 
[0.x.15889] 
//
// 下一步包含了所有的魔法：我们宣布自分变量的一个子集为独立自由度，而所有其他的变量仍然是依存函数。这些正是刚刚提取的局部自由度。所有引用它们的计算（无论是直接还是间接）都将积累与这些变量有关的敏感度。
//
// 为了将这些变量标记为独立变量，下面的方法可以起到作用，将[2.x.2210]标记为总共[2.x.2212]中的[2.x.2211]个独立变量。
//
[0.x.15890] 
[0.x.15891] 
//
// 在所有这些声明之后，让我们实际计算一些东西。首先，[2.x.2213]和[2.x.2214]的值，我们可以通过使用公式[2.x.2215]从局部DoF值计算出来，其中[2.x.2216]是解向量（局部部分）的第[2.x.2217]项，而[2.x.2218]是在正交点[2.x.2220]评估的第[2.x.2219]个矢量值的形状函数的值。梯度可以用类似的方法来计算。
//
// 理想情况下，我们可以通过调用类似[2.x.2221]和[2.x.2222]的东西来计算这些信息，但是由于（i）我们必须为此扩展FEValues类，以及（ii）我们不想让整个[2.x.2223]矢量fad类型，只有局部单元变量，我们明确编码上面的循环。在这之前，我们增加一个循环，将所有的fad变量初始化为零。
//
[0.x.15892] 
[0.x.15893] 
[0.x.15894] 
[0.x.15895] 
[0.x.15896] 
[0.x.15897] 
[0.x.15898] 
[0.x.15899] 
[0.x.15900] 
[0.x.15901] 
[0.x.15902] 
//
[0.x.15903] 
[0.x.15904] 
[0.x.15905] 
[0.x.15906] 
[0.x.15907] 
//
[0.x.15908] 
[0.x.15909] 
[0.x.15910] 
[0.x.15911] 
//
[0.x.15912] 
[0.x.15913] 
[0.x.15914] 
[0.x.15915] 
[0.x.15916] 
[0.x.15917] 
[0.x.15918] 
[0.x.15919] 
//
// 接下来，为了计算单元贡献，我们需要在所有正交点评估[2.x.2224] , [2.x.2225] 和 [2.x.2226] , [2.x.2227] 。为了存储这些，我们还需要分配一点内存。请注意，我们以自分变量的方式计算通量矩阵和右手边，这样以后就可以很容易地从中计算出雅各布贡献。
//
[0.x.15920] 
[0.x.15921] 
[0.x.15922] 
[0.x.15923] 
//
[0.x.15924] 
[0.x.15925] 
//
 
[0.x.15927] 
[0.x.15928] 
//
[0.x.15929] 
[0.x.15930] 
//
[0.x.15931] 
[0.x.15932] 
[0.x.15933] 
[0.x.15934] 
[0.x.15935] 
[0.x.15936] 
[0.x.15937] 
//
// 我们现在已经有了所有的部件，所以进行组装。 我们有一个通过系统组件的外循环，和一个通过正交点的内循环，在那里我们积累了对[2.x.2228]的残差[2.x.2229]的贡献。这个残差的一般公式在引言和本函数的顶部给出。然而，考虑到 [2.x.2230] 第三个（矢量值）测试函数 [2.x.2231] 实际上只有一个非零分量（关于这个主题的更多信息可以在 [2.x.2232] 矢量值模块中找到），我们可以把它简化一下。它将由下面的变量[2.x.2233]表示。有了这个，残差项可以重新写成[1.x.61]，其中积分可以理解为通过对正交点求和来评估。
//
// 我们最初对残差的所有贡献进行正向求和，这样我们就不需要对雅各布项进行负数。 然后，当我们对[2.x.2234]矢量进行求和时，我们就否定了这个残差。
//
[0.x.15938] 
[0.x.15939] 
[0.x.15940] 
//
[0.x.15941] 
[0.x.15942] 
//
// 每一行（i）的残差将被累积到这个fad变量中。 在这一行的装配结束时，我们将查询这个变量的敏感度，并将其加入到雅各布系数中。
//
[0.x.15943] 
[0.x.15944] 
[0.x.15945] 
[0.x.15946] 
[0.x.15947] 
[0.x.15948] 
[0.x.15949] 
//
[0.x.15950] 
[0.x.15951] 
[0.x.15952] 
[0.x.15953] 
[0.x.15954] 
[0.x.15955] 
//
[0.x.15956] 
[0.x.15957] 
[0.x.15958] 
[0.x.15959] 
[0.x.15960] 
[0.x.15961] 
[0.x.15962] 
[0.x.15963] 
[0.x.15964] 
//
[0.x.15965] 
[0.x.15966] 
[0.x.15967] 
[0.x.15968] 
[0.x.15969] 
[0.x.15970] 
//
// 在循环结束时，我们必须将敏感度加到矩阵上，并从右手边减去残差。Trilinos FAD数据类型让我们可以使用 [2.x.2235] 访问导数，所以我们将数据存储在一个临时数组中。然后，这些关于整行本地道夫的信息被一次性添加到特里诺斯矩阵中（支持我们选择的数据类型）。
//
[0.x.15971] 
[0.x.15972] 
[0.x.15973] 
[0.x.15974] 
[0.x.15975] 
[0.x.15976] 
//[2.x.2236] 
//
// 在这里，我们做的事情与前面的函数基本相同。在顶部，我们引入自变量。因为如果我们在两个单元格之间的内部面上工作，也会使用当前的函数，所以自变量不仅是当前单元格上的自由度，而且在内部面上的情况下，也是邻近单元格上的自由度。
//
[0.x.15977] 
[0.x.15978] 
[0.x.15979] 
[0.x.15980] 
[0.x.15981] 
[0.x.15982] 
[0.x.15983] 
[0.x.15984] 
[0.x.15985] 
[0.x.15986] 
[0.x.15987] 
[0.x.15988] 
[0.x.15989] 
//
[0.x.15990] 
[0.x.15991] 
[0.x.15992] 
[0.x.15993] 
//
[0.x.15994] 
[0.x.15995] 
//
[0.x.15996] 
[0.x.15997] 
[0.x.15998] 
[0.x.15999] 
[0.x.16000] 
//
[0.x.16001] 
[0.x.16002] 
[0.x.16003] 
[0.x.16004] 
[0.x.16005] 
[0.x.16006] 
[0.x.16007] 
[0.x.16008] 
//
// 接下来，我们需要定义保守变量 [2.x.2237] 在面的这一侧（ [2.x.2238] ）和另一侧（ [2.x.2239] ）的值，对于 [2.x.2240] 和 [2.x.2241] 。"这一边 "的值可以用与前一个函数完全相同的方式计算，但注意[2.x.2242]变量现在是FEFaceValues或FESubfaceValues的类型。
//
[0.x.16009] 
[0.x.16010] 
[0.x.16011] 
[0.x.16012] 
[0.x.16013] 
//
[0.x.16014] 
[0.x.16015] 
[0.x.16016] 
[0.x.16017] 
[0.x.16018] 
[0.x.16019] 
[0.x.16020] 
[0.x.16021] 
[0.x.16022] 
[0.x.16023] 
[0.x.16024] 
[0.x.16025] 
//
// 计算 "对立面 "就比较复杂了。如果这是一个内部面，我们可以像上面那样，简单地使用邻居的独立变量来计算它。
//
[0.x.16026] 
[0.x.16027] 
[0.x.16028] 
[0.x.16029] 
[0.x.16030] 
[0.x.16031] 
[0.x.16032] 
[0.x.16033] 
[0.x.16034] 
[0.x.16035] 
[0.x.16036] 
[0.x.16037] 
[0.x.16038] 
[0.x.16039] 
[0.x.16040] 
//
// 另一方面，如果这是一个外部边界面，那么[2.x.2243]的值将是[2.x.2244]的函数，或者它们将是规定的，这取决于这里施加的边界条件的种类。
//
// 为了开始评估，让我们确保为这个边界指定的边界ID是我们在参数对象中实际有数据的一个。接下来，我们对不均匀性的函数对象进行评估。 这有点棘手：一个给定的边界可能同时有规定的和隐含的值。 如果一个特定的成分没有被规定，那么这些值就会被评估为零，并在下面被忽略。
//
// 剩下的部分由一个实际了解欧拉方程边界条件具体内容的函数完成。请注意，由于我们在这里使用的是fad变量，敏感度将被适当地更新，否则这个过程将是非常复杂的。
//
[0.x.16041] 
[0.x.16042] 
[0.x.16043] 
[0.x.16044] 
[0.x.16045] 
[0.x.16046] 
//
[0.x.16047] 
[0.x.16048] 
[0.x.16049] 
[0.x.16050] 
//
[0.x.16051] 
[0.x.16052] 
[0.x.16053] 
[0.x.16054] 
[0.x.16055] 
[0.x.16056] 
[0.x.16057] 
[0.x.16058] 
//
// 这里我们假设边界类型、边界法向量和边界数据值在时间推进中保持不变。
//
[0.x.16059] 
[0.x.16060] 
[0.x.16061] 
[0.x.16062] 
[0.x.16063] 
[0.x.16064] 
[0.x.16065] 
[0.x.16066] 
//
// 现在我们有了[2.x.2245]和[2.x.2246]，我们可以去计算每个正交点的数值通量函数[2.x.2247]。在调用这个函数之前，我们还需要确定Lax-Friedrich的稳定性参数。
//
[0.x.16067] 
[0.x.16068] 
[0.x.16069] 
[0.x.16070] 
[0.x.16071] 
//
[0.x.16072] 
//
 
[0.x.16074] 
[0.x.16075] 
[0.x.16076] 
[0.x.16077] 
[0.x.16078] 
[0.x.16079] 
[0.x.16080] 
[0.x.16081] 
[0.x.16082] 
[0.x.16083] 
[0.x.16084] 
//
[0.x.16085] 
[0.x.16086] 
[0.x.16087] 
[0.x.16088] 
[0.x.16089] 
[0.x.16090] 
[0.x.16091] 
[0.x.16092] 
[0.x.16093] 
[0.x.16094] 
//
// 现在以与前面函数中的单元格贡献完全相同的方式组装面项。唯一不同的是，如果这是一个内部面，我们还必须考虑到剩余贡献对相邻单元自由度的敏感性。
//
[0.x.16095] 
[0.x.16096] 
[0.x.16097] 
[0.x.16098] 
[0.x.16099] 
//
[0.x.16100] 
[0.x.16101] 
[0.x.16102] 
[0.x.16103] 
//
[0.x.16104] 
[0.x.16105] 
[0.x.16106] 
[0.x.16107] 
[0.x.16108] 
[0.x.16109] 
//
[0.x.16110] 
[0.x.16111] 
[0.x.16112] 
//
[0.x.16113] 
[0.x.16114] 
[0.x.16115] 
[0.x.16116] 
[0.x.16117] 
[0.x.16118] 
[0.x.16119] 
[0.x.16120] 
//
[0.x.16121] 
[0.x.16122] 
[0.x.16123] 
//[2.x.2248] 
//
// 在这里，我们实际解决线性系统，使用Trilinos的Aztec或Amesos线性求解器。计算的结果将被写入传递给这个函数的参数向量中。其结果是一对迭代次数和最终的线性残差。
//
[0.x.16124] 
[0.x.16125] 
[0.x.16126] 
[0.x.16127] 
[0.x.16128] 
[0.x.16129] 
//
// 如果参数文件指定要使用直接求解器，那么我们就到这里。这个过程很简单，因为deal.II在Trilinos中为Amesos直接求解器提供了一个封装类。我们所要做的就是创建一个求解器控制对象（这里只是一个虚拟对象，因为我们不会进行任何迭代），然后创建直接求解器对象。在实际进行求解时，注意我们没有传递一个预处理程序。无论如何，这对直接求解器来说没有什么意义。 最后我们返回求解器的控制统计信息&mdash;它将告诉我们没有进行任何迭代，并且最终的线性残差为零，这里没有任何可能提供的更好的信息。
//
[0.x.16130] 
[0.x.16131] 
[0.x.16132] 
[0.x.16133] 
[0.x.16134] 
[0.x.16135] 
//
[0.x.16136] 
//
[0.x.16137] 
[0.x.16138] 
//
// 同样地，如果我们要使用一个迭代求解器，我们使用Aztec的GMRES求解器。我们也可以在这里使用Trilinos的迭代求解器和预处理类，但是我们选择直接使用Aztec的求解器。对于给定的问题，Aztec的内部预处理实现优于deal.II的包装类，所以我们在AztecOO求解器中使用ILU-T预处理，并设置了一堆可以从参数文件中修改的选项。
//
// 还有两个实际问题。由于我们将右手边和求解向量建立为deal.II向量对象（而不是矩阵，它是一个Trilinos对象），我们必须将Trilinos Epetra向量交给求解器。 幸运的是，他们支持 "视图 "的概念，所以我们只需发送一个指向deal.II向量的指针。我们必须为设置平行分布的向量提供一个Epetra_Map，这只是一个串行的假对象。最简单的方法是要求矩阵提供它的地图，我们要用它为矩阵-向量乘积做好准备。
//
// 其次，Aztec求解器希望我们传入一个Trilinos Epetra_CrsMatrix，而不是 deal.II包装类本身。所以我们通过trilinos_matrix()命令来访问Trilinos包装类中的实际Trilinos矩阵。Trilinos希望矩阵是非常量的，所以我们必须使用const_cast手动删除常量。
//
[0.x.16139] 
[0.x.16140] 
[0.x.16141] 
[0.x.16142] 
[0.x.16143] 
[0.x.16144] 
[0.x.16145] 
[0.x.16146] 
//
[0.x.16147] 
[0.x.16148] 
[0.x.16149] 
[0.x.16150] 
[0.x.16151] 
[0.x.16152] 
[0.x.16153] 
[0.x.16154] 
//
[0.x.16155] 
[0.x.16156] 
[0.x.16157] 
[0.x.16158] 
//
[0.x.16159] 
[0.x.16160] 
[0.x.16161] 
[0.x.16162] 
//
[0.x.16163] 
[0.x.16164] 
//
[0.x.16165] 
[0.x.16166] 
//
[0.x.16167] 
[0.x.16168] 
[0.x.16169] 
//
[0.x.16170] 
[0.x.16171] 
[0.x.16172] 
//[2.x.2249] 
//
// 这个函数是真正的简单。我们在这里并不假装知道一个好的细化指标会是什么。相反，我们认为[2.x.2250]类会知道这个问题，所以我们只是简单地服从于我们在那里实现的相应函数。
//
[0.x.16173] 
[0.x.16174] 
[0.x.16175] 
[0.x.16176] 
[0.x.16177] 
[0.x.16178] 
[0.x.16179] 
[0.x.16180] 
[0.x.16181] 
//
// [2.x.2251] 
//
// 在这里，我们使用之前计算的细化指标来细化网格。在开始的时候，我们在所有的单元格上循环，并标记那些我们认为应该被细化的单元格。
//
[0.x.16182] 
[0.x.16183] 
[0.x.16184] 
[0.x.16185] 
[0.x.16186] 
[0.x.16187] 
[0.x.16188] 
[0.x.16189] 
[0.x.16190] 
//
[0.x.16191] 
[0.x.16192] 
[0.x.16193] 
[0.x.16194] 
[0.x.16195] 
[0.x.16196] 
[0.x.16197] 
[0.x.16198] 
//
// 然后，我们需要在进行细化的同时，将各种解决方案向量从旧网格转移到新网格。SolutionTransfer类是我们的朋友；它有相当丰富的文档，包括例子，所以我们不会对下面的代码做太多评论。最后三行只是把其他一些向量的大小重新设置为现在的正确大小。
//
[0.x.16199] 
[0.x.16200] 
//
[0.x.16201] 
[0.x.16202] 
//
[0.x.16203] 
//
[0.x.16204] 
[0.x.16205] 
//
[0.x.16206] 
//
[0.x.16207] 
[0.x.16208] 
//
[0.x.16209] 
[0.x.16210] 
[0.x.16211] 
//
[0.x.16212] 
[0.x.16213] 
[0.x.16214] 
[0.x.16215] 
[0.x.16216] 
//
[0.x.16217] 
//
 
[0.x.16219] 
//
[0.x.16220] 
[0.x.16221] 
//
[0.x.16222] 
[0.x.16223] 
[0.x.16224] 
[0.x.16225] 
//[2.x.2252] 
//
// 现在的这个函数是相当直接的。所有的魔法，包括将数据从保守变量转化为物理变量，都已经被抽象化，并被移到EulerEquations类中，这样在我们想要解决其他双曲守恒定律时就可以被替换。
//
// 请注意，输出文件的数量是通过保持一个静态变量形式的计数器来确定的，这个计数器在我们第一次来到这个函数时被设置为零，并在每次调用结束时被增加一。
//
[0.x.16226] 
[0.x.16227] 
[0.x.16228] 
[0.x.16229] 
[0.x.16230] 
//
[0.x.16231] 
[0.x.16232] 
//
[0.x.16233] 
[0.x.16234] 
[0.x.16235] 
[0.x.16236] 
//
[0.x.16237] 
//
[0.x.16238] 
//
[0.x.16239] 
[0.x.16240] 
[0.x.16241] 
[0.x.16242] 
[0.x.16243] 
//
[0.x.16244] 
[0.x.16245] 
//
// [2.x.2253] 
//
// 这个函数包含了这个程序的顶层逻辑：初始化，时间循环，以及牛顿内部迭代。
//
// 在开始时，我们读取参数文件指定的网格文件，设置DoFHandler和各种向量，然后在这个网格上插值给定的初始条件。然后我们在初始条件的基础上进行一系列的网格细化，以获得一个已经很适应起始解的网格。在这个过程结束时，我们输出初始解。
//
[0.x.16246] 
[0.x.16247] 
[0.x.16248] 
[0.x.16249] 
[0.x.16250] 
[0.x.16251] 
//
[0.x.16252] 
[0.x.16253] 
//
[0.x.16254] 
[0.x.16255] 
//
[0.x.16256] 
[0.x.16257] 
//
// 所有字段的大小。
//
[0.x.16258] 
[0.x.16259] 
[0.x.16260] 
[0.x.16261] 
//
[0.x.16262] 
//
[0.x.16263] 
[0.x.16264] 
[0.x.16265] 
[0.x.16266] 
[0.x.16267] 
//
[0.x.16268] 
[0.x.16269] 
[0.x.16270] 
[0.x.16271] 
//
[0.x.16272] 
[0.x.16273] 
//
[0.x.16274] 
//
[0.x.16275] 
[0.x.16276] 
[0.x.16277] 
[0.x.16278] 
[0.x.16279] 
[0.x.16280] 
//
[0.x.16281] 
//
// 然后我们进入主时间步进循环。在顶部，我们简单地输出一些状态信息，这样就可以跟踪计算的位置，以及显示非线性内部迭代进展的表格的标题。
//
[0.x.16282] 
//
[0.x.16283] 
[0.x.16284] 
//
[0.x.16285] 
[0.x.16286] 
[0.x.16287] 
[0.x.16288] 
[0.x.16289] 
[0.x.16290] 
[0.x.16291] 
[0.x.16292] 
[0.x.16293] 
//
[0.x.16294] 
[0.x.16295] 
//
// 然后是内牛顿迭代，解决每个时间步长的非线性问题。它的工作方式是将矩阵和右手边重置为零，然后组装线性系统。如果右手边的规范足够小，那么我们就宣布牛顿迭代已经收敛了。否则，我们求解线性系统，用牛顿增量更新当前解，并输出收敛信息。最后，我们检查牛顿迭代的次数是否超过了10次的限制--如果超过了，就说明迭代有可能出现了发散，继续迭代也没有什么好处。如果发生这种情况，我们就抛出一个异常，这个异常将在[2.x.2254]中被捕获，并在程序终止前显示状态信息。
//
// 注意，我们写AssertThrow宏的方式基本上等同于写<code>if (!(nonlin_iter [2.x.2255] 10)) throw ExcMessage ("No convergence in nonlinear solver");</code>这样的话。唯一显著的区别是，AssertThrow还确保被抛出的异常带有它产生的位置（文件名和行号）的信息。这在这里不是太关键，因为只有一个地方可能发生这种异常；然而，当人们想找出错误发生的地方时，它通常是一个非常有用的工具。
//
[0.x.16296] 
[0.x.16297] 
[0.x.16298] 
[0.x.16299] 
[0.x.16300] 
//
[0.x.16301] 
[0.x.16302] 
//
[0.x.16303] 
[0.x.16304] 
[0.x.16305] 
[0.x.16306] 
[0.x.16307] 
[0.x.16308] 
[0.x.16309] 
[0.x.16310] 
[0.x.16311] 
//
[0.x.16312] 
[0.x.16313] 
//
[0.x.16314] 
//
[0.x.16315] 
[0.x.16316] 
[0.x.16317] 
[0.x.16318] 
[0.x.16319] 
//
[0.x.16320] 
[0.x.16321] 
[0.x.16322] 
[0.x.16323] 
//
// 只有在牛顿迭代已经收敛的情况下，我们才会到达这一点，所以在这里做各种收敛后的任务。
//
// 首先，我们更新时间，如果需要的话，产生图形输出。然后，我们通过近似[2.x.2256]来更新下一个时间步长的解决方案的预测器，以尝试使适应性更好地工作。 我们的想法是尝试在前面进行细化，而不是步入一个粗略的元素集并抹去旧的解决方案。 这个简单的时间推断器可以完成这个工作。有了这个，如果用户需要的话，我们就可以对网格进行细化，最后继续进行下一个时间步骤。
//
[0.x.16324] 
//
[0.x.16325] 
[0.x.16326] 
[0.x.16327] 
[0.x.16328] 
[0.x.16329] 
[0.x.16330] 
[0.x.16331] 
//
[0.x.16332] 
[0.x.16333] 
//
[0.x.16334] 
//
[0.x.16335] 
[0.x.16336] 
[0.x.16337] 
[0.x.16338] 
[0.x.16339] 
//
[0.x.16340] 
[0.x.16341] 
//
[0.x.16342] 
[0.x.16343] 
[0.x.16344] 
[0.x.16345] 
[0.x.16346] 
//[2.x.2257] 
//
// 下面的``main''函数与前面的例子类似，不需要进行注释。请注意，如果在命令行上没有给出输入文件名，程序就会中止。
//
[0.x.16347] 
[0.x.16348] 
[0.x.16349] 
[0.x.16350] 
[0.x.16351] 
[0.x.16352] 
//
[0.x.16353] 
[0.x.16354] 
[0.x.16355] 
[0.x.16356] 
[0.x.16357] 
//
[0.x.16358] 
[0.x.16359] 
//
[0.x.16360] 
[0.x.16361] 
[0.x.16362] 
[0.x.16363] 
[0.x.16364] 
[0.x.16365] 
[0.x.16366] 
[0.x.16367] 
[0.x.16368] 
[0.x.16369] 
[0.x.16370] 
[0.x.16371] 
[0.x.16372] 
[0.x.16373] 
[0.x.16374] 
[0.x.16375] 
[0.x.16376] 
[0.x.16377] 
[0.x.16378] 
[0.x.16379] 
[0.x.16380] 
[0.x.16381] 
[0.x.16382] 
[0.x.16383] 
[0.x.16384] 
[0.x.16385] 
[0.x.16386] 
[0.x.16387] 
//
[0.x.16388] 
[0.x.16389] 
[0.x.16390] 
[0.x.16391] 
[0.x.16392] 
[0.x.16393] 
[0.x.16394] 
[0.x.16395] 
[0.x.16396] 
[0.x.16397] 
[0.x.16398] 
[0.x.16399] 
[0.x.16400] 
[0.x.16401] 
[0.x.16402] 
[0.x.16403] 
//
[0.x.16404] 
[0.x.16405] 
[0.x.16406] 
//[2.x.2258] 
//
// 程序一开始就包括了一堆include文件，我们将在程序的各个部分使用这些文件。其中大部分在以前的教程中已经讨论过了。
//
[0.x.16407] 
[0.x.16408] 
[0.x.16409] 
[0.x.16410] 
[0.x.16411] 
[0.x.16412] 
//
[0.x.16413] 
[0.x.16414] 
[0.x.16415] 
[0.x.16416] 
[0.x.16417] 
//
[0.x.16418] 
[0.x.16419] 
[0.x.16420] 
[0.x.16421] 
[0.x.16422] 
//
[0.x.16423] 
[0.x.16424] 
//
[0.x.16425] 
[0.x.16426] 
[0.x.16427] 
//
[0.x.16428] 
[0.x.16429] 
//
// 这里有一些我们需要的C++标准头文件。
//
[0.x.16430] 
[0.x.16431] 
[0.x.16432] 
[0.x.16433] 
//
// 这个序言的最后部分是将dealii命名空间中的所有内容导入到这个程序中的所有内容中。
//
[0.x.16434] 
[0.x.16435] 
[0.x.16436] 
//[2.x.2259] 
//
// 首先，让我们定义一下边界积分方程的机制。
//
// 以下两个函数是单层和双层势能核的实际计算，即 [2.x.2260] 和 [2.x.2261] 。只有当矢量[2.x.2262]不同于零时，它们才是定义良好的。
//
[0.x.16437] 
[0.x.16438] 
[0.x.16439] 
[0.x.16440] 
[0.x.16441] 
[0.x.16442] 
[0.x.16443] 
[0.x.16444] 
[0.x.16445] 
//
[0.x.16446] 
[0.x.16447] 
//
[0.x.16448] 
[0.x.16449] 
[0.x.16450] 
[0.x.16451] 
[0.x.16452] 
//
[0.x.16453] 
[0.x.16454] 
[0.x.16455] 
[0.x.16456] 
[0.x.16457] 
[0.x.16458] 
[0.x.16459] 
[0.x.16460] 
[0.x.16461] 
//
[0.x.16462] 
[0.x.16463] 
[0.x.16464] 
[0.x.16465] 
[0.x.16466] 
[0.x.16467] 
//[2.x.2263] 
//
// 边界元素方法代码的结构与有限元素代码的结构非常相似，所以这个类的成员函数与其他大多数教程程序的成员函数一样。特别是，现在你应该熟悉从外部文件中读取参数，以及将不同的任务分割成不同的模块。这同样适用于边界元素方法，我们不会对其进行过多的评论，只是对其中的差异进行评论。
//
[0.x.16468] 
[0.x.16469] 
[0.x.16470] 
[0.x.16471] 
[0.x.16472] 
[0.x.16473] 
//
[0.x.16474] 
//
[0.x.16475] 
[0.x.16476] 
//
[0.x.16477] 
//
[0.x.16478] 
//
// 我们在这里发现的唯一真正不同的函数是装配程序。我们以最通用的方式编写了这个函数，以便能够方便地推广到高阶方法和不同的基本解（例如斯托克斯或麦克斯韦）。
//
// 最明显的区别是，最终的矩阵是完整的，而且我们在通常的单元格循环内有一个嵌套的循环，访问所有自由度的支持点。 此外，当支持点位于我们所访问的单元内时，我们所执行的积分就会变成单数。
//
// 实际的结果是，我们有两套正交公式、有限元值和临时存储，一套用于标准积分，另一套用于奇异积分，在必要时使用。
//
[0.x.16479] 
//
// 对于这个问题的解决有两种选择。第一个是使用直接求解器，第二个是使用迭代求解器。我们选择了第二种方案。
//
// 我们组装的矩阵不是对称的，我们选择使用GMRES方法；然而为边界元素方法构建一个有效的预处理程序并不是一个简单的问题。这里我们使用一个非预处理的GMRES求解器。迭代求解器的选项，如公差、最大迭代次数等，都是通过参数文件选择的。
//
[0.x.16480] 
//
// 一旦我们得到了解决方案，我们将计算计算出的势的[2.x.2264]误差，以及实体角的近似值的[2.x.2265]误差。我们使用的网格是平滑曲线的近似值，因此计算出的角的分量或实体角的对角线矩阵 [2.x.2266] 应该一直等于 [2.x.2267] 。在这个例程中，我们输出势的误差和计算角度的近似值的误差。注意，后者的误差实际上不是计算角度的误差，而是衡量我们对球体和圆的近似程度。
//
// 对角度的计算做一些实验，对于较简单的几何形状，可以得到非常准确的结果。为了验证这一点，你可以在read_domain()方法中注释掉tria.set_manifold(1, manifold)一行，并检查程序生成的alpha。通过删除这个调用，每当细化网格时，新的节点将沿着构成粗略网格的直线放置，而不是被拉到我们真正想要近似的表面。在三维案例中，球体的粗网格是从一个立方体开始得到的，得到的字母值正好是面的节点上的[2.x.2268]，边的节点上的[2.x.2269]和顶点的8个节点上的[2.x.2270]。
//
[0.x.16481] 
//
// 一旦我们在一维领域得到了一个解决方案，我们就想把它插值到空间的其他部分。这可以通过在compute_exterior_solution()函数中再次进行解与核的卷积来实现。
//
// 我们想绘制速度变量，也就是势解的梯度。势解只在边界上是已知的，但我们使用与基本解的卷积在标准的二维连续有限元空间上进行插值。外推解的梯度图将给我们提供我们想要的速度。
//
// 除了外域上的解，我们还在output_results()函数中输出域的边界上的解，当然了。
//
[0.x.16482] 
//
[0.x.16483] 
//
// 为了实现不受维度限制的编程，我们对这个单一的函数进行了专业化处理，以提取整合单元内部的奇异核所需的奇异正交公式。
//
[0.x.16484] 
[0.x.16485] 
[0.x.16486] 
//
// 通常的deal.II类可以通过指定问题的 "二维 "来用于边界元素方法。这是通过将Triangulation, FiniteElement和DoFHandler的可选第二模板参数设置为嵌入空间的维度来实现的。在我们的例子中，我们生成了嵌入在二维或三维空间的一维或二维网格。
//
// 可选参数默认等于第一个参数，并产生我们在之前所有例子中看到的通常的有限元类。
//
// 该类的构造方式是允许任意的域（通过高阶映射）和有限元空间的逼近顺序。有限元空间和映射的顺序可以在该类的构造函数中选择。
//
[0.x.16487] 
[0.x.16488] 
[0.x.16489] 
[0.x.16490] 
//
// 在BEM方法中，生成的矩阵是密集的。根据问题的大小，最终的系统可能通过直接的LU分解来解决，或者通过迭代方法来解决。在这个例子中，我们使用了一个无条件的GMRES方法。为BEM方法建立一个预处理程序是不容易的，我们在此不做处理。
//
[0.x.16491] 
[0.x.16492] 
//
// 接下来的两个变量将表示解决方案[2.x.2271]以及一个向量，它将保存[2.x.2272]的值（从一个点[2.x.2274]可见的[2.x.2273]的部分）在我们形状函数的支持点。
//
[0.x.16493] 
[0.x.16494] 
//
// 收敛表是用来输出精确解和计算出的字母的误差的。
//
[0.x.16495] 
//
// 下面的变量是我们通过参数文件来填充的。 本例中我们使用的新对象是[2.x.2275]对象和QuadratureSelector对象。
//
// [2.x.2276]类允许我们通过参数文件方便快捷地定义新的函数对象，自定义的定义可以非常复杂（关于所有可用的选项，见该类的文档）。
//
// 我们将使用QuadratureSelector类来分配正交对象，该类允许我们根据一个识别字符串和公式本身的可能程度来生成正交公式。我们用它来允许自定义选择标准积分的正交公式，并定义奇异正交规则的顺序。
//
// 我们还定义了几个参数，这些参数是在我们想把解决方案扩展到整个领域的情况下使用的。
//
[0.x.16496] 
[0.x.16497] 
//
[0.x.16498] 
[0.x.16499] 
//
[0.x.16500] 
//
[0.x.16501] 
[0.x.16502] 
//
[0.x.16503] 
[0.x.16504] 
[0.x.16505] 
//[2.x.2277] 
//
//构造函数初始化各种对象的方式与有限元程序（如 [2.x.2278] 或 [2.x.2279] ）中的方式基本相同。这里唯一的新成分是ParsedFunction对象，它在构造时需要说明组件的数量。
//
// 对于精确解来说，向量分量的数量是1，而且不需要任何操作，因为1是ParsedFunction对象的默认值。然而，风需要指定dim组件。注意，在为[2.x.2280]的表达式声明参数文件中的条目时，我们需要明确指定分量的数量，因为函数[2.x.2281]是静态的，对分量的数量没有了解。
//
[0.x.16506] 
[0.x.16507] 
[0.x.16508] 
[0.x.16509] 
[0.x.16510] 
[0.x.16511] 
[0.x.16512] 
[0.x.16513] 
[0.x.16514] 
[0.x.16515] 
[0.x.16516] 
[0.x.16517] 
[0.x.16518] 
//
[0.x.16519] 
[0.x.16520] 
[0.x.16521] 
[0.x.16522] 
[0.x.16523] 
[0.x.16524] 
//
[0.x.16525] 
//
[0.x.16526] 
[0.x.16527] 
[0.x.16528] 
[0.x.16529] 
[0.x.16530] 
[0.x.16531] 
[0.x.16532] 
//
[0.x.16533] 
[0.x.16534] 
[0.x.16535] 
[0.x.16536] 
[0.x.16537] 
[0.x.16538] 
[0.x.16539] 
[0.x.16540] 
[0.x.16541] 
[0.x.16542] 
[0.x.16543] 
//
// 对于二维和三维，我们将默认的输入数据设置为：解为 [2.x.2282] 或 [2.x.2283] 。实际计算出的解在无穷大时的数值为零。在这种情况下，这与精确解相吻合，不需要额外的修正，但是你应该注意，我们任意设置了[2.x.2284]，而我们传递给程序的精确解需要在无穷远处有相同的值，才能正确计算出误差。
//
// [2.x.2285]对象的使用是非常直接的。[2.x.2286]函数需要一个额外的整数参数，指定给定函数的分量数量。它的默认值是1。当相应的[2.x.2287]方法被调用时，调用对象必须有与这里定义的相同数量的组件，否则会产生异常。
//
// 在声明条目时，我们同时声明了二维和三维的函数。然而只有二维的最终被解析。这使得我们对二维和三维问题都只需要一个参数文件。
//
// 注意，从数学的角度来看，边界上的风函数应该满足条件[2.x.2288] ，这样问题才会有解。如果不满足这个条件，那么就找不到解，求解器也就不会收敛。
//
[0.x.16544] 
[0.x.16545] 
[0.x.16546] 
[0.x.16547] 
[0.x.16548] 
[0.x.16549] 
//
[0.x.16550] 
[0.x.16551] 
[0.x.16552] 
[0.x.16553] 
[0.x.16554] 
[0.x.16555] 
//
[0.x.16556] 
[0.x.16557] 
[0.x.16558] 
[0.x.16559] 
[0.x.16560] 
[0.x.16561] 
//
[0.x.16562] 
[0.x.16563] 
[0.x.16564] 
[0.x.16565] 
[0.x.16566] 
[0.x.16567] 
//
// 在求解器部分，我们设置所有的SolverControl参数。然后，该对象将在solve_system()函数中被送入GMRES求解器。
//
[0.x.16568] 
[0.x.16569] 
[0.x.16570] 
//
// 在向ParameterHandler对象声明了所有这些参数后，让我们读取一个输入文件，该文件将为这些参数提供其值。然后我们继续从ParameterHandler对象中提取这些值。
//
[0.x.16571] 
//
[0.x.16572] 
[0.x.16573] 
[0.x.16574] 
//
[0.x.16575] 
[0.x.16576] 
[0.x.16577] 
[0.x.16578] 
[0.x.16579] 
[0.x.16580] 
[0.x.16581] 
[0.x.16582] 
//
[0.x.16583] 
[0.x.16584] 
[0.x.16585] 
[0.x.16586] 
[0.x.16587] 
//
[0.x.16588] 
[0.x.16589] 
[0.x.16590] 
[0.x.16591] 
[0.x.16592] 
//
[0.x.16593] 
[0.x.16594] 
[0.x.16595] 
//
// 最后，这里是另一个如何在独立维度编程中使用参数文件的例子。 如果我们想关闭两个模拟中的一个，我们可以通过设置相应的 "运行2D模拟 "或 "运行3D模拟 "标志为假来实现。
//
[0.x.16596] 
[0.x.16597] 
[0.x.16598] 
//[2.x.2289] 
//
// 边界元素法三角剖分与（dim-1）维三角剖分基本相同，不同之处在于顶点属于（dim）维空间。
//
// deal.II中支持的一些网格格式默认使用三维点来描述网格。这些格式与deal.II的边界元素方法功能兼容。特别是我们可以使用UCD或GMSH格式。在这两种情况下，我们必须特别注意网格的方向，因为与标准有限元的情况不同，这里没有进行重新排序或兼容性检查。 所有的网格都被认为是有方向性的，因为它们被嵌入到一个高维空间中。参见GridIn和Triangulation的文档，以进一步了解三角结构中单元的方向。在我们的例子中，网格的法线是外在于2D的圆或3D的球体。
//
// 对边界元素网格进行适当细化所需要的另一个细节是对网格所逼近的流形的准确描述。对于标准有限元网格的边界，我们已经多次看到了这一点（例如在[2.x.2290]和[2.x.2291]中），这里的原理和用法是一样的，只是SphericalManifold类需要一个额外的模板参数来指定嵌入空间维度。
//
[0.x.16599] 
[0.x.16600] 
[0.x.16601] 
[0.x.16602] 
[0.x.16603] 
//
[0.x.16604] 
[0.x.16605] 
[0.x.16606] 
[0.x.16607] 
[0.x.16608] 
[0.x.16609] 
//
[0.x.16610] 
[0.x.16611] 
[0.x.16612] 
//
[0.x.16613] 
[0.x.16614] 
[0.x.16615] 
//
[0.x.16616] 
[0.x.16617] 
[0.x.16618] 
//
[0.x.16619] 
//
// 对 [2.x.2292] 的调用复制了流形（通过 [2.x.2293] 所以我们不需要担心对 [2.x.2294] 的无效指针。
//
[0.x.16620] 
[0.x.16621] 
//[2.x.2295] 
//
// 这个函数对网格进行全局细化，分配自由度，并调整矩阵和向量的大小。
//
[0.x.16622] 
[0.x.16623] 
[0.x.16624] 
[0.x.16625] 
//
[0.x.16626] 
//
[0.x.16627] 
//
[0.x.16628] 
//
[0.x.16629] 
[0.x.16630] 
[0.x.16631] 
[0.x.16632] 
//[2.x.2296] 
//
// 下面是这个程序的主要功能，组装与边界积分方程相对应的矩阵。
//
[0.x.16633] 
[0.x.16634] 
[0.x.16635] 
//
// 首先我们用正交公式初始化一个FEValues对象，用于在非奇异单元中进行内核积分。这个正交公式是通过参数文件选择的，并且需要相当精确，因为我们要积分的函数不是多项式函数。
//
[0.x.16636] 
[0.x.16637] 
[0.x.16638] 
[0.x.16639] 
[0.x.16640] 
//
[0.x.16641] 
//
[0.x.16642] 
[0.x.16643] 
//
[0.x.16644] 
[0.x.16645] 
//
// 与有限元方法不同的是，如果我们使用拼合边界元方法，那么在每个装配循环中，我们只装配与一个自由度（与支撑点[2.x.2297]相关的自由度）和当前单元之间的耦合信息。这是用fe.dofs_per_cell元素的向量完成的，然后将其分配到全局行的矩阵中 [2.x.2298] 。以下对象将持有这些信息。
//
[0.x.16646] 
//
// 索引 [2.x.2299] 运行在拼合点上，这是 [2.x.2300] 第三个基函数的支持点，而 [2.x.2301] 运行在内部积分点上。
//
// 我们构建一个支持点的向量，它将用于局部积分。
//
[0.x.16647] 
[0.x.16648] 
[0.x.16649] 
[0.x.16650] 
//
// 这样做之后，我们就可以开始对所有单元进行积分循环，首先初始化FEValues对象，得到正交点的[2.x.2302]的值（这个向量场应该是常数，但更通用也无妨）。
//
[0.x.16651] 
[0.x.16652] 
[0.x.16653] 
[0.x.16654] 
//
[0.x.16655] 
[0.x.16656] 
[0.x.16657] 
//
// 然后我们在当前单元上形成所有自由度的积分（注意，这包括不在当前单元上的自由度，这与通常的有限元积分有偏差）。如果其中一个局部自由度与支持点[2.x.2303]相同，我们需要执行的积分是单数。因此，在循环的开始，我们检查是否是这种情况，并存储哪一个是奇异指数。
//
[0.x.16658] 
[0.x.16659] 
[0.x.16660] 
//
[0.x.16661] 
[0.x.16662] 
//
[0.x.16663] 
[0.x.16664] 
[0.x.16665] 
[0.x.16666] 
[0.x.16667] 
[0.x.16668] 
[0.x.16669] 
//
// 然后我们进行积分。如果指数[2.x.2304]不是局部自由度之一，我们只需将单层项加到右边，将双层项加到矩阵中。
//
[0.x.16670] 
[0.x.16671] 
[0.x.16672] 
[0.x.16673] 
[0.x.16674] 
[0.x.16675] 
[0.x.16676] 
//
[0.x.16677] 
//
[0.x.16678] 
[0.x.16679] 
//
[0.x.16680] 
//
[0.x.16681] 
[0.x.16682] 
[0.x.16683] 
[0.x.16684] 
[0.x.16685] 
[0.x.16686] 
[0.x.16687] 
//
// 现在我们处理更微妙的情况。如果我们在这里，这意味着在[2.x.2305]索引上运行的单元包含support_point[i]。在这种情况下，单层和双层势都是单数，它们需要特殊处理。            每当在给定单元内进行积分时，就会使用一个特殊的正交公式，允许人们对参考单元上的奇异权重进行任意函数的积分。            正确的正交公式由get_singular_quadrature函数选择，下面将详细说明。
//
[0.x.16688] 
[0.x.16689] 
//
[0.x.16690] 
[0.x.16691] 
//
[0.x.16692] 
[0.x.16693] 
[0.x.16694] 
[0.x.16695] 
[0.x.16696] 
[0.x.16697] 
//
[0.x.16698] 
//
[0.x.16699] 
[0.x.16700] 
//
[0.x.16701] 
[0.x.16702] 
[0.x.16703] 
[0.x.16704] 
//
[0.x.16705] 
//
[0.x.16706] 
[0.x.16707] 
[0.x.16708] 
[0.x.16709] 
[0.x.16710] 
[0.x.16711] 
[0.x.16712] 
[0.x.16713] 
//
[0.x.16714] 
[0.x.16715] 
//
[0.x.16716] 
[0.x.16717] 
[0.x.16718] 
[0.x.16719] 
[0.x.16720] 
[0.x.16721] 
[0.x.16722] 
[0.x.16723] 
[0.x.16724] 
[0.x.16725] 
//
// 最后，我们需要将当前单元格的贡献添加到全局矩阵中。
//
[0.x.16726] 
[0.x.16727] 
[0.x.16728] 
[0.x.16729] 
//
// 积分运算符的第二部分是术语 [2.x.2306] 。由于我们使用的是配位方案，[2.x.2307] 而相应的矩阵是一个对角线的矩阵，其条目等于[2.x.2308] 。
//
// 计算这个实体角的对角矩阵的一个快速方法是使用诺伊曼矩阵本身。只需将该矩阵与一个元素都等于-1的向量相乘，就可以得到阿尔法角或实体角的对角线矩阵（见介绍中的公式）。然后将这个结果加回到系统矩阵对象上，得到矩阵的最终形式。
//
[0.x.16730] 
[0.x.16731] 
//
[0.x.16732] 
[0.x.16733] 
[0.x.16734] 
[0.x.16735] 
[0.x.16736] 
//[2.x.2309] 
//
// 下一个函数简单地解决了线性系统。
//
[0.x.16737] 
[0.x.16738] 
[0.x.16739] 
[0.x.16740] 
[0.x.16741] 
[0.x.16742] 
//[2.x.2310] 
//
// 误差的计算在其他所有的例子程序中都是完全一样的，我们就不做过多的评论。请注意，在有限元方法中使用的方法在这里也可以使用。
//
[0.x.16743] 
[0.x.16744] 
[0.x.16745] 
[0.x.16746] 
[0.x.16747] 
[0.x.16748] 
[0.x.16749] 
[0.x.16750] 
[0.x.16751] 
[0.x.16752] 
[0.x.16753] 
[0.x.16754] 
[0.x.16755] 
[0.x.16756] 
[0.x.16757] 
//
//可以直接使用[2.x.2311]函数来计算α向量的误差，因为在每个节点上，该值应该是[2.x.2312] 。然后，所有的误差都会被输出并附加到我们的ConvergenceTable对象中，以便以后计算收敛率。
//
[0.x.16758] 
[0.x.16759] 
//
[0.x.16760] 
[0.x.16761] 
[0.x.16762] 
//
[0.x.16763] 
[0.x.16764] 
[0.x.16765] 
[0.x.16766] 
//
[0.x.16767] 
[0.x.16768] 
[0.x.16769] 
[0.x.16770] 
[0.x.16771] 
[0.x.16772] 
//
// 奇异积分需要仔细选择正交规则。特别是deal.II库提供了为对数奇异性（QGaussLog, QGaussLogR）以及1/R奇异性（QGaussOneOverR）量身定制的正交规则。
//
// 奇异积分通常是通过构建具有奇异权重的加权正交公式得到的，因此可以写成
//
// [1.x.62]
//
// 其中[2.x.2313]是一个给定的奇点，权重和正交点[2.x.2314]是精心选择的，以使上述公式对某类函数[2.x.2315]是一个等式。
//
// 在我们目前看到的所有有限元例子中，正交点本身的权重（即函数 [2.x.2316] ），总是不断地等于1。 对于奇异积分，我们有两个选择：我们可以使用上面的定义，从积分中剔除奇异性（即用特殊的正交规则对[2.x.2317]进行积分），或者我们可以要求正交规则用[2.x.2319]对权重[2.x.2318]进行 "标准化"。
//
// [1.x.63]
//
// 我们通过QGaussLogR和QGaussOneOverR的[2.x.2320]参数来使用这第二种选择。
//
// 这些积分有些微妙，特别是在二维空间，由于从实数到参考单元的转换，积分的变量是以转换的行列式为尺度的。
//
// 在二维空间中，这个过程不仅会导致一个因子作为常数出现在整个积分上，而且还会导致一个需要评估的额外积分。
//
// [1.x.64]
//
// 这个过程由QGaussLogR类的构造函数来处理，它增加了额外的正交点和权重，以考虑到积分的第二部分。
//
// 类似的推理应该在三维情况下进行，因为奇异正交是在参考单元的半径[2.x.2321]的逆上定制的，而我们的奇异函数生活在实空间，然而在三维情况下一切都更简单，因为奇异性与变换的行列式成线性比例。这使我们可以只建立一次奇异的二维正交规则，并在所有单元格中重复使用。
//
// 在一维的奇异积分中，这是不可能的，因为我们需要知道正交的缩放参数，而这个参数并不是先验的。这里，正交规则本身也取决于当前单元格的大小。出于这个原因，有必要为每个单数积分创建一个新的正交。
//
// 不同的正交规则是在get_singular_quadrature中建立的，它专门用于dim=2和dim=3，它们在assemble_system函数中被检索。作为参数给出的索引是奇异点所在的单位支持点的索引。
//
[0.x.16773] 
[0.x.16774] 
[0.x.16775] 
[0.x.16776] 
[0.x.16777] 
[0.x.16778] 
[0.x.16779] 
//
[0.x.16780] 
[0.x.16781] 
[0.x.16782] 
[0.x.16783] 
[0.x.16784] 
[0.x.16785] 
[0.x.16786] 
[0.x.16787] 
//
[0.x.16788] 
[0.x.16789] 
[0.x.16790] 
[0.x.16791] 
[0.x.16792] 
[0.x.16793] 
[0.x.16794] 
//
[0.x.16795] 
[0.x.16796] 
[0.x.16797] 
//
[0.x.16798] 
[0.x.16799] 
[0.x.16800] 
[0.x.16801] 
[0.x.16802] 
[0.x.16803] 
//
// [2.x.2322] 
//
// 我们还想知道一些关于外域中电势[2.x.2323]的值：毕竟我们考虑边界积分问题的动机是想知道外域中的速度!
//
// 为此，我们在此假设边界元素域包含在盒子[2.x.2324]中，我们用与基本解的卷积来推算这个盒子内的实际解。这方面的公式在介绍中已经给出。
//
// 整个空间的解的重建是在一个连续的、尺寸为dim的有限元网格上完成的。这些都是常用的，我们不做进一步评论。在函数的最后，我们再次以通常的方式输出这个外部解。
//
[0.x.16804] 
[0.x.16805] 
[0.x.16806] 
[0.x.16807] 
[0.x.16808] 
//
[0.x.16809] 
[0.x.16810] 
[0.x.16811] 
//
[0.x.16812] 
[0.x.16813] 
[0.x.16814] 
//
[0.x.16815] 
[0.x.16816] 
[0.x.16817] 
[0.x.16818] 
[0.x.16819] 
//
[0.x.16820] 
//
[0.x.16821] 
//
[0.x.16822] 
[0.x.16823] 
[0.x.16824] 
//
[0.x.16825] 
[0.x.16826] 
[0.x.16827] 
[0.x.16828] 
//
[0.x.16829] 
[0.x.16830] 
[0.x.16831] 
//
[0.x.16832] 
[0.x.16833] 
//
[0.x.16834] 
[0.x.16835] 
//
[0.x.16836] 
//
[0.x.16837] 
[0.x.16838] 
[0.x.16839] 
[0.x.16840] 
[0.x.16841] 
[0.x.16842] 
//
[0.x.16843] 
[0.x.16844] 
[0.x.16845] 
[0.x.16846] 
//
[0.x.16847] 
[0.x.16848] 
[0.x.16849] 
[0.x.16850] 
[0.x.16851] 
[0.x.16852] 
[0.x.16853] 
//
[0.x.16854] 
//
[0.x.16855] 
[0.x.16856] 
[0.x.16857] 
//
[0.x.16858] 
[0.x.16859] 
//
 
[0.x.16861] 
//[2.x.2325] 
//
// 输出我们的计算结果是一个相当机械的任务。这个函数的所有组成部分之前已经讨论过了。
//
[0.x.16862] 
[0.x.16863] 
[0.x.16864] 
[0.x.16865] 
//
[0.x.16866] 
[0.x.16867] 
[0.x.16868] 
[0.x.16869] 
[0.x.16870] 
[0.x.16871] 
[0.x.16872] 
[0.x.16873] 
//
[0.x.16874] 
[0.x.16875] 
[0.x.16876] 
//
[0.x.16877] 
//
[0.x.16878] 
[0.x.16879] 
[0.x.16880] 
[0.x.16881] 
//
[0.x.16882] 
[0.x.16883] 
//
 
[0.x.16885] 
[0.x.16886] 
[0.x.16887] 
[0.x.16888] 
[0.x.16889] 
[0.x.16890] 
[0.x.16891] 
//[2.x.2326] 
//
// 这是最主要的功能。它应该是不言自明的。
//
[0.x.16892] 
[0.x.16893] 
[0.x.16894] 
[0.x.16895] 
//
[0.x.16896] 
[0.x.16897] 
[0.x.16898] 
[0.x.16899] 
[0.x.16900] 
[0.x.16901] 
//
[0.x.16902] 
//
[0.x.16903] 
[0.x.16904] 
[0.x.16905] 
[0.x.16906] 
[0.x.16907] 
[0.x.16908] 
[0.x.16909] 
[0.x.16910] 
//
[0.x.16911] 
[0.x.16912] 
[0.x.16913] 
[0.x.16914] 
//[2.x.2327] 
//
// 这是本程序的主要功能。它与以前所有的教程程序完全一样。
//
[0.x.16915] 
[0.x.16916] 
[0.x.16917] 
[0.x.16918] 
[0.x.16919] 
//
[0.x.16920] 
[0.x.16921] 
//
[0.x.16922] 
[0.x.16923] 
[0.x.16924] 
//
[0.x.16925] 
[0.x.16926] 
[0.x.16927] 
[0.x.16928] 
[0.x.16929] 
[0.x.16930] 
[0.x.16931] 
[0.x.16932] 
[0.x.16933] 
[0.x.16934] 
[0.x.16935] 
[0.x.16936] 
[0.x.16937] 
[0.x.16938] 
//
[0.x.16939] 
[0.x.16940] 
[0.x.16941] 
[0.x.16942] 
[0.x.16943] 
[0.x.16944] 
[0.x.16945] 
[0.x.16946] 
[0.x.16947] 
[0.x.16948] 
[0.x.16949] 
[0.x.16950] 
[0.x.16951] 
[0.x.16952] 
//
[0.x.16953] 
[0.x.16954] 
[0.x.16955] 
[0.x.16956] 
[0.x.16957] 
[0.x.16958] 
[0.x.16959] 
[0.x.16960] 
[0.x.16961] 
[0.x.16962] 
[0.x.16963] 
[0.x.16964] 
[0.x.16965] 
[0.x.16966] 
[0.x.16967] 
[0.x.16968] 
//
[0.x.16969] 
[0.x.16970] 
[0.x.16971] 
//[2.x.2328] 
//
// 我们首先包括所有必要的deal.II头文件和一些C++相关的文件。它们中的每一个都已经在以前的教程程序中讨论过了，所以我们在这里就不做详细介绍了。
//
[0.x.16972] 
[0.x.16973] 
[0.x.16974] 
[0.x.16975] 
[0.x.16976] 
[0.x.16977] 
[0.x.16978] 
[0.x.16979] 
[0.x.16980] 
[0.x.16981] 
//
[0.x.16982] 
[0.x.16983] 
[0.x.16984] 
[0.x.16985] 
[0.x.16986] 
[0.x.16987] 
[0.x.16988] 
[0.x.16989] 
[0.x.16990] 
//
[0.x.16991] 
[0.x.16992] 
[0.x.16993] 
[0.x.16994] 
//
[0.x.16995] 
[0.x.16996] 
[0.x.16997] 
//
[0.x.16998] 
[0.x.16999] 
[0.x.17000] 
[0.x.17001] 
//
[0.x.17002] 
[0.x.17003] 
[0.x.17004] 
//
[0.x.17005] 
[0.x.17006] 
[0.x.17007] 
//
// 最后这和以前的所有程序一样。
//
[0.x.17008] 
[0.x.17009] 
[0.x.17010] 
//[2.x.2329] 
//
// 由于我们的方法有几个可以微调的参数，我们把它们放到一个外部文件中，这样就可以在运行时确定它们。
//
// 这尤其包括辅助变量 [2.x.2330] 的方程表述，为此我们声明一个 [2.x.2331] 。接下来，我们声明一个类，它将读取和存储我们的程序运行所需的所有参数。
//
[0.x.17011] 
[0.x.17012] 
[0.x.17013] 
[0.x.17014] 
[0.x.17015] 
[0.x.17016] 
[0.x.17017] 
//
[0.x.17018] 
[0.x.17019] 
[0.x.17020] 
[0.x.17021] 
//
[0.x.17022] 
//
[0.x.17023] 
//
[0.x.17024] 
[0.x.17025] 
[0.x.17026] 
//
[0.x.17027] 
//
[0.x.17028] 
//
[0.x.17029] 
//
[0.x.17030] 
[0.x.17031] 
[0.x.17032] 
[0.x.17033] 
[0.x.17034] 
[0.x.17035] 
//
[0.x.17036] 
[0.x.17037] 
//
[0.x.17038] 
[0.x.17039] 
[0.x.17040] 
//
// 在这个类的构造函数中，我们声明所有的参数。这方面的细节已经在其他地方讨论过了，例如在 [2.x.2332] 。
//
[0.x.17041] 
[0.x.17042] 
[0.x.17043] 
[0.x.17044] 
[0.x.17045] 
[0.x.17046] 
[0.x.17047] 
[0.x.17048] 
[0.x.17049] 
[0.x.17050] 
[0.x.17051] 
[0.x.17052] 
[0.x.17053] 
[0.x.17054] 
[0.x.17055] 
[0.x.17056] 
[0.x.17057] 
[0.x.17058] 
[0.x.17059] 
[0.x.17060] 
[0.x.17061] 
[0.x.17062] 
[0.x.17063] 
[0.x.17064] 
[0.x.17065] 
[0.x.17066] 
[0.x.17067] 
[0.x.17068] 
[0.x.17069] 
[0.x.17070] 
[0.x.17071] 
[0.x.17072] 
[0.x.17073] 
[0.x.17074] 
[0.x.17075] 
[0.x.17076] 
[0.x.17077] 
[0.x.17078] 
//
[0.x.17079] 
[0.x.17080] 
[0.x.17081] 
[0.x.17082] 
[0.x.17083] 
[0.x.17084] 
[0.x.17085] 
[0.x.17086] 
//
[0.x.17087] 
[0.x.17088] 
[0.x.17089] 
[0.x.17090] 
[0.x.17091] 
[0.x.17092] 
[0.x.17093] 
[0.x.17094] 
[0.x.17095] 
[0.x.17096] 
[0.x.17097] 
[0.x.17098] 
//
[0.x.17099] 
[0.x.17100] 
[0.x.17101] 
[0.x.17102] 
[0.x.17103] 
[0.x.17104] 
[0.x.17105] 
[0.x.17106] 
[0.x.17107] 
[0.x.17108] 
[0.x.17109] 
[0.x.17110] 
[0.x.17111] 
[0.x.17112] 
[0.x.17113] 
[0.x.17114] 
[0.x.17115] 
[0.x.17116] 
[0.x.17117] 
[0.x.17118] 
[0.x.17119] 
[0.x.17120] 
[0.x.17121] 
[0.x.17122] 
[0.x.17123] 
[0.x.17124] 
[0.x.17125] 
[0.x.17126] 
[0.x.17127] 
[0.x.17128] 
[0.x.17129] 
//
[0.x.17130] 
[0.x.17131] 
[0.x.17132] 
[0.x.17133] 
[0.x.17134] 
//
[0.x.17135] 
[0.x.17136] 
[0.x.17137] 
[0.x.17138] 
[0.x.17139] 
[0.x.17140] 
//
[0.x.17141] 
[0.x.17142] 
[0.x.17143] 
[0.x.17144] 
//
[0.x.17145] 
//
[0.x.17146] 
[0.x.17147] 
[0.x.17148] 
[0.x.17149] 
//
[0.x.17150] 
[0.x.17151] 
[0.x.17152] 
[0.x.17153] 
[0.x.17154] 
[0.x.17155] 
[0.x.17156] 
//
[0.x.17157] 
[0.x.17158] 
[0.x.17159] 
[0.x.17160] 
[0.x.17161] 
//
[0.x.17162] 
[0.x.17163] 
[0.x.17164] 
[0.x.17165] 
[0.x.17166] 
[0.x.17167] 
//
[0.x.17168] 
[0.x.17169] 
[0.x.17170] 
[0.x.17171] 
[0.x.17172] 
[0.x.17173] 
[0.x.17174] 
[0.x.17175] 
[0.x.17176] 
[0.x.17177] 
//
[0.x.17178] 
//
[0.x.17179] 
[0.x.17180] 
[0.x.17181] 
//
// [2.x.2333] 
//
// 在下一个命名空间中，我们声明初始和边界条件。
//
[0.x.17182] 
[0.x.17183] 
//
// 由于我们选择了一个完全解耦的公式，我们将不利用deal.II处理矢量值问题的能力。然而，我们确实希望为方程数据使用一个独立于维度的接口。为了做到这一点，我们的函数应该能够知道我们目前在哪个空间分量上工作，而且我们应该能够有一个通用的接口来做到这一点。下面的类是在这个方向上的一个尝试。
//
[0.x.17184] 
[0.x.17185] 
[0.x.17186] 
[0.x.17187] 
[0.x.17188] 
[0.x.17189] 
//
[0.x.17190] 
[0.x.17191] 
[0.x.17192] 
//
[0.x.17193] 
[0.x.17194] 
[0.x.17195] 
[0.x.17196] 
[0.x.17197] 
[0.x.17198] 
//
[0.x.17199] 
[0.x.17200] 
[0.x.17201] 
[0.x.17202] 
[0.x.17203] 
[0.x.17204] 
//
// 有了这个类的定义，我们声明描述速度和压力的边界条件的类。
//
[0.x.17205] 
[0.x.17206] 
[0.x.17207] 
[0.x.17208] 
[0.x.17209] 
//
[0.x.17210] 
[0.x.17211] 
//
[0.x.17212] 
[0.x.17213] 
[0.x.17214] 
[0.x.17215] 
//
[0.x.17216] 
[0.x.17217] 
[0.x.17218] 
[0.x.17219] 
//
[0.x.17220] 
[0.x.17221] 
[0.x.17222] 
[0.x.17223] 
[0.x.17224] 
[0.x.17225] 
[0.x.17226] 
[0.x.17227] 
[0.x.17228] 
[0.x.17229] 
[0.x.17230] 
//
[0.x.17231] 
[0.x.17232] 
[0.x.17233] 
[0.x.17234] 
[0.x.17235] 
[0.x.17236] 
[0.x.17237] 
[0.x.17238] 
[0.x.17239] 
[0.x.17240] 
[0.x.17241] 
[0.x.17242] 
//
[0.x.17243] 
[0.x.17244] 
[0.x.17245] 
[0.x.17246] 
[0.x.17247] 
//
[0.x.17248] 
[0.x.17249] 
//
[0.x.17250] 
[0.x.17251] 
[0.x.17252] 
[0.x.17253] 
//
[0.x.17254] 
[0.x.17255] 
[0.x.17256] 
[0.x.17257] 
//
[0.x.17258] 
[0.x.17259] 
[0.x.17260] 
[0.x.17261] 
[0.x.17262] 
[0.x.17263] 
[0.x.17264] 
[0.x.17265] 
//
[0.x.17266] 
[0.x.17267] 
[0.x.17268] 
[0.x.17269] 
[0.x.17270] 
[0.x.17271] 
[0.x.17272] 
[0.x.17273] 
[0.x.17274] 
[0.x.17275] 
[0.x.17276] 
[0.x.17277] 
[0.x.17278] 
[0.x.17279] 
//
// [2.x.2334] 
//
// 现在是程序的主类。它实现了纳维-斯托克斯方程的各种版本的投影方法。考虑到介绍中给出的实现细节，所有方法和成员变量的名称应该是不言自明的。
//
[0.x.17280] 
[0.x.17281] 
[0.x.17282] 
[0.x.17283] 
[0.x.17284] 
//
[0.x.17285] 
//
[0.x.17286] 
[0.x.17287] 
//
[0.x.17288] 
[0.x.17289] 
[0.x.17290] 
[0.x.17291] 
[0.x.17292] 
//
[0.x.17293] 
[0.x.17294] 
[0.x.17295] 
//
[0.x.17296] 
//
[0.x.17297] 
[0.x.17298] 
//
[0.x.17299] 
[0.x.17300] 
//
[0.x.17301] 
[0.x.17302] 
//
[0.x.17303] 
[0.x.17304] 
[0.x.17305] 
//
[0.x.17306] 
[0.x.17307] 
[0.x.17308] 
[0.x.17309] 
[0.x.17310] 
[0.x.17311] 
[0.x.17312] 
[0.x.17313] 
[0.x.17314] 
//
[0.x.17315] 
[0.x.17316] 
[0.x.17317] 
[0.x.17318] 
[0.x.17319] 
[0.x.17320] 
[0.x.17321] 
[0.x.17322] 
[0.x.17323] 
[0.x.17324] 
[0.x.17325] 
//
[0.x.17326] 
[0.x.17327] 
[0.x.17328] 
[0.x.17329] 
//
[0.x.17330] 
[0.x.17331] 
[0.x.17332] 
[0.x.17333] 
[0.x.17334] 
[0.x.17335] 
//
[0.x.17336] 
//
[0.x.17337] 
//
[0.x.17338] 
//
[0.x.17339] 
//
[0.x.17340] 
//
[0.x.17341] 
//
[0.x.17342] 
[0.x.17343] 
[0.x.17344] 
[0.x.17345] 
[0.x.17346] 
[0.x.17347] 
[0.x.17348] 
//
[0.x.17349] 
//
[0.x.17350] 
//
// 接下来的几个结构和函数是用来做各种并行的事情。它们遵循[2.x.2335]中规定的方案，使用WorkStream类。正如那里所解释的，这需要我们为每个装配器声明两个结构，一个是每个任务的数据，一个是scratch数据结构。然后，这些结构被移交给组装本地贡献的函数，并将这些本地贡献复制到全局对象上。
//
// 这个程序的一个特殊之处在于，我们并不是只有一个DoFHandler对象来代表速度和压力，而是为这两种变量使用单独的DoFHandler对象。当我们想把涉及这两个变量的条款，如速度的发散和压力的梯度，乘以各自的测试函数时，我们要为这种优化付费。在这样做的时候，我们不能只使用一个FEValues对象，而是需要两个，而且需要用单元格迭代器来初始化它们，这些单元格迭代器指向三角形中的同一个单元格，但不同的DoFHandlers。
//
// 为了在实践中做到这一点，我们声明一个 "同步 "迭代器--一个内部由几个（在我们的例子中是两个）迭代器组成的对象，每次同步迭代器向前移动一步，内部存储的每个迭代器也向前移动一步，从而始终保持同步。碰巧的是，有一个deal.II类可以促进这种事情。这里重要的是要知道，建立在同一个三角形上的两个DoFHandler对象将以相同的顺序走过三角形的单元。
//
[0.x.17351] 
[0.x.17352] 
[0.x.17353] 
//
[0.x.17354] 
//
[0.x.17355] 
//
[0.x.17356] 
[0.x.17357] 
[0.x.17358] 
[0.x.17359] 
[0.x.17360] 
[0.x.17361] 
[0.x.17362] 
[0.x.17363] 
//
[0.x.17364] 
[0.x.17365] 
[0.x.17366] 
[0.x.17367] 
[0.x.17368] 
[0.x.17369] 
[0.x.17370] 
[0.x.17371] 
[0.x.17372] 
[0.x.17373] 
[0.x.17374] 
//
[0.x.17375] 
[0.x.17376] 
[0.x.17377] 
[0.x.17378] 
[0.x.17379] 
[0.x.17380] 
[0.x.17381] 
[0.x.17382] 
[0.x.17383] 
[0.x.17384] 
[0.x.17385] 
[0.x.17386] 
[0.x.17387] 
[0.x.17388] 
[0.x.17389] 
[0.x.17390] 
[0.x.17391] 
[0.x.17392] 
[0.x.17393] 
[0.x.17394] 
[0.x.17395] 
[0.x.17396] 
[0.x.17397] 
[0.x.17398] 
//
[0.x.17399] 
[0.x.17400] 
[0.x.17401] 
//
[0.x.17402] 
//
// 同样的一般布局也适用于以下实现平流项组装的类和函数。
//
[0.x.17403] 
//
[0.x.17404] 
[0.x.17405] 
[0.x.17406] 
[0.x.17407] 
[0.x.17408] 
[0.x.17409] 
[0.x.17410] 
[0.x.17411] 
[0.x.17412] 
//
[0.x.17413] 
[0.x.17414] 
[0.x.17415] 
[0.x.17416] 
[0.x.17417] 
[0.x.17418] 
[0.x.17419] 
[0.x.17420] 
[0.x.17421] 
[0.x.17422] 
[0.x.17423] 
[0.x.17424] 
[0.x.17425] 
[0.x.17426] 
[0.x.17427] 
[0.x.17428] 
[0.x.17429] 
[0.x.17430] 
//
[0.x.17431] 
[0.x.17432] 
[0.x.17433] 
[0.x.17434] 
[0.x.17435] 
[0.x.17436] 
[0.x.17437] 
[0.x.17438] 
[0.x.17439] 
[0.x.17440] 
[0.x.17441] 
//
[0.x.17442] 
[0.x.17443] 
[0.x.17444] 
[0.x.17445] 
//
[0.x.17446] 
//
// 最后几个函数实现了扩散解以及输出的后处理，包括计算速度的曲线。
//
[0.x.17447] 
//
[0.x.17448] 
//
[0.x.17449] 
[0.x.17450] 
//
// [2.x.2336] 
//
// 在构造函数中，我们只是从作为参数传递的[2.x.2337]对象中读取所有数据，验证我们读取的数据是否合理，最后，创建三角形并加载初始数据。
//
[0.x.17451] 
[0.x.17452] 
[0.x.17453] 
[0.x.17454] 
[0.x.17455] 
[0.x.17456] 
[0.x.17457] 
[0.x.17458] 
[0.x.17459] 
[0.x.17460] 
[0.x.17461] 
[0.x.17462] 
[0.x.17463] 
[0.x.17464] 
[0.x.17465] 
[0.x.17466] 
[0.x.17467] 
[0.x.17468] 
[0.x.17469] 
[0.x.17470] 
[0.x.17471] 
[0.x.17472] 
[0.x.17473] 
[0.x.17474] 
[0.x.17475] 
[0.x.17476] 
[0.x.17477] 
[0.x.17478] 
//
[0.x.17479] 
//
[0.x.17480] 
[0.x.17481] 
[0.x.17482] 
//[2.x.2338] 
//
// 创建三角形的方法，并将其细化到所需的次数。在创建三角形之后，它创建了与网格相关的数据，即分配自由度和重新编号，并初始化我们将使用的矩阵和向量。
//
[0.x.17483] 
[0.x.17484] 
[0.x.17485] 
[0.x.17486] 
[0.x.17487] 
[0.x.17488] 
//
[0.x.17489] 
[0.x.17490] 
[0.x.17491] 
[0.x.17492] 
[0.x.17493] 
[0.x.17494] 
//
[0.x.17495] 
[0.x.17496] 
[0.x.17497] 
[0.x.17498] 
//
[0.x.17499] 
//
 
[0.x.17501] 
[0.x.17502] 
[0.x.17503] 
//
[0.x.17504] 
[0.x.17505] 
[0.x.17506] 
//
[0.x.17507] 
[0.x.17508] 
[0.x.17509] 
[0.x.17510] 
[0.x.17511] 
[0.x.17512] 
[0.x.17513] 
[0.x.17514] 
[0.x.17515] 
[0.x.17516] 
[0.x.17517] 
[0.x.17518] 
[0.x.17519] 
[0.x.17520] 
//
[0.x.17521] 
[0.x.17522] 
[0.x.17523] 
[0.x.17524] 
[0.x.17525] 
[0.x.17526] 
[0.x.17527] 
//[2.x.2339] 
//
// 该方法创建常数矩阵并加载初始数据。
//
[0.x.17528] 
[0.x.17529] 
[0.x.17530] 
[0.x.17531] 
[0.x.17532] 
[0.x.17533] 
//
[0.x.17534] 
[0.x.17535] 
[0.x.17536] 
[0.x.17537] 
[0.x.17538] 
[0.x.17539] 
[0.x.17540] 
[0.x.17541] 
[0.x.17542] 
[0.x.17543] 
[0.x.17544] 
[0.x.17545] 
[0.x.17546] 
[0.x.17547] 
[0.x.17548] 
[0.x.17549] 
[0.x.17550] 
//[2.x.2340] 
//
// 在这组方法中，我们初始化了稀疏模式、约束条件（如果有的话）并组装了不依赖于时间步长的矩阵 [2.x.2341] 。请注意，对于拉普拉斯矩阵和质量矩阵，我们可以使用库中的函数来做这件事。因为这个函数的昂贵操作--创建两个矩阵--是完全独立的，我们原则上可以把它们标记为可以使用[2.x.2342]函数进行%并行工作的任务。我们不会在这里这样做，因为这些函数在内部已经被并行化了，特别是由于当前的函数在每个程序运行中只被调用一次，所以在每个时间步长中不会产生费用。然而，必要的修改将是非常直接的。
//
[0.x.17551] 
[0.x.17552] 
[0.x.17553] 
[0.x.17554] 
[0.x.17555] 
[0.x.17556] 
[0.x.17557] 
[0.x.17558] 
[0.x.17559] 
[0.x.17560] 
[0.x.17561] 
[0.x.17562] 
[0.x.17563] 
[0.x.17564] 
[0.x.17565] 
//
[0.x.17566] 
[0.x.17567] 
[0.x.17568] 
[0.x.17569] 
[0.x.17570] 
[0.x.17571] 
[0.x.17572] 
//
//作用于压力空间的矩阵的初始化与作用于速度空间的矩阵相似。
//
[0.x.17573] 
[0.x.17574] 
[0.x.17575] 
[0.x.17576] 
[0.x.17577] 
[0.x.17578] 
[0.x.17579] 
[0.x.17580] 
[0.x.17581] 
//
[0.x.17582] 
[0.x.17583] 
[0.x.17584] 
//
[0.x.17585] 
[0.x.17586] 
[0.x.17587] 
[0.x.17588] 
[0.x.17589] 
[0.x.17590] 
[0.x.17591] 
//
// 对于梯度算子，我们从初始化稀疏模式和压缩它开始。这里需要注意的是，梯度算子从压力空间作用到速度空间，所以我们必须处理两个不同的有限元空间。为了保持循环的同步，我们使用之前定义的别名，即[2.x.2343] 。
//
[0.x.17592] 
[0.x.17593] 
[0.x.17594] 
[0.x.17595] 
[0.x.17596] 
[0.x.17597] 
[0.x.17598] 
[0.x.17599] 
[0.x.17600] 
[0.x.17601] 
[0.x.17602] 
//
[0.x.17603] 
[0.x.17604] 
[0.x.17605] 
[0.x.17606] 
[0.x.17607] 
[0.x.17608] 
[0.x.17609] 
[0.x.17610] 
//
[0.x.17611] 
[0.x.17612] 
[0.x.17613] 
[0.x.17614] 
[0.x.17615] 
[0.x.17616] 
[0.x.17617] 
[0.x.17618] 
[0.x.17619] 
[0.x.17620] 
[0.x.17621] 
[0.x.17622] 
[0.x.17623] 
[0.x.17624] 
[0.x.17625] 
[0.x.17626] 
//
[0.x.17627] 
[0.x.17628] 
[0.x.17629] 
[0.x.17630] 
[0.x.17631] 
[0.x.17632] 
[0.x.17633] 
[0.x.17634] 
//
[0.x.17635] 
[0.x.17636] 
//
[0.x.17637] 
[0.x.17638] 
[0.x.17639] 
[0.x.17640] 
[0.x.17641] 
[0.x.17642] 
[0.x.17643] 
[0.x.17644] 
[0.x.17645] 
[0.x.17646] 
[0.x.17647] 
//
[0.x.17648] 
[0.x.17649] 
[0.x.17650] 
[0.x.17651] 
[0.x.17652] 
[0.x.17653] 
[0.x.17654] 
[0.x.17655] 
[0.x.17656] 
[0.x.17657] 
//[2.x.2344] 
//
// 这是时间行进函数，从[2.x.2345]开始，使用时间步长[2.x.2346]的投影法在时间上前进，直到[2.x.2347] 。
//
// 它的第二个参数[2.x.2348]表示该函数是否应该输出它在任何特定时刻正在做什么的信息：例如，它将说明我们是否正在进行扩散、投影子步骤；更新前置条件器等等。我们没有使用像[1.x.65]那样的代码来实现这种输出，而是使用ConditionalOStream类来为我们做这个。该类接受一个输出流和一个条件，该条件表明你传递给它的东西是否应该被传递到给定的输出流，或者应该被忽略。这样，上面的代码就变成了[1.x.66]，并且在任何情况下都会做正确的事情。
//
[0.x.17658] 
[0.x.17659] 
[0.x.17660] 
[0.x.17661] 
[0.x.17662] 
//
[0.x.17663] 
[0.x.17664] 
[0.x.17665] 
[0.x.17666] 
[0.x.17667] 
[0.x.17668] 
[0.x.17669] 
[0.x.17670] 
[0.x.17671] 
[0.x.17672] 
[0.x.17673] 
[0.x.17674] 
//
[0.x.17675] 
[0.x.17676] 
[0.x.17677] 
[0.x.17678] 
[0.x.17679] 
[0.x.17680] 
[0.x.17681] 
[0.x.17682] 
[0.x.17683] 
[0.x.17684] 
[0.x.17685] 
[0.x.17686] 
[0.x.17687] 
[0.x.17688] 
//
[0.x.17689] 
[0.x.17690] 
[0.x.17691] 
[0.x.17692] 
[0.x.17693] 
[0.x.17694] 
[0.x.17695] 
[0.x.17696] 
[0.x.17697] 
//[2.x.2349] 
//
// 扩散步骤的实现。请注意，昂贵的操作是函数末尾的扩散解，我们必须为每个速度分量做一次。为了加快进度，我们允许以%并行方式进行，使用[2.x.2350]函数，确保[2.x.2351]的求解都得到处理，并被安排到可用的处理器上：如果你的机器有一个以上的处理器核心，并且这个程序的其他部分目前没有使用资源，那么扩散求解将以%并行方式运行。另一方面，如果你的系统只有一个处理器核心，那么以%并行方式运行将是低效的（因为它导致了，例如，缓存拥堵），事情将被顺序地执行。
//
[0.x.17698] 
[0.x.17699] 
[0.x.17700] 
[0.x.17701] 
[0.x.17702] 
//
[0.x.17703] 
//
[0.x.17704] 
[0.x.17705] 
[0.x.17706] 
[0.x.17707] 
[0.x.17708] 
[0.x.17709] 
//
[0.x.17710] 
[0.x.17711] 
//
[0.x.17712] 
[0.x.17713] 
//
[0.x.17714] 
[0.x.17715] 
[0.x.17716] 
[0.x.17717] 
[0.x.17718] 
[0.x.17719] 
[0.x.17720] 
[0.x.17721] 
[0.x.17722] 
[0.x.17723] 
[0.x.17724] 
[0.x.17725] 
[0.x.17726] 
[0.x.17727] 
[0.x.17728] 
[0.x.17729] 
[0.x.17730] 
[0.x.17731] 
[0.x.17732] 
[0.x.17733] 
[0.x.17734] 
[0.x.17735] 
[0.x.17736] 
[0.x.17737] 
[0.x.17738] 
[0.x.17739] 
[0.x.17740] 
[0.x.17741] 
[0.x.17742] 
[0.x.17743] 
[0.x.17744] 
[0.x.17745] 
[0.x.17746] 
[0.x.17747] 
[0.x.17748] 
[0.x.17749] 
[0.x.17750] 
[0.x.17751] 
[0.x.17752] 
[0.x.17753] 
[0.x.17754] 
[0.x.17755] 
[0.x.17756] 
//
[0.x.17757] 
[0.x.17758] 
[0.x.17759] 
[0.x.17760] 
[0.x.17761] 
[0.x.17762] 
[0.x.17763] 
[0.x.17764] 
[0.x.17765] 
[0.x.17766] 
[0.x.17767] 
[0.x.17768] 
//
[0.x.17769] 
[0.x.17770] 
[0.x.17771] 
[0.x.17772] 
[0.x.17773] 
[0.x.17774] 
[0.x.17775] 
[0.x.17776] 
[0.x.17777] 
[0.x.17778] 
//[2.x.2352] 
//
// 下面的几个函数是关于集合平流项的，平流项是扩散步骤的系统矩阵的一部分，在每个时间步骤中都会发生变化。如上所述，我们将使用WorkStream类和文件模块[2.x.2353]中描述的其他设施，在所有单元上平行运行装配循环。
//
[0.x.17779] 
[0.x.17780] 
[0.x.17781] 
[0.x.17782] 
[0.x.17783] 
[0.x.17784] 
[0.x.17785] 
[0.x.17786] 
[0.x.17787] 
[0.x.17788] 
[0.x.17789] 
[0.x.17790] 
[0.x.17791] 
[0.x.17792] 
[0.x.17793] 
[0.x.17794] 
[0.x.17795] 
[0.x.17796] 
//
[0.x.17797] 
[0.x.17798] 
[0.x.17799] 
[0.x.17800] 
[0.x.17801] 
[0.x.17802] 
[0.x.17803] 
[0.x.17804] 
[0.x.17805] 
[0.x.17806] 
[0.x.17807] 
[0.x.17808] 
[0.x.17809] 
[0.x.17810] 
//
[0.x.17811] 
[0.x.17812] 
[0.x.17813] 
[0.x.17814] 
[0.x.17815] 
[0.x.17816] 
[0.x.17817] 
[0.x.17818] 
[0.x.17819] 
[0.x.17820] 
//
[0.x.17821] 
[0.x.17822] 
[0.x.17823] 
[0.x.17824] 
[0.x.17825] 
[0.x.17826] 
[0.x.17827] 
[0.x.17828] 
[0.x.17829] 
[0.x.17830] 
[0.x.17831] 
[0.x.17832] 
[0.x.17833] 
[0.x.17834] 
//
[0.x.17835] 
[0.x.17836] 
[0.x.17837] 
[0.x.17838] 
[0.x.17839] 
[0.x.17840] 
[0.x.17841] 
[0.x.17842] 
[0.x.17843] 
[0.x.17844] 
//
// [2.x.2354] 
//
// 这实现了投影的步骤。
//
[0.x.17845] 
[0.x.17846] 
[0.x.17847] 
[0.x.17848] 
//
[0.x.17849] 
[0.x.17850] 
[0.x.17851] 
//
[0.x.17852] 
//
[0.x.17853] 
[0.x.17854] 
[0.x.17855] 
[0.x.17856] 
[0.x.17857] 
[0.x.17858] 
//
[0.x.17859] 
//
[0.x.17860] 
[0.x.17861] 
[0.x.17862] 
[0.x.17863] 
//
[0.x.17864] 
[0.x.17865] 
[0.x.17866] 
//
[0.x.17867] 
[0.x.17868] 
//[2.x.2355] 
//
// 这是投影法的压力更新步骤。它实现了该方法的标准表述，即[1.x.67]或旋转形式，即[1.x.68] 。
//
[0.x.17869] 
[0.x.17870] 
[0.x.17871] 
[0.x.17872] 
[0.x.17873] 
[0.x.17874] 
[0.x.17875] 
[0.x.17876] 
[0.x.17877] 
[0.x.17878] 
[0.x.17879] 
[0.x.17880] 
[0.x.17881] 
[0.x.17882] 
[0.x.17883] 
[0.x.17884] 
[0.x.17885] 
[0.x.17886] 
[0.x.17887] 
[0.x.17888] 
[0.x.17889] 
//[2.x.2356] 
//
// 该方法绘制了当前的解决方案。主要的困难是，我们想创建一个单一的输出文件，其中包含所有的速度分量、压力以及流动的涡度的数据。另一方面，速度和压力存在于不同的DoFHandler对象中，因此不能用一个DataOut对象写入同一个文件。因此，我们必须更努力地把各种数据放到一个DoFHandler对象中，然后用它来驱动图形输出。
//
// 我们不会在这里详细说明这个过程，而是参考 [2.x.2357] ，那里使用了一个类似的程序（并有记录），为所有变量创建一个联合的 DoFHandler 对象。
//
// 我们还注意到，我们在这里将涡度作为一个单独的函数中的标量来计算，使用[2.x.2358]量的投影[2.x.2359]到用于速度成分的有限元空间。但原则上，我们也可以从速度中计算出一个点状量，并通过[2.x.2360]和[2.x.2361]中讨论的DataPostprocessor机制实现。
//
[0.x.17890] 
[0.x.17891] 
[0.x.17892] 
[0.x.17893] 
[0.x.17894] 
[0.x.17895] 
[0.x.17896] 
[0.x.17897] 
[0.x.17898] 
[0.x.17899] 
[0.x.17900] 
[0.x.17901] 
[0.x.17902] 
[0.x.17903] 
[0.x.17904] 
[0.x.17905] 
[0.x.17906] 
[0.x.17907] 
[0.x.17908] 
[0.x.17909] 
[0.x.17910] 
[0.x.17911] 
[0.x.17912] 
[0.x.17913] 
[0.x.17914] 
[0.x.17915] 
[0.x.17916] 
[0.x.17917] 
[0.x.17918] 
[0.x.17919] 
[0.x.17920] 
[0.x.17921] 
[0.x.17922] 
[0.x.17923] 
[0.x.17924] 
[0.x.17925] 
[0.x.17926] 
[0.x.17927] 
[0.x.17928] 
[0.x.17929] 
[0.x.17930] 
[0.x.17931] 
[0.x.17932] 
[0.x.17933] 
[0.x.17934] 
[0.x.17935] 
[0.x.17936] 
[0.x.17937] 
[0.x.17938] 
[0.x.17939] 
[0.x.17940] 
[0.x.17941] 
[0.x.17942] 
[0.x.17943] 
[0.x.17944] 
[0.x.17945] 
[0.x.17946] 
[0.x.17947] 
[0.x.17948] 
[0.x.17949] 
[0.x.17950] 
[0.x.17951] 
[0.x.17952] 
[0.x.17953] 
[0.x.17954] 
[0.x.17955] 
[0.x.17956] 
[0.x.17957] 
[0.x.17958] 
[0.x.17959] 
[0.x.17960] 
[0.x.17961] 
[0.x.17962] 
[0.x.17963] 
[0.x.17964] 
[0.x.17965] 
//
// 下面是一个辅助函数，通过将[2.x.2362]项投影到用于速度分量的有限元空间来计算涡度。这个函数只有在我们生成图形输出时才会被调用，所以不是很频繁，因此我们没有像对待其他装配函数那样，麻烦地使用WorkStream概念来并行化它。不过，如果需要的话，这应该不会太复杂。此外，我们在这里的实现只适用于2D，所以如果不是这种情况，我们就放弃了。
//
[0.x.17966] 
[0.x.17967] 
[0.x.17968] 
[0.x.17969] 
[0.x.17970] 
[0.x.17971] 
//
[0.x.17972] 
[0.x.17973] 
[0.x.17974] 
[0.x.17975] 
[0.x.17976] 
[0.x.17977] 
[0.x.17978] 
[0.x.17979] 
//
[0.x.17980] 
[0.x.17981] 
//
[0.x.17982] 
[0.x.17983] 
[0.x.17984] 
[0.x.17985] 
[0.x.17986] 
[0.x.17987] 
[0.x.17988] 
[0.x.17989] 
[0.x.17990] 
[0.x.17991] 
[0.x.17992] 
[0.x.17993] 
//
[0.x.17994] 
[0.x.17995] 
[0.x.17996] 
//
[0.x.17997] 
[0.x.17998] 
[0.x.17999] 
//[2.x.2363] 
//
// 主函数看起来和其他所有的教程程序非常相似，所以这里没有什么可评论的。
//
[0.x.18000] 
[0.x.18001] 
[0.x.18002] 
[0.x.18003] 
[0.x.18004] 
//
[0.x.18005] 
[0.x.18006] 
//
[0.x.18007] 
//
[0.x.18008] 
[0.x.18009] 
[0.x.18010] 
[0.x.18011] 
[0.x.18012] 
[0.x.18013] 
[0.x.18014] 
[0.x.18015] 
[0.x.18016] 
[0.x.18017] 
[0.x.18018] 
[0.x.18019] 
[0.x.18020] 
[0.x.18021] 
[0.x.18022] 
[0.x.18023] 
[0.x.18024] 
[0.x.18025] 
[0.x.18026] 
[0.x.18027] 
[0.x.18028] 
[0.x.18029] 
[0.x.18030] 
[0.x.18031] 
[0.x.18032] 
[0.x.18033] 
[0.x.18034] 
[0.x.18035] 
[0.x.18036] 
[0.x.18037] 
[0.x.18038] 
[0.x.18039] 
[0.x.18040] 
[0.x.18041] 
[0.x.18042] 
[0.x.18043] 
[0.x.18044] 
[0.x.18045] 
[0.x.18046] 
[0.x.18047] 
[0.x.18048] 
[0.x.18049] 
[0.x.18050] 
[0.x.18051] 
[0.x.18052] 
[0.x.18053] 
[0.x.18054] 
[0.x.18055] 
[0.x.18056] 
//
[0.x.18057] 
[0.x.18058] 
[0.x.18059] 
[0.x.18060] 
//[2.x.2364] 
//
// 正如介绍中提到的，本程序基本上只是 [2.x.2365] 的一个小修改版本。因此，以下大部分的include文件都是在那里使用的，或者至少是在以前的教程程序中已经使用的。
//
[0.x.18061] 
[0.x.18062] 
[0.x.18063] 
[0.x.18064] 
[0.x.18065] 
[0.x.18066] 
[0.x.18067] 
[0.x.18068] 
[0.x.18069] 
[0.x.18070] 
[0.x.18071] 
[0.x.18072] 
[0.x.18073] 
[0.x.18074] 
[0.x.18075] 
[0.x.18076] 
[0.x.18077] 
//
// IndexSet用于设置每个 [2.x.2366] 的大小。
[0.x.18078] 
//
// PETSc出现在这里是因为SLEPc依赖于这个库。
//
[0.x.18079] 
[0.x.18080] 
//
// 然后我们需要实际导入SLEPc提供的求解器接口。
//
[0.x.18081] 
//
// 我们还需要一些标准的C++。
//
[0.x.18082] 
[0.x.18083] 
//
// 最后，和以前的程序一样，我们将所有的deal.II类和函数名导入到本程序中所有的名字空间中。
//
[0.x.18084] 
[0.x.18085] 
[0.x.18086] 
//[2.x.2367] 
//
// 下面是主类模板的类声明。它看起来和在 [2.x.2368] 中已经展示过的差不多了。
//
[0.x.18087] 
[0.x.18088] 
[0.x.18089] 
[0.x.18090] 
[0.x.18091] 
[0.x.18092] 
//
[0.x.18093] 
[0.x.18094] 
[0.x.18095] 
[0.x.18096] 
[0.x.18097] 
//
[0.x.18098] 
[0.x.18099] 
[0.x.18100] 
//
// 有了这些例外情况。对于我们的特征值问题，我们既需要左手边的刚度矩阵，也需要右手边的质量矩阵。我们还需要的不仅仅是一个解函数，而是一整套我们想要计算的特征函数，以及相应的特征值。
//
[0.x.18101] 
[0.x.18102] 
[0.x.18103] 
//
// 然后，我们需要一个对象来存储几个运行时参数，我们将在输入文件中指定。
//
[0.x.18104] 
//
// 最后，我们将有一个对象，包含对我们自由度的 "约束"。如果我们有自适应细化的网格（目前的程序中没有），这可能包括悬挂节点约束。这里，我们将存储边界节点的约束 [2.x.2369] 。
//
[0.x.18105] 
[0.x.18106] 
//[2.x.2370] 
//[2.x.2371] 
//
// 首先是构造函数。主要的新部分是处理运行时的输入参数。我们需要首先声明它们的存在，然后从输入文件中读取它们的值，该文件的名称被指定为该函数的参数。
//
[0.x.18107] 
[0.x.18108] 
[0.x.18109] 
[0.x.18110] 
[0.x.18111] 
//
// TODO研究为什么获得正确的特征值退化所需的最小细化步骤数为6
//
[0.x.18112] 
[0.x.18113] 
[0.x.18114] 
[0.x.18115] 
[0.x.18116] 
[0.x.18117] 
[0.x.18118] 
[0.x.18119] 
[0.x.18120] 
[0.x.18121] 
[0.x.18122] 
[0.x.18123] 
[0.x.18124] 
[0.x.18125] 
[0.x.18126] 
//
[0.x.18127] 
[0.x.18128] 
//[2.x.2372] 
//
// 下一个函数在域[2.x.2373]上创建一个网格，根据输入文件的要求对其进行多次细化，然后给它附加一个DoFHandler，将矩阵和向量初始化为正确的大小。我们还建立了对应于边界值的约束 [2.x.2374] 。
//
// 对于矩阵，我们使用PETSc包装器。这些包装器能够在非零条目被添加时分配必要的内存。这看起来效率很低：我们可以先计算稀疏模式，用它来初始化矩阵，然后在我们插入条目时，我们可以确定我们不需要重新分配内存和释放之前使用的内存。一种方法是使用这样的代码。用[1.x.69]代替下面两个[2.x.2375]的刚度和质量矩阵的调用。
//
// 不幸的是，这并不完全可行。上面的代码可能会导致在非零模式下的一些条目，我们只写零条目；最值得注意的是，对于那些属于边界节点的行和列的非对角线条目，这一点是成立的。这不应该是一个问题，但是不管什么原因，PETSc的ILU预处理程序（我们用来解决特征值求解器中的线性系统）不喜欢这些额外的条目，并以错误信息中止。
//
// 在没有任何明显的方法来避免这种情况的情况下，我们干脆选择第二种最好的方法，即让PETSc在必要时分配内存。也就是说，由于这不是一个时间上的关键部分，这整个事件就不再重要了。
//
[0.x.18129] 
[0.x.18130] 
[0.x.18131] 
[0.x.18132] 
[0.x.18133] 
[0.x.18134] 
[0.x.18135] 
//
[0.x.18136] 
[0.x.18137] 
//
[0.x.18138] 
[0.x.18139] 
[0.x.18140] 
[0.x.18141] 
[0.x.18142] 
[0.x.18143] 
//
// 下一步是处理特征谱的问题。在这种情况下，输出是特征值和特征函数，所以我们将特征函数和特征值列表的大小设置为与我们在输入文件中要求的一样大。当使用[2.x.2376]时，Vector是使用IndexSet初始化的。IndexSet不仅用于调整[2.x.2377]的大小，而且还将[2.x.2378]中的一个索引与一个自由度联系起来（更详细的解释见[2.x.2379]）。函数complete_index_set()创建了一个IndexSet，每个有效的索引都是这个集合的一部分。请注意，这个程序只能按顺序运行，如果并行使用，将抛出一个异常。
//
[0.x.18144] 
[0.x.18145] 
[0.x.18146] 
[0.x.18147] 
[0.x.18148] 
//
[0.x.18149] 
[0.x.18150] 
//[2.x.2380] 
//
// 在这里，我们从局部贡献[2.x.2381]和[2.x.2382]中分别组合出全局刚度和质量矩阵。如果你看过以前的教程程序，这个函数应该会很熟悉。唯一新的东西是使用我们从输入文件中得到的表达式，设置一个描述势[2.x.2383]的对象。然后我们需要在每个单元的正交点上评估这个对象。如果你见过如何评估函数对象（例如，见[2.x.2384]中的系数），这里的代码也会显得相当熟悉。
//
[0.x.18151] 
[0.x.18152] 
[0.x.18153] 
[0.x.18154] 
//
[0.x.18155] 
[0.x.18156] 
[0.x.18157] 
[0.x.18158] 
//
[0.x.18159] 
[0.x.18160] 
//
[0.x.18161] 
[0.x.18162] 
//
[0.x.18163] 
//
[0.x.18164] 
[0.x.18165] 
[0.x.18166] 
[0.x.18167] 
//
[0.x.18168] 
[0.x.18169] 
[0.x.18170] 
[0.x.18171] 
[0.x.18172] 
[0.x.18173] 
//
[0.x.18174] 
[0.x.18175] 
//
[0.x.18176] 
[0.x.18177] 
[0.x.18178] 
[0.x.18179] 
[0.x.18180] 
[0.x.18181] 
[0.x.18182] 
[0.x.18183] 
[0.x.18184] 
[0.x.18185] 
[0.x.18186] 
[0.x.18187] 
[0.x.18188] 
//
[0.x.18189] 
[0.x.18190] 
[0.x.18191] 
[0.x.18192] 
[0.x.18193] 
[0.x.18194] 
//
// 现在我们有了本地矩阵的贡献，我们把它们转移到全局对象中，并处理好零边界约束。
//
[0.x.18195] 
//
[0.x.18196] 
[0.x.18197] 
[0.x.18198] 
[0.x.18199] 
[0.x.18200] 
[0.x.18201] 
[0.x.18202] 
//
// 在函数的最后，我们告诉PETSc，矩阵现在已经完全组装好了，稀疏矩阵表示法现在可以被压缩了，因为不会再添加任何条目。
//
[0.x.18203] 
[0.x.18204] 
//
// 在离开函数之前，我们计算虚假的特征值，这些特征值是由零Dirichlet约束引入到系统中的。正如介绍中所讨论的，使用Dirichlet边界条件，加上位于域的边界的自由度仍然是我们所求解的线性系统的一部分，引入了一些虚假的特征值。下面，我们输出它们所处的区间，以确保我们在计算中出现时可以忽略它们。
//
[0.x.18205] 
[0.x.18206] 
//
[0.x.18207] 
[0.x.18208] 
[0.x.18209] 
[0.x.18210] 
[0.x.18211] 
[0.x.18212] 
[0.x.18213] 
//
[0.x.18214] 
[0.x.18215] 
[0.x.18216] 
[0.x.18217] 
//[2.x.2385] 
//
// 这是该程序的关键新功能。现在系统已经设置好了，现在是实际解决问题的好时机：和其他例子一样，这是使用 "解决 "程序来完成的。从本质上讲，它的工作原理与其他程序一样：你设置一个SolverControl对象，描述我们要解决的线性系统的精度，然后我们选择我们想要的解算器类型。这里我们选择了SLEPc的Krylov-Schur求解器，对于这类问题来说，这是一个相当快速和强大的选择。
//
[0.x.18218] 
[0.x.18219] 
[0.x.18220] 
//
// 我们从这里开始，就像我们通常做的那样，指定我们想要的收敛控制。
//
[0.x.18221] 
[0.x.18222] 
//
// 在我们实际求解特征函数和-值之前，我们还必须选择哪一组特征值来求解。让我们选择那些实部最小的特征值和相应的特征函数（事实上，我们在这里解决的问题是对称的，所以特征值是纯实部的）。之后，我们就可以真正让SLEPc做它的工作了。
//
[0.x.18223] 
//
[0.x.18224] 
//
[0.x.18225] 
[0.x.18226] 
[0.x.18227] 
[0.x.18228] 
[0.x.18229] 
//
// 上述调用的输出是一组向量和数值。在特征值问题中，特征函数只确定到一个常数，这个常数可以很随意地固定。由于对特征值问题的原点一无所知，SLEPc除了将特征向量归一到[2.x.2386]（向量）准则外，没有其他选择。不幸的是，这个规范与我们从特征函数角度可能感兴趣的任何规范没有什么关系：[2.x.2387]规范，或者也许是[2.x.2388]规范。
//
//让我们选择后者，重新划分特征函数的尺度，使其具有[2.x.2389]而不是[2.x.2390]（其中[2.x.2391]是[2.x.2392]第三个特征[1.x.70]，[2.x.2393]是相应的结点值矢量）。对于这里选择的[2.x.2394]元素，我们知道函数[2.x.2395]的最大值是在其中一个节点达到的，所以[2.x.2396]，使得在[2.x.2397]准则下的归一化是微不足道的。请注意，如果我们选择[2.x.2398]元素与[2.x.2399]，这就不容易了：在那里，一个函数的最大值不一定要在一个节点上达到，所以[2.x.2400]（尽管平等通常几乎是真的）。
//
[0.x.18230] 
[0.x.18231] 
//
// 最后返回收敛所需的迭代次数。
//
[0.x.18232] 
[0.x.18233] 
//[2.x.2401] 
//
// 这是本程序的最后一个重要功能。它使用DataOut类来生成特征函数的图形输出，以便以后进行可视化。它的工作原理与其他许多教程中的程序一样。
//
// 整个函数的集合被输出为一个单一的VTK文件。
//
[0.x.18234] 
[0.x.18235] 
[0.x.18236] 
[0.x.18237] 
//
[0.x.18238] 
//
[0.x.18239] 
[0.x.18240] 
[0.x.18241] 
[0.x.18242] 
//
// 唯一值得讨论的可能是，由于势在输入文件中被指定为函数表达式，因此最好能将其与特征函数一起以图形形式表示。实现这一目的的过程相对简单：我们建立一个代表[2.x.2402]的对象，然后将这个连续函数插值到有限元空间。我们还将结果附加到DataOut对象上，以便进行可视化。
//
[0.x.18243] 
[0.x.18244] 
[0.x.18245] 
[0.x.18246] 
[0.x.18247] 
[0.x.18248] 
[0.x.18249] 
[0.x.18250] 
[0.x.18251] 
//
[0.x.18252] 
//
[0.x.18253] 
[0.x.18254] 
[0.x.18255] 
//[2.x.2403] 
//
// 这是一个对一切都有顶层控制的函数。它几乎与 [2.x.2404] 中的内容完全相同。
//
[0.x.18256] 
[0.x.18257] 
[0.x.18258] 
[0.x.18259] 
//
[0.x.18260] 
[0.x.18261] 
[0.x.18262] 
[0.x.18263] 
//
[0.x.18264] 
//
[0.x.18265] 
[0.x.18266] 
[0.x.18267] 
//
[0.x.18268] 
//
[0.x.18269] 
[0.x.18270] 
[0.x.18271] 
[0.x.18272] 
[0.x.18273] 
[0.x.18274] 
//[2.x.2405] 
[0.x.18275] 
[0.x.18276] 
[0.x.18277] 
[0.x.18278] 
[0.x.18279] 
[0.x.18280] 
//
[0.x.18281] 
//
// 这个程序只能在串行中运行。否则，将抛出一个异常。
//
[0.x.18282] 
[0.x.18283] 
[0.x.18284] 
//
[0.x.18285] 
[0.x.18286] 
[0.x.18287] 
//
// 在这期间，我们一直在注意是否有任何异常应该被生成。如果是这样的话，我们就会惊慌失措...
//
[0.x.18288] 
[0.x.18289] 
[0.x.18290] 
[0.x.18291] 
[0.x.18292] 
[0.x.18293] 
[0.x.18294] 
[0.x.18295] 
[0.x.18296] 
[0.x.18297] 
[0.x.18298] 
//
[0.x.18299] 
[0.x.18300] 
[0.x.18301] 
[0.x.18302] 
[0.x.18303] 
[0.x.18304] 
[0.x.18305] 
[0.x.18306] 
[0.x.18307] 
[0.x.18308] 
[0.x.18309] 
[0.x.18310] 
[0.x.18311] 
[0.x.18312] 
//
// 如果没有抛出异常，我们就告诉程序不要再胡闹了，乖乖地退出。
//
[0.x.18313] 
//
[0.x.18314] 
[0.x.18315] 
[0.x.18316] 
[0.x.18317] 
[0.x.18318] 
[0.x.18319] 
[0.x.18320] 
[0.x.18321] 
[0.x.18322] 
[0.x.18323] 
[0.x.18324] 
[0.x.18325] 
[0.x.18326] 
[0.x.18327] 
[0.x.18328] 
[0.x.18329] 
//
[0.x.18330] 
[0.x.18331] 
[0.x.18332] 
[0.x.18333] 
//
// 首先包括deal.II库中的必要文件。
//
[0.x.18334] 
[0.x.18335] 
[0.x.18336] 
//
[0.x.18337] 
[0.x.18338] 
[0.x.18339] 
[0.x.18340] 
//
[0.x.18341] 
//
[0.x.18342] 
[0.x.18343] 
//
[0.x.18344] 
[0.x.18345] 
[0.x.18346] 
[0.x.18347] 
[0.x.18348] 
[0.x.18349] 
//
[0.x.18350] 
[0.x.18351] 
//
// 这包括有效实现无矩阵方法的数据结构，或者用MatrixFree类的更通用的有限元算子。
//
[0.x.18352] 
[0.x.18353] 
[0.x.18354] 
//
[0.x.18355] 
[0.x.18356] 
//
[0.x.18357] 
[0.x.18358] 
[0.x.18359] 
//
// 为了提高效率，在无矩阵实现中进行的操作需要在编译时了解循环长度，这些长度是由有限元的度数给出的。因此，我们收集了两个模板参数的值，可以在代码中的一个地方改变。当然，我们可以把有限元的度数作为一个运行时的参数，通过编译所有可能的度数（比如，1到6之间）的计算核，并在运行时选择合适的核。在这里，我们只是选择二阶[2.x.2406]元素，并选择维度3作为标准。
//
[0.x.18360] 
[0.x.18361] 
//[2.x.2407] 
//
// 我们为泊松问题定义了一个可变系数函数。它与[2.x.2408]中的函数类似，但我们使用[2.x.2409]的形式，而不是不连续的形式。这只是为了证明这种实现的可能性，而不是在物理上有什么意义。我们定义系数的方式与早期教程程序中的函数相同。有一个新的函数，即有模板参数[2.x.2410]的[2.x.2411]方法。
[0.x.18362] 
[0.x.18363] 
[0.x.18364] 
[0.x.18365] 
[0.x.18366] 
[0.x.18367] 
//
[0.x.18368] 
[0.x.18369] 
[0.x.18370] 
[0.x.18371] 
//
// 这就是上面提到的新函数。评估抽象类型的系数 [2.x.2412] 它可能只是一个普通的双数，但也可能是一个有点复杂的类型，我们称之为VectorizedArray。这种数据类型本质上是一个短的双数数组，正如在介绍中所讨论的那样，它可以容纳几个单元格的数据。例如，我们在这里评估的系数不是像通常那样在一个简单的点上，而是交给一个Point<dim,VectorizedArray<double>>点，在AVX的情况下，它实际上是四个点的集合。不要把VectorizedArray中的条目与点的不同坐标混淆。事实上，数据的布局是这样的：[2.x.2413]返回一个VectorizedArray，它又包含了第一个点和第二个点的x坐标。你可以使用例如 [2.x.2414] 单独访问坐标，j=0,1,2,3，但建议尽可能在一个VectorizedArray上定义操作，以便利用矢量操作。
//
// 在函数的实现中，我们假设数字类型重载了基本的算术运算，所以我们只需照常写代码。然后，基类函数[2.x.2415]是由带有双倍类型的模板函数计算出来的，以避免重复代码。
//
[0.x.18372] 
[0.x.18373] 
[0.x.18374] 
[0.x.18375] 
[0.x.18376] 
[0.x.18377] 
[0.x.18378] 
//
[0.x.18379] 
[0.x.18380] 
[0.x.18381] 
[0.x.18382] 
[0.x.18383] 
[0.x.18384] 
//[2.x.2416] 
//
// 下面这个名为[2.x.2417]的类，实现了微分运算符。就所有的实用目的而言，它是一个矩阵，也就是说，你可以向它询问它的大小（成员函数 [2.x.2418] ），你可以将它应用于一个矢量（[2.x.2419] 函数）。当然，与实数矩阵的区别在于，这个类实际上并不存储矩阵的[1.x.71]，而只知道如何计算运算器应用于向量时的动作。
//
// 描述矩阵大小的基础结构，来自MatrixFree对象的初始化，以及通过vmult()和Tvmult()方法实现矩阵-向量乘积的各种接口，是由本类派生的[2.x.2420]类提供的。这里定义的LaplaceOperator类只需要提供几个接口，即通过vmult()函数中使用的apply_add()方法来实现运算符的实际操作，以及计算底层矩阵对角线项的方法。我们需要对角线来定义多梯度平滑器。由于我们考虑的是一个具有可变系数的问题，我们进一步实现了一个可以填充系数值的方法。
//
// 注意文件[2.x.2421]已经包含了通过类[2.x.2422]对拉普拉斯的实现。 出于教育目的，本教程程序中重新实现了该运算符，解释了其中的成分和概念。
//
// 这个程序利用了集成在deal.II中的有限元算子应用的数据缓存。这个数据缓存类被称为MatrixFree。它包含局部和全局自由度之间的映射信息（Jacobian）和索引关系。它还包含约束条件，如来自悬挂节点或迪里切特边界条件的约束。此外，它可以在所有单元上以%并行方式发出一个循环，确保只有不共享任何自由度的单元被处理（这使得循环在写入目标向量时是线程安全的）。与[2.x.2423]模块中描述的WorkStream类相比，这是一个更先进的策略。当然，为了不破坏线程安全，我们在写进类全局结构时必须小心。
//
// 实现拉普拉斯算子的类有三个模板参数，一个是维度（正如许多deal.II类所携带的），一个是有限元的度数（我们需要通过FEEvaluation类来实现高效计算），还有一个是底层标量类型。我们希望对最终矩阵使用[2.x.2424]数字（即双精度，64位浮点），但对多网格级矩阵使用浮点数（单精度，32位浮点数字）（因为那只是一个预处理程序，而浮点数的处理速度是两倍）。FEEvaluation类也需要一个模板参数，用于确定一维正交点的数量。在下面的代码中，我们把它硬编码为 [2.x.2425] 。如果我们想独立于多项式程度来改变它，我们需要添加一个模板参数，就像在 [2.x.2426] 类中做的那样。
//
// 顺便说一下，如果我们在同一个网格和自由度上实现了几个不同的操作（比如质量矩阵和拉普拉斯矩阵），我们将为每个操作者定义两个像现在这样的类（来自于[2.x.2427]类），并让它们都引用一般问题类中的同一个MatrixFree数据缓存。通过[2.x.2428]的接口要求我们只提供一组最小的函数。这个概念允许编写具有许多无矩阵操作的复杂应用代码。
//
// [2.x.2429] 储存类型[2.x.2430]的值需要注意。在这里，我们使用deal.II表类，它准备以正确的对齐方式保存数据。然而，存储例如一个[2.x.2431]是不可能用矢量化的。数据与内存地址的边界需要一定的对齐（基本上，在AVX的情况下，一个32字节的VectorizedArray需要从一个能被32整除的内存地址开始）。表类（以及它所基于的AlignedVector类）确保这种对齐方式得到尊重，而[2.x.2432]一般不这样做，这可能会导致一些系统在奇怪的地方出现分段故障，或者其他系统的性能不理想。
//
[0.x.18385] 
[0.x.18386] 
[0.x.18387] 
[0.x.18388] 
[0.x.18389] 
[0.x.18390] 
[0.x.18391] 
//
[0.x.18392] 
//
[0.x.18393] 
//
[0.x.18394] 
//
[0.x.18395] 
//
[0.x.18396] 
[0.x.18397] 
[0.x.18398] 
[0.x.18399] 
//
[0.x.18400] 
[0.x.18401] 
[0.x.18402] 
[0.x.18403] 
[0.x.18404] 
//
[0.x.18405] 
[0.x.18406] 
[0.x.18407] 
[0.x.18408] 
[0.x.18409] 
//
[0.x.18410] 
[0.x.18411] 
//
// 这是[2.x.2433]类的构造函数。它所做的就是调用基类[2.x.2434]的默认构造函数，而基类又是基于Subscriptor类的，它断言这个类在超出范围后不会被访问，比如在一个预处理程序中。
//
[0.x.18412] 
[0.x.18413] 
[0.x.18414] 
[0.x.18415] 
[0.x.18416] 
//
[0.x.18417] 
[0.x.18418] 
[0.x.18419] 
[0.x.18420] 
[0.x.18421] 
[0.x.18422] 
[0.x.18423] 
//
// [2.x.2435] 
//
// 为了初始化系数，我们直接赋予它上面定义的系数类，然后选择带有矢量数的方法[2.x.2436]（编译器可以从点数据类型中推导出来）。下面将解释FEEvaluation类（及其模板参数）的使用。
//
[0.x.18424] 
[0.x.18425] 
[0.x.18426] 
[0.x.18427] 
[0.x.18428] 
[0.x.18429] 
//
[0.x.18430] 
[0.x.18431] 
[0.x.18432] 
[0.x.18433] 
[0.x.18434] 
[0.x.18435] 
[0.x.18436] 
[0.x.18437] 
[0.x.18438] 
//
// [2.x.2437] 
//
// 这里是这个类的主要功能，矩阵-向量乘积的评估（或者，一般来说，有限元算子评估）。这是在一个函数中完成的，该函数需要四个参数，MatrixFree对象，目标和源向量，以及要处理的单元格范围。MatrixFree类中的方法[2.x.2438]将在内部用一些单元格范围来调用这个函数，这些单元格范围是通过检查哪些单元格可以同时工作来获得的，这样写操作就不会引起任何竞赛条件。请注意，循环中使用的单元格范围并不是直接指当前网格中的（活动）单元格数量，而是一个单元格批次的集合。 换句话说，"单元 "可能是一个错误的开始，因为FEEvaluation将几个单元的数据分组在一起。这意味着在正交点的循环中，我们实际上是将几个单元的正交点作为一个块来看待。这样做是为了实现更高的矢量化程度。 这种 "单元 "或 "单元批 "的数量存储在MatrixFree中，可以通过[2.x.2439]查询。与deal.II单元迭代器相比，在这个类中，所有的单元都被布置在一个普通的数组中，不直接知道水平或相邻关系，这使得通过无符号整数索引单元成为可能。
//
// 拉普拉斯运算符的实现非常简单。首先，我们需要创建一个对象FEEvaluation，它包含计算核，并有数据字段来存储临时结果（例如，在几个单元格集合的所有正交点上评估的梯度）。请注意，临时结果不会使用大量的内存，而且由于我们用元素顺序指定模板参数，数据被存储在堆栈中（没有昂贵的内存分配）。通常，只需要设置两个模板参数，维度作为第一个参数，有限元的度数作为第二个参数（这等于每个维度的自由度数减去FE_Q元素的一个）。然而，在这里，我们也希望能够使用浮点数来计算多网格预处理，这是最后一个（第五个）模板参数。因此，我们不能依赖默认的模板参数，因此必须填写第三和第四个字段。第三个参数指定每个方向的正交点的数量，其默认值等于元素的度数加1。第四个参数设置分量的数量（在PDEs系统中也可以评估矢量值的函数，但默认是标量元素），最后一个参数设置数字类型。
//
// 接下来，我们在给定的单元格范围内循环，然后继续进行实际的实现。 [2.x.2440] 
//[2.x.2441] 告诉FEEvaluation对象我们要处理的（宏）单元。  [2.x.2442] 读入源向量的值（ [2.x.2443] 包括约束的解析。这将存储[2.x.2444]，如介绍中所述。  [2.x.2445] 计算单元格梯度（有限元函数的评价）。由于FEEvaluation可以结合值计算和梯度计算，它使用一个统一的接口来处理0到2阶之间的各种导数。我们只想要梯度，不想要值，也不想要二阶导数，所以我们在梯度槽（第二槽）中将函数参数设置为真，而在值槽（第一槽）中设置为假。还有一个用于Hessian的第三槽，默认为假，所以不需要给它。请注意，FEEvaluation类在内部以一种有效的方式评估形状函数，一次只处理一个维度（如介绍中提到的使用形状函数和正交点的张量积形式）。与FEValues中使用的在所有局部自由度和正交点上循环的天真方法相比，在[2.x.2448]维度上，这给出了等于[2.x.2446]的多项式度数[2.x.2447]的复杂度，并花费了[2.x.2449] 。  [2.x.2450] 接下来是雅各布变换的应用，乘以变量系数和正交权重。FEEvaluation有一个访问函数[2.x.2451]，可以应用Jacobian并返回实空间中的梯度。然后，我们只需要乘以（标量）系数，并让函数[2.x.2452]应用第二个雅各布式（用于测试函数）和正交权重及雅各布式行列式（JxW）。注意，提交的梯度存储在与[2.x.2453]中读取梯度的地方相同的数据字段中。因此，你需要确保在调用[2.x.2454]后不要再从同一正交点读取该特定正交点。一般来说，当[2.x.2455]被多次使用时，复制其结果是个好主意。  [2.x.2456] 接下来是对所有测试函数的正交点进行求和，对应于实际积分步骤。对于拉普拉斯算子，我们只是乘以梯度，所以我们用各自的参数集调用积分函数。如果你有一个方程，同时用测试函数的值和梯度进行测试，那么两个模板参数都需要设置为真。先调用积分函数的值，再单独调用梯度，会导致错误的结果，因为第二次调用会在内部覆盖第一次调用的结果。请注意，积分步骤的二次导数没有函数参数。  [2.x.2457] 最终，介绍中提到的向量[2.x.2458]中的局部贡献需要被添加到结果向量中（并应用约束）。这是通过调用[2.x.2459]来完成的，该函数与AffineConstraints中的相应函数名称相同（只是我们现在将局部向量存储在FEEvaluation对象中，正如局部和全局自由度之间的指数一样）。  [2.x.2460] 
[0.x.18439] 
[0.x.18440] 
[0.x.18441] 
[0.x.18442] 
[0.x.18443] 
[0.x.18444] 
[0.x.18445] 
[0.x.18446] 
//
[0.x.18447] 
[0.x.18448] 
[0.x.18449] 
[0.x.18450] 
//
[0.x.18451] 
[0.x.18452] 
[0.x.18453] 
[0.x.18454] 
[0.x.18455] 
[0.x.18456] 
[0.x.18457] 
[0.x.18458] 
[0.x.18459] 
//
// 这个函数实现了对[2.x.2461]接口的所有单元的循环。这是用MatrixFree类的[2.x.2462]来实现的，它接受这个类的operator()，参数为MatrixFree, OutVector, InVector, cell_range。当使用MPI并行化（但没有线程）时，如本教程程序中所做的，单元格循环对应于以下三行代码。
//
// [1.x.72]
//
// 这里，两个调用update_ghost_values()和compress()为MPI执行处理器边界上的数据交换，一次用于源向量，我们需要从远程处理器拥有的条目中读取，一次用于目的向量，我们已经积累了部分残余，需要添加到所有者处理器的相应条目中。然而，[2.x.2463]不仅抽象出这两个调用，而且还进行了一些额外的优化。一方面，它将把update_ghost_values()和compress()的调用拆开，以允许通信和计算的重叠。然后用三个代表从0到[2.x.2464]的单元格范围的分区来调用local_apply函数。另一方面，cell_loop也支持线程并行，在这种情况下，单元格范围被分割成更小的块，并以一种先进的方式安排，避免了几个线程对同一个向量条目的访问。这一特性在 [2.x.2465] 中有解释。
//
// 注意，在单元格循环之后，受约束的自由度需要再次被触及，以实现合理的vmult()操作。由于装配循环会自动解决约束问题（就像[2.x.2466]的调用一样），它不会计算对受约束自由度的任何贡献，而是将各自的条目留为零。这将表示一个矩阵的受限自由度的行和列都是空的。然而，像CG这样的迭代求解器只对非星形矩阵有效。最简单的方法是将矩阵中对应于受限自由度的子块设置为同一矩阵，在这种情况下，矩阵的应用只是将右侧向量的元素复制到左侧。幸运的是，vmult()的实现[2.x.2467]在apply_add()函数之外自动为我们做了这个，所以我们不需要在这里采取进一步的行动。
//
// 当使用MatrixFree和FEEvaluation的组合与MPI并行时，有一个方面需要注意&mdash; 用于访问向量的索引。出于性能的考虑，MatrixFree和FEEvaluation被设计为在MPI本地索引空间中访问向量，当与多个处理器一起工作时也是如此。在本地索引空间工作意味着除了不可避免的间接寻址外，在向量访问发生的地方不需要进行索引转换。然而，本地索引空间是模糊的：虽然标准的惯例是用0和本地大小之间的索引访问向量的本地拥有的范围，但对于重影项的编号并不那么明确，而且有些随意。对于矩阵-向量乘积，只有出现在本地拥有的单元格上的指数（加上那些通过悬挂节点约束引用的指数）是必要的。然而，在deal.II中，我们经常将重影元素上的所有自由度设置为重影向量条目，称为[2.x.2468]"术语表中描述的本地相关DoF"。在这种情况下，尽管指的是同一个全局索引，但在两个可能的重影集中，重影向量条目的MPI本地索引一般会有所不同。为了避免问题，FEEvaluation通过一个名为[2.x.2469]的检查来检查用于矩阵-向量乘积的向量分区是否确实与MatrixFree中的索引分区相匹配。 为了方便，[2.x.2470]类包括一个机制来使鬼魂集适合正确的布局。这发生在向量的重影区域，所以请记住，在调用vmult()方法后，目标和源向量的重影区域都可能被修改。这是合法的，因为分布式deal.II向量的ghost区域是一个可变的部分，并按需填充。在矩阵-向量乘积中使用的向量在进入vmult()函数时不能被重影，所以没有信息丢失。
//
[0.x.18460] 
[0.x.18461] 
[0.x.18462] 
[0.x.18463] 
[0.x.18464] 
[0.x.18465] 
[0.x.18466] 
//
// 下面的函数实现了算子对角线的计算。计算无矩阵算子评估的矩阵项，结果比评估算子更复杂。从根本上说，我们可以通过在[1.x.73]单位向量上应用算子来获得算子的矩阵表示。当然，这将是非常低效的，因为我们需要进行[1.x.74]运算符的评估来检索整个矩阵。此外，这种方法会完全忽视矩阵的稀疏性。然而，对于单个单元来说，这是一种方法，而且实际上效率并不低，因为单元内的所有自由度之间通常都存在着耦合。
//
// 我们首先将对角线向量初始化为正确的平行布局。这个向量被封装在基类[2.x.2471]中DiagonalMatrix类型的一个名为inverse_diagonal_entries的成员中，这个成员是一个共享指针，我们首先需要初始化它，然后获得代表矩阵中对角线条目的向量。至于实际的对角线计算，我们再次使用MatrixFree的cell_loop基础设施来调用一个名为local_compute_diagonal()的本地工作程序。由于我们只写进一个向量，而没有任何源向量，我们用一个<tt>unsigned int</tt>类型的假参数来代替源向量，以便与cell_loop接口确认。在循环之后，我们需要将受Dirichlet边界条件约束的向量条目设置为1（要么是MatrixFree内部AffineConstraints对象描述的边界上的条目，要么是自适应多网格中不同网格层次之间的索引）。这是通过函数[2.x.2472]完成的，并与Base算子提供的矩阵-向量乘积中的设置相匹配。最后，我们需要反转对角线条目，这是基于Jacobi迭代的Chebyshev平滑器所要求的形式。在循环中，我们断言所有的条目都是非零的，因为它们应该从积分中获得正的贡献，或者被约束并被[2.x.2473]以下的cell_loop处理。
//
[0.x.18467] 
[0.x.18468] 
[0.x.18469] 
[0.x.18470] 
[0.x.18471] 
[0.x.18472] 
[0.x.18473] 
[0.x.18474] 
[0.x.18475] 
[0.x.18476] 
[0.x.18477] 
[0.x.18478] 
[0.x.18479] 
//
[0.x.18480] 
//
[0.x.18481] 
[0.x.18482] 
[0.x.18483] 
[0.x.18484] 
[0.x.18485] 
[0.x.18486] 
[0.x.18487] 
[0.x.18488] 
[0.x.18489] 
//
// 在本地计算循环中，我们通过循环本地矩阵中的所有列来计算对角线，并将条目1放在[1.x.75]槽中，将条目0放在所有其他槽中，也就是说，我们一次在一个单位向量上应用单元格微分运算。调用[2.x.2474]的内部部分是对正交点的循环，[2.x.2475]则与local_apply函数完全相同。之后，我们挑出本地结果的第[1.x.76]个条目，并将其放入一个临时存储器（因为我们在下一次循环迭代时覆盖了[2.x.2476]后面数组中的所有条目）。最后，临时存储被写到目标向量中。注意我们是如何使用[2.x.2477]和[2.x.2478]来读取和写入FEEvaluation用于积分的数据字段，并在另一方面写入全局向量的。
//
// 鉴于我们只对矩阵的对角线感兴趣，我们简单地扔掉了沿途计算过的本地矩阵的所有其他条目。虽然计算完整的单元格矩阵，然后扔掉除对角线以外的所有东西看起来很浪费，但是整合的效率很高，所以计算并没有花费太多时间。请注意，对于多项式度数来说，每个元素的算子评估的复杂度是[2.x.2479]，所以计算整个矩阵要花费我们[2.x.2481]次操作，与用FEValues计算对角线的复杂度[2.x.2482]相差不大。由于FEEvaluation也由于矢量化和其他优化而大大加快了速度，所以用这个函数计算对角线实际上是最快的（简单的）变量。(有可能用[2.x.2483]操作中的和分解技术来计算对角线，这涉及到特别适应的内核&mdash;但是由于这种内核只在特定的环境下有用，而对角线计算通常不在关键路径上，所以它们没有在deal.II中实现。)
//
// 注意在向量上调用distribution_local_to_global来将对角线条目累积到全局矩阵的代码有一些限制。对于带有悬空节点约束的操作者来说，在distribution_local_to_global的调用中，将一个受约束的DoF的积分贡献分配给其他几个条目，这里使用的向量接口并不完全计算对角线条目，而是将一些位于本地矩阵对角线上的贡献，最终在全局矩阵的非对角线位置堆积到对角线上。如[1.x.77]中所解释的，该结果在离散化精度上是正确的，但在数学上并不平等。在这个教程程序中，不会发生任何危害，因为对角线只用于没有悬空节点约束出现的多网格水平矩阵中。
//
[0.x.18490] 
[0.x.18491] 
[0.x.18492] 
[0.x.18493] 
[0.x.18494] 
[0.x.18495] 
[0.x.18496] 
[0.x.18497] 
//
[0.x.18498] 
//
[0.x.18499] 
[0.x.18500] 
[0.x.18501] 
[0.x.18502] 
//
[0.x.18503] 
[0.x.18504] 
[0.x.18505] 
[0.x.18506] 
[0.x.18507] 
[0.x.18508] 
//
[0.x.18509] 
[0.x.18510] 
[0.x.18511] 
[0.x.18512] 
[0.x.18513] 
[0.x.18514] 
[0.x.18515] 
[0.x.18516] 
[0.x.18517] 
[0.x.18518] 
[0.x.18519] 
[0.x.18520] 
//
// [2.x.2484] 
//
// 这个类是基于 [2.x.2485] 中的一个。然而，我们用我们的无矩阵实现取代了SparseMatrix<double>类，这意味着我们也可以跳过稀疏性模式。请注意，我们定义LaplaceOperator类时，将有限元的度数作为模板参数（该值在文件的顶部定义），我们使用浮点数来表示多网格级矩阵。
//
// 该类还有一个成员变量，用来记录在我们真正去解决这个问题之前设置整个数据链的所有详细时间。此外，还有一个输出流（默认情况下是禁用的），可以用来输出各个设置操作的细节，而不是默认情况下只打印出的摘要。
//
// 由于这个程序被设计成与MPI一起使用，我们也提供了通常的[2.x.2486]输出流，只打印MPI等级为0的处理器的信息。这个程序使用的网格可以是基于p4est的分布式三角图（在deal.II被配置为使用p4est的情况下），否则它就是一个只在没有MPI的情况下运行的串行网格。
//
[0.x.18521] 
[0.x.18522] 
[0.x.18523] 
[0.x.18524] 
[0.x.18525] 
[0.x.18526] 
//
[0.x.18527] 
[0.x.18528] 
[0.x.18529] 
[0.x.18530] 
[0.x.18531] 
//
[0.x.18532] 
[0.x.18533] 
[0.x.18534] 
[0.x.18535] 
[0.x.18536] 
//
[0.x.18537] 
[0.x.18538] 
//
[0.x.18539] 
//
 
[0.x.18541] 
[0.x.18542] 
[0.x.18543] 
//
[0.x.18544] 
[0.x.18545] 
[0.x.18546] 
//
[0.x.18547] 
[0.x.18548] 
//
[0.x.18549] 
[0.x.18550] 
[0.x.18551] 
[0.x.18552] 
//
// 当我们初始化有限元时，我们当然也要使用文件顶部指定的度数（否则，在某些时候会抛出一个异常，因为在模板化的LaplaceOperator类中定义的计算内核和MatrixFree读出的有限元信息将不匹配）。三角形的构造函数需要设置一个额外的标志，告诉网格要符合顶点上的2:1单元平衡，这对于几何多网格例程的收敛是必需的。对于分布式网格，我们还需要特别启用多网格的层次结构。
//
[0.x.18553] 
[0.x.18554] 
[0.x.18555] 
[0.x.18556] 
[0.x.18557] 
[0.x.18558] 
[0.x.18559] 
[0.x.18560] 
[0.x.18561] 
[0.x.18562] 
[0.x.18563] 
[0.x.18564] 
[0.x.18565] 
[0.x.18566] 
[0.x.18567] 
[0.x.18568] 
[0.x.18569] 
[0.x.18570] 
//
// LaplaceProblem类拥有一个额外的输出流，用于收集关于设置阶段的详细时间信息。这个流被称为time_details，默认情况下通过这里指定的[2.x.2487]参数被禁用。对于详细的时间，去掉[2.x.2488]参数可以打印出所有的细节。
//
[0.x.18571] 
[0.x.18572] 
[0.x.18573] 
//
// [2.x.2489] 
//
// 设置阶段与[2.x.2490]类似，由于LaplaceOperator类的存在而有相关的变化。首先要做的是设置DoFHandler，包括多网格层次的自由度，以及初始化悬挂节点的约束和同质二列条件。由于我们打算用MPI的%并行方式使用这个程序，我们需要确保约束条件能知道本地相关的自由度，否则在使用超过几亿个自由度的时候，存储会爆炸，见 [2.x.2491] 。
//
// 一旦我们创建了多网格dof_handler和约束条件，我们就可以为全局矩阵算子以及多网格方案的每一层调用reinit函数。主要的操作是为问题设置[2.x.2492]实例。2.x.2493]类的基类，[2.x.2494]被初始化为一个指向MatrixFree对象的共享指针。这样，我们可以在这里简单地创建它，然后将它分别传递给系统矩阵和水平矩阵。为了设置MatrixFree，我们需要激活MatrixFree的AdditionalData字段中的更新标志，使其能够存储实空间中的正交点坐标（默认情况下，它只缓存梯度（反转置的雅各布）和JxW值的数据）。请注意，如果我们调用 reinit 函数而不指定级别（即给出 [2.x.2495] ），MatrixFree 将在活动单元上构建一个循环。在本教程中，除了MPI之外，我们不使用线程，这就是为什么我们通过将[2.x.2496]设置为[2.x.2497]来明确地禁用它 最后，系数被评估，向量被初始化，如上所述。
//
[0.x.18574] 
[0.x.18575] 
[0.x.18576] 
[0.x.18577] 
[0.x.18578] 
//
[0.x.18579] 
[0.x.18580] 
//
[0.x.18581] 
[0.x.18582] 
//
[0.x.18583] 
[0.x.18584] 
//
[0.x.18585] 
[0.x.18586] 
//
[0.x.18587] 
[0.x.18588] 
[0.x.18589] 
[0.x.18590] 
[0.x.18591] 
[0.x.18592] 
[0.x.18593] 
[0.x.18594] 
[0.x.18595] 
[0.x.18596] 
//
[0.x.18597] 
[0.x.18598] 
[0.x.18599] 
[0.x.18600] 
[0.x.18601] 
[0.x.18602] 
[0.x.18603] 
[0.x.18604] 
[0.x.18605] 
[0.x.18606] 
[0.x.18607] 
[0.x.18608] 
[0.x.18609] 
[0.x.18610] 
[0.x.18611] 
//
[0.x.18612] 
//
[0.x.18613] 
[0.x.18614] 
//
[0.x.18615] 
[0.x.18616] 
[0.x.18617] 
[0.x.18618] 
//
// 接下来，初始化所有层次上的多网格方法的矩阵。数据结构MGConstrainedDoFs保留了受边界条件约束的指数信息，以及不同细化层次之间的边缘指数，如[2.x.2498]教程程序中所述。然后，我们穿过网格的各个层次，在每个层次上构建约束和矩阵。这与原始网格上的系统矩阵的构造密切相关，只是在访问层级信息而不是活动单元的信息时，在命名上略有不同。
//
[0.x.18619] 
[0.x.18620] 
//
[0.x.18621] 
[0.x.18622] 
[0.x.18623] 
[0.x.18624] 
[0.x.18625] 
//
[0.x.18626] 
[0.x.18627] 
[0.x.18628] 
[0.x.18629] 
[0.x.18630] 
[0.x.18631] 
[0.x.18632] 
[0.x.18633] 
[0.x.18634] 
[0.x.18635] 
[0.x.18636] 
//
[0.x.18637] 
[0.x.18638] 
[0.x.18639] 
[0.x.18640] 
[0.x.18641] 
[0.x.18642] 
[0.x.18643] 
[0.x.18644] 
[0.x.18645] 
[0.x.18646] 
[0.x.18647] 
[0.x.18648] 
[0.x.18649] 
//
[0.x.18650] 
[0.x.18651] 
[0.x.18652] 
[0.x.18653] 
[0.x.18654] 
[0.x.18655] 
[0.x.18656] 
[0.x.18657] 
[0.x.18658] 
//
// [2.x.2499] 
//
// 组装函数非常简单，因为我们所要做的就是组装右侧。多亏了FEEvaluation和所有缓存在MatrixFree类中的数据，我们从[2.x.2500]中查询，这可以在几行中完成。由于这个调用没有被包裹到[2.x.2501]中（这将是一个替代方案），我们一定不要忘记在装配结束时调用compress()，将右手边的所有贡献发送给各自自由度的所有者。
//
[0.x.18659] 
[0.x.18660] 
[0.x.18661] 
[0.x.18662] 
//
[0.x.18663] 
[0.x.18664] 
[0.x.18665] 
[0.x.18666] 
[0.x.18667] 
[0.x.18668] 
[0.x.18669] 
[0.x.18670] 
[0.x.18671] 
[0.x.18672] 
[0.x.18673] 
[0.x.18674] 
[0.x.18675] 
[0.x.18676] 
//
[0.x.18677] 
[0.x.18678] 
[0.x.18679] 
[0.x.18680] 
//
// [2.x.2502] 
//
// 解决的过程与 [2.x.2503] 中类似。我们先从转移的设置开始。对于[2.x.2504]来说，有一个非常快速的转移类，叫做MGTransferMatrixFree，它用FEEvaluation中同样的快速和因子化核在网格层之间进行插值。
//
[0.x.18681] 
[0.x.18682] 
[0.x.18683] 
[0.x.18684] 
[0.x.18685] 
[0.x.18686] 
[0.x.18687] 
[0.x.18688] 
[0.x.18689] 
[0.x.18690] 
//
// 作为一个平滑器，本教程程序使用切比雪夫迭代，而不是[2.x.2505]中的SOR。（SOR将很难实现，因为我们没有明确的矩阵元素，而且很难使其在%并行中有效工作）。 平滑器是用我们的水平矩阵和切比雪夫平滑器的强制性附加数据初始化的。我们在这里使用一个相对较高的度数（5），因为矩阵-向量乘积是比较便宜的。我们选择在平滑器中平滑出[2.x.2506]的范围，其中[2.x.2507]是对最大特征值的估计（系数1.2在PreconditionChebyshev中应用）。为了计算该特征值，Chebyshev初始化执行了几步没有预处理的CG算法。由于最高的特征值通常是最容易找到的，而且一个粗略的估计就足够了，我们选择10次迭代。最后，我们还设置了切比雪夫方法中的内部预处理类型，这是一个雅可比迭代。这由DiagonalMatrix类来表示，该类得到了由我们的LaplaceOperator类提供的反对角线条目。
//
// 在第0层，我们以不同的方式初始化平滑器，因为我们想使用切比雪夫迭代作为求解器。PreconditionChebyshev允许用户切换到求解器模式，其中迭代次数在内部选择为正确值。在附加数据对象中，通过将多项式的度数选择为[2.x.2508]来激活这一设置，然后算法将攻击粗级矩阵中最小和最大之间的所有特征值。切比雪夫平滑器的步数是这样选择的：切比雪夫收敛估计值保证将残差减少到变量[2.x.2509] smoothing_range中指定的数字。注意，对于求解来说，[2.x.2510]是一个相对的公差，并且选择小于1，在这种情况下，我们选择三个数量级，而当只对选定的特征值进行平滑时，它是一个大于1的数字。
//
// 从计算的角度来看，只要粗粒度适中，Chebyshev迭代是一个非常有吸引力的粗粒度求解器。这是因为Chebyshev方法只执行矩阵-向量乘积和向量更新，这通常比其他迭代方法中涉及的内积更好地并行到有几万个核心的最大集群规模。前者只涉及到（粗）网格中邻居之间的局部通信，而后者则需要在所有处理器上进行全局通信。
//
[0.x.18691] 
[0.x.18692] 
[0.x.18693] 
[0.x.18694] 
[0.x.18695] 
[0.x.18696] 
[0.x.18697] 
[0.x.18698] 
[0.x.18699] 
[0.x.18700] 
[0.x.18701] 
[0.x.18702] 
[0.x.18703] 
[0.x.18704] 
[0.x.18705] 
[0.x.18706] 
[0.x.18707] 
[0.x.18708] 
[0.x.18709] 
[0.x.18710] 
[0.x.18711] 
[0.x.18712] 
[0.x.18713] 
[0.x.18714] 
[0.x.18715] 
[0.x.18716] 
[0.x.18717] 
[0.x.18718] 
//
[0.x.18719] 
[0.x.18720] 
[0.x.18721] 
//
// 下一步是设置悬挂节点情况下所需的接口矩阵。deal.II中的自适应多网格实现了一种叫做局部平滑的方法。这意味着最细级别的平滑只覆盖固定（最细）网格级别所定义的网格的局部部分，而忽略了计算域中终端单元比该级别更粗的部分。随着该方法向更粗的级别发展，越来越多的全局网格将被覆盖。在某个更粗的层次上，整个网格将被覆盖。由于多网格方法中的所有层次矩阵都覆盖了网格中的单一层次，所以在层次矩阵上不会出现悬空节点。在多网格层之间的界面上，在平滑的同时设置同质Dirichlet边界条件。然而，当残差被转移到下一个更粗的层次时，需要考虑到多网格界面的耦合。这是由所谓的界面（或边缘）矩阵来完成的，它计算了被具有同质Dirichlet条件的层次矩阵所遗漏的残差部分。我们参考[2.x.2511]"Janssen和Kanschat的多网格论文 "以了解更多细节。
//
// 对于这些接口矩阵的实现，已经有一个预定义的类[2.x.2512]，它将例程[2.x.2513]和[2.x.2514]包装在一个带有[2.x.2515]vmult()和[2.x.2516]操作（最初是为矩阵编写的，因此期待这些名字）的新类中。请注意，vmult_interface_down是在多网格V周期的限制阶段使用的，而vmult_interface_up是在延长阶段使用的。
//
// 一旦接口矩阵被创建，我们完全按照[2.x.2517]的方法设置剩余的多网格预处理基础设施，以获得一个可以应用于矩阵的[2.x.2518]对象。
//
[0.x.18722] 
[0.x.18723] 
//
[0.x.18724] 
[0.x.18725] 
[0.x.18726] 
[0.x.18727] 
[0.x.18728] 
[0.x.18729] 
[0.x.18730] 
[0.x.18731] 
//
[0.x.18732] 
[0.x.18733] 
[0.x.18734] 
//
[0.x.18735] 
[0.x.18736] 
[0.x.18737] 
[0.x.18738] 
//
// 多网格程序的设置非常简单，与 [2.x.2519] 相比，在求解过程中看不出有什么不同。所有的魔法都隐藏在 [2.x.2520] 操作的实现背后。请注意，我们通过标准输出打印出求解时间和累积的设置时间，也就是说，在任何情况下，而设置操作的详细时间只在构造函数中的detail_times标志被改变的情况下打印。
//
[0.x.18739] 
[0.x.18740] 
[0.x.18741] 
[0.x.18742] 
[0.x.18743] 
[0.x.18744] 
//
[0.x.18745] 
[0.x.18746] 
[0.x.18747] 
[0.x.18748] 
//
[0.x.18749] 
//
[0.x.18750] 
[0.x.18751] 
[0.x.18752] 
[0.x.18753] 
//
// [2.x.2521] 
//
// 这里是数据输出，是 [2.x.2522] 的简化版本。我们对细化过程中产生的每个网格使用标准的VTU（=压缩的VTK）输出。此外，我们还使用了一种针对速度而不是磁盘使用量进行优化的压缩算法。默认设置（针对磁盘使用进行优化）使得保存输出的时间是运行线性求解器的4倍，而将[2.x.2523]设置为[2.x.2524]则将其降低到只有线性求解的四分之一的时间。
//
// 当网格过大时，我们禁用输出。这个程序的一个变种已经在几十万个MPI行列上运行，网格单元多达1000亿个，经典的可视化工具无法直接访问。
//
[0.x.18754] 
[0.x.18755] 
[0.x.18756] 
[0.x.18757] 
[0.x.18758] 
[0.x.18759] 
//
[0.x.18760] 
//
[0.x.18761] 
[0.x.18762] 
[0.x.18763] 
[0.x.18764] 
//
[0.x.18765] 
[0.x.18766] 
[0.x.18767] 
[0.x.18768] 
[0.x.18769] 
//
[0.x.18770] 
[0.x.18771] 
[0.x.18772] 
//
// [2.x.2525] 
//
// 运行该程序的函数与 [2.x.2526] 中的函数非常相似。与2D相比，我们在3D中做了很少的细化步骤，但仅此而已。
//
// 在运行程序之前，我们先输出一些关于检测到的矢量化水平的信息，正如在介绍中所讨论的那样。
//
[0.x.18773] 
[0.x.18774] 
[0.x.18775] 
[0.x.18776] 
[0.x.18777] 
[0.x.18778] 
//
[0.x.18779] 
[0.x.18780] 
[0.x.18781] 
[0.x.18782] 
[0.x.18783] 
//
[0.x.18784] 
[0.x.18785] 
[0.x.18786] 
//
[0.x.18787] 
[0.x.18788] 
[0.x.18789] 
[0.x.18790] 
[0.x.18791] 
[0.x.18792] 
[0.x.18793] 
[0.x.18794] 
[0.x.18795] 
[0.x.18796] 
[0.x.18797] 
[0.x.18798] 
[0.x.18799] 
[0.x.18800] 
//
// [2.x.2527] 
//
// 除了我们根据[2.x.2528]设置了MPI框架外，主函数中没有任何意外。
//
[0.x.18801] 
[0.x.18802] 
[0.x.18803] 
[0.x.18804] 
[0.x.18805] 
//
[0.x.18806] 
//
[0.x.18807] 
[0.x.18808] 
[0.x.18809] 
[0.x.18810] 
[0.x.18811] 
[0.x.18812] 
[0.x.18813] 
[0.x.18814] 
[0.x.18815] 
[0.x.18816] 
[0.x.18817] 
[0.x.18818] 
[0.x.18819] 
[0.x.18820] 
[0.x.18821] 
[0.x.18822] 
[0.x.18823] 
[0.x.18824] 
[0.x.18825] 
[0.x.18826] 
[0.x.18827] 
[0.x.18828] 
[0.x.18829] 
[0.x.18830] 
[0.x.18831] 
[0.x.18832] 
[0.x.18833] 
[0.x.18834] 
//
[0.x.18835] 
[0.x.18836] 
[0.x.18837] 
[0.x.18838] 
[0.x.18839] 
[0.x.18840] 
[0.x.18841] 
[0.x.18842] 
[0.x.18843] 
[0.x.18844] 
[0.x.18845] 
[0.x.18846] 
[0.x.18847] 
[0.x.18848] 
[0.x.18849] 
[0.x.18850] 
[0.x.18851] 
[0.x.18852] 
[0.x.18853] 
//[2.x.2529] 
//
// 如果你读过[2.x.2530]和[2.x.2531]，你会认识到我们已经在那里使用了以下所有的包含文件。因此，我们不会在这里再次解释它们的含义。
//
[0.x.18854] 
[0.x.18855] 
//
[0.x.18856] 
[0.x.18857] 
[0.x.18858] 
[0.x.18859] 
[0.x.18860] 
[0.x.18861] 
[0.x.18862] 
//
[0.x.18863] 
[0.x.18864] 
[0.x.18865] 
//
[0.x.18866] 
[0.x.18867] 
//
[0.x.18868] 
[0.x.18869] 
[0.x.18870] 
//
[0.x.18871] 
[0.x.18872] 
[0.x.18873] 
//
[0.x.18874] 
[0.x.18875] 
//
[0.x.18876] 
[0.x.18877] 
[0.x.18878] 
//[2.x.2532] 
//
//这个类几乎与[2.x.2534]中的[2.x.2533]类完全相似。
//
//本质上的区别是这样的。
//
//
//
// - 模板参数现在表示嵌入空间的维度，它不再与域和我们计算的三角形的维度相同。我们通过调用参数[2.x.2535]并引入一个等于域的维度的常数[2.x.2536]来表明这一点--这里等于[2.x.2537] 。
//
// - 所有具有几何特征的成员变量现在都需要知道它们自己的维度以及嵌入空间的维度。因此，我们需要指定它们的模板参数，一个是网格的维度[2.x.2538]，另一个是嵌入空间的维度，[2.x.2539] 这正是我们在[2.x.2540]中所做的，请看那里有更深的解释。
//
// - 我们需要一个对象来描述从参考单元到三角形组成的单元所使用的哪种映射。从Mapping基类派生出来的类正是这样做的。在deal.II的大部分时间里，如果你不做任何事情，图书馆会假定你想要一个使用（双，三）线性映射的MappingQ1对象。在许多情况下，这就足够了，这就是为什么这些对象的使用大多是可选的：例如，如果你有一个二维空间中的多边形二维域，参考单元到三角形单元的双线性映射会产生该域的精确表示。如果你有一个弯曲的域，你可能想对那些位于域的边界的单元使用一个高阶映射--例如，这就是我们在[2.x.2541]中所做的。然而，在这里我们有一个弯曲的域，而不仅仅是一个弯曲的边界，虽然我们可以用双线性映射的单元来近似它，但对所有单元使用高阶映射才是真正谨慎的。因此，这个类有一个MappingQ类型的成员变量；我们将选择映射的多项式程度等于计算中使用的有限元的多项式程度，以确保最佳近似，尽管这种等参数性不是必须的。
//
[0.x.18879] 
[0.x.18880] 
[0.x.18881] 
[0.x.18882] 
[0.x.18883] 
[0.x.18884] 
//
[0.x.18885] 
[0.x.18886] 
//
[0.x.18887] 
[0.x.18888] 
[0.x.18889] 
[0.x.18890] 
[0.x.18891] 
//
[0.x.18892] 
[0.x.18893] 
[0.x.18894] 
[0.x.18895] 
//
[0.x.18896] 
[0.x.18897] 
//
[0.x.18898] 
[0.x.18899] 
[0.x.18900] 
//[2.x.2542] 
//
// 接下来，让我们定义描述问题的精确解和右手边的类。这与[2.x.2543]和[2.x.2544]相类似，在那里我们也定义了此类对象。鉴于介绍中的讨论，实际的公式应该是不言自明的。值得关注的一点是，我们是如何使用一般模板的明确特化，分别定义2D和3D情况下的值和梯度函数的。另一种方法是定义通用模板，并为空间维度的每个可能的值设置一个[2.x.2545]语句（或一串[2.x.2546]s）。
//
[0.x.18901] 
[0.x.18902] 
[0.x.18903] 
[0.x.18904] 
[0.x.18905] 
[0.x.18906] 
//
[0.x.18907] 
[0.x.18908] 
[0.x.18909] 
[0.x.18910] 
//
[0.x.18911] 
[0.x.18912] 
[0.x.18913] 
[0.x.18914] 
[0.x.18915] 
//
[0.x.18916] 
[0.x.18917] 
[0.x.18918] 
[0.x.18919] 
[0.x.18920] 
[0.x.18921] 
[0.x.18922] 
//
[0.x.18923] 
[0.x.18924] 
//
[0.x.18925] 
[0.x.18926] 
[0.x.18927] 
[0.x.18928] 
[0.x.18929] 
[0.x.18930] 
//
[0.x.18931] 
[0.x.18932] 
[0.x.18933] 
[0.x.18934] 
[0.x.18935] 
//
[0.x.18936] 
//
[0.x.18937] 
[0.x.18938] 
[0.x.18939] 
//
[0.x.18940] 
[0.x.18941] 
//
[0.x.18942] 
[0.x.18943] 
[0.x.18944] 
[0.x.18945] 
[0.x.18946] 
[0.x.18947] 
[0.x.18948] 
//
[0.x.18949] 
[0.x.18950] 
[0.x.18951] 
[0.x.18952] 
[0.x.18953] 
[0.x.18954] 
//
[0.x.18955] 
[0.x.18956] 
[0.x.18957] 
[0.x.18958] 
[0.x.18959] 
//
[0.x.18960] 
//
[0.x.18961] 
[0.x.18962] 
[0.x.18963] 
//
[0.x.18964] 
[0.x.18965] 
//
[0.x.18966] 
[0.x.18967] 
//
[0.x.18968] 
[0.x.18969] 
//
[0.x.18970] 
[0.x.18971] 
[0.x.18972] 
[0.x.18973] 
//
[0.x.18974] 
[0.x.18975] 
//
[0.x.18976] 
[0.x.18977] 
[0.x.18978] 
//[2.x.2547] 
//
// 如果你知道 [2.x.2548] ，程序的其余部分实际上是很不引人注目的。我们的第一步是定义构造函数，设置有限元和映射的多项式程度，并将DoF处理程序与三角形关联。
//
[0.x.18979] 
[0.x.18980] 
[0.x.18981] 
[0.x.18982] 
[0.x.18983] 
[0.x.18984] 
[0.x.18985] 
//[2.x.2549] 
//
// 下一步是创建网格，分配自由度，并设置描述线性系统的各种变量。所有这些步骤都是标准的，只有如何创建一个描述曲面的网格除外。我们可以为我们感兴趣的领域生成一个网格，用一个网格生成器生成一个三角形，然后用GridIn类将其读入。或者，就像我们在这里做的那样，我们使用GridGenerator命名空间的设施来生成网格。
//
// 具体来说，我们要做的是这样的（在下面的大括号中）：我们使用[2.x.2550]函数为半圆盘（2D）或半球（3D）生成一个[2.x.2551]维度的网格。这个函数将位于圆盘/球周边的所有面的边界指标设置为零，而在将整个圆盘/球分成两半的直线部分设置为零。下一步是主要的一点。[2.x.2552]函数创建的网格是由那些作为前一个网格的面的单元组成的，也就是说，它描述了原始（体积）网格的[1.x.78]单元。然而，我们不需要所有的面：只需要那些在圆盘或球的周边，边界指示器为零的面；我们可以使用一组边界指示器来选择这些单元，并传递给[2.x.2553]。
//
// 有一点需要提及。为了在流形是弯曲的情况下适当地细化表面网格（类似于细化与弯曲边界相邻的单元面），三角形必须要有一个对象附加在上面，描述新顶点应该位于何处。如果你不附加这样的边界对象，它们将位于现有顶点之间的中间位置；如果你有一个具有直线边界的域（例如多边形），这是很合适的，但如果像这里一样，流形具有曲率，则不合适。因此，为了让事情正常进行，我们需要将流形对象附加到我们的（表面）三角形上，其方式与我们在1d中为边界所做的大致相同。我们创建这样一个对象，并将其附加到三角剖面上。
//
// 创建网格的最后一步是对其进行多次细化。该函数的其余部分与之前的教程程序中相同。
//
[0.x.18986] 
[0.x.18987] 
[0.x.18988] 
[0.x.18989] 
[0.x.18990] 
[0.x.18991] 
//
[0.x.18992] 
[0.x.18993] 
//
[0.x.18994] 
[0.x.18995] 
[0.x.18996] 
[0.x.18997] 
[0.x.18998] 
[0.x.18999] 
//
[0.x.19000] 
//
[0.x.19001] 
[0.x.19002] 
//
[0.x.19003] 
//
[0.x.19004] 
[0.x.19005] 
//
[0.x.19006] 
[0.x.19007] 
[0.x.19008] 
//
[0.x.19009] 
//
[0.x.19010] 
[0.x.19011] 
[0.x.19012] 
//[2.x.2554] 
//
// 下面是这个程序的中心函数，即组装与表面拉普拉斯（Laplace-Beltrami算子）相对应的矩阵。也许令人惊讶的是，它实际上与例如在 [2.x.2555] 中讨论的普通拉普拉斯算子看起来完全一样。关键是[2.x.2556]函数发挥了魔力：它返回[2.x.2558]第1个形状函数在[2.x.2559]第1个正交点的表面梯度[2.x.2557]。其余的也不需要任何改变。
//
[0.x.19013] 
[0.x.19014] 
[0.x.19015] 
[0.x.19016] 
[0.x.19017] 
//
[0.x.19018] 
[0.x.19019] 
[0.x.19020] 
[0.x.19021] 
[0.x.19022] 
[0.x.19023] 
[0.x.19024] 
//
[0.x.19025] 
[0.x.19026] 
//
[0.x.19027] 
[0.x.19028] 
//
[0.x.19029] 
[0.x.19030] 
//
[0.x.19031] 
//
[0.x.19032] 
[0.x.19033] 
[0.x.19034] 
[0.x.19035] 
//
[0.x.19036] 
//
[0.x.19037] 
//
[0.x.19038] 
[0.x.19039] 
[0.x.19040] 
[0.x.19041] 
[0.x.19042] 
[0.x.19043] 
//
[0.x.19044] 
[0.x.19045] 
[0.x.19046] 
[0.x.19047] 
//
[0.x.19048] 
[0.x.19049] 
[0.x.19050] 
[0.x.19051] 
[0.x.19052] 
[0.x.19053] 
[0.x.19054] 
//
[0.x.19055] 
[0.x.19056] 
[0.x.19057] 
//
[0.x.19058] 
[0.x.19059] 
[0.x.19060] 
//
[0.x.19061] 
[0.x.19062] 
[0.x.19063] 
//
// [2.x.2560] 
//
// 下一个函数是解决线性系统的函数。在这里，也不需要做任何改变。
//
[0.x.19064] 
[0.x.19065] 
[0.x.19066] 
[0.x.19067] 
[0.x.19068] 
//
[0.x.19069] 
[0.x.19070] 
//
[0.x.19071] 
[0.x.19072] 
//
// [2.x.2561] 
//
// 这是一个从解决方案中生成图形输出的函数。它的大部分都是模板代码，但有两点值得指出。
//
//
//
// - [2.x.2562]函数可以接受两种向量。  一种是之前通过[2.x.2563]连接的DoFHandler对象定义的每个自由度有一个值的向量，另一种是三角测量的每个单元有一个值的向量，例如，输出每个单元的估计误差。通常，DataOut类知道如何区分这两种向量：自由度几乎总是比单元格多，所以我们可以通过两种向量的长度来区分。我们在这里也可以这样做，但只是因为我们很幸运：我们使用了一个半球体。如果我们用整个球体作为域和[2.x.2564]元素，我们将有相同数量的单元格作为顶点，因此这两种向量将有相同数量的元素。为了避免由此产生的混乱，我们必须告诉[2.x.2565]函数我们有哪种矢量。DoF数据。这就是该函数的第三个参数的作用。
//
// - [2.x.2566]函数可以生成细分每个单元的输出，这样可视化程序可以更好地解决弯曲流形或更高的多项式程度的形状函数。在这里，我们在每个坐标方向上对每个元素进行细分，细分的次数与使用的有限元的多项式程度相同。
//
[0.x.19073] 
[0.x.19074] 
[0.x.19075] 
[0.x.19076] 
[0.x.19077] 
[0.x.19078] 
[0.x.19079] 
[0.x.19080] 
[0.x.19081] 
//
[0.x.19082] 
[0.x.19083] 
[0.x.19084] 
[0.x.19085] 
[0.x.19086] 
//
// [2.x.2567] 
//
// 这是最后一块功能：我们要计算数值解的误差。它是之前在 [2.x.2568] 中展示和讨论的代码的逐字复制。正如介绍中提到的，[2.x.2569]类提供了解决方案的（切向）梯度。为了避免只评估超收敛点的误差，我们选择一个足够高阶的正交规则。
//
[0.x.19087] 
[0.x.19088] 
[0.x.19089] 
[0.x.19090] 
[0.x.19091] 
[0.x.19092] 
[0.x.19093] 
[0.x.19094] 
[0.x.19095] 
[0.x.19096] 
[0.x.19097] 
//
[0.x.19098] 
[0.x.19099] 
[0.x.19100] 
[0.x.19101] 
[0.x.19102] 
//
// [2.x.2570] 
//
// 最后一个函数提供了顶层的逻辑。它的内容是不言自明的。
//
[0.x.19103] 
[0.x.19104] 
[0.x.19105] 
[0.x.19106] 
[0.x.19107] 
[0.x.19108] 
[0.x.19109] 
[0.x.19110] 
[0.x.19111] 
[0.x.19112] 
//[2.x.2571] 
//
// 该程序的其余部分由[2.x.2572]函数占据。它完全遵循首次在[2.x.2573]中介绍的一般布局，并在随后的所有教程程序中使用。
//
[0.x.19113] 
[0.x.19114] 
[0.x.19115] 
[0.x.19116] 
[0.x.19117] 
//
[0.x.19118] 
[0.x.19119] 
[0.x.19120] 
[0.x.19121] 
[0.x.19122] 
[0.x.19123] 
[0.x.19124] 
[0.x.19125] 
[0.x.19126] 
[0.x.19127] 
[0.x.19128] 
[0.x.19129] 
[0.x.19130] 
[0.x.19131] 
[0.x.19132] 
[0.x.19133] 
[0.x.19134] 
[0.x.19135] 
[0.x.19136] 
[0.x.19137] 
[0.x.19138] 
[0.x.19139] 
[0.x.19140] 
[0.x.19141] 
[0.x.19142] 
[0.x.19143] 
[0.x.19144] 
[0.x.19145] 
//
[0.x.19146] 
[0.x.19147] 
[0.x.19148] 
[0.x.19149] 
[0.x.19150] 
[0.x.19151] 
[0.x.19152] 
[0.x.19153] 
[0.x.19154] 
[0.x.19155] 
[0.x.19156] 
[0.x.19157] 
[0.x.19158] 
[0.x.19159] 
[0.x.19160] 
[0.x.19161] 
//
[0.x.19162] 
[0.x.19163] 
[0.x.19164] 
//
// 线性代数的包含文件。一个普通的SparseMatrix，它又将包括SparsityPattern和Vector类的必要文件。
//
[0.x.19165] 
[0.x.19166] 
[0.x.19167] 
[0.x.19168] 
[0.x.19169] 
[0.x.19170] 
//
// 包括用于设置网格的文件
//
[0.x.19171] 
[0.x.19172] 
//
// FiniteElement类和DoFHandler的包含文件。
//
[0.x.19173] 
[0.x.19174] 
[0.x.19175] 
[0.x.19176] 
//
// 使用MeshWorker框架的包含文件
//
[0.x.19177] 
[0.x.19178] 
[0.x.19179] 
[0.x.19180] 
//
// 与拉普拉斯相关的局部积分器的包含文件
//
[0.x.19181] 
//
// 支持多网格方法
//
[0.x.19182] 
[0.x.19183] 
[0.x.19184] 
[0.x.19185] 
[0.x.19186] 
[0.x.19187] 
//
// 最后，我们从库中取出我们的精确解，以及正交和附加工具。
//
[0.x.19188] 
[0.x.19189] 
[0.x.19190] 
[0.x.19191] 
//
[0.x.19192] 
[0.x.19193] 
//
// deal.II库的所有类都在dealii命名空间中。为了节省打字，我们告诉编译器也要在其中搜索名字。
//
[0.x.19194] 
[0.x.19195] 
[0.x.19196] 
//
// 这是我们用来设置边界值的函数，也是我们比较的精确解。
//
[0.x.19197] 
//[2.x.2574] 
//
// MeshWorker将局部积分与单元格和面的循环分离开来。因此，我们必须编写局部积分类来生成矩阵、右手边和误差估计器。
//
// 所有这些类都有相同的三个函数，分别用于对单元、边界面和内部面的积分。局部积分所需的所有信息都由[2.x.2575]提供。请注意，函数的签名不能改变，因为它是由[2.x.2576]所期望的。
//
// 第一个定义局部积分器的类负责计算单元和面矩阵。它被用来组装全局矩阵以及水平矩阵。
//
[0.x.19198] 
[0.x.19199] 
[0.x.19200] 
[0.x.19201] 
[0.x.19202] 
[0.x.19203] 
[0.x.19204] 
[0.x.19205] 
[0.x.19206] 
[0.x.19207] 
[0.x.19208] 
[0.x.19209] 
[0.x.19210] 
[0.x.19211] 
//
// 在每个单元上，我们对Dirichlet形式进行积分。我们使用LocalIntegrators中的现成积分库来避免自己编写这些循环。同样地，我们实现了Nitsche边界条件和单元间的内部惩罚通量。
//
// 边界和通量项需要一个惩罚参数，这个参数应该根据单元的大小和多项式的度数来调整。在[2.x.2577]中可以找到关于这个参数的安全选择，我们在下面使用这个参数。
//
[0.x.19212] 
[0.x.19213] 
[0.x.19214] 
[0.x.19215] 
[0.x.19216] 
[0.x.19217] 
[0.x.19218] 
[0.x.19219] 
//
[0.x.19220] 
[0.x.19221] 
[0.x.19222] 
[0.x.19223] 
[0.x.19224] 
[0.x.19225] 
[0.x.19226] 
[0.x.19227] 
[0.x.19228] 
[0.x.19229] 
[0.x.19230] 
//
// 内部面使用内部惩罚方法
//
[0.x.19231] 
[0.x.19232] 
[0.x.19233] 
[0.x.19234] 
[0.x.19235] 
[0.x.19236] 
[0.x.19237] 
[0.x.19238] 
[0.x.19239] 
[0.x.19240] 
[0.x.19241] 
[0.x.19242] 
[0.x.19243] 
[0.x.19244] 
[0.x.19245] 
[0.x.19246] 
[0.x.19247] 
[0.x.19248] 
//
// 第二个局部积分器建立了右手边。在我们的例子中，右手边的函数为零，这样，这里只设置了弱形式的边界条件。
//
[0.x.19249] 
[0.x.19250] 
[0.x.19251] 
[0.x.19252] 
[0.x.19253] 
[0.x.19254] 
[0.x.19255] 
[0.x.19256] 
[0.x.19257] 
[0.x.19258] 
[0.x.19259] 
[0.x.19260] 
[0.x.19261] 
[0.x.19262] 
//
[0.x.19263] 
[0.x.19264] 
[0.x.19265] 
[0.x.19266] 
[0.x.19267] 
//
[0.x.19268] 
[0.x.19269] 
[0.x.19270] 
[0.x.19271] 
[0.x.19272] 
[0.x.19273] 
[0.x.19274] 
//
[0.x.19275] 
[0.x.19276] 
//
[0.x.19277] 
[0.x.19278] 
[0.x.19279] 
//
[0.x.19280] 
[0.x.19281] 
[0.x.19282] 
[0.x.19283] 
[0.x.19284] 
[0.x.19285] 
[0.x.19286] 
//
[0.x.19287] 
[0.x.19288] 
[0.x.19289] 
[0.x.19290] 
[0.x.19291] 
[0.x.19292] 
[0.x.19293] 
//
//第三个局部积分器负责对误差估计的贡献。这是由Karakashian和Pascal（2003）提出的标准能量估计器。
//
[0.x.19294] 
[0.x.19295] 
[0.x.19296] 
[0.x.19297] 
[0.x.19298] 
[0.x.19299] 
[0.x.19300] 
[0.x.19301] 
[0.x.19302] 
[0.x.19303] 
[0.x.19304] 
[0.x.19305] 
[0.x.19306] 
[0.x.19307] 
//
// 单元的贡献是离散解的拉普拉斯，因为右手边是零。
//
[0.x.19308] 
[0.x.19309] 
[0.x.19310] 
[0.x.19311] 
[0.x.19312] 
[0.x.19313] 
//
[0.x.19314] 
[0.x.19315] 
[0.x.19316] 
[0.x.19317] 
[0.x.19318] 
[0.x.19319] 
[0.x.19320] 
[0.x.19321] 
//
// 在边界，我们简单地使用边界残差的加权形式，即有限元解和正确边界条件之间的差值的规范。
//
[0.x.19322] 
[0.x.19323] 
[0.x.19324] 
[0.x.19325] 
[0.x.19326] 
[0.x.19327] 
//
[0.x.19328] 
[0.x.19329] 
//
[0.x.19330] 
//
[0.x.19331] 
[0.x.19332] 
[0.x.19333] 
//
[0.x.19334] 
[0.x.19335] 
[0.x.19336] 
[0.x.19337] 
[0.x.19338] 
[0.x.19339] 
[0.x.19340] 
//
// 最后，在内部面，估计器由解的跳跃和它的法向导数组成，并进行适当的加权。
//
[0.x.19341] 
[0.x.19342] 
[0.x.19343] 
[0.x.19344] 
[0.x.19345] 
[0.x.19346] 
[0.x.19347] 
[0.x.19348] 
[0.x.19349] 
[0.x.19350] 
[0.x.19351] 
[0.x.19352] 
//
[0.x.19353] 
[0.x.19354] 
[0.x.19355] 
[0.x.19356] 
[0.x.19357] 
[0.x.19358] 
[0.x.19359] 
//
[0.x.19360] 
[0.x.19361] 
[0.x.19362] 
[0.x.19363] 
[0.x.19364] 
[0.x.19365] 
[0.x.19366] 
[0.x.19367] 
[0.x.19368] 
[0.x.19369] 
[0.x.19370] 
//
// 最后我们有一个误差的积分器。由于不连续Galerkin问题的能量准则不仅涉及到单元内部的梯度差，还涉及到跨面和边界的跳跃项，所以我们不能仅仅使用 [2.x.2578] 而是使用MeshWorker接口来自己计算误差。
//
//有几种不同的方法来定义这个能量准则，但是所有的方法都是随着网格大小的变化而等价的（有些不是随着多项式程度的变化而等价）。这里，我们选择[1.x.79]。
//
[0.x.19371] 
[0.x.19372] 
[0.x.19373] 
[0.x.19374] 
[0.x.19375] 
[0.x.19376] 
[0.x.19377] 
[0.x.19378] 
[0.x.19379] 
[0.x.19380] 
[0.x.19381] 
[0.x.19382] 
[0.x.19383] 
[0.x.19384] 
//
// 这里我们有关于单元格的集成。目前MeshWorker中还没有很好的接口可以让我们访问正交点中的正则函数值。因此，我们必须在单元格积分器中创建精确函数值和梯度的向量。之后，一切照旧，我们只需将差值的平方加起来。
//
// 除了计算能量准则的误差，我们还利用网格工作者的能力同时计算两个函数并在同一个循环中计算[1.x.80]的误差。很明显，这个函数没有任何跳跃项，只出现在单元格的积分中。
//
[0.x.19385] 
[0.x.19386] 
[0.x.19387] 
[0.x.19388] 
[0.x.19389] 
[0.x.19390] 
[0.x.19391] 
[0.x.19392] 
//
[0.x.19393] 
[0.x.19394] 
//
[0.x.19395] 
[0.x.19396] 
//
[0.x.19397] 
[0.x.19398] 
[0.x.19399] 
[0.x.19400] 
[0.x.19401] 
[0.x.19402] 
[0.x.19403] 
[0.x.19404] 
[0.x.19405] 
[0.x.19406] 
[0.x.19407] 
[0.x.19408] 
[0.x.19409] 
[0.x.19410] 
[0.x.19411] 
//
[0.x.19412] 
[0.x.19413] 
[0.x.19414] 
[0.x.19415] 
[0.x.19416] 
[0.x.19417] 
//
[0.x.19418] 
[0.x.19419] 
//
[0.x.19420] 
//
[0.x.19421] 
[0.x.19422] 
[0.x.19423] 
//
[0.x.19424] 
[0.x.19425] 
[0.x.19426] 
[0.x.19427] 
[0.x.19428] 
[0.x.19429] 
[0.x.19430] 
//
[0.x.19431] 
[0.x.19432] 
[0.x.19433] 
[0.x.19434] 
[0.x.19435] 
[0.x.19436] 
[0.x.19437] 
[0.x.19438] 
[0.x.19439] 
[0.x.19440] 
//
[0.x.19441] 
[0.x.19442] 
[0.x.19443] 
[0.x.19444] 
[0.x.19445] 
[0.x.19446] 
//
[0.x.19447] 
[0.x.19448] 
[0.x.19449] 
[0.x.19450] 
[0.x.19451] 
[0.x.19452] 
[0.x.19453] 
[0.x.19454] 
//
// [2.x.2579] 
//
// 这个类做主要的工作，就像前面的例子一样。关于这里声明的函数的描述，请参考下面的实现。
//
[0.x.19455] 
[0.x.19456] 
[0.x.19457] 
[0.x.19458] 
[0.x.19459] 
//
[0.x.19460] 
//
[0.x.19461] 
//
[0.x.19462] 
[0.x.19463] 
[0.x.19464] 
[0.x.19465] 
[0.x.19466] 
[0.x.19467] 
[0.x.19468] 
[0.x.19469] 
[0.x.19470] 
//
// 与离散化有关的成员对象在这里。
//
[0.x.19471] 
[0.x.19472] 
[0.x.19473] 
[0.x.19474] 
//
// 然后，我们有与全局离散系统相关的矩阵和向量。
//
[0.x.19475] 
[0.x.19476] 
[0.x.19477] 
[0.x.19478] 
[0.x.19479] 
//
// 最后，我们有一组与多级预处理程序相关的稀疏模式和稀疏矩阵。 首先，我们有一个水平矩阵和它的稀疏性模式。
//
[0.x.19480] 
[0.x.19481] 
//
// 当我们在局部细化的网格上进行局部平滑的多重网格时，需要额外的矩阵；见Kanschat（2004）。这里是这些边缘矩阵的稀疏性模式。我们只需要一个，因为上矩阵的模式是下矩阵的转置。实际上，我们并不太关心这些细节，因为MeshWorker正在填充这些矩阵。
//
[0.x.19482] 
//
// 精细化边缘的通量矩阵，将精细级自由度与粗略级自由度相耦合。
//
[0.x.19483] 
//
// 精细化边缘的通量矩阵的转置，将粗级自由度耦合到精细级。
//
[0.x.19484] 
[0.x.19485] 
//
// 构造函数简单地设置了粗略的网格和DoFHandler。FiniteElement作为一个参数被提供，以实现灵活性。
//
[0.x.19486] 
[0.x.19487] 
[0.x.19488] 
[0.x.19489] 
[0.x.19490] 
[0.x.19491] 
[0.x.19492] 
[0.x.19493] 
[0.x.19494] 
[0.x.19495] 
[0.x.19496] 
//
// 在这个函数中，我们设置了线性系统的维度和全局矩阵以及水平矩阵的稀疏性模式。
//
[0.x.19497] 
[0.x.19498] 
[0.x.19499] 
//
// 首先，我们用有限元将自由度分布在网格上并对其进行编号。
//
[0.x.19500] 
[0.x.19501] 
[0.x.19502] 
//
// 然后，我们已经知道代表有限元函数的向量的大小。
//
[0.x.19503] 
[0.x.19504] 
//
// 接下来，我们为全局矩阵设置稀疏性模式。由于我们事先不知道行的大小，所以我们首先填充一个临时的DynamicSparsityPattern对象，一旦完成，就将其复制到常规的SparsityPattern中。
//
[0.x.19505] 
[0.x.19506] 
[0.x.19507] 
[0.x.19508] 
//
[0.x.19509] 
//
// 全局系统已经设置好了，现在我们来关注一下级别矩阵。我们调整所有矩阵对象的大小，以便每一级都有一个矩阵。
//
[0.x.19510] 
[0.x.19511] 
[0.x.19512] 
[0.x.19513] 
[0.x.19514] 
[0.x.19515] 
//
// 在为水平矩阵调用<tt>clear()</tt>之后更新稀疏模式很重要，因为矩阵通过SmartPointer和Subscriptor机制锁定了稀疏模式。
//
[0.x.19516] 
[0.x.19517] 
//
// 现在，所有的对象都准备好了，可以在每一层容纳一个稀疏模式或矩阵。剩下的就是在每一层设置稀疏模式了。
//
[0.x.19518] 
[0.x.19519] 
[0.x.19520] 
[0.x.19521] 
//
// 这些与上面的全局矩阵的行数大致相同，现在是每个级别的。
//
[0.x.19522] 
[0.x.19523] 
[0.x.19524] 
[0.x.19525] 
//
// 另外，我们需要初始化各层之间细化边缘的转移矩阵。它们被存储在两个索引中较细的索引处，因此在0层没有这样的对象。
//
[0.x.19526] 
[0.x.19527] 
[0.x.19528] 
[0.x.19529] 
[0.x.19530] 
[0.x.19531] 
[0.x.19532] 
[0.x.19533] 
[0.x.19534] 
[0.x.19535] 
[0.x.19536] 
[0.x.19537] 
//
// 在这个函数中，我们组装全局系统矩阵，这里的全局是指我们解决的离散系统的矩阵，它覆盖了整个网格。
//
[0.x.19538] 
[0.x.19539] 
[0.x.19540] 
//
// 首先，我们需要设置提供我们集成值的对象。这个对象包含了所有需要的FEValues和FEFaceValues对象，并且自动维护它们，使它们总是指向当前单元。为此，我们首先需要告诉它，在哪里计算，计算什么。由于我们没有做任何花哨的事情，我们可以依靠他们对正交规则的标准选择。
//
// 由于他们的默认更新标志是最小的，我们另外添加我们需要的东西，即所有对象（单元格、边界和内部面）上的形状函数的值和梯度。之后，我们准备初始化容器，它将创建所有必要的FEValuesBase对象进行整合。
//
[0.x.19541] 
[0.x.19542] 
[0.x.19543] 
[0.x.19544] 
//
// 这就是我们整合本地数据的对象。它由MatrixIntegrator中的局部整合例程填充，然后由汇编器用来将信息分配到全局矩阵中。
//
[0.x.19545] 
//
// 此外，我们还需要一个将局部矩阵装配到全局矩阵的对象。这些装配器对象拥有目标对象结构的所有知识，在这里是一个稀疏矩阵，可能的约束和网格结构。
//
[0.x.19546] 
[0.x.19547] 
//
// 现在是我们自己编码的部分，局部积分器。这是唯一与问题有关的部分。
//
[0.x.19548] 
//
// 现在，我们把所有的东西都扔到[2.x.2580]中，在这里遍历网格的所有活动单元，计算单元和面的矩阵，并把它们集合到全局矩阵中。我们在这里使用变量<tt>dof_handler</tt>，以便使用全局自由度的编号。
//
[0.x.19549] 
[0.x.19550] 
[0.x.19551] 
[0.x.19552] 
[0.x.19553] 
[0.x.19554] 
[0.x.19555] 
//
// 现在，我们对水平矩阵做同样的处理。不太令人惊讶的是，这个函数看起来像前一个函数的孪生兄弟。事实上，只有两个小的区别。
//
[0.x.19556] 
[0.x.19557] 
[0.x.19558] 
[0.x.19559] 
[0.x.19560] 
[0.x.19561] 
[0.x.19562] 
//
[0.x.19563] 
//
// 很明显，需要用一个填充水平矩阵的汇编器来代替。请注意，它也会自动填充边缘矩阵。
//
[0.x.19564] 
[0.x.19565] 
[0.x.19566] 
//
[0.x.19567] 
//
// 这里是与前一个函数的另一个不同之处：我们在所有单元上运行，而不仅仅是活动单元。而且我们使用以[2.x.2581]结尾的函数，因为我们需要每一层的自由度，而不是全局的编号。
//
[0.x.19568] 
[0.x.19569] 
[0.x.19570] 
[0.x.19571] 
[0.x.19572] 
[0.x.19573] 
[0.x.19574] 
//
// 这里我们有另一个assemble函数的克隆。与组装系统矩阵的区别在于，我们在这里组装了一个向量。
//
[0.x.19575] 
[0.x.19576] 
[0.x.19577] 
[0.x.19578] 
[0.x.19579] 
[0.x.19580] 
[0.x.19581] 
[0.x.19582] 
//
[0.x.19583] 
//
// 因为这个汇编器允许我们填充多个向量，所以接口要比上面复杂一些。向量的指针必须存储在一个AnyData对象中。虽然这在这里似乎造成了两行额外的代码，但实际上在更复杂的应用中它是很方便的。
//
[0.x.19584] 
[0.x.19585] 
[0.x.19586] 
[0.x.19587] 
//
[0.x.19588] 
[0.x.19589] 
[0.x.19590] 
[0.x.19591] 
[0.x.19592] 
[0.x.19593] 
[0.x.19594] 
//
[0.x.19595] 
[0.x.19596] 
//
// 现在，我们已经对构建离散线性系统的所有函数进行了编码，现在是我们实际解决它的时候了。
//
[0.x.19597] 
[0.x.19598] 
[0.x.19599] 
//
// 选择的求解器是共轭梯度。
//
[0.x.19600] 
[0.x.19601] 
//
// 现在我们正在设置多级预处理程序的组件。首先，我们需要在网格层之间进行转移。我们在这里使用的对象为这些转移生成了稀疏矩阵。
//
[0.x.19602] 
[0.x.19603] 
//
// 然后，我们需要一个精确的解算器来解算最粗层次上的矩阵。
//
[0.x.19604] 
[0.x.19605] 
[0.x.19606] 
[0.x.19607] 
//
// 虽然转移和粗略网格求解器几乎是通用的，但为平滑器提供了更多的灵活性。首先，我们选择Gauss-Seidel作为我们的平滑方法。
//
[0.x.19608] 
[0.x.19609] 
[0.x.19610] 
[0.x.19611] 
[0.x.19612] 
//
// 在每个级别上做两个平滑步骤。
//
[0.x.19613] 
//
// 由于SOR方法不是对称的，但我们在下面使用共轭梯度迭代，这里有一个技巧，使多级预处理器成为对称算子，即使是对非对称平滑器。
//
[0.x.19614] 
//
// 平滑器类可以选择实现变量V型循环，我们在这里不需要。
//
[0.x.19615] 
//
// 最后，我们必须将我们的矩阵包裹在一个具有所需乘法函数的对象中。
//
[0.x.19616] 
[0.x.19617] 
[0.x.19618] 
//
// 现在，我们准备设置V型循环算子和多级预处理程序。
//
[0.x.19619] 
[0.x.19620] 
//
// 让我们不要忘记因为自适应细化而需要的边缘矩阵。
//
[0.x.19621] 
//
// 在所有的准备工作完成后，将Multigrid对象包装成另一个对象，它可以作为一个普通的预处理程序使用。
//
[0.x.19622] 
[0.x.19623] 
//
// 并用它来解决这个系统。
//
[0.x.19624] 
[0.x.19625] 
//
// 另一个克隆的集合函数。与之前的最大区别是，这里我们也有一个输入向量。
//
[0.x.19626] 
[0.x.19627] 
[0.x.19628] 
//
// 估算器的结果存储在一个每个单元格有一个条目的向量中。由于deal.II中的单元格没有编号，我们必须建立自己的编号，以便使用这个向量。对于下面使用的汇编器来说，结果存储在向量的哪个分量中的信息是由每个单元的user_index变量传送的。我们需要在这里设置这个编号。
//
// 另一方面，有人可能已经使用了用户指数。所以，让我们做个好公民，在篡改它们之前保存它们。
//
[0.x.19629] 
[0.x.19630] 
//
[0.x.19631] 
[0.x.19632] 
[0.x.19633] 
[0.x.19634] 
//
// 这就像以前一样开始。
//
[0.x.19635] 
[0.x.19636] 
[0.x.19637] 
[0.x.19638] 
[0.x.19639] 
[0.x.19640] 
//
// 但现在我们需要通知信息框我们要在正交点上评估的有限元函数。首先，我们用这个向量创建一个AnyData对象，这个向量就是我们刚刚计算的解。
//
[0.x.19641] 
[0.x.19642] 
//
// 然后，我们告诉单元格的[2.x.2582]，我们需要这个解决方案的二次导数（用来计算拉普拉斯）。因此，选择函数值和第一导数的布尔参数是假的，只有选择第二导数的最后一个参数是真的。
//
[0.x.19643] 
//
// 在内部和边界面，我们需要函数值和第一导数，但不需要第二导数。
//
[0.x.19644] 
[0.x.19645] 
//
// 我们继续像以前一样，除了默认的更新标志已经被调整为我们上面要求的值和导数之外。
//
[0.x.19646] 
[0.x.19647] 
//
[0.x.19648] 
//
// 汇编器在每个单元格中存储一个数字，否则这与右侧的计算是一样的。
//
[0.x.19649] 
[0.x.19650] 
[0.x.19651] 
[0.x.19652] 
//
[0.x.19653] 
[0.x.19654] 
[0.x.19655] 
[0.x.19656] 
[0.x.19657] 
[0.x.19658] 
[0.x.19659] 
//
// 就在我们返回错误估计的结果之前，我们恢复旧的用户索引。
//
[0.x.19660] 
[0.x.19661] 
[0.x.19662] 
//
// 这里我们把我们的有限元解和（已知的）精确解进行比较，计算梯度和函数本身的平均二次误差。这个函数是上面那个估计函数的克隆。
//
// 由于我们分别计算能量和[1.x.81]-norm的误差，我们的块向量在这里需要两个块。
//
[0.x.19663] 
[0.x.19664] 
[0.x.19665] 
[0.x.19666] 
[0.x.19667] 
[0.x.19668] 
//
[0.x.19669] 
[0.x.19670] 
[0.x.19671] 
[0.x.19672] 
[0.x.19673] 
//
[0.x.19674] 
[0.x.19675] 
[0.x.19676] 
[0.x.19677] 
[0.x.19678] 
[0.x.19679] 
//
[0.x.19680] 
[0.x.19681] 
//
[0.x.19682] 
[0.x.19683] 
[0.x.19684] 
//
[0.x.19685] 
[0.x.19686] 
[0.x.19687] 
//
[0.x.19688] 
//
[0.x.19689] 
[0.x.19690] 
[0.x.19691] 
[0.x.19692] 
//
[0.x.19693] 
[0.x.19694] 
[0.x.19695] 
[0.x.19696] 
[0.x.19697] 
[0.x.19698] 
[0.x.19699] 
[0.x.19700] 
//
[0.x.19701] 
[0.x.19702] 
[0.x.19703] 
//
// 创建图形输出。我们通过整理其各个组成部分的名称来产生文件名，包括我们用两个数字输出的细化周期。
//
[0.x.19704] 
[0.x.19705] 
[0.x.19706] 
[0.x.19707] 
[0.x.19708] 
[0.x.19709] 
//
[0.x.19710] 
[0.x.19711] 
[0.x.19712] 
//
[0.x.19713] 
[0.x.19714] 
[0.x.19715] 
[0.x.19716] 
//
[0.x.19717] 
//
[0.x.19718] 
[0.x.19719] 
//
// 最后是自适应循环，或多或少和前面的例子一样。
//
[0.x.19720] 
[0.x.19721] 
[0.x.19722] 
[0.x.19723] 
[0.x.19724] 
[0.x.19725] 
[0.x.19726] 
[0.x.19727] 
[0.x.19728] 
[0.x.19729] 
[0.x.19730] 
[0.x.19731] 
[0.x.19732] 
[0.x.19733] 
[0.x.19734] 
//
[0.x.19735] 
[0.x.19736] 
[0.x.19737] 
//
[0.x.19738] 
[0.x.19739] 
[0.x.19740] 
[0.x.19741] 
[0.x.19742] 
//
[0.x.19743] 
[0.x.19744] 
[0.x.19745] 
[0.x.19746] 
[0.x.19747] 
[0.x.19748] 
[0.x.19749] 
[0.x.19750] 
[0.x.19751] 
[0.x.19752] 
[0.x.19753] 
[0.x.19754] 
[0.x.19755] 
[0.x.19756] 
//
[0.x.19757] 
[0.x.19758] 
[0.x.19759] 
[0.x.19760] 
[0.x.19761] 
[0.x.19762] 
//
[0.x.19763] 
[0.x.19764] 
[0.x.19765] 
[0.x.19766] 
[0.x.19767] 
[0.x.19768] 
[0.x.19769] 
[0.x.19770] 
[0.x.19771] 
[0.x.19772] 
[0.x.19773] 
[0.x.19774] 
[0.x.19775] 
[0.x.19776] 
[0.x.19777] 
[0.x.19778] 
[0.x.19779] 
[0.x.19780] 
[0.x.19781] 
[0.x.19782] 
[0.x.19783] 
[0.x.19784] 
[0.x.19785] 
[0.x.19786] 
[0.x.19787] 
[0.x.19788] 
[0.x.19789] 
[0.x.19790] 
[0.x.19791] 
[0.x.19792] 
[0.x.19793] 
[0.x.19794] 
//
[0.x.19795] 
[0.x.19796] 
[0.x.19797] 
[0.x.19798] 
[0.x.19799] 
[0.x.19800] 
[0.x.19801] 
[0.x.19802] 
[0.x.19803] 
[0.x.19804] 
[0.x.19805] 
[0.x.19806] 
[0.x.19807] 
[0.x.19808] 
[0.x.19809] 
[0.x.19810] 
//
[0.x.19811] 
[0.x.19812] 
[0.x.19813] 
//[2.x.2583] 
//
// 前面几个（很多）include文件已经在前面的例子中使用过了，所以我们在这里不再解释它们的含义。
//
[0.x.19814] 
[0.x.19815] 
[0.x.19816] 
[0.x.19817] 
[0.x.19818] 
[0.x.19819] 
[0.x.19820] 
[0.x.19821] 
[0.x.19822] 
[0.x.19823] 
[0.x.19824] 
[0.x.19825] 
[0.x.19826] 
[0.x.19827] 
[0.x.19828] 
[0.x.19829] 
//
[0.x.19830] 
[0.x.19831] 
[0.x.19832] 
//
// 这是新的，但是：在前面的例子中，我们从线性求解器得到了一些不需要的输出。如果我们想抑制它，我们必须包括这个文件，并在程序的某个地方添加一行字（见下面的main()函数）。
//
[0.x.19833] 
//
// 最后一步，和以前的程序一样，是将所有deal.II的类和函数名导入全局命名空间中。
//
[0.x.19834] 
//[2.x.2584] 
//
// 这又是前面例子中的[2.x.2585]类。唯一不同的是，我们现在把它声明为一个带有模板参数的类，而模板参数当然是我们要解决拉普拉斯方程的空间维度。当然，几个成员变量也取决于这个维度，特别是Triangulation类，它必须分别表示四边形或六面体。除此以外，一切都和以前一样。
//
[0.x.19835] 
[0.x.19836] 
[0.x.19837] 
[0.x.19838] 
[0.x.19839] 
[0.x.19840] 
//
[0.x.19841] 
[0.x.19842] 
[0.x.19843] 
[0.x.19844] 
[0.x.19845] 
[0.x.19846] 
//
[0.x.19847] 
[0.x.19848] 
[0.x.19849] 
//
[0.x.19850] 
[0.x.19851] 
//
[0.x.19852] 
[0.x.19853] 
[0.x.19854] 
//[2.x.2586] 
//
// 在下文中，我们又声明了两个类，表示右手边和非均质的Dirichlet边界值。两者都是一个二维空间变量的函数，所以我们也将它们声明为模板。
//
// 这些类中的每一个都是从一个共同的、抽象的基类Function派生出来的，它声明了所有函数都必须遵循的共同接口。特别是，具体的类必须重载[2.x.2587]函数，该函数接收二维空间中的一个点作为参数，并将该点的值作为[2.x.2588]变量返回。
//
// [2.x.2589]函数需要第二个参数，我们在这里将其命名为[2.x.2590] : 这只适用于矢量值函数，你可能想访问点[2.x.2591]处的矢量的某个分量。然而，我们的函数是标量的，所以我们不需要担心这个参数，在函数的实现中也不会使用它。在库的头文件中，Function基类对[2.x.2592]函数的声明中，分量的默认值为0，所以我们在访问右侧的[2.x.2593]函数时，只需要一个参数，即我们要评估函数的点。然后，对于标量函数，可以简单地省略分量的值。
//
// 函数对象在库中很多地方都有使用（例如，在[2.x.2594]中我们使用了一个[2.x.2595]实例作为[2.x.2596]的参数，这是我们定义一个继承自Function的新类的第一个教程。由于我们只调用[2.x.2597]，我们可以只用一个普通的函数（这就是[2.x.2598]中的做法），但由于这是一个教程，为了举例说明，我们继承了Function。
//
[0.x.19855] 
[0.x.19856] 
[0.x.19857] 
[0.x.19858] 
[0.x.19859] 
[0.x.19860] 
[0.x.19861] 
//
[0.x.19862] 
[0.x.19863] 
[0.x.19864] 
[0.x.19865] 
[0.x.19866] 
[0.x.19867] 
[0.x.19868] 
//
// 如果你不熟悉上述函数声明中的关键字 "virtual "和 "override "是什么意思，你可能会想看看你最喜欢的C++书籍或在线教程，如http:www.cplusplus.com/doc/tutorial/polymorphism/ 。从本质上讲，这里发生的事情是Function<dim>是一个 "抽象 "基类，它声明了某种 "接口"--一组可以在这类对象上调用的函数。但它实际上并没有*实现*这些函数：它只是说 "Function对象是这样的"，但它实际上是什么样的函数，则留给实现了`value()`函数的派生类。
//
// 从另一个类中派生出一个类，通常称为 "is-a "关系函数。在这里，`RightHandSide`类 "是一个 "函数类，因为它实现了Function基类所描述的接口。("value() "函数的实际实现在下面的代码块中)。那么`virtual`关键字意味着 "是的，这里的函数可以被派生类覆盖"，而`override`关键字意味着 "是的，这实际上是一个我们知道已经被声明为基类一部分的函数"。覆盖 "关键字不是严格必要的，但它是防止打字错误的一个保险。如果我们把函数的名字或一个参数的类型弄错了，编译器会警告我们说："你说这个函数覆盖了基类中的一个函数，但实际上我不知道有任何这样的函数有这个名字和这些参数。"
//
// 但回到这里的具体案例。在本教程中，我们选择2D中的函数[2.x.2599]，或者3D中的[2.x.2600]作为右手边。我们可以用空间维度上的if语句来写这个区别，但这里有一个简单的方法，通过使用一个短循环，也允许我们在一维（或四维，如果你想这样做）中使用相同的函数。 幸运的是，编译器在编译时就知道循环的大小（记住，在你定义模板时，编译器不知道[2.x.2601]的值，但当它后来遇到语句或声明[2.x.2602]时，它将采取模板，用2替换所有出现的dim，并编译出结果函数）。 换句话说，在编译这个函数的时候，主体将被执行的次数是已知的，编译器可以将循环所需的开销降到最低；结果将和我们马上使用上面的公式一样快。
//
// 最后要注意的是，[2.x.2603]表示二维空间中的一个点，它的各个组成部分（即[2.x.2604]、[2.x.2605]、...坐标）可以像C和C++中一样用（）运算符访问（事实上，[]运算符也同样有效），索引从0开始。
//
[0.x.19869] 
[0.x.19870] 
[0.x.19871] 
[0.x.19872] 
[0.x.19873] 
[0.x.19874] 
[0.x.19875] 
//
[0.x.19876] 
[0.x.19877] 
//
// 作为边界值，我们选择二维的[2.x.2606]，三维的[2.x.2607]。这恰好等于从原点到我们想评估函数的点的矢量的平方，而不考虑维度。所以这就是我们的返回值。
//
[0.x.19878] 
[0.x.19879] 
[0.x.19880] 
[0.x.19881] 
[0.x.19882] 
[0.x.19883] 
//
// [2.x.2608] 
//
// 接下来是利用上述函数的类模板的实现。和以前一样，我们将把所有东西写成模板，这些模板有一个形式参数[2.x.2609]，在我们定义模板函数时，我们假设这个参数是未知的。只有在以后，编译器才会发现[2.x.2610]函数的声明，实际上），并在编译整个类时将[2.x.2611]替换成2，这个过程被称为 "模板的实例化"。这样做的时候，它也会用[2.x.2612]的实例替换[2.x.2613]，并从类模板中实例化后一个类。
//
// 事实上，编译器也会在[2.x.2615]中找到一个[2.x.2614]声明。这将导致它再次回到一般的[2.x.2616]模板，替换所有出现的[2.x.2617]，这次是3，并第二次编译这个类。注意这两个实例 [2.x.2618] 和 [2.x.2619] 是完全独立的类；它们唯一的共同特征是它们都是从同一个通用模板中实例化出来的，但是它们不能相互转换，例如，它们没有共享代码（两个实例都是完全独立编译的）。
//
// [2.x.2620] 
//
// 在这个介绍之后，这里是 [2.x.2621] 类的构造函数。它指定了所需的有限元素的多项式程度，并将DoFHandler与三角形关联起来，就像在前面的例子程序中一样， [2.x.2622] 。
//
[0.x.19884] 
[0.x.19885] 
[0.x.19886] 
[0.x.19887] 
[0.x.19888] 
//[2.x.2623] 
//
// 网格的创建在本质上是与维度有关的东西。然而，只要领域在二维或三维中足够相似，库就可以为你抽象。在我们的例子中，我们想再次在二维的正方形[2.x.2624]上求解，或者在三维的立方体[2.x.2625]上求解；两者都可以被称为[2.x.2626]，因此我们可以在任何维度上使用同一个函数。当然，在二维和三维中创建超立方体的函数有很大的不同，但这是你不需要关心的事情。让库来处理这些困难的事情。
//
[0.x.19889] 
[0.x.19890] 
[0.x.19891] 
[0.x.19892] 
[0.x.19893] 
//
[0.x.19894] 
[0.x.19895] 
[0.x.19896] 
[0.x.19897] 
[0.x.19898] 
//[2.x.2627] 
//
// 这个函数看起来和前面的例子完全一样，尽管它执行的动作在细节上有很大的不同，如果[2.x.2628]刚好是3。从用户的角度来看，唯一显著的区别是所产生的单元格数量，在三个空间维度中比两个空间维度中要高得多
//
[0.x.19899] 
[0.x.19900] 
[0.x.19901] 
[0.x.19902] 
//
[0.x.19903] 
[0.x.19904] 
//
[0.x.19905] 
[0.x.19906] 
[0.x.19907] 
//
[0.x.19908] 
//
[0.x.19909] 
[0.x.19910] 
[0.x.19911] 
//[2.x.2629] 
//
// 与前面的例子不同，我们现在想使用一个非恒定的右侧函数和非零边界值。这两个任务都是很容易实现的，只需在矩阵和右手边的组合中增加几行代码即可。
//
// 更有趣的是，我们将矩阵和右手边的向量维度独立组装起来的方式：与二维的情况根本没有区别。由于这个函数中使用的重要对象（正交公式、FEValues）也通过模板参数的方式依赖于维度，它们可以为这个函数所编译的维度正确设置一切。通过使用模板参数声明所有可能依赖于维度的类，库可以为你完成几乎所有的工作，你不需要关心大多数事情。
//
[0.x.19912] 
[0.x.19913] 
[0.x.19914] 
[0.x.19915] 
//
// 我们希望有一个非恒定的右手，所以我们使用上面声明的类的一个对象来生成必要的数据。由于这个右侧对象只在本函数中局部使用，所以我们在这里把它声明为一个局部变量。
//
[0.x.19916] 
//
// 与之前的例子相比，为了评估非恒定右手函数，我们现在还需要我们目前所在单元上的正交点（之前，我们只需要FEValues对象中的形状函数的值和梯度，以及正交权重，[2.x.2630]）。我们可以通过给FEValues对象添加#update_quadrature_points标志来让它为我们做事。
//
[0.x.19917] 
[0.x.19918] 
[0.x.19919] 
[0.x.19920] 
//
// 然后我们再次定义与前面程序中相同的缩写。这个变量的值当然取决于我们现在使用的维度，但是FiniteElement类为你做了所有必要的工作，你不需要关心与维度有关的部分。
//
[0.x.19921] 
//
[0.x.19922] 
[0.x.19923] 
//
[0.x.19924] 
//
// 接下来，我们又要在所有的单元格上进行循环，并汇集局部贡献。 请注意，一个单元在两个空间维度上是一个四边形，但在三维上是一个六面体。事实上，[2.x.2631]的数据类型是不同的，这取决于我们所处的维度，但对外界来说，它们看起来是一样的，你可能永远不会看到区别。在任何情况下，真正的类型是通过使用`auto`来隐藏的。
//
[0.x.19925] 
[0.x.19926] 
[0.x.19927] 
[0.x.19928] 
[0.x.19929] 
//
// 现在我们要把本地矩阵和右手边组合起来。这个过程和前面的例子完全一样，但是现在我们重新调整循环的顺序（我们可以安全地这样做，因为它们是相互独立的），并尽可能地合并本地矩阵和本地向量的循环，使事情变得更快。
//
// 组装右手边与我们在[2.x.2632]中的做法有唯一的区别：我们没有使用值为1的常数右手边，而是使用代表右手边的对象并在正交点对其进行评估。
//
[0.x.19930] 
[0.x.19931] 
[0.x.19932] 
[0.x.19933] 
[0.x.19934] 
[0.x.19935] 
[0.x.19936] 
[0.x.19937] 
//
[0.x.19938] 
[0.x.19939] 
[0.x.19940] 
[0.x.19941] 
[0.x.19942] 
//
// 作为对这些循环的最后说明：当我们将局部贡献集合到[2.x.2633]时，我们必须将形状函数[2.x.2634]和[2.x.2635]在点号q_index的梯度相乘并与标量权重JxW相乘。这就是实际发生的情况。 [2.x.2636]返回一个[2.x.2637]维向量，由[2.x.2638]对象表示，将其与[2.x.2639]的结果相乘的运算器*确保两个向量的[2.x.2640]分量被适当收缩，结果是一个标量浮点数，然后与权重相乘。在内部，这个操作符*确保对向量的所有[2.x.2641]分量都能正确发生，无论[2.x.2642]是2、3还是其他空间维度；从用户的角度来看，这并不值得费心，然而，如果想独立编写代码维度，事情就会简单很多。
//
// 随着本地系统的组装，转移到全局矩阵和右手边的工作与之前完全一样，但在这里我们再次合并了一些循环以提高效率。
//
[0.x.19943] 
[0.x.19944] 
[0.x.19945] 
[0.x.19946] 
[0.x.19947] 
[0.x.19948] 
[0.x.19949] 
//
[0.x.19950] 
[0.x.19951] 
[0.x.19952] 
//
// 作为这个函数的最后一步，我们希望在这个例子中拥有非均质的边界值，与之前的例子不同。这是一个简单的任务，我们只需要用一个描述我们想使用的边界值的类的对象（即上面声明的[2.x.2644]类）来替换那里使用的[2.x.2643]。
//
// 函数[2.x.2645]只对标有边界指标0的面起作用（因为我们在下面的第二个参数中说该函数应该对其起作用）。如果有的面的边界指标不是0，那么函数interpolate_boundary_values将对这些面不起作用。对于拉普拉斯方程来说，什么都不做相当于假设在边界的这些部分，零诺伊曼边界条件成立。
//
[0.x.19953] 
[0.x.19954] 
[0.x.19955] 
[0.x.19956] 
[0.x.19957] 
[0.x.19958] 
[0.x.19959] 
[0.x.19960] 
[0.x.19961] 
[0.x.19962] 
//[2.x.2646] 
//
// 解决线性方程组是在大多数程序中看起来几乎相同的事情。特别是，它与维度无关，所以这个函数是从前面的例子中逐字复制的。
//
[0.x.19963] 
[0.x.19964] 
[0.x.19965] 
[0.x.19966] 
[0.x.19967] 
[0.x.19968] 
//
// 不过我们做了一个补充：由于我们抑制了线性求解器的输出，我们必须手工打印迭代次数。
//
[0.x.19969] 
[0.x.19970] 
[0.x.19971] 
//[2.x.2647] 
//
// 这个函数也做了 [2.x.2648] 中各自的工作。这里也没有改变维度的独立性。
//
// 由于程序将同时运行拉普拉斯求解器的2D和3D版本，我们使用文件名中的维度为每次运行生成不同的文件名（在一个更好的程序中，我们将检查[2.x.2649]是否可以有2或3以外的其他值，但为了简洁起见，我们在这里忽略了这一点）。
//
[0.x.19972] 
[0.x.19973] 
[0.x.19974] 
[0.x.19975] 
//
[0.x.19976] 
[0.x.19977] 
//
[0.x.19978] 
//
[0.x.19979] 
[0.x.19980] 
[0.x.19981] 
//
// [2.x.2650] 
//
// 这是一个对所有事情都有最高级别控制的函数。除了一行额外的输出外，它与前面的例子相同。
//
[0.x.19982] 
[0.x.19983] 
[0.x.19984] 
[0.x.19985] 
[0.x.19986] 
//
[0.x.19987] 
[0.x.19988] 
[0.x.19989] 
[0.x.19990] 
[0.x.19991] 
[0.x.19992] 
//[2.x.2651] 
//
// 这是主函数。它看起来也大多像[2.x.2652]中的内容，但如果你看下面的代码，注意我们是如何首先创建一个[2.x.2653]类型的变量（迫使编译器用[2.x.2654]编译类模板）并运行一个2d模拟，然后我们用3d做整个事情。
//
// 在实践中，这可能不是你经常做的事情（你可能要么想解决一个2D的问题，要么想解决一个3D的问题，但不会同时解决这两个问题）。然而，它展示了一种机制，我们可以在一个地方简单地改变我们想要的维度，从而迫使编译器为我们要求的维度重新编译独立的类模板。这里的重点在于，我们只需要改变一个地方。这使得在计算速度较快的2D环境下调试程序变得非常简单，然后将一个地方切换到3，在3D环境下运行计算量大得多的程序，进行 "真实 "的计算。
//
// 这两个区块中的每一个都用大括号括起来，以确保[2.x.2655]这个变量在我们继续为3D情况分配内存之前就已经超出了范围（并释放了它所持有的内存）。如果没有额外的大括号，[2.x.2656]变量只会在函数结束时被销毁，也就是在运行完3d问题后被销毁，而且会在3d运行时不必要地占用内存，而实际使用它。
//
[0.x.19993] 
[0.x.19994] 
[0.x.19995] 
[0.x.19996] 
[0.x.19997] 
[0.x.19998] 
//
[0.x.19999] 
[0.x.20000] 
[0.x.20001] 
[0.x.20002] 
//
[0.x.20003] 
[0.x.20004] 
[0.x.20005] 
[0.x.20006] 
[0.x.20007] 
[0.x.20008] 
[0.x.20009] 
[0.x.20010] 
[0.x.20011] 
[0.x.20012] 
[0.x.20013] 
[0.x.20014] 
[0.x.20015] 
[0.x.20016] 
[0.x.20017] 
[0.x.20018] 
//
[0.x.20019] 
[0.x.20020] 
[0.x.20021] 
[0.x.20022] 
//[2.x.2657] 
//
// 我们在这个程序中需要的大部分包含文件已经在以前的程序中讨论过了。特别是，以下所有的文件都应该已经是熟悉的朋友了。
//
[0.x.20023] 
[0.x.20024] 
[0.x.20025] 
//
[0.x.20026] 
//
// 这个程序可以使用PETSc或Trilinos来满足其并行代数的需要。默认情况下，如果deal.II已经被配置为PETSc，它将使用PETSc。否则，下面几行将检查deal.II是否已被配置为Trilinos，并采用它。
//
// 但是在某些情况下，即使deal.II也被配置为PETSc，你还是想使用Trilinos，例如，比较这两个库的性能。要做到这一点，请在源代码中添加以下的\#define。[1.x.82]
//
// 使用这个逻辑，下面几行将导入PETSc或Trilinos包装器到命名空间`LA`（代表 "线性代数"）。在前一种情况下，我们还要定义宏 `USE_PETSC_LA`，这样我们就可以检测到我们是否在使用PETSc（参见solve()中需要用到的例子）。
//
[0.x.20027] 
[0.x.20028] 
[0.x.20029] 
[0.x.20030] 
[0.x.20031] 
[0.x.20032] 
[0.x.20033] 
[0.x.20034] 
[0.x.20035] 
[0.x.20036] 
[0.x.20037] 
[0.x.20038] 
//
[0.x.20039] 
[0.x.20040] 
[0.x.20041] 
[0.x.20042] 
[0.x.20043] 
//
[0.x.20044] 
[0.x.20045] 
[0.x.20046] 
[0.x.20047] 
[0.x.20048] 
[0.x.20049] 
[0.x.20050] 
[0.x.20051] 
//
// 然而，下面这些将是新的，或在新的角色中使用。让我们来看看它们。其中第一个将提供[2.x.2658]命名空间的工具，我们将用它来查询诸如与当前MPI宇宙相关的处理器数量，或者这个作业运行的处理器在这个宇宙中的编号。
//
[0.x.20052] 
//
// 下一个提供了一个类，ConditionOStream，它允许我们编写代码，将东西输出到一个流中（例如在每个处理器上的[2.x.2659]，但在除了一个处理器以外的所有处理器上都将文本扔掉。我们可以通过简单地在每个可能产生输出的地方前面放一个[2.x.2660]语句来实现同样的目的，但这并不能使代码更漂亮。此外，这个处理器是否应该向屏幕输出的条件每次都是一样的--因此，把它放在产生输出的语句中应该是很简单的。
//
[0.x.20053] 
//
// 在这些预演之后，这里变得更加有趣。正如在[2.x.2661]模块中提到的，在大量处理器上解决问题的一个基本事实是，任何处理器都不可能存储所有的东西（例如，关于网格中所有单元的信息，所有的自由度，或者解向量中所有元素的值）。相反，每个处理器都会[1.x.83]其中的几个，如果有必要，还可能[1.x.84]另外几个，例如，位于与该处理器自己拥有的单元相邻的那些单元。我们通常称后者为[1.x.85]、[1.x.86]或[1.x.87]。这里讨论的重点是，我们需要有一种方法来表明一个特定的处理器拥有或需要知道哪些元素。这就是IndexSet类的领域：如果总共有[2.x.2662]个单元、自由度或向量元素，与（非负）积分指数[2.x.2663]相关，那么当前处理器拥有的元素集以及它需要了解的（可能更大）指数集都是集合[2.x.2664]的子集。IndexSet是一个类，它以一种有效的格式存储这个集合的子集。
//
[0.x.20054] 
//
// 下一个头文件是一个单一的函数所必需的， [2.x.2665] 这个函数的作用将在下面解释。
//
[0.x.20055] 
//
// 最后两个新的头文件提供了类[2.x.2666]，它提供了分布在可能非常多的处理器上的网格，而第二个文件提供了命名空间[2.x.2667]，它提供了可以自适应细化这种分布式网格的函数。
//
[0.x.20056] 
[0.x.20057] 
//
[0.x.20058] 
[0.x.20059] 
//
[0.x.20060] 
[0.x.20061] 
[0.x.20062] 
//[2.x.2668] 
//
// 接下来我们来声明这个程序的主类。它的结构几乎与[2.x.2669]的教程程序一模一样。唯一显著的区别是。
//
// -- [2.x.2670]变量，它描述了我们希望这段代码运行在哪一组处理器上。在实践中，这将是MPI_COMM_WORLD，即批处理调度系统分配给这个特定作业的所有处理器。
//
// - ConditionOStream类型的[2.x.2671]变量的存在。
//
// - 明显使用[2.x.2672]而不是Triangulation。
//
// - 两个IndexSet对象的存在，表示我们在当前处理器上拥有哪些自由度集（以及解和右手向量的相关元素），以及我们需要哪些（作为幽灵元素）来使本程序中的算法工作。
//
// - 现在所有的矩阵和向量都是分布式的。我们使用PETSc或Trilinos包装类，这样我们就可以使用Hypre（使用PETSc）或ML（使用Trilinos）提供的复杂的预处理器之一。请注意，作为这个类的一部分，我们存储的解向量不仅包含当前处理器拥有的自由度，还包括（作为鬼魂元素）所有对应于 "本地相关 "自由度的向量元素（即所有生活在本地拥有的单元或围绕它的鬼魂单元层的自由度）。
//
[0.x.20063] 
[0.x.20064] 
[0.x.20065] 
[0.x.20066] 
[0.x.20067] 
//
[0.x.20068] 
//
[0.x.20069] 
[0.x.20070] 
[0.x.20071] 
[0.x.20072] 
[0.x.20073] 
[0.x.20074] 
//
[0.x.20075] 
//
[0.x.20076] 
//
[0.x.20077] 
[0.x.20078] 
//
[0.x.20079] 
[0.x.20080] 
//
[0.x.20081] 
//
[0.x.20082] 
[0.x.20083] 
[0.x.20084] 
//
[0.x.20085] 
[0.x.20086] 
[0.x.20087] 
//[2.x.2673] 
//[2.x.2674] 
//
// 构造函数和析构函数是相当微不足道的。除了我们在[2.x.2675]中所做的，我们将我们想要工作的处理器集合设置为所有可用的机器（MPI_COMM_WORLD）；要求三角化以确保网格保持平滑并自由精炼岛屿，例如；并初始化[2.x.2676]变量，只允许处理器0输出任何东西。最后一块是初始化一个定时器，我们用它来决定程序的不同部分需要多少计算时间。
//
[0.x.20088] 
[0.x.20089] 
[0.x.20090] 
[0.x.20091] 
[0.x.20092] 
[0.x.20093] 
[0.x.20094] 
[0.x.20095] 
[0.x.20096] 
[0.x.20097] 
[0.x.20098] 
[0.x.20099] 
[0.x.20100] 
[0.x.20101] 
[0.x.20102] 
[0.x.20103] 
//
// [2.x.2677] 
//
// 下面这个函数可以说是整个程序中最有趣的一个，因为它涉及到了%并行 [2.x.2678] 和顺序 [2.x.2679] 的核心区别。
//
// 在顶部我们做了我们一直在做的事情：告诉DoFHandler对象来分配自由度。由于我们在这里使用的三角测量是分布式的，DoFHandler对象足够聪明，它认识到在每个处理器上只能在它所拥有的单元上分配自由度；接下来是一个交换步骤，处理器互相告诉对方关于ghost单元的自由度。结果是DoFHandler知道本地拥有的单元和幽灵单元（即与本地拥有的单元相邻的单元）的自由度，但对更远的单元则一无所知，这与分布式计算的基本理念一致，即没有处理器可以知道所有的事情。
//
[0.x.20104] 
[0.x.20105] 
[0.x.20106] 
[0.x.20107] 
//
[0.x.20108] 
//
// 接下来的两行提取了一些我们以后需要的信息，即两个索引集，提供了关于哪些自由度为当前处理器所拥有的信息（这些信息将被用来初始化解和右手向量以及系统矩阵，表明哪些元素要存储在当前处理器上，哪些要期望存储在其他地方）；以及一个索引集，表明哪些自由度是本地相关的（即生活在当前处理器所拥有的单元上或本地所拥有的单元周围的鬼魂单元上；我们将把这些自由度存储在当前处理器上。 例如，生活在当前处理器拥有的单元上或本地拥有的单元周围的幽灵单元层上；例如，我们需要所有这些自由度来估计本地单元的误差）。)
//
[0.x.20109] 
[0.x.20110] 
//
// 接下来，让我们初始化解和右手边的向量。如上所述，我们寻求的解向量不仅存储了我们自己的元素，还存储了幽灵条目；另一方面，右手向量只需要有当前处理器拥有的条目，因为我们所做的只是向其中写入，而不是从其中读取本地拥有的单元（当然，线性求解器会从其中读取，但它们并不关心自由度的几何位置）。
//
[0.x.20111] 
[0.x.20112] 
[0.x.20113] 
[0.x.20114] 
//
// 下一步是计算悬挂节点和边界值约束，我们将其合并为一个存储所有约束的对象。
//
// 就像在%parallel中的所有其他事情一样，口头禅必须是：没有一个处理器可以存储整个宇宙的所有信息。因此，我们需要告诉AffineConstraints对象哪些自由度可以存储约束条件，哪些可以不期望存储任何信息。在我们的例子中，正如[2.x.2680]模块所解释的，我们需要在每个处理器上关心的自由度是本地相关的自由度，所以我们把这个传递给[2.x.2681]函数。顺便提一下，如果你忘记传递这个参数，AffineConstraints类将分配一个长度等于它目前看到的最大自由度索引的数组。对于MPI进程数很高的处理器来说，这可能是非常大的 -- 也许是数十亿的数量级。然后，程序将为这个单一的数组分配比其他所有操作加起来还要多的内存。
//
[0.x.20115] 
[0.x.20116] 
[0.x.20117] 
[0.x.20118] 
[0.x.20119] 
[0.x.20120] 
[0.x.20121] 
[0.x.20122] 
//
// 这个函数的最后一部分涉及到用伴随的稀疏模式初始化矩阵。和以前的教程程序一样，我们使用DynamicSparsityPattern作为一个中介，然后用它来初始化系统矩阵。为了做到这一点，我们必须告诉稀疏模式它的大小，但如上所述，所产生的对象不可能为每个全局自由度存储哪怕一个指针；我们最好的希望是它能存储每个局部相关自由度的信息，即所有我们在组装矩阵的过程中可能接触到的自由度（[2.x.2682]"分布式计算论文 "有很长的讨论，为什么我们真的需要局部相关自由度，而不是在此背景下的小的局部活动自由度集）。
//
// 所以我们告诉稀疏模式它的大小和要存储什么自由度，然后要求[2.x.2683]来填充它（这个函数忽略了所有不属于本地的单元，模仿我们下面在装配过程中的做法）。在这之后，我们调用一个函数，在处理器之间交换这些稀疏模式的条目，以便最后每个处理器真正知道它将拥有的那部分有限元矩阵中的所有条目。最后一步是用稀疏模式初始化矩阵。
//
[0.x.20123] 
//
[0.x.20124] 
[0.x.20125] 
[0.x.20126] 
[0.x.20127] 
[0.x.20128] 
//
[0.x.20129] 
[0.x.20130] 
[0.x.20131] 
[0.x.20132] 
[0.x.20133] 
//
// [2.x.2684] 
//
// 然后组装线性系统的函数相对来说比较无聊，几乎和我们之前看到的一模一样。需要注意的地方是。
//
// - 装配必须只在本地拥有的单元上循环。有多种方法来测试；例如，我们可以将一个单元的subdomain_id与三角形的信息进行比较，如<code>cell->subdomain_id() == triangulation.local_owned_subdomain()</code>，或者跳过所有条件<code>cell->is_ghost() || cell->is_artificial()</code>为真的单元。然而，最简单的方法是简单地询问单元格是否为本地处理器所拥有。
//
// - 将本地贡献复制到全局矩阵中必须包括分配约束和边界值。换句话说，我们不能（就像我们在[2.x.2685]中所做的那样）首先将每个本地贡献复制到全局矩阵中，然后在后面的步骤中才处理悬挂节点的约束和边界值。原因是，正如在[2.x.2686]中所讨论的那样，一旦矩阵中的任意元素被组装到矩阵中，并行矢量类就不能提供对这些元素的访问--部分原因是它们可能不再存在于当前的处理器中，而是被运到了不同的机器上。
//
// - 我们计算右手边的方式（考虑到介绍中的公式）可能不是最优雅的，但对于重点在某个完全不同的地方的程序来说是可以的。
//
[0.x.20134] 
[0.x.20135] 
[0.x.20136] 
[0.x.20137] 
//
[0.x.20138] 
//
[0.x.20139] 
[0.x.20140] 
[0.x.20141] 
[0.x.20142] 
//
[0.x.20143] 
[0.x.20144] 
//
[0.x.20145] 
[0.x.20146] 
//
[0.x.20147] 
//
[0.x.20148] 
[0.x.20149] 
[0.x.20150] 
[0.x.20151] 
[0.x.20152] 
//
[0.x.20153] 
//
[0.x.20154] 
[0.x.20155] 
[0.x.20156] 
[0.x.20157] 
[0.x.20158] 
[0.x.20159] 
[0.x.20160] 
[0.x.20161] 
[0.x.20162] 
//
[0.x.20163] 
[0.x.20164] 
[0.x.20165] 
[0.x.20166] 
[0.x.20167] 
[0.x.20168] 
//
[0.x.20169] 
[0.x.20170] 
[0.x.20171] 
[0.x.20172] 
[0.x.20173] 
//
[0.x.20174] 
[0.x.20175] 
[0.x.20176] 
[0.x.20177] 
[0.x.20178] 
[0.x.20179] 
[0.x.20180] 
//
// 注意，上面的装配只是一个局部操作。因此，为了形成 "全局 "线性系统，需要在所有处理器之间进行同步。这可以通过调用函数compress()来实现。参见[2.x.2687]"压缩分布式对象"，以了解更多关于compress()的设计目的的信息。
//
[0.x.20181] 
[0.x.20182] 
[0.x.20183] 
//
// [2.x.2688] 
//
// 尽管在可能是数以万计的处理器上求解线性系统到目前为止并不是一项微不足道的工作，但完成这项工作的函数--至少在外表上--相对简单。大部分的部分你都见过了。真正值得一提的只有两件事。
//
// - 解算器和预处理器是建立在PETSc和Trilinos功能的deal.II包装上的。众所周知，大规模并行线性求解器的主要瓶颈实际上不是处理器之间的通信，而是很难产生能够很好地扩展到大量处理器的预处理程序。在21世纪前十年的后半段，代数多网格（AMG）方法在这种情况下显然是非常有效的，我们将使用其中的一种方法--要么是可以通过PETSc接口的Hypre软件包的BoomerAMG实现，要么是由ML提供的预处理程序，它是Trilinos的一部分--用于当前的程序。解算器本身的其余部分是模板，之前已经展示过了。由于线性系统是对称和正定的，我们可以使用CG方法作为外解器。
//
// - 最终，我们想要一个向量，它不仅存储了当前处理器拥有的自由度的解的元素，而且还存储了所有其他本地相关的自由度。另一方面，求解器本身需要一个在处理器之间唯一分割的向量，没有任何重叠。因此，我们在这个函数的开头创建一个具有这些特性的向量，用它来求解线性系统，并在最后才把它分配给我们想要的向量。这最后一步确保所有的鬼魂元素也在必要时被复制。
//
[0.x.20184] 
[0.x.20185] 
[0.x.20186] 
[0.x.20187] 
[0.x.20188] 
[0.x.20189] 
//
[0.x.20190] 
//
[0.x.20191] 
[0.x.20192] 
[0.x.20193] 
[0.x.20194] 
[0.x.20195] 
//
[0.x.20196] 
//
[0.x.20197] 
//
[0.x.20198] 
[0.x.20199] 
[0.x.20200] 
//
// /* Trilinos的默认值是好的 [2.x.2689] 。
[0.x.20201] 
[0.x.20202] 
//
[0.x.20203] 
[0.x.20204] 
[0.x.20205] 
[0.x.20206] 
//
[0.x.20207] 
[0.x.20208] 
//
[0.x.20209] 
//
[0.x.20210] 
[0.x.20211] 
//
// [2.x.2690] 
//
// 估计误差和细化网格的函数又与 [2.x.2691] 中的函数几乎完全一样。唯一不同的是，标志着要细化的单元格的函数现在在命名空间 [2.x.2692] 中 -- 这个命名空间的函数可以在所有参与的处理器之间进行通信，并确定全局阈值，用于决定哪些单元格要细化，哪些要粗化。
//
// 注意，我们不需要对KellyErrorEstimator类做任何特殊处理：我们只是给它一个向量，其元素数量与本地三角形的单元（本地拥有的单元、幽灵单元和人工单元）一样多，但它只填入那些对应于本地拥有的单元的条目。
//
[0.x.20212] 
[0.x.20213] 
[0.x.20214] 
[0.x.20215] 
//
[0.x.20216] 
[0.x.20217] 
[0.x.20218] 
[0.x.20219] 
[0.x.20220] 
[0.x.20221] 
[0.x.20222] 
[0.x.20223] 
[0.x.20224] 
[0.x.20225] 
[0.x.20226] 
//
// [2.x.2693] 
//
// 与[2.x.2694]中的相应函数相比，这里的函数要复杂一点。有两个原因：第一个原因是，我们不只是想输出解决方案，还想输出每个单元的处理器（即它在哪个 "子域"）。其次，正如在[2.x.2695]和[2.x.2696]中详细讨论的那样，生成图形数据可能是并行化的一个瓶颈。在[2.x.2697]中，我们将这一步骤从实际计算中移出，而是将其转移到一个单独的程序中，随后将各个处理器的输出合并到一个文件中。但这并不具规模：如果处理器的数量很大，这可能意味着在单个处理器上合并数据的步骤后来成为程序中运行时间最长的部分，或者它可能产生一个大到无法再可视化的文件。我们在这里遵循一个更合理的方法，即为每个MPI进程创建单独的文件，并将其留给可视化程序来理解。
//
// 首先，函数的顶部看起来和平时一样。除了附加解决方案向量（包含所有本地相关元素的条目，而不仅仅是本地拥有的元素）外，我们还附加一个数据向量，为每个单元存储该单元所属的子域。这稍微有点棘手，因为当然不是每个处理器都知道每个单元。因此，我们附加的向量有一个当前处理器在其网格中拥有的每个单元的条目（本地拥有的单元、幽灵单元和人造单元），但DataOut类将忽略所有对应于不属于当前处理器的单元的条目。因此，我们在这些向量条目中写入什么值实际上并不重要：我们只需用当前MPI进程的编号（即当前进程的子域_id）来填充整个向量；这就正确地设置了我们关心的值，即对应于本地拥有的单元的条目，而为所有其他元素提供了错误的值--但无论如何这些都会被忽略。
//
[0.x.20227] 
[0.x.20228] 
[0.x.20229] 
[0.x.20230] 
[0.x.20231] 
[0.x.20232] 
//
[0.x.20233] 
[0.x.20234] 
[0.x.20235] 
[0.x.20236] 
//
[0.x.20237] 
//
// 下一步是把这些数据写到磁盘上。在MPI-IO的帮助下，我们最多可以并行写入8个VTU文件。此外，还产生了一个PVTU记录，它将写入的VTU文件分组。
//
[0.x.20238] 
[0.x.20239] 
[0.x.20240] 
//
// [2.x.2698] 
//
// 控制程序整体行为的函数又和 [2.x.2699] 中的一样。小的区别是使用[2.x.2700]来输出到控制台（也见[2.x.2701]），而且我们只在最多涉及32个处理器的情况下产生图形输出。如果没有这个限制，人们很容易在没有阅读这个程序的情况下粗心大意地运行这个程序，从而导致集群互连中断，并填满任何可用的文件系统 :-)
//
// 与[2.x.2702]的一个功能上的区别是使用了一个正方形域，并且我们从一个稍细的网格开始（5个全局细化周期）--在4个单元上开始显示一个大规模的%并行程序没有什么意义（尽管承认在1024单元上开始显示的意义只是稍强）。
//
[0.x.20241] 
[0.x.20242] 
[0.x.20243] 
[0.x.20244] 
[0.x.20245] 
[0.x.20246] 
[0.x.20247] 
[0.x.20248] 
[0.x.20249] 
[0.x.20250] 
[0.x.20251] 
//
[0.x.20252] 
[0.x.20253] 
[0.x.20254] 
[0.x.20255] 
//
[0.x.20256] 
[0.x.20257] 
[0.x.20258] 
[0.x.20259] 
[0.x.20260] 
[0.x.20261] 
[0.x.20262] 
//
[0.x.20263] 
//
[0.x.20264] 
[0.x.20265] 
[0.x.20266] 
[0.x.20267] 
//
[0.x.20268] 
[0.x.20269] 
//
[0.x.20270] 
[0.x.20271] 
[0.x.20272] 
[0.x.20273] 
[0.x.20274] 
//
[0.x.20275] 
[0.x.20276] 
//
[0.x.20277] 
[0.x.20278] 
[0.x.20279] 
[0.x.20280] 
//
// [2.x.2703] 
//
// 最后一个函数， [2.x.2704] ，同样具有与所有其他程序相同的结构，特别是 [2.x.2705] 。像其他使用MPI的程序一样，我们必须初始化和最终确定MPI，这是用辅助对象 [2.x.2706] 完成的。该类的构造函数也初始化了依赖MPI的库，如p4est、PETSc、SLEPc和Zoltan（尽管最后两个在本教程中没有使用）。这里的顺序很重要：在这些库被初始化之前，我们不能使用它们，所以在创建 [2.x.2707] 的实例之前做任何事情都没有意义。
//
// 在求解器完成后，LaplaceProblem解构器将运行，然后是[2.x.2708] 这个顺序也很重要：[2.x.2709]调用[2.x.2710]（以及其他库的最终确定函数），这将删除任何正在使用的PETSc对象。这必须在我们解构拉普拉斯求解器之后进行，以避免双重删除错误。幸运的是，由于C++的析构器调用顺序规则，我们不需要担心这些：一切都以正确的顺序发生（即，与构造顺序相反）。由[2.x.2711]调用的最后一个函数是[2.x.2712]：也就是说，一旦这个对象被析构，程序应该退出，因为MPI将不再可用。
//
[0.x.20281] 
[0.x.20282] 
[0.x.20283] 
[0.x.20284] 
[0.x.20285] 
[0.x.20286] 
//
[0.x.20287] 
//
[0.x.20288] 
[0.x.20289] 
[0.x.20290] 
[0.x.20291] 
[0.x.20292] 
[0.x.20293] 
[0.x.20294] 
[0.x.20295] 
[0.x.20296] 
[0.x.20297] 
[0.x.20298] 
[0.x.20299] 
[0.x.20300] 
[0.x.20301] 
//
[0.x.20302] 
[0.x.20303] 
[0.x.20304] 
[0.x.20305] 
[0.x.20306] 
[0.x.20307] 
[0.x.20308] 
[0.x.20309] 
[0.x.20310] 
[0.x.20311] 
[0.x.20312] 
[0.x.20313] 
[0.x.20314] 
[0.x.20315] 
//
[0.x.20316] 
[0.x.20317] 
[0.x.20318] 
[0.x.20319] 
[0.x.20320] 
[0.x.20321] 
[0.x.20322] 
[0.x.20323] 
[0.x.20324] 
[0.x.20325] 
[0.x.20326] 
[0.x.20327] 
[0.x.20328] 
[0.x.20329] 
[0.x.20330] 
[0.x.20331] 
//
[0.x.20332] 
[0.x.20333] 
[0.x.20334] 
[0.x.20335] 
[0.x.20336] 
//[2.x.2713] 
//
// 像往常一样，在开始的时候，我们把所有我们需要的头文件都包含在这里。除了为Trilinos库提供接口的各种文件外，没有什么意外。
//
[0.x.20337] 
[0.x.20338] 
[0.x.20339] 
//
[0.x.20340] 
[0.x.20341] 
[0.x.20342] 
[0.x.20343] 
[0.x.20344] 
[0.x.20345] 
[0.x.20346] 
[0.x.20347] 
//
[0.x.20348] 
[0.x.20349] 
//
[0.x.20350] 
[0.x.20351] 
//
[0.x.20352] 
[0.x.20353] 
//
[0.x.20354] 
[0.x.20355] 
//
[0.x.20356] 
[0.x.20357] 
//
[0.x.20358] 
[0.x.20359] 
[0.x.20360] 
//[2.x.2714] 
//
// 该类提供了描述障碍问题所需的所有函数和变量。它与我们在[2.x.2715]中要做的事情很接近，所以相对简单。唯一真正的新组件是计算主动集合的update_solution_and_constraints函数和一些描述线性系统原始（无约束）形式所需的变量（[2.x.2716]和[2.x.2717]），以及主动集合本身和主动集合公式中用于缩放拉格朗日乘数的质量矩阵[2.x.2718]的对角线。其余的内容与[2.x.2719]相同。
//
[0.x.20361] 
[0.x.20362] 
[0.x.20363] 
[0.x.20364] 
[0.x.20365] 
[0.x.20366] 
//
[0.x.20367] 
[0.x.20368] 
[0.x.20369] 
[0.x.20370] 
[0.x.20371] 
[0.x.20372] 
[0.x.20373] 
[0.x.20374] 
[0.x.20375] 
//
[0.x.20376] 
[0.x.20377] 
[0.x.20378] 
[0.x.20379] 
[0.x.20380] 
//
[0.x.20381] 
[0.x.20382] 
//
[0.x.20383] 
[0.x.20384] 
[0.x.20385] 
[0.x.20386] 
[0.x.20387] 
[0.x.20388] 
//[2.x.2720] 
//
// 在下文中，我们定义了描述右侧函数、Dirichlet边界值以及作为[2.x.2721]函数的障碍物高度的类。在这三种情况下，我们都从函数[2.x.2722]派生出这些类，尽管在[2.x.2723]和[2.x.2724]的情况下，这更多的是出于惯例而非必要，因为我们从未将此类对象传递给库。在任何情况下，鉴于我们选择了[2.x.2725] , [2.x.2726] ...，右手和边界值类的定义是显而易见的。
//
[0.x.20389] 
[0.x.20390] 
[0.x.20391] 
[0.x.20392] 
[0.x.20393] 
[0.x.20394] 
[0.x.20395] 
[0.x.20396] 
[0.x.20397] 
//
[0.x.20398] 
[0.x.20399] 
[0.x.20400] 
//
[0.x.20401] 
[0.x.20402] 
[0.x.20403] 
[0.x.20404] 
[0.x.20405] 
[0.x.20406] 
[0.x.20407] 
[0.x.20408] 
[0.x.20409] 
//
[0.x.20410] 
[0.x.20411] 
[0.x.20412] 
//
// 我们用一个级联的障碍物来描述障碍物的功能（想想看：楼梯的阶梯）。
//
[0.x.20413] 
[0.x.20414] 
[0.x.20415] 
[0.x.20416] 
[0.x.20417] 
[0.x.20418] 
[0.x.20419] 
[0.x.20420] 
[0.x.20421] 
//
[0.x.20422] 
[0.x.20423] 
[0.x.20424] 
[0.x.20425] 
[0.x.20426] 
[0.x.20427] 
[0.x.20428] 
[0.x.20429] 
[0.x.20430] 
[0.x.20431] 
//
// [2.x.2727] 
//[2.x.2728] 
//
// 对每个看过前几个教程程序的人来说，构造函数是完全显而易见的。
//
[0.x.20432] 
[0.x.20433] 
[0.x.20434] 
[0.x.20435] 
[0.x.20436] 
//[2.x.2729] 
//
// 我们在二维的正方形[2.x.2730]上解决我们的障碍物问题。因此这个函数只是设置了一个最简单的网格。
//
[0.x.20437] 
[0.x.20438] 
[0.x.20439] 
[0.x.20440] 
[0.x.20441] 
//
[0.x.20442] 
[0.x.20443] 
[0.x.20444] 
[0.x.20445] 
[0.x.20446] 
//[2.x.2731] 
//
// 在这个值得注意的第一个函数中，我们设置了自由度处理程序，调整了向量和矩阵的大小，并处理了约束。最初，约束条件当然只是由边界值给出的，所以我们在函数的顶部对它们进行插值。
//
[0.x.20447] 
[0.x.20448] 
[0.x.20449] 
[0.x.20450] 
[0.x.20451] 
//
[0.x.20452] 
[0.x.20453] 
[0.x.20454] 
//
[0.x.20455] 
[0.x.20456] 
[0.x.20457] 
[0.x.20458] 
[0.x.20459] 
//
[0.x.20460] 
[0.x.20461] 
//
[0.x.20462] 
[0.x.20463] 
//
[0.x.20464] 
[0.x.20465] 
[0.x.20466] 
[0.x.20467] 
[0.x.20468] 
//
// 这里唯一要做的事情是计算[2.x.2732]矩阵中的因子，该矩阵用于缩放残差。正如在介绍中所讨论的，我们将使用一个小技巧来使这个质量矩阵成为对角线，在下文中，首先将所有这些计算成一个矩阵，然后提取对角线元素供以后使用。
//
[0.x.20469] 
[0.x.20470] 
[0.x.20471] 
[0.x.20472] 
[0.x.20473] 
[0.x.20474] 
[0.x.20475] 
//[2.x.2733] 
//
// 这个函数一次就把系统矩阵和右手边集合起来，并把约束条件（由于活动集以及来自边界值）应用到我们的系统中。否则，它在功能上等同于例如 [2.x.2734] 中的相应函数。
//
[0.x.20476] 
[0.x.20477] 
[0.x.20478] 
[0.x.20479] 
//
[0.x.20480] 
[0.x.20481] 
//
[0.x.20482] 
[0.x.20483] 
//
[0.x.20484] 
[0.x.20485] 
[0.x.20486] 
[0.x.20487] 
//
[0.x.20488] 
[0.x.20489] 
//
[0.x.20490] 
[0.x.20491] 
//
[0.x.20492] 
//
[0.x.20493] 
[0.x.20494] 
[0.x.20495] 
[0.x.20496] 
[0.x.20497] 
//
[0.x.20498] 
[0.x.20499] 
[0.x.20500] 
[0.x.20501] 
[0.x.20502] 
[0.x.20503] 
[0.x.20504] 
//
[0.x.20505] 
[0.x.20506] 
[0.x.20507] 
[0.x.20508] 
[0.x.20509] 
//
[0.x.20510] 
//
[0.x.20511] 
[0.x.20512] 
[0.x.20513] 
[0.x.20514] 
[0.x.20515] 
[0.x.20516] 
[0.x.20517] 
[0.x.20518] 
//
// [2.x.2735] 
//
// 下一个函数用于计算对角线质量矩阵[2.x.2736]，用于在主动集方法中缩放变量。正如介绍中所讨论的，我们通过选择正交的梯形规则来获得质量矩阵的对角线。这样一来，我们就不再需要在正交点、指数[2.x.2737]和指数[2.x.2738]上进行三重循环，而是可以直接使用双重循环。考虑到我们在以前的许多教程程序中讨论过的内容，该函数的其余部分是显而易见的。
//
// 注意在调用这个函数的时候，约束对象只包含边界值约束；因此我们在最后的复制-本地-全局步骤中不必注意保留矩阵项的值，这些项以后可能会受到活动集的约束。
//
// 还需要注意的是，只有在我们拥有[2.x.2739]元素的情况下，使用梯形规则的技巧才有效。对于更高阶的元素，我们需要使用一个正交公式，在有限元的所有支持点都有正交点。构建这样一个正交公式其实并不难，但不是这里的重点，所以我们只是在函数的顶部断言我们对有限元的隐含假设实际上得到了满足。
//
[0.x.20519] 
[0.x.20520] 
[0.x.20521] 
[0.x.20522] 
[0.x.20523] 
//
[0.x.20524] 
[0.x.20525] 
[0.x.20526] 
[0.x.20527] 
//
[0.x.20528] 
[0.x.20529] 
//
[0.x.20530] 
[0.x.20531] 
//
 
[0.x.20533] 
[0.x.20534] 
[0.x.20535] 
//
[0.x.20536] 
[0.x.20537] 
[0.x.20538] 
[0.x.20539] 
[0.x.20540] 
//
[0.x.20541] 
//
[0.x.20542] 
[0.x.20543] 
[0.x.20544] 
[0.x.20545] 
[0.x.20546] 
//[2.x.2740] 
//
// 在某种意义上，这是本程序的核心功能。 它更新了介绍中所讨论的受限自由度的活动集，并从中计算出一个AffineConstraints对象，然后可以用来在下一次迭代的解中消除受限自由度。同时，我们将解决方案的受限自由度设置为正确的值，即障碍物的高度。
//
// 从根本上说，这个函数是相当简单的。我们必须在所有自由度上循环，并检查函数[2.x.2741]的符号，因为在我们的例子中[2.x.2742] 。为此，我们使用介绍中给出的公式，通过该公式我们可以计算出拉格朗日乘数，作为原始线性系统的残差（通过变量[2.x.2743]给出。在这个函数的顶部，我们使用一个属于矩阵类的函数来计算这个残差。
//
[0.x.20547] 
[0.x.20548] 
[0.x.20549] 
[0.x.20550] 
//
[0.x.20551] 
//
[0.x.20552] 
[0.x.20553] 
[0.x.20554] 
//
// 计算 contact_force[i] =
//
// - lambda[i] * diagonal_of_mass_matrix[i]。
//
[0.x.20555] 
[0.x.20556] 
[0.x.20557] 
//
// 下一步是重置活动集和约束对象，并在所有自由度上开始循环。由于我们不能只是在解向量的所有元素上循环，所以这变得稍微复杂了一些，因为我们没有办法找出一个自由度与哪个位置相关；但是，我们需要这个位置来测试一个自由度的位移是大于还是小于这个位置的障碍物高度。
//
// 我们通过在所有单元和定义在每个单元上的DoF上循环来解决这个问题。我们在这里使用一个[2.x.2744]函数来描述位移，对于该函数，自由度总是位于单元格的顶点上；因此，我们可以通过询问顶点来获得每个自由度的索引及其位置。另一方面，这显然对高阶元素不起作用，因此我们添加了一个断言，确保我们只处理所有自由度都位于顶点的元素，以避免万一有人想玩增加解的多项式程度时用非功能性代码绊倒自己。
//
// 循环单元格而不是自由度的代价是我们可能会多次遇到一些自由度，即每次我们访问与给定顶点相邻的一个单元格时。因此，我们必须跟踪我们已经接触过的顶点和尚未接触的顶点。我们通过使用一个标志数组来做到这一点 [2.x.2745] 。
//
[0.x.20558] 
[0.x.20559] 
//
[0.x.20560] 
[0.x.20561] 
//
[0.x.20562] 
[0.x.20563] 
[0.x.20564] 
[0.x.20565] 
[0.x.20566] 
//
[0.x.20567] 
//
[0.x.20568] 
[0.x.20569] 
[0.x.20570] 
[0.x.20571] 
//
// 现在我们知道我们还没有触及这个DoF，让我们得到那里的位移函数的值以及障碍函数的值，并使用这个来决定当前DoF是否属于活动集。为此，我们使用上面和介绍中给出的函数。
//
// 如果我们决定该DoF应该是活动集的一部分，我们将其索引添加到活动集中，在AffineConstraints对象中引入一个不均匀的平等约束，并将解的值重置为障碍物的高度。最后，系统的非接触部分的残差作为一个额外的控制（残差等于剩余的、未计算的力，在接触区之外应该为零），所以我们把残差向量的分量（即拉格朗日乘数lambda）清零，这些分量对应于身体接触的区域；在所有单元的循环结束时，残差将因此只包括非接触区的残差。我们在循环结束后输出这个残差的准则和活动集的大小。
//
[0.x.20572] 
[0.x.20573] 
//
[0.x.20574] 
[0.x.20575] 
[0.x.20576] 
[0.x.20577] 
[0.x.20578] 
[0.x.20579] 
[0.x.20580] 
[0.x.20581] 
//
[0.x.20582] 
//
[0.x.20583] 
[0.x.20584] 
[0.x.20585] 
[0.x.20586] 
[0.x.20587] 
//
[0.x.20588] 
[0.x.20589] 
//
// 在最后一步中，我们将迄今为止从活动集合中得到的对DoF的约束加入到那些由Dirichlet边界值产生的约束中，并关闭约束对象。
//
[0.x.20590] 
[0.x.20591] 
[0.x.20592] 
[0.x.20593] 
[0.x.20594] 
[0.x.20595] 
//[2.x.2746] 

// 关于求解函数，其实没有什么可说的。在牛顿方法的背景下，我们通常对非常高的精度不感兴趣（为什么要求一个高度精确的线性问题的解，而我们知道它只能给我们一个非线性问题的近似解），所以我们使用ReductionControl类，当达到一个绝对公差（为此我们选择[2.x.2747]）或者当残差减少一定的系数（这里是[2.x.2748]）时停止反复运算。
//
[0.x.20596] 
[0.x.20597] 
[0.x.20598] 
[0.x.20599] 
//
[0.x.20600] 
[0.x.20601] 
[0.x.20602] 
[0.x.20603] 
//
[0.x.20604] 
[0.x.20605] 
//
[0.x.20606] 
[0.x.20607] 
[0.x.20608] 
[0.x.20609] 
[0.x.20610] 
//[2.x.2749] 
//
// 我们使用vtk-format进行输出。 该文件包含位移和活动集的数字表示。
//
[0.x.20611] 
[0.x.20612] 
[0.x.20613] 
[0.x.20614] 
//
[0.x.20615] 
[0.x.20616] 
[0.x.20617] 
[0.x.20618] 
//
[0.x.20619] 
//
[0.x.20620] 
[0.x.20621] 
[0.x.20622] 
[0.x.20623] 
//
[0.x.20624] 
//
[0.x.20625] 
[0.x.20626] 
[0.x.20627] 
[0.x.20628] 
//
// [2.x.2750] 
//
// 这是一个对所有事情都有最高级别控制的函数。 它并不长，而且事实上相当直接：在主动集方法的每一次迭代中，我们都要组装线性系统，求解它，更新主动集并将解投射回可行集，然后输出结果。只要主动集在前一次迭代中没有变化，迭代就会终止。
//
// 唯一比较棘手的部分是，我们必须在第一次迭代组装好线性系统（即矩阵和右手边）后保存它。原因是这是唯一一个我们可以在没有任何接触约束的情况下访问线性系统的步骤。我们需要这个来计算其他迭代中解决方案的残差，但是在其他迭代中，我们形成的线性系统中对应于约束自由度的行和列都被消除了，因此我们不能再访问原始方程的全部残差。
//
[0.x.20629] 
[0.x.20630] 
[0.x.20631] 
[0.x.20632] 
[0.x.20633] 
//
[0.x.20634] 
[0.x.20635] 
[0.x.20636] 
[0.x.20637] 
//
[0.x.20638] 
//
[0.x.20639] 
[0.x.20640] 
[0.x.20641] 
[0.x.20642] 
[0.x.20643] 
//
[0.x.20644] 
[0.x.20645] 
[0.x.20646] 
//
[0.x.20647] 
[0.x.20648] 
//
[0.x.20649] 
//
[0.x.20650] 
[0.x.20651] 
[0.x.20652] 
[0.x.20653] 
//[2.x.2751] 
//
// 这就是主函数。它遵循所有其他主函数的模式。调用初始化MPI是因为我们在这个程序中建立线性求解器的Trilinos库需要它。
//
[0.x.20654] 
[0.x.20655] 
[0.x.20656] 
[0.x.20657] 
[0.x.20658] 
[0.x.20659] 
//
[0.x.20660] 
[0.x.20661] 
//
// 这个程序只能在串行中运行。否则，将抛出一个异常。
//
[0.x.20662] 
[0.x.20663] 
[0.x.20664] 
//
[0.x.20665] 
[0.x.20666] 
[0.x.20667] 
[0.x.20668] 
[0.x.20669] 
[0.x.20670] 
[0.x.20671] 
[0.x.20672] 
[0.x.20673] 
[0.x.20674] 
[0.x.20675] 
[0.x.20676] 
[0.x.20677] 
[0.x.20678] 
//
[0.x.20679] 
[0.x.20680] 
[0.x.20681] 
[0.x.20682] 
[0.x.20683] 
[0.x.20684] 
[0.x.20685] 
[0.x.20686] 
[0.x.20687] 
[0.x.20688] 
[0.x.20689] 
[0.x.20690] 
[0.x.20691] 
[0.x.20692] 
//
[0.x.20693] 
[0.x.20694] 
[0.x.20695] 
[0.x.20696] 
[0.x.20697] 
[0.x.20698] 
[0.x.20699] 
[0.x.20700] 
[0.x.20701] 
[0.x.20702] 
[0.x.20703] 
[0.x.20704] 
[0.x.20705] 
[0.x.20706] 
[0.x.20707] 
[0.x.20708] 
//
[0.x.20709] 
[0.x.20710] 
[0.x.20711] 
[0.x.20712] 
[0.x.20713] 
[0.x.20714] 
//[2.x.2752] 这组包含文件在这个时候已经没有什么惊喜了。
//
[0.x.20715] 
[0.x.20716] 
[0.x.20717] 
[0.x.20718] 
[0.x.20719] 
[0.x.20720] 
[0.x.20721] 
//
[0.x.20722] 
[0.x.20723] 
[0.x.20724] 
[0.x.20725] 
[0.x.20726] 
[0.x.20727] 
[0.x.20728] 
[0.x.20729] 
[0.x.20730] 
[0.x.20731] 
[0.x.20732] 
[0.x.20733] 
[0.x.20734] 
[0.x.20735] 
//
[0.x.20736] 
[0.x.20737] 
[0.x.20738] 
[0.x.20739] 
//
[0.x.20740] 
[0.x.20741] 
[0.x.20742] 
//
[0.x.20743] 
[0.x.20744] 
[0.x.20745] 
//
[0.x.20746] 
[0.x.20747] 
[0.x.20748] 
//
[0.x.20749] 
[0.x.20750] 
[0.x.20751] 
[0.x.20752] 
[0.x.20753] 
//
[0.x.20754] 
[0.x.20755] 
//
// 最后，我们包括两个系统头文件，让我们为输出文件创建一个目录。第一个头文件提供了[2.x.2753]的功能，第二个头文件让我们确定在[2.x.2754]失败时发生了什么。
//
[0.x.20756] 
[0.x.20757] 
//
[0.x.20758] 
[0.x.20759] 
[0.x.20760] 
//[2.x.2755] 
//
// 该类提供了一个构成法的接口，即应变 [2.x.2756] 和应力 [2.x.2757] 之间的关系。在这个例子中，我们使用的是具有线性、各向同性硬化的弹塑性材料行为。这种材料的特点是杨氏模量 [2.x.2758] ，泊松比 [2.x.2759] ，初始屈服应力 [2.x.2760] 和各向同性硬化参数 [2.x.2761] 。 对于[2.x.2762]，我们得到完美的弹塑性行为。
//
// 正如描述这个程序的论文所解释的那样，第一个牛顿步骤是用一个完全弹性材料模型来解决的，以避免同时处理两种非线性（塑性和接触）。为此，这个类有一个函数[2.x.2763]，我们在后面使用这个函数，简单地将[2.x.2764]设置为一个非常大的值--基本上保证了实际应力不会超过它，从而产生一个弹性材料。当我们准备使用塑性模型时，我们使用相同的函数将[2.x.2765]设置回其适当的值。 由于这种方法，我们需要将[2.x.2766]作为这个类的唯一非静态成员变量。
//
[0.x.20761] 
[0.x.20762] 
[0.x.20763] 
[0.x.20764] 
[0.x.20765] 
[0.x.20766] 
[0.x.20767] 
[0.x.20768] 
//
[0.x.20769] 
//
[0.x.20770] 
[0.x.20771] 
[0.x.20772] 
//
[0.x.20773] 
[0.x.20774] 
[0.x.20775] 
[0.x.20776] 
//
[0.x.20777] 
[0.x.20778] 
[0.x.20779] 
[0.x.20780] 
[0.x.20781] 
//
[0.x.20782] 
[0.x.20783] 
[0.x.20784] 
//
// ConstitutiveLaw类的构造函数为我们的可变形体设置所需的材料参数。弹性各向同性介质的材料参数可以用多种方式定义，如一对[2.x.2767]（弹性模量和泊松数），使用Lam&eacute;参数[2.x.2768]或其他几种常用的约定。在这里，构造器采用[2.x.2769]形式的材料参数描述，但由于这证明这些不是出现在塑性投影仪方程中的系数，我们立即将它们转换为更合适的体模和剪模集合[2.x.2770]。 此外，构造器以[2.x.2771]（无任何塑性应变的屈服应力）和[2.x.2772]（硬化参数）作为参数。在这个构造函数中，我们还计算了应力-应变关系的两个主成分及其线性化。
//
[0.x.20785] 
[0.x.20786] 
[0.x.20787] 
[0.x.20788] 
[0.x.20789] 
[0.x.20790] 
[0.x.20791] 
[0.x.20792] 
[0.x.20793] 
[0.x.20794] 
[0.x.20795] 
[0.x.20796] 
[0.x.20797] 
[0.x.20798] 
[0.x.20799] 
[0.x.20800] 
[0.x.20801] 
[0.x.20802] 
//
[0.x.20803] 
[0.x.20804] 
[0.x.20805] 
[0.x.20806] 
[0.x.20807] 
//[2.x.2773] 
//
// 这是构成法则的主成分。它计算的是四阶对称张量，根据上面给出的投影，当在一个特定的应变点上评估时，该张量将应变与应力联系起来。我们需要这个函数来计算[2.x.2774]中的非线性残差，我们将这个张量与正交点的应变相乘。计算遵循介绍中列出的公式。在比较那里的公式和下面的实现时，记得[2.x.2775]和[2.x.2776] 。
//
// 该函数返回正交点是否是塑性的，以便在下游对有多少正交点是塑性的，有多少是弹性的进行一些统计。
//
[0.x.20808] 
[0.x.20809] 
[0.x.20810] 
[0.x.20811] 
[0.x.20812] 
[0.x.20813] 
//
[0.x.20814] 
[0.x.20815] 
[0.x.20816] 
//
[0.x.20817] 
[0.x.20818] 
[0.x.20819] 
//
[0.x.20820] 
[0.x.20821] 
[0.x.20822] 
[0.x.20823] 
[0.x.20824] 
[0.x.20825] 
//
[0.x.20826] 
//
[0.x.20827] 
[0.x.20828] 
//[2.x.2777] 
//
// 该函数返回线性化的应力应变张量，围绕前一个牛顿步骤[2.x.2778]的解进行线性化 [2.x.2779] 。 参数[2.x.2780]（通常表示为[2.x.2781]）必须作为参数传递，并作为线性化点。该函数在变量stress_strain_tensor中返回非线性构成法的导数，在stress_strain_tensor_linearized中返回线性化问题的应力-应变张量。 参见[2.x.2782]，其中使用了这个函数。
//
[0.x.20829] 
[0.x.20830] 
[0.x.20831] 
[0.x.20832] 
[0.x.20833] 
[0.x.20834] 
[0.x.20835] 
//
[0.x.20836] 
[0.x.20837] 
[0.x.20838] 
//
[0.x.20839] 
[0.x.20840] 
//
[0.x.20841] 
[0.x.20842] 
//
[0.x.20843] 
[0.x.20844] 
[0.x.20845] 
[0.x.20846] 
[0.x.20847] 
[0.x.20848] 
[0.x.20849] 
[0.x.20850] 
[0.x.20851] 
[0.x.20852] 
//
[0.x.20853] 
[0.x.20854] 
[0.x.20855] 
//[1.x.88]
//
// 下面的内容应该是比较标准的。我们需要边界强迫项（我们在此选择为零）和不属于接触面的边界部分的边界值（在此也选择为零）的类。
//
[0.x.20856] 
[0.x.20857] 
[0.x.20858] 
[0.x.20859] 
[0.x.20860] 
[0.x.20861] 
[0.x.20862] 
//
[0.x.20863] 
[0.x.20864] 
//
[0.x.20865] 
[0.x.20866] 
[0.x.20867] 
//
[0.x.20868] 
[0.x.20869] 
[0.x.20870] 
[0.x.20871] 
//
[0.x.20872] 
[0.x.20873] 
[0.x.20874] 
[0.x.20875] 
[0.x.20876] 
[0.x.20877] 
//
[0.x.20878] 
[0.x.20879] 
[0.x.20880] 
[0.x.20881] 
[0.x.20882] 
[0.x.20883] 
[0.x.20884] 
//
[0.x.20885] 
[0.x.20886] 
[0.x.20887] 
[0.x.20888] 
[0.x.20889] 
//
[0.x.20890] 
[0.x.20891] 
[0.x.20892] 
//
[0.x.20893] 
[0.x.20894] 
[0.x.20895] 
[0.x.20896] 
//
[0.x.20897] 
[0.x.20898] 
[0.x.20899] 
[0.x.20900] 
[0.x.20901] 
[0.x.20902] 
//
// [2.x.2783] 
//
// 下面这个类是可以从输入文件中选择的两个障碍物中的第一个。它描述了一个以位置[2.x.2784]和半径[2.x.2785]为中心的球体，其中[2.x.2786]是可变形体的（平）表面的垂直位置。该函数的[2.x.2787]返回给定[2.x.2788]值的障碍物位置，如果该点实际位于球体下方，则返回一个不可能干扰变形的大正值，如果它位于球体的 "阴影 "之外。
//
[0.x.20903] 
[0.x.20904] 
[0.x.20905] 
[0.x.20906] 
[0.x.20907] 
//
[0.x.20908] 
[0.x.20909] 
//
[0.x.20910] 
[0.x.20911] 
//
[0.x.20912] 
[0.x.20913] 
[0.x.20914] 
//
[0.x.20915] 
[0.x.20916] 
[0.x.20917] 
[0.x.20918] 
[0.x.20919] 
//
[0.x.20920] 
[0.x.20921] 
[0.x.20922] 
[0.x.20923] 
[0.x.20924] 
[0.x.20925] 
[0.x.20926] 
[0.x.20927] 
[0.x.20928] 
[0.x.20929] 
[0.x.20930] 
[0.x.20931] 
[0.x.20932] 
[0.x.20933] 
[0.x.20934] 
[0.x.20935] 
[0.x.20936] 
//
[0.x.20937] 
[0.x.20938] 
//
// 前面的断言
//
[0.x.20939] 
//
[0.x.20940] 
[0.x.20941] 
[0.x.20942] 
[0.x.20943] 
[0.x.20944] 
[0.x.20945] 
[0.x.20946] 
//[2.x.2789] 
//
// 下面两个类描述了介绍中概述的障碍物，即汉字。两个中的第一个，[2.x.2790]负责从一个以pbm ascii格式存储的图片文件中读入数据。这个数据将被双线性插值，从而提供一个描述障碍物的函数。(下面的代码显示了如何通过在给定的数据点之间进行内插来构造一个函数。人们可以使用在这个教程程序写完后引入的[2.x.2791]，它正是我们在这里想要的，但看看如何手工操作是有启发的）。)
//
// 我们从文件中读取的数据将被存储在一个名为 obstacle_data 的双[2.x.2792]中。 这个向量构成了计算单片双线性函数的基础，作为一个多项式插值。我们将从文件中读取的数据由零（白色）和一（黑色）组成。
//
// [2.x.2793]变量表示[2.x.2794]和[2.x.2795]方向的像素之间的间距。 [2.x.2796]是这些方向上的像素的数量。  [2.x.2797]返回图像在给定位置的值，由相邻像素值插值而成。
//
[0.x.20947] 
[0.x.20948] 
[0.x.20949] 
[0.x.20950] 
[0.x.20951] 
//
[0.x.20952] 
//
[0.x.20953] 
[0.x.20954] 
[0.x.20955] 
[0.x.20956] 
//
[0.x.20957] 
[0.x.20958] 
//
// 该类的构造函数从给定的文件名中读入描述障碍物的数据。
//
[0.x.20959] 
[0.x.20960] 
[0.x.20961] 
[0.x.20962] 
[0.x.20963] 
[0.x.20964] 
[0.x.20965] 
[0.x.20966] 
[0.x.20967] 
[0.x.20968] 
[0.x.20969] 
[0.x.20970] 
//
[0.x.20971] 
[0.x.20972] 
//
[0.x.20973] 
//
[0.x.20974] 
[0.x.20975] 
[0.x.20976] 
[0.x.20977] 
[0.x.20978] 
[0.x.20979] 
//
[0.x.20980] 
[0.x.20981] 
//
[0.x.20982] 
[0.x.20983] 
[0.x.20984] 
[0.x.20985] 
[0.x.20986] 
//
// 下面两个函数返回坐标为[2.x.2798]的给定像素的值，我们将其与定义在位置[2.x.2799]的函数值和任意坐标[2.x.2800]的函数值相识别，在这里我们对两个函数中第一个函数返回的点值进行双线性内插。在第二个函数中，对于每个[2.x.2801]，我们首先计算离[2.x.2802]左下方最近的像素坐标的（整数）位置，然后计算这个像素内的坐标[2.x.2803]。我们从下方和上方截断这两种变量，以避免在评估函数时超出其定义的范围而可能发生的舍入误差问题。
//
[0.x.20987] 
[0.x.20988] 
[0.x.20989] 
[0.x.20990] 
[0.x.20991] 
[0.x.20992] 
[0.x.20993] 
//
[0.x.20994] 
[0.x.20995] 
[0.x.20996] 
[0.x.20997] 
[0.x.20998] 
//
[0.x.20999] 
[0.x.21000] 
//
[0.x.21001] 
[0.x.21002] 
[0.x.21003] 
[0.x.21004] 
[0.x.21005] 
//
// 最后，这是一个实际使用上面的类的类。它有一个BitmapFile对象作为成员，描述障碍物的高度。如上所述，BitmapFile类将为我们提供一个掩码，即要么是0，要么是1的值（如果你要求的是像素之间的位置，则是在0和1之间插值的值）。这个类将其转化为高度，即低于可变形体表面的0.001（如果BitmapFile类在此位置报告为1）或高于障碍物的0.999（如果BitmapFile类报告为0）。那么下面的函数应该是不言自明的。
//
[0.x.21006] 
[0.x.21007] 
[0.x.21008] 
[0.x.21009] 
[0.x.21010] 
//
[0.x.21011] 
[0.x.21012] 
//
[0.x.21013] 
[0.x.21014] 
//
[0.x.21015] 
[0.x.21016] 
[0.x.21017] 
[0.x.21018] 
//
[0.x.21019] 
[0.x.21020] 
[0.x.21021] 
[0.x.21022] 
[0.x.21023] 
[0.x.21024] 
[0.x.21025] 
//
[0.x.21026] 
[0.x.21027] 
[0.x.21028] 
[0.x.21029] 
[0.x.21030] 
[0.x.21031] 
[0.x.21032] 
[0.x.21033] 
[0.x.21034] 
[0.x.21035] 
[0.x.21036] 
[0.x.21037] 
[0.x.21038] 
//
[0.x.21039] 
[0.x.21040] 
//
// 前面的断言
//
[0.x.21041] 
//
[0.x.21042] 
[0.x.21043] 
[0.x.21044] 
[0.x.21045] 
[0.x.21046] 
[0.x.21047] 
[0.x.21048] 
[0.x.21049] 
//[2.x.2804] 
//
// 这是本程序的主类，提供了描述非线性接触问题所需的所有函数和变量。它接近于[2.x.2805]，但有一些额外的功能，如处理悬挂节点，牛顿方法，使用Trilinos和p4est进行并行分布式计算。处理悬空节点使生活变得有点复杂，因为我们现在需要另一个AffineConstraints对象。我们为接触情况下的主动集合方法创建一个牛顿方法，并处理构成法的非线性算子。
//
// 这个类的总体布局与其他大多数教程程序非常相似。为了使我们的生活更容易一些，这个类从输入文件中读取一组输入参数。这些参数，使用ParameterHandler类，在[2.x.2806]函数中声明（该函数是静态的，因此它可以在我们创建当前类型的对象之前被调用），然后一个已经用于读取输入文件的ParameterHandler对象将被传递给该类的构造函数。
//
// 其余的成员函数大体上与我们在其他几个教程程序中看到的一样，虽然为当前的非线性系统增加了一些内容。我们将在下文中对它们的用途进行评论。
//
[0.x.21050] 
[0.x.21051] 
[0.x.21052] 
[0.x.21053] 
[0.x.21054] 
//
[0.x.21055] 
//
[0.x.21056] 
//
[0.x.21057] 
[0.x.21058] 
[0.x.21059] 
[0.x.21060] 
[0.x.21061] 
[0.x.21062] 
[0.x.21063] 
[0.x.21064] 
[0.x.21065] 
[0.x.21066] 
[0.x.21067] 
[0.x.21068] 
[0.x.21069] 
[0.x.21070] 
[0.x.21071] 
[0.x.21072] 
//
[0.x.21073] 
//
// 就成员变量而言，我们先用一个变量来表示这个程序运行的MPI宇宙，一个我们用来让确切的一个处理器产生输出到控制台的流（见[2.x.2807] ）和一个用来为程序的各个部分计时的变量。
//
[0.x.21074] 
[0.x.21075] 
[0.x.21076] 
//
// 下一组描述网格和有限元空间。特别是，对于这个并行程序，有限元空间有与之相关的变量，表明哪些自由度存在于当前的处理器上（索引集，也见[2.x.2808]和[2.x.2809]文档模块），以及各种约束：那些由悬挂节点，由Dirichlet边界条件，以及由接触节点的活动集施加的约束。在这里定义的三个AffineConstraints变量中，第一个变量只包含悬挂节点的约束，第二个变量也包含与Dirichlet边界条件相关的约束，第三个变量包含这些约束和接触约束。
//
// 变量[2.x.2810]包括那些由接触约束的自由度，我们用[2.x.2811]来跟踪每个单元上应力等于屈服应力的正交点的分数。后者仅用于创建显示塑性区的图形输出，但不用于任何进一步的计算；该变量是该类的成员变量，因为该信息是作为计算残差的副产品计算的，但仅在很晚的时候使用。(注意，该向量是一个长度等于[1.x.89]上活动单元数量的向量；它从未被用来在处理器之间交换信息，因此可以是一个普通的deal.II向量)。
//
[0.x.21077] 
[0.x.21078] 
//
[0.x.21079] 
[0.x.21080] 
[0.x.21081] 
//
[0.x.21082] 
[0.x.21083] 
//
[0.x.21084] 
[0.x.21085] 
[0.x.21086] 
//
[0.x.21087] 
[0.x.21088] 
//
// 下一个变量块对应的是解决方案和我们需要形成的线性系统。特别是，这包括牛顿矩阵和右手边；与残差（即牛顿右手边）相对应的向量，但我们没有消除其中的各种约束，该向量用于确定在下一次迭代中需要约束哪些自由度；以及一个与介绍中简要提到的[2.x.2812]矩阵的对角线相对应的向量，并在随文中讨论。
//
[0.x.21089] 
//
[0.x.21090] 
[0.x.21091] 
[0.x.21092] 
[0.x.21093] 
//
// 下一个块包含描述材料响应的变量。
//
[0.x.21094] 
[0.x.21095] 
//
// 然后是各种各样的其他变量，用于识别参数文件所选择的要求我们建立的网格，被推入可变形体的障碍物，网格细化策略，是否将解决方案从一个网格转移到下一个网格，以及要执行多少个网格细化循环。在可能的情况下，我们将这些类型的变量标记为[2.x.2813]，以帮助读者识别哪些变量以后可能会被修改，哪些可能不会被修改（输出目录是一个例外--它在构造函数之外从不被修改，但在构造函数中冒号后面的成员初始化列表中初始化是很尴尬的，因为在那里我们只有一次机会设置它；网格细化准则也是如此）。
//
[0.x.21096] 
[0.x.21097] 
//
[0.x.21098] 
[0.x.21099] 
[0.x.21100] 
[0.x.21101] 
[0.x.21102] 
[0.x.21103] 
[0.x.21104] 
[0.x.21105] 
[0.x.21106] 
[0.x.21107] 
//
[0.x.21108] 
[0.x.21109] 
[0.x.21110] 
[0.x.21111] 
[0.x.21112] 
//[2.x.2814] 
//[2.x.2815] 
//
// 让我们从声明可在输入文件中选择的运行时参数开始。这些值将在本类的构造函数中读回，以初始化本类的成员变量。
//
[0.x.21113] 
[0.x.21114] 
[0.x.21115] 
[0.x.21116] 
[0.x.21117] 
[0.x.21118] 
[0.x.21119] 
[0.x.21120] 
[0.x.21121] 
[0.x.21122] 
[0.x.21123] 
[0.x.21124] 
[0.x.21125] 
[0.x.21126] 
[0.x.21127] 
[0.x.21128] 
[0.x.21129] 
[0.x.21130] 
[0.x.21131] 
[0.x.21132] 
[0.x.21133] 
[0.x.21134] 
[0.x.21135] 
[0.x.21136] 
[0.x.21137] 
[0.x.21138] 
[0.x.21139] 
[0.x.21140] 
[0.x.21141] 
[0.x.21142] 
[0.x.21143] 
[0.x.21144] 
[0.x.21145] 
[0.x.21146] 
[0.x.21147] 
[0.x.21148] 
[0.x.21149] 
[0.x.21150] 
[0.x.21151] 
[0.x.21152] 
[0.x.21153] 
[0.x.21154] 
[0.x.21155] 
[0.x.21156] 
[0.x.21157] 
[0.x.21158] 
[0.x.21159] 
[0.x.21160] 
[0.x.21161] 
[0.x.21162] 
//[2.x.2816] 
//
// 鉴于成员变量的声明以及从输入文件中读取的运行时参数的声明，在这个构造函数中没有任何令人惊讶的地方。在正文中，我们初始化了网格细化策略和输出目录，必要时创建这样一个目录。
//
[0.x.21163] 
[0.x.21164] 
[0.x.21165] 
[0.x.21166] 
[0.x.21167] 
[0.x.21168] 
[0.x.21169] 
[0.x.21170] 
[0.x.21171] 
[0.x.21172] 
//
[0.x.21173] 
[0.x.21174] 
[0.x.21175] 
[0.x.21176] 
[0.x.21177] 
[0.x.21178] 
//
[0.x.21179] 
[0.x.21180] 
[0.x.21181] 
[0.x.21182] 
[0.x.21183] 
//
[0.x.21184] 
[0.x.21185] 
[0.x.21186] 
[0.x.21187] 
[0.x.21188] 
[0.x.21189] 
[0.x.21190] 
[0.x.21191] 
[0.x.21192] 
//
[0.x.21193] 
[0.x.21194] 
[0.x.21195] 
//
[0.x.21196] 
[0.x.21197] 
[0.x.21198] 
[0.x.21199] 
[0.x.21200] 
[0.x.21201] 
[0.x.21202] 
[0.x.21203] 
//
[0.x.21204] 
[0.x.21205] 
[0.x.21206] 
//
// 如果有必要，为输出创建一个新的目录。
//
[0.x.21207] 
[0.x.21208] 
[0.x.21209] 
[0.x.21210] 
[0.x.21211] 
//
[0.x.21212] 
[0.x.21213] 
[0.x.21214] 
[0.x.21215] 
[0.x.21216] 
//
// [2.x.2817] 
//
// 下一个区块是关于构建起始网格的。我们将使用下面的辅助函数和[2.x.2818]的第一个块来构造一个对应于半球形的网格。deal.II有一个函数可以创建这样的网格，但是它的位置和方向都是错误的，所以我们需要在使用它之前对它进行一些位移和旋转。
//
// 供以后参考，如[2.x.2819]文件中所述，半球体的平坦表面的边界指标为零，而其余部分的边界指标为一。
//
[0.x.21217] 
[0.x.21218] 
[0.x.21219] 
[0.x.21220] 
//
[0.x.21221] 
[0.x.21222] 
[0.x.21223] 
[0.x.21224] 
[0.x.21225] 
[0.x.21226] 
[0.x.21227] 
[0.x.21228] 
//
// 由于我们将在下面附加一个不同的流形，我们立即清除默认的流形描述。
//
[0.x.21229] 
//
[0.x.21230] 
[0.x.21231] 
//
[0.x.21232] 
[0.x.21233] 
[0.x.21234] 
[0.x.21235] 
//
// 或者，创建一个超立方体网格。创建后，按如下方式分配边界指标。[1.x.90] 换句话说，立方体的边的边界指标是8。底部的边界指标是6，顶部的指标是1。我们通过循环所有面的所有单元并查看单元中心的坐标值来设置这些指标，并在以后评估哪个边界将携带迪里希特边界条件或将受到潜在接触时使用这些指标。(在目前的情况下，网格只包含一个单元，它的所有面都在边界上，所以严格来说，所有单元的循环和查询一个面是否在边界上都是不必要的；我们保留它们只是出于习惯：这种代码可以在许多程序中找到，基本上都是这种形式。)
//
[0.x.21236] 
[0.x.21237] 
[0.x.21238] 
[0.x.21239] 
//
[0.x.21240] 
//
[0.x.21241] 
[0.x.21242] 
[0.x.21243] 
[0.x.21244] 
[0.x.21245] 
[0.x.21246] 
[0.x.21247] 
[0.x.21248] 
[0.x.21249] 
[0.x.21250] 
[0.x.21251] 
[0.x.21252] 
[0.x.21253] 
[0.x.21254] 
[0.x.21255] 
//
[0.x.21256] 
[0.x.21257] 
//
// [2.x.2820] 
//
// 谜题的下一块是设置DoFHandler，调整向量大小，并处理其他各种状态变量，如索引集和约束矩阵。
//
// 在下面的内容中，每一组操作都被放入一个大括号封闭的块中，该块的顶部声明的变量正在进行计时（[2.x.2821]变量的构造器开始计时部分，在块的末端调用的析构器再次停止计时）。
//
[0.x.21258] 
[0.x.21259] 
[0.x.21260] 
//
// *设置道夫，并为本地拥有的相关道夫获取索引集 [2.x.2822] 。
[0.x.21261] 
[0.x.21262] 
[0.x.21263] 
//
[0.x.21264] 
[0.x.21265] 
[0.x.21266] 
[0.x.21267] 
[0.x.21268] 
//
// /设置悬挂节点和Dirichlet约束[2.x.2823] 
[0.x.21269] 
[0.x.21270] 
[0.x.21271] 
[0.x.21272] 
[0.x.21273] 
[0.x.21274] 
//
[0.x.21275] 
[0.x.21276] 
[0.x.21277] 
[0.x.21278] 
//
[0.x.21279] 
[0.x.21280] 
//
// *初始化向量和活动集 [2.x.2824] 。
[0.x.21281] 
[0.x.21282] 
[0.x.21283] 
[0.x.21284] 
[0.x.21285] 
[0.x.21286] 
[0.x.21287] 
[0.x.21288] 
//
[0.x.21289] 
[0.x.21290] 
[0.x.21291] 
//
// 最后，我们设置了稀疏模式和矩阵。我们暂时（ab）用系统矩阵来同时建立（对角线）矩阵，用于消除与障碍物接触的自由度，但我们随后立即将牛顿矩阵设回零。
//
[0.x.21292] 
[0.x.21293] 
[0.x.21294] 
[0.x.21295] 
//
[0.x.21296] 
[0.x.21297] 
[0.x.21298] 
[0.x.21299] 
[0.x.21300] 
[0.x.21301] 
[0.x.21302] 
[0.x.21303] 
//
[0.x.21304] 
//
[0.x.21305] 
//
[0.x.21306] 
[0.x.21307] 
[0.x.21308] 
[0.x.21309] 
[0.x.21310] 
//
[0.x.21311] 
[0.x.21312] 
[0.x.21313] 
//[2.x.2825] 
//
// 这个函数从前面的函数中分离出来，计算与迪里切特型边界条件相关的约束，并通过与来自悬挂节点的约束合并，将其放入[2.x.2826]变量。
//
// 正如在介绍中所阐述的，我们需要区分两种情况。
//
// - 如果域是一个盒子，我们将底部的位移设置为零，并允许沿侧面的Z方向的垂直运动。如[2.x.2827]函数所示，前者对应于边界指标6，后者对应于8。
//
// - 如果域是一个半球形，那么我们沿边界的弯曲部分施加零位移，与边界指标0相关。
//
[0.x.21314] 
[0.x.21315] 
[0.x.21316] 
[0.x.21317] 
[0.x.21318] 
//
[0.x.21319] 
[0.x.21320] 
//
//插值解决方案的所有组成部分
//
[0.x.21321] 
[0.x.21322] 
[0.x.21323] 
[0.x.21324] 
[0.x.21325] 
[0.x.21326] 
//
//对解决方案的X和Y分量进行插值（这是一个位掩码，所以应用运算器|）。
//
[0.x.21327] 
[0.x.21328] 
[0.x.21329] 
[0.x.21330] 
[0.x.21331] 
[0.x.21332] 
[0.x.21333] 
[0.x.21334] 
[0.x.21335] 
[0.x.21336] 
[0.x.21337] 
[0.x.21338] 
[0.x.21339] 
[0.x.21340] 
[0.x.21341] 
[0.x.21342] 
[0.x.21343] 
//
[0.x.21344] 
[0.x.21345] 
//
// [2.x.2828] 
//
// 下一个辅助函数计算（对角线）质量矩阵，用于确定我们在接触算法中使用的主动集合方法的主动集合。这个矩阵是质量矩阵类型的，但与标准质量矩阵不同，我们可以通过使用正交公式使其成为对角线（即使在高阶元素的情况下），该公式的正交点与有限元插值点的位置完全相同。我们通过使用QGaussLobatto正交公式来实现这一点，同时用一组从同一正交公式得出的插值点初始化有限元。该函数的其余部分相对简单：我们将得到的矩阵放入给定的参数中；因为我们知道矩阵是对角线的，所以只需在[2.x.2829]而不是[2.x.2830]上有一个循环即可。严格来说，我们甚至可以避免在正交点[2.x.2831]处将形状函数的值与自身相乘，因为我们知道形状值是一个恰好有一个的向量，当与自身相点时产生1。由于这个函数不是时间关键，为了清楚起见，我们添加了这个术语。
//
[0.x.21346] 
[0.x.21347] 
[0.x.21348] 
[0.x.21349] 
[0.x.21350] 
//
[0.x.21351] 
[0.x.21352] 
[0.x.21353] 
//
[0.x.21354] 
[0.x.21355] 
//
[0.x.21356] 
[0.x.21357] 
//
[0.x.21358] 
//
[0.x.21359] 
[0.x.21360] 
[0.x.21361] 
[0.x.21362] 
[0.x.21363] 
[0.x.21364] 
[0.x.21365] 
//
[0.x.21366] 
[0.x.21367] 
[0.x.21368] 
[0.x.21369] 
[0.x.21370] 
[0.x.21371] 
[0.x.21372] 
//
[0.x.21373] 
//
[0.x.21374] 
[0.x.21375] 
[0.x.21376] 
[0.x.21377] 
[0.x.21378] 
[0.x.21379] 
[0.x.21380] 
//[2.x.2832] 
//
// 下面的函数是我们在[2.x.2833]函数中每次牛顿迭代时调用的第一个函数。它的作用是将解决方案投射到可行集上，并更新接触或穿透障碍物的自由度的活动集。
//
// 为了实现这个功能，我们首先需要做一些记账工作。我们需要写入解决方案向量（我们只能用没有鬼魂元素的完全分布的向量来做），我们需要从各自的向量中读取拉格朗日乘数和对角线质量矩阵的元素（我们只能用有鬼魂元素的向量来做），所以我们创建各自的向量。然后我们还要初始化约束对象，该对象将包含来自接触和所有其他来源的约束，以及一个包含所有属于接触的本地自由度的索引集的对象。
//
[0.x.21381] 
[0.x.21382] 
[0.x.21383] 
[0.x.21384] 
//
[0.x.21385] 
[0.x.21386] 
[0.x.21387] 
//
[0.x.21388] 
[0.x.21389] 
[0.x.21390] 
//
[0.x.21391] 
[0.x.21392] 
[0.x.21393] 
//
[0.x.21394] 
[0.x.21395] 
//
// 第二部分是在所有单元格上的循环，在这个循环中，我们看每一个自由度被定义的点的活动集条件是否为真，我们需要把这个自由度加入到接触节点的活动集中。正如我们一直所做的，如果我们想在单个点上评估函数，我们用一个FEValues对象（或者，这里是FEFaceValues对象，因为我们需要检查表面的接触）和一个适当选择的正交对象来做。我们通过选择定义在单元格面上的形状函数的 "支持点 "来创建这个面的正交对象（关于支持点的更多信息，请参见这个[2.x.2834]"词汇表条目"）。因此，我们有多少个正交点，就有多少个面的形状函数，在正交点上循环就相当于在面的形状函数上循环。有了这个，代码看起来如下。
//
[0.x.21396] 
[0.x.21397] 
[0.x.21398] 
[0.x.21399] 
//
[0.x.21400] 
[0.x.21401] 
//
[0.x.21402] 
//
[0.x.21403] 
[0.x.21404] 
[0.x.21405] 
[0.x.21406] 
[0.x.21407] 
[0.x.21408] 
[0.x.21409] 
//
[0.x.21410] 
[0.x.21411] 
[0.x.21412] 
//
// 在每个正交点（即位于接触边界上的自由度的每个支持点），我们再询问它是否是z-位移自由度的一部分，如果我们还没有遇到这个自由度（对于那些位于面之间的边缘的自由度可能发生），我们需要评估变形物体与障碍物之间的间隙。如果活动集条件为真，那么我们在AffineConstraints对象中添加一个约束，下一次牛顿更新需要满足这个约束，将求解向量的相应元素设置为正确的值，并将索引添加到IndexSet对象中，该索引存储哪个自由度是接触的一部分。
//
[0.x.21413] 
[0.x.21414] 
//
[0.x.21415] 
//
[0.x.21416] 
[0.x.21417] 
[0.x.21418] 
//
[0.x.21419] 
[0.x.21420] 
//
[0.x.21421] 
[0.x.21422] 
[0.x.21423] 
[0.x.21424] 
[0.x.21425] 
//
[0.x.21426] 
[0.x.21427] 
[0.x.21428] 
[0.x.21429] 
[0.x.21430] 
[0.x.21431] 
[0.x.21432] 
[0.x.21433] 
[0.x.21434] 
[0.x.21435] 
[0.x.21436] 
//
[0.x.21437] 
[0.x.21438] 
[0.x.21439] 
[0.x.21440] 
[0.x.21441] 
//
// 在这个函数的最后，我们在处理器之间交换数据，更新[2.x.2835]变量中那些已经被其他处理器写入的幽灵元素。然后我们将Dirichlet约束和那些来自悬挂节点的约束合并到已经包含活动集的AffineConstraints对象中。我们通过输出主动约束自由度的总数来结束这个函数，对于这个自由度，我们对每个处理器拥有的主动约束自由度的数量进行加总。这个本地拥有的受限自由度的数量当然是活动集和本地拥有的自由度集的交集的元素数量，我们可以通过在两个IndexSets上使用[2.x.2836]得到。
//
[0.x.21442] 
[0.x.21443] 
//
[0.x.21444] 
[0.x.21445] 
//
 
[0.x.21447] 
[0.x.21448] 
[0.x.21449] 
[0.x.21450] 
//[2.x.2837] 
//
// 鉴于问题的复杂性，可能会让人感到惊讶的是，在每次牛顿迭代中组装我们要解决的线性系统实际上是相当简单的。下面的函数建立了牛顿的右手边和牛顿矩阵。它看起来相当简单，因为繁重的工作发生在对[2.x.2838]的调用中，特别是在[2.x.2839]中使用我们之前计算的约束。
//
[0.x.21451] 
[0.x.21452] 
[0.x.21453] 
[0.x.21454] 
[0.x.21455] 
//
[0.x.21456] 
[0.x.21457] 
//
[0.x.21458] 
[0.x.21459] 
[0.x.21460] 
[0.x.21461] 
//
[0.x.21462] 
[0.x.21463] 
[0.x.21464] 
[0.x.21465] 
//
[0.x.21466] 
[0.x.21467] 
[0.x.21468] 
//
[0.x.21469] 
[0.x.21470] 
[0.x.21471] 
//
[0.x.21472] 
[0.x.21473] 
//
[0.x.21474] 
//
[0.x.21475] 
//
[0.x.21476] 
[0.x.21477] 
[0.x.21478] 
[0.x.21479] 
[0.x.21480] 
[0.x.21481] 
//
[0.x.21482] 
[0.x.21483] 
[0.x.21484] 
//
[0.x.21485] 
[0.x.21486] 
[0.x.21487] 
[0.x.21488] 
[0.x.21489] 
[0.x.21490] 
[0.x.21491] 
[0.x.21492] 
//
[0.x.21493] 
[0.x.21494] 
//
// 在计算了应力-应变张量及其线性化之后，我们现在可以把矩阵和右手边的部分放在一起。在这两部分中，我们需要线性化的应力-应变张量乘以[2.x.2840]的对称梯度，即[2.x.2841]项，因此我们引入这个项的缩写。回顾一下，该矩阵对应于随附出版物的符号中的双线性形式[2.x.2842]，而右手边是[2.x.2843]，其中[2.x.2844]是当前的线性化点（通常是最后的解）。这可能表明，如果材料是完全弹性的（其中[2.x.2845]），右手边将为零，但这忽略了一个事实，即右手边还将包含由于接触而产生的非均质约束的贡献。                接下来的代码块增加了由于边界力的贡献，如果有的话。
//
[0.x.21495] 
[0.x.21496] 
[0.x.21497] 
//
[0.x.21498] 
[0.x.21499] 
[0.x.21500] 
[0.x.21501] 
[0.x.21502] 
//
[0.x.21503] 
[0.x.21504] 
[0.x.21505] 
[0.x.21506] 
[0.x.21507] 
[0.x.21508] 
[0.x.21509] 
[0.x.21510] 
//
[0.x.21511] 
[0.x.21512] 
[0.x.21513] 
[0.x.21514] 
//
[0.x.21515] 
[0.x.21516] 
[0.x.21517] 
//
[0.x.21518] 
[0.x.21519] 
[0.x.21520] 
[0.x.21521] 
[0.x.21522] 
[0.x.21523] 
[0.x.21524] 
[0.x.21525] 
[0.x.21526] 
[0.x.21527] 
[0.x.21528] 
//
[0.x.21529] 
[0.x.21530] 
[0.x.21531] 
[0.x.21532] 
[0.x.21533] 
[0.x.21534] 
[0.x.21535] 
[0.x.21536] 
//
[0.x.21537] 
[0.x.21538] 
[0.x.21539] 
//
// [2.x.2846] 
//
// 下面的函数计算给定当前解（或任何其他线性化点）的方程的非线性残差。这在线性搜索算法中是需要的，我们需要尝试之前和当前（试验）解的各种线性组合来计算当前牛顿步骤的（真实的、全局化的）解。
//
// 说到这里，在稍微滥用函数名称的情况下，它实际上做了很多事情。例如，它还计算出与牛顿残差相对应的矢量，但没有消除受限自由度。我们需要这个向量来计算接触力，并最终计算出下一个活动集。同样，通过跟踪我们在每个单元上遇到的显示塑性屈服的正交点的数量，我们也可以计算出[2.x.2847]矢量，随后我们可以输出这个矢量来可视化塑性区。在这两种情况下，作为线条搜索的一部分，这些结果是不必要的，因此我们可能会浪费少量的时间来计算它们。同时，无论如何，这些信息是我们在这里需要做的事情的自然副产品，而且我们想在每个牛顿步骤结束时收集一次，所以我们不妨在这里做。
//
// 这个函数的实际实现应该是相当明显的。
//
[0.x.21540] 
[0.x.21541] 
[0.x.21542] 
[0.x.21543] 
[0.x.21544] 
[0.x.21545] 
//
[0.x.21546] 
[0.x.21547] 
[0.x.21548] 
[0.x.21549] 
//
[0.x.21550] 
[0.x.21551] 
[0.x.21552] 
[0.x.21553] 
//
[0.x.21554] 
[0.x.21555] 
[0.x.21556] 
//
[0.x.21557] 
[0.x.21558] 
[0.x.21559] 
//
[0.x.21560] 
//
[0.x.21561] 
//
[0.x.21562] 
//
[0.x.21563] 
[0.x.21564] 
//
[0.x.21565] 
//
[0.x.21566] 
[0.x.21567] 
[0.x.21568] 
[0.x.21569] 
[0.x.21570] 
//
[0.x.21571] 
[0.x.21572] 
[0.x.21573] 
//
[0.x.21574] 
[0.x.21575] 
[0.x.21576] 
[0.x.21577] 
[0.x.21578] 
[0.x.21579] 
[0.x.21580] 
[0.x.21581] 
[0.x.21582] 
//
[0.x.21583] 
[0.x.21584] 
[0.x.21585] 
[0.x.21586] 
[0.x.21587] 
[0.x.21588] 
//
[0.x.21589] 
[0.x.21590] 
[0.x.21591] 
[0.x.21592] 
[0.x.21593] 
[0.x.21594] 
//
[0.x.21595] 
[0.x.21596] 
[0.x.21597] 
[0.x.21598] 
//
[0.x.21599] 
[0.x.21600] 
[0.x.21601] 
//
[0.x.21602] 
[0.x.21603] 
[0.x.21604] 
[0.x.21605] 
[0.x.21606] 
[0.x.21607] 
[0.x.21608] 
[0.x.21609] 
[0.x.21610] 
[0.x.21611] 
[0.x.21612] 
//
[0.x.21613] 
[0.x.21614] 
[0.x.21615] 
//
[0.x.21616] 
[0.x.21617] 
[0.x.21618] 
//
[0.x.21619] 
[0.x.21620] 
[0.x.21621] 
[0.x.21622] 
//
// [2.x.2848] 
//
// 在我们讨论单个网格上的实际牛顿迭代之前的最后一块是线性系统的求解器。有几个复杂的问题使代码略显模糊，但大多数情况下，它只是设置然后求解。在这些复杂的问题中，包括。
//
//
//
// 对于悬空节点，我们必须将[2.x.2849]函数应用于newton_rhs。  如果一个求解值为[2.x.2850]的悬空节点有一个与障碍物接触的数值为[2.x.2851]的邻居和一个没有接触的邻居[2.x.2852]，这就有必要。因为前者的更新将是规定的，所以悬挂的节点约束将有一个不均匀性，看起来像 [2.x.2853] 。所以右侧的相应条目是无意义的非零值。这些值我们必须设置为零。
//
// - 就像在 [2.x.2854] 中一样，在求解或使用解决方案时，我们需要在有和没有鬼魂元素的向量之间进行洗牌。
//
// 该函数的其余部分与[2.x.2855]和[2.x.2856]类似，只是我们使用BiCGStab求解器而不是CG。这是由于对于非常小的硬化参数[2.x.2857]，线性系统变得几乎是半无限的，尽管仍然是对称的。BiCGStab似乎更容易处理这种线性系统。
//
[0.x.21623] 
[0.x.21624] 
[0.x.21625] 
[0.x.21626] 
//
[0.x.21627] 
[0.x.21628] 
[0.x.21629] 
//
[0.x.21630] 
[0.x.21631] 
//
 
[0.x.21633] 
[0.x.21634] 
//
[0.x.21635] 
[0.x.21636] 
[0.x.21637] 
[0.x.21638] 
//
[0.x.21639] 
[0.x.21640] 
[0.x.21641] 
[0.x.21642] 
[0.x.21643] 
[0.x.21644] 
[0.x.21645] 
[0.x.21646] 
//
[0.x.21647] 
[0.x.21648] 
//
[0.x.21649] 
[0.x.21650] 
//
[0.x.21651] 
//
[0.x.21652] 
[0.x.21653] 
[0.x.21654] 
[0.x.21655] 
//
[0.x.21656] 
[0.x.21657] 
[0.x.21658] 
[0.x.21659] 
[0.x.21660] 
[0.x.21661] 
//
[0.x.21662] 
[0.x.21663] 
[0.x.21664] 
[0.x.21665] 
[0.x.21666] 
//
[0.x.21667] 
//
[0.x.21668] 
[0.x.21669] 
//[2.x.2858] 
//
// 最后，这是在当前网格上实现阻尼牛顿方法的函数。这里有两个嵌套的循环：外循环用于牛顿迭代，内循环用于直线搜索，只有在必要时才会使用。为了获得一个好的和合理的起始值，我们在每个网格上的第一个牛顿步骤中解决一个弹性问题（如果我们在网格之间转移解决方案，则只在第一个网格上解决）。我们通过在这些迭代中将屈服应力设置为一个不合理的大值，然后在随后的迭代中将其设置为正确值。
//
// 除此以外，这个函数的顶部部分应该是相当明显的。我们将变量[2.x.2859]初始化为可以用双精度数字表示的最大负值，以便在第一步中比较当前残差是否小于前一步的残差时总是失败。
//
[0.x.21670] 
[0.x.21671] 
[0.x.21672] 
[0.x.21673] 
[0.x.21674] 
[0.x.21675] 
[0.x.21676] 
[0.x.21677] 
[0.x.21678] 
[0.x.21679] 
[0.x.21680] 
[0.x.21681] 
[0.x.21682] 
//
[0.x.21683] 
[0.x.21684] 
//
[0.x.21685] 
//
[0.x.21686] 
//
[0.x.21687] 
[0.x.21688] 
[0.x.21689] 
[0.x.21690] 
[0.x.21691] 
[0.x.21692] 
[0.x.21693] 
[0.x.21694] 
[0.x.21695] 
//
[0.x.21696] 
[0.x.21697] 
[0.x.21698] 
//
[0.x.21699] 
[0.x.21700] 
[0.x.21701] 
[0.x.21702] 
//
[0.x.21703] 
[0.x.21704] 
[0.x.21705] 
[0.x.21706] 
//
[0.x.21707] 
[0.x.21708] 
//
// 在我们计算了当前牛顿步骤的试解[2.x.2860]之后，情况就变得有点棘手了。我们处理的是一个高度非线性的问题，所以我们必须用直线搜索的方式来抑制牛顿方法。为了理解我们如何做到这一点，请回顾一下，在我们的表述中，我们在每一个牛顿步骤中计算一个试解，而不是在新旧解之间进行更新。由于解集是一个凸集，我们将使用直线搜索，尝试以前的解和试验解的线性组合，以保证阻尼解再次出现在我们的解集中。我们最多应用5个阻尼步骤。
//
// 在我们使用直线搜索的时候有一些例外情况。首先，如果这是任何网格上的第一个牛顿步骤，那么我们就没有任何点来比较残差，所以我们总是接受一个完整的步骤。同样地，如果这是第一个网格上的第二个牛顿步骤（如果我们不在网格之间转移解决方案，则是任何网格上的第二个牛顿步骤），则我们只用弹性模型计算了其中的第一个步骤（见上文我们如何将屈服应力σ设置为一个不合理的大值）。在这种情况下，第一个牛顿解是一个纯粹的弹性解，第二个牛顿解是一个塑性解，任何线性组合都不一定会位于可行的集合中--所以我们只是接受我们刚刚得到的解。
//
// 在这两种情况下，我们绕过直线搜索，只是在必要时更新残差和其他向量。
//
[0.x.21709] 
[0.x.21710] 
[0.x.21711] 
[0.x.21712] 
[0.x.21713] 
[0.x.21714] 
[0.x.21715] 
//
[0.x.21716] 
[0.x.21717] 
[0.x.21718] 
[0.x.21719] 
[0.x.21720] 
[0.x.21721] 
//
[0.x.21722] 
//
[0.x.21723] 
//
[0.x.21724] 
[0.x.21725] 
[0.x.21726] 
[0.x.21727] 
[0.x.21728] 
[0.x.21729] 
[0.x.21730] 
[0.x.21731] 
//
[0.x.21732] 
[0.x.21733] 
[0.x.21734] 
//
[0.x.21735] 
//
[0.x.21736] 
[0.x.21737] 
[0.x.21738] 
//
[0.x.21739] 
[0.x.21740] 
[0.x.21741] 
[0.x.21742] 
[0.x.21743] 
//
[0.x.21744] 
//
[0.x.21745] 
//
 
[0.x.21747] 
[0.x.21748] 
[0.x.21749] 
[0.x.21750] 
//
[0.x.21751] 
[0.x.21752] 
[0.x.21753] 
//
[0.x.21754] 
[0.x.21755] 
[0.x.21756] 
//
[0.x.21757] 
//
// 最后一步是检查收敛情况。如果活动集在所有处理器中都没有变化，并且残差小于阈值[2.x.2861] ，那么我们就终止对当前网格的迭代。
//
[0.x.21758] 
[0.x.21759] 
[0.x.21760] 
[0.x.21761] 
[0.x.21762] 
[0.x.21763] 
[0.x.21764] 
//
[0.x.21765] 
[0.x.21766] 
[0.x.21767] 
//[2.x.2862] 

// 如果你已经在deal.II教程中做到了这一点，下面这个细化网格的函数应该不会再对你构成任何挑战。它对网格进行细化，可以是全局的，也可以是使用Kelly误差估计器的，如果这样要求的话，还可以将上一个网格的解转移到下一个网格。在后一种情况下，我们还需要再次计算活动集和其他数量，为此我们需要由 [2.x.2863] 计算的信息。
//
[0.x.21768] 
[0.x.21769] 
[0.x.21770] 
[0.x.21771] 
[0.x.21772] 
[0.x.21773] 
[0.x.21774] 
[0.x.21775] 
[0.x.21776] 
[0.x.21777] 
[0.x.21778] 
[0.x.21779] 
[0.x.21780] 
[0.x.21781] 
[0.x.21782] 
[0.x.21783] 
[0.x.21784] 
[0.x.21785] 
[0.x.21786] 
[0.x.21787] 
[0.x.21788] 
//
[0.x.21789] 
[0.x.21790] 
[0.x.21791] 
//
[0.x.21792] 
//
[0.x.21793] 
[0.x.21794] 
[0.x.21795] 
[0.x.21796] 
//
[0.x.21797] 
//
[0.x.21798] 
//
[0.x.21799] 
[0.x.21800] 
[0.x.21801] 
[0.x.21802] 
[0.x.21803] 
//
// 强制执行约束条件，使插值后的解决方案在新的网格上符合要求。
//
[0.x.21804] 
//
[0.x.21805] 
[0.x.21806] 
[0.x.21807] 
[0.x.21808] 
//[2.x.2864] 
//
// 在我们到达[2.x.2865]之前的其余三个函数都与生成输出有关。下面一个是尝试显示变形体的变形构造。为此，这个函数接收一个位移矢量场，通过先前计算的位移来移动网格（局部）的每个顶点。在生成图形输出之前，我们将以当前的位移场调用该函数，在生成图形输出之后，我们将以负的位移场再次调用该函数，以撤销对网格所做的修改。
//
// 这个函数本身是非常简单的。我们所要做的就是跟踪我们已经接触过的顶点，因为我们在单元格上循环时多次遇到相同的顶点。
//
[0.x.21809] 
[0.x.21810] 
[0.x.21811] 
[0.x.21812] 
[0.x.21813] 
//
[0.x.21814] 
[0.x.21815] 
[0.x.21816] 
[0.x.21817] 
[0.x.21818] 
[0.x.21819] 
//
[0.x.21820] 
[0.x.21821] 
[0.x.21822] 
[0.x.21823] 
//
[0.x.21824] 
[0.x.21825] 
[0.x.21826] 
//
// [2.x.2866] 
//
// 接下来是我们用来实际生成图形输出的函数。这个函数有点繁琐，但实际上并不特别复杂。它在顶部移动网格（最后再把它移回来），然后计算沿接触面的接触力。我们可以通过取未处理的残差向量，并通过询问它们是否有与之相关的不均匀约束来确定哪些自由度对应于有接触的自由度（如随文所示）。一如既往，我们需要注意的是，我们只能写进完全分布的向量（即没有鬼魂元素的向量），但当我们想产生输出时，我们需要的向量确实对所有局部相关的自由度都有鬼魂项。
//
[0.x.21827] 
[0.x.21828] 
[0.x.21829] 
[0.x.21830] 
[0.x.21831] 
//
[0.x.21832] 
//
[0.x.21833] 
//
// 接触力的计算
//
[0.x.21834] 
[0.x.21835] 
[0.x.21836] 
[0.x.21837] 
[0.x.21838] 
[0.x.21839] 
[0.x.21840] 
[0.x.21841] 
[0.x.21842] 
[0.x.21843] 
//
[0.x.21844] 
[0.x.21845] 
[0.x.21846] 
//
[0.x.21847] 
[0.x.21848] 
[0.x.21849] 
[0.x.21850] 
[0.x.21851] 
[0.x.21852] 
//
[0.x.21853] 
[0.x.21854] 
[0.x.21855] 
//
[0.x.21856] 
//
[0.x.21857] 
//
[0.x.21858] 
[0.x.21859] 
[0.x.21860] 
[0.x.21861] 
[0.x.21862] 
[0.x.21863] 
[0.x.21864] 
[0.x.21865] 
[0.x.21866] 
[0.x.21867] 
[0.x.21868] 
[0.x.21869] 
[0.x.21870] 
[0.x.21871] 
[0.x.21872] 
//
[0.x.21873] 
[0.x.21874] 
[0.x.21875] 
[0.x.21876] 
//
[0.x.21877] 
[0.x.21878] 
//
[0.x.21879] 
//
// 在函数的其余部分，我们在每个处理器上生成一个VTU文件，以这个处理器的子域ID为索引。在第一个处理器上，我们随后还创建了一个[2.x.2867]文件，对VTU文件的[1.x.91]进行索引，这样就可以一次性读取整个输出文件集。这些[2.x.2868]被Paraview用来描述整个并行计算的输出文件。然后我们再为Paraview的竞争者--VisIt可视化程序做同样的事情，创建一个匹配的[2.x.2869]文件。
//
[0.x.21880] 
[0.x.21881] 
[0.x.21882] 
//
[0.x.21883] 
[0.x.21884] 
[0.x.21885] 
[0.x.21886] 
//[2.x.2870] 
//
// 这最后一个辅助函数通过计算接触面积上Z方向的接触压力的积分来计算接触力。为此，我们将所有非活动因子的接触压力lambda设置为0（一个自由度是否是接触的一部分，就像我们在前一个函数中做的那样）。对于所有活动的自由度，lambda包含非线性残差（newton_rhs_uncondensed）和质量矩阵（diag_mass_matrix_vector）的相应对角线条目的商数。因为悬空节点出现在接触区的可能性不小，所以对分布式_lambda向量应用constraints_hanging_nodes.distribution是很重要的。
//
[0.x.21887] 
[0.x.21888] 
[0.x.21889] 
[0.x.21890] 
[0.x.21891] 
[0.x.21892] 
[0.x.21893] 
[0.x.21894] 
[0.x.21895] 
[0.x.21896] 
[0.x.21897] 
[0.x.21898] 
[0.x.21899] 
[0.x.21900] 
[0.x.21901] 
//
[0.x.21902] 
[0.x.21903] 
[0.x.21904] 
//
[0.x.21905] 
//
[0.x.21906] 
[0.x.21907] 
[0.x.21908] 
[0.x.21909] 
//
[0.x.21910] 
//
[0.x.21911] 
//
[0.x.21912] 
[0.x.21913] 
[0.x.21914] 
[0.x.21915] 
[0.x.21916] 
[0.x.21917] 
//
[0.x.21918] 
[0.x.21919] 
[0.x.21920] 
//
[0.x.21921] 
[0.x.21922] 
[0.x.21923] 
[0.x.21924] 
[0.x.21925] 
[0.x.21926] 
//
[0.x.21927] 
[0.x.21928] 
//[2.x.2871] 
//
// 和其他所有的教程程序一样，[2.x.2872]函数包含了整体逻辑。这里没有太多的内容：本质上，它在所有的网格细化循环中执行循环，并在每个循环中，将事情交给[2.x.2873]中的牛顿求解器，并调用函数来创建如此计算的解决方案的图形输出。然后输出一些关于运行时间和内存消耗的统计数据，这些数据是在这个网格的计算过程中收集的。
//
[0.x.21929] 
[0.x.21930] 
[0.x.21931] 
[0.x.21932] 
[0.x.21933] 
[0.x.21934] 
[0.x.21935] 
[0.x.21936] 
[0.x.21937] 
//
[0.x.21938] 
[0.x.21939] 
//
[0.x.21940] 
[0.x.21941] 
[0.x.21942] 
[0.x.21943] 
[0.x.21944] 
[0.x.21945] 
[0.x.21946] 
[0.x.21947] 
[0.x.21948] 
[0.x.21949] 
[0.x.21950] 
//
[0.x.21951] 
//
[0.x.21952] 
//
[0.x.21953] 
[0.x.21954] 
//
[0.x.21955] 
[0.x.21956] 
[0.x.21957] 
[0.x.21958] 
//
[0.x.21959] 
[0.x.21960] 
[0.x.21961] 
[0.x.21962] 
[0.x.21963] 
//[2.x.2874] 
//
// [2.x.2875]函数真的没有什么内容。看起来他们总是这样做。
//
[0.x.21964] 
[0.x.21965] 
[0.x.21966] 
[0.x.21967] 
//
[0.x.21968] 
[0.x.21969] 
[0.x.21970] 
[0.x.21971] 
[0.x.21972] 
[0.x.21973] 
[0.x.21974] 
[0.x.21975] 
[0.x.21976] 
[0.x.21977] 
//
[0.x.21978] 
[0.x.21979] 
[0.x.21980] 
[0.x.21981] 
[0.x.21982] 
[0.x.21983] 
[0.x.21984] 
[0.x.21985] 
[0.x.21986] 
[0.x.21987] 
[0.x.21988] 
[0.x.21989] 
[0.x.21990] 
[0.x.21991] 
[0.x.21992] 
[0.x.21993] 
[0.x.21994] 
[0.x.21995] 
[0.x.21996] 
//
[0.x.21997] 
[0.x.21998] 
[0.x.21999] 
[0.x.22000] 
[0.x.22001] 
[0.x.22002] 
[0.x.22003] 
[0.x.22004] 
[0.x.22005] 
[0.x.22006] 
[0.x.22007] 
[0.x.22008] 
[0.x.22009] 
[0.x.22010] 
//
[0.x.22011] 
[0.x.22012] 
[0.x.22013] 
[0.x.22014] 
[0.x.22015] 
[0.x.22016] 
[0.x.22017] 
[0.x.22018] 
[0.x.22019] 
[0.x.22020] 
[0.x.22021] 
[0.x.22022] 
[0.x.22023] 
[0.x.22024] 
[0.x.22025] 
[0.x.22026] 
//
[0.x.22027] 
[0.x.22028] 
[0.x.22029] 
[0.x.22030] 
//[2.x.2876] 
//
// 像往常一样，第一步是包括一些deal.II和C++头文件的功能。
//
// 列表中包括一些提供向量、矩阵和预处理类的头文件，这些头文件实现了各自Trilinos类的接口；关于这些的一些更多信息可以在 [2.x.2877] 中找到。
//
[0.x.22031] 
[0.x.22032] 
[0.x.22033] 
[0.x.22034] 
[0.x.22035] 
[0.x.22036] 
//
[0.x.22037] 
[0.x.22038] 
[0.x.22039] 
[0.x.22040] 
[0.x.22041] 
//
[0.x.22042] 
[0.x.22043] 
[0.x.22044] 
//
[0.x.22045] 
[0.x.22046] 
[0.x.22047] 
//
[0.x.22048] 
[0.x.22049] 
[0.x.22050] 
//
[0.x.22051] 
[0.x.22052] 
[0.x.22053] 
//
[0.x.22054] 
[0.x.22055] 
[0.x.22056] 
[0.x.22057] 
[0.x.22058] 
//
[0.x.22059] 
[0.x.22060] 
[0.x.22061] 
//
// 在这个顶层设计的最后，我们为当前项目开辟一个命名空间，下面的所有材料都将进入这个命名空间，然后将所有deal.II名称导入这个命名空间。
//
[0.x.22062] 
[0.x.22063] 
[0.x.22064] 
//[2.x.2878] 
//
// 下面的部分直接取自[2.x.2879]，所以没有必要重复那里的描述。
//
[0.x.22065] 
[0.x.22066] 
[0.x.22067] 
[0.x.22068] 
[0.x.22069] 
[0.x.22070] 
[0.x.22071] 
//
[0.x.22072] 
[0.x.22073] 
[0.x.22074] 
//
[0.x.22075] 
[0.x.22076] 
[0.x.22077] 
[0.x.22078] 
[0.x.22079] 
[0.x.22080] 
[0.x.22081] 
//
[0.x.22082] 
[0.x.22083] 
[0.x.22084] 
[0.x.22085] 
[0.x.22086] 
[0.x.22087] 
[0.x.22088] 
//
[0.x.22089] 
[0.x.22090] 
[0.x.22091] 
//
[0.x.22092] 
[0.x.22093] 
[0.x.22094] 
[0.x.22095] 
[0.x.22096] 
[0.x.22097] 
[0.x.22098] 
[0.x.22099] 
[0.x.22100] 
[0.x.22101] 
//
[0.x.22102] 
[0.x.22103] 
[0.x.22104] 
[0.x.22105] 
[0.x.22106] 
[0.x.22107] 
[0.x.22108] 
//
[0.x.22109] 
[0.x.22110] 
//
[0.x.22111] 
[0.x.22112] 
[0.x.22113] 
//
[0.x.22114] 
[0.x.22115] 
[0.x.22116] 
[0.x.22117] 
[0.x.22118] 
[0.x.22119] 
[0.x.22120] 
//
[0.x.22121] 
[0.x.22122] 
[0.x.22123] 
[0.x.22124] 
[0.x.22125] 
[0.x.22126] 
[0.x.22127] 
//[2.x.2880] 
//
// 在本教程中，我们仍然使用之前在[2.x.2881]中使用的两个渗透率模型，所以我们再次避免对它们进行详细评论。
//
[0.x.22128] 
[0.x.22129] 
[0.x.22130] 
[0.x.22131] 
[0.x.22132] 
[0.x.22133] 
[0.x.22134] 
[0.x.22135] 
[0.x.22136] 
//
[0.x.22137] 
[0.x.22138] 
[0.x.22139] 
[0.x.22140] 
//
[0.x.22141] 
[0.x.22142] 
[0.x.22143] 
[0.x.22144] 
[0.x.22145] 
[0.x.22146] 
//
[0.x.22147] 
[0.x.22148] 
[0.x.22149] 
//
[0.x.22150] 
[0.x.22151] 
//
[0.x.22152] 
[0.x.22153] 
[0.x.22154] 
[0.x.22155] 
//
[0.x.22156] 
[0.x.22157] 
[0.x.22158] 
[0.x.22159] 
[0.x.22160] 
//
[0.x.22161] 
[0.x.22162] 
[0.x.22163] 
[0.x.22164] 
[0.x.22165] 
[0.x.22166] 
[0.x.22167] 
[0.x.22168] 
[0.x.22169] 
//
[0.x.22170] 
[0.x.22171] 
[0.x.22172] 
//
[0.x.22173] 
[0.x.22174] 
[0.x.22175] 
//
[0.x.22176] 
[0.x.22177] 
[0.x.22178] 
[0.x.22179] 
//
[0.x.22180] 
[0.x.22181] 
[0.x.22182] 
[0.x.22183] 
//
[0.x.22184] 
[0.x.22185] 
//
[0.x.22186] 
[0.x.22187] 
[0.x.22188] 
[0.x.22189] 
[0.x.22190] 
//
[0.x.22191] 
[0.x.22192] 
[0.x.22193] 
//
[0.x.22194] 
[0.x.22195] 
[0.x.22196] 
[0.x.22197] 
//
[0.x.22198] 
[0.x.22199] 
//
[0.x.22200] 
[0.x.22201] 
[0.x.22202] 
[0.x.22203] 
[0.x.22204] 
//[2.x.2882] 
//
// 所有物理量的实现，如总流动性[2.x.2883]和水的部分流量[2.x.2884]都来自[2.x.2885]，所以我们也没有对它们做任何评论。与[2.x.2886]相比，我们增加了检查，即传递给这些函数的饱和度实际上是在物理上有效的范围内。此外，鉴于润湿相以速度[2.x.2887]移动，很明显[2.x.2888]必须大于或等于零，所以我们也断言，以确保我们的计算得到的导数公式是合理的。
//
[0.x.22205] 
[0.x.22206] 
[0.x.22207] 
[0.x.22208] 
//
[0.x.22209] 
[0.x.22210] 
[0.x.22211] 
[0.x.22212] 
//
[0.x.22213] 
[0.x.22214] 
//
[0.x.22215] 
[0.x.22216] 
[0.x.22217] 
[0.x.22218] 
//
[0.x.22219] 
//
[0.x.22220] 
[0.x.22221] 
[0.x.22222] 
//
[0.x.22223] 
//
[0.x.22224] 
//
[0.x.22225] 
[0.x.22226] 
//[2.x.2889] 
//
// 在这第一部分中，我们定义了一些我们在构建线性求解器和预处理器时需要的类。这一部分与 [2.x.2890] 中使用的基本相同。唯一不同的是，原来的变量名称stokes_matrix被另一个名称darcy_matrix取代，以配合我们的问题。
//
[0.x.22227] 
[0.x.22228] 
[0.x.22229] 
[0.x.22230] 
[0.x.22231] 
[0.x.22232] 
[0.x.22233] 
[0.x.22234] 
//
[0.x.22235] 
[0.x.22236] 
//
[0.x.22237] 
[0.x.22238] 
[0.x.22239] 
[0.x.22240] 
//
[0.x.22241] 
[0.x.22242] 
[0.x.22243] 
[0.x.22244] 
[0.x.22245] 
[0.x.22246] 
[0.x.22247] 
//
[0.x.22248] 
[0.x.22249] 
[0.x.22250] 
[0.x.22251] 
[0.x.22252] 
[0.x.22253] 
[0.x.22254] 
[0.x.22255] 
//
[0.x.22256] 
//
[0.x.22257] 
[0.x.22258] 
[0.x.22259] 
[0.x.22260] 
[0.x.22261] 
[0.x.22262] 
[0.x.22263] 
[0.x.22264] 
[0.x.22265] 
//
[0.x.22266] 
[0.x.22267] 
[0.x.22268] 
[0.x.22269] 
[0.x.22270] 
[0.x.22271] 
[0.x.22272] 
[0.x.22273] 
[0.x.22274] 
//
[0.x.22275] 
[0.x.22276] 
//
[0.x.22277] 
[0.x.22278] 
[0.x.22279] 
[0.x.22280] 
[0.x.22281] 
[0.x.22282] 
[0.x.22283] 
//
[0.x.22284] 
[0.x.22285] 
//
[0.x.22286] 
[0.x.22287] 
[0.x.22288] 
[0.x.22289] 
[0.x.22290] 
[0.x.22291] 
[0.x.22292] 
[0.x.22293] 
[0.x.22294] 
[0.x.22295] 
[0.x.22296] 
[0.x.22297] 
//
[0.x.22298] 
[0.x.22299] 
[0.x.22300] 
[0.x.22301] 
[0.x.22302] 
[0.x.22303] 
[0.x.22304] 
[0.x.22305] 
[0.x.22306] 
[0.x.22307] 
[0.x.22308] 
[0.x.22309] 
//[2.x.2891] 
//
// 定义解决随时间变化的平流主导的两相流问题（或Buckley-Leverett问题[Buckley 1942]）的顶层逻辑的类的定义主要基于教程程序[2.x.2892]和[2.x.2893]，特别是[2.x.2894]，我们在这里使用的一般结构基本相同。与[2.x.2895]一样，在下面的实现中需要寻找的关键例程是[2.x.2896]函数。
//
// 与[2.x.2897]的主要区别是，由于考虑了自适应算子拆分，我们需要多几个成员变量来保存最近两次计算的达西（速度/压力）解，以及当前的达西（直接计算，或从前两次计算中推断），我们需要记住最近两次计算的达西解。我们还需要一个辅助函数来确定我们是否真的需要重新计算达西解。
//
// 与[2.x.2898]不同，这一步多用了一个AffineConstraints对象，叫做darcy_preconditioner_constraints。这个约束对象只用于为Darcy预处理程序组装矩阵，包括悬挂节点约束以及压力变量的Dirichlet边界值约束。我们需要这个，因为我们正在为压力建立一个拉普拉斯矩阵，作为舒尔补码的近似值），如果应用边界条件，这个矩阵是正定的。
//
// 这样在这个类中声明的成员函数和变量的集合与 [2.x.2899] 中的相当相似。
//
[0.x.22310] 
[0.x.22311] 
[0.x.22312] 
[0.x.22313] 
[0.x.22314] 
[0.x.22315] 
//
[0.x.22316] 
[0.x.22317] 
[0.x.22318] 
[0.x.22319] 
[0.x.22320] 
[0.x.22321] 
[0.x.22322] 
[0.x.22323] 
[0.x.22324] 
[0.x.22325] 
[0.x.22326] 
[0.x.22327] 
[0.x.22328] 
[0.x.22329] 
[0.x.22330] 
[0.x.22331] 
[0.x.22332] 
[0.x.22333] 
[0.x.22334] 
[0.x.22335] 
[0.x.22336] 
[0.x.22337] 
//
// 我们接下来会有一些辅助函数，这些函数在整个程序中的不同地方都会用到。
//
[0.x.22338] 
[0.x.22339] 
[0.x.22340] 
[0.x.22341] 
[0.x.22342] 
[0.x.22343] 
[0.x.22344] 
[0.x.22345] 
[0.x.22346] 
[0.x.22347] 
[0.x.22348] 
[0.x.22349] 
[0.x.22350] 
//
// 接下来是成员变量，其中大部分与[2.x.2900]中的变量类似，但与速度/压力系统的宏观时间步长有关的变量除外。
//
[0.x.22351] 
[0.x.22352] 
//
[0.x.22353] 
//
[0.x.22354] 
[0.x.22355] 
[0.x.22356] 
[0.x.22357] 
//
[0.x.22358] 
//
[0.x.22359] 
[0.x.22360] 
//
[0.x.22361] 
[0.x.22362] 
//
[0.x.22363] 
[0.x.22364] 
//
[0.x.22365] 
[0.x.22366] 
[0.x.22367] 
[0.x.22368] 
//
[0.x.22369] 
//
[0.x.22370] 
[0.x.22371] 
[0.x.22372] 
[0.x.22373] 
//
[0.x.22374] 
[0.x.22375] 
//
[0.x.22376] 
//
[0.x.22377] 
[0.x.22378] 
//
[0.x.22379] 
[0.x.22380] 
//
[0.x.22381] 
[0.x.22382] 
[0.x.22383] 
//
[0.x.22384] 
[0.x.22385] 
[0.x.22386] 
//
[0.x.22387] 
[0.x.22388] 
//
[0.x.22389] 
//
// 在最后，我们声明一个变量，表示材料模型。与[2.x.2901]相比，我们在这里把它作为一个成员变量，因为我们想在不同的地方使用它，所以有一个声明这样一个变量的中心位置，将使我们更容易用另一个类来替换[2.x.2902]（例如，用[2.x.2903]替换[2.x.2902]）。
[0.x.22390] 
[0.x.22391] 
//[2.x.2904] 

// 这个类的构造函数是对 [2.x.2905] 和 [2.x.2906] 中的构造函数的扩展。我们需要添加涉及饱和度的各种变量。正如介绍中所讨论的，我们将再次使用[2.x.2907]（Taylor-Hood）元素来处理Darcy系统，这是一个满足Ladyzhenskaya-Babuska-Brezzi（LBB）条件的元素组合[Brezzi and Fortin 1991, Chen 2005]，并使用[2.x.2908]元素处理饱和度。然而，通过使用存储Darcy和温度有限元的多项式程度的变量，可以很容易地持续修改这些元素的程度以及在其上使用的所有正交公式的下游。此外，我们还初始化了与算子分割有关的时间步进变量，以及矩阵装配和预处理的选项。
//
[0.x.22392] 
[0.x.22393] 
[0.x.22394] 
[0.x.22395] 
[0.x.22396] 
[0.x.22397] 
[0.x.22398] 
[0.x.22399] 
[0.x.22400] 
//
[0.x.22401] 
[0.x.22402] 
[0.x.22403] 
[0.x.22404] 
//
[0.x.22405] 
[0.x.22406] 
//
[0.x.22407] 
[0.x.22408] 
[0.x.22409] 
//
[0.x.22410] 
[0.x.22411] 
[0.x.22412] 
//
[0.x.22413] 
[0.x.22414] 
[0.x.22415] 
[0.x.22416] 
[0.x.22417] 
[0.x.22418] 
[0.x.22419] 
//
[0.x.22420] 
[0.x.22421] 
//[2.x.2909] 
//
// 这个函数设置了我们这里的DoFHandler对象（一个用于Darcy部分，一个用于饱和部分），以及将本程序中线性代数所需的各种对象设置为合适的尺寸。其基本操作与[2.x.2910]所做的类似。
//
// 该函数的主体首先列举了达西和饱和系统的所有自由度。对于Darcy部分，自由度会被排序，以确保速度优先于压力DoF，这样我们就可以将Darcy矩阵划分为一个[2.x.2911]矩阵。
//然后，
//我们需要将悬挂节点约束和Dirichlet边界值约束纳入 darcy_preconditioner_constraints。 边界条件约束只设置在压力分量上，因为对应于非混合形式的多孔介质流算子的Schur complement预处理程序[2.x.2912] ，只作用于压力变量。因此，我们使用一个过滤掉速度分量的分量掩码，这样就可以只对压力自由度进行缩减。
//
// 做完这些后，我们计算各个块中的自由度数量。然后，这些信息被用来创建达西和饱和系统矩阵的稀疏模式，以及用于建立达西预处理的预处理矩阵。如同[2.x.2913]，我们选择使用DynamicSparsityPattern的封锁版本来创建模式。因此，对于这一点，我们遵循与[2.x.2914]相同的方式，对于成员函数的其他部分，我们不必再重复描述。
//
[0.x.22422] 
[0.x.22423] 
[0.x.22424] 
[0.x.22425] 
[0.x.22426] 
[0.x.22427] 
[0.x.22428] 
[0.x.22429] 
[0.x.22430] 
//
[0.x.22431] 
[0.x.22432] 
[0.x.22433] 
[0.x.22434] 
[0.x.22435] 
[0.x.22436] 
[0.x.22437] 
//
[0.x.22438] 
[0.x.22439] 
[0.x.22440] 
[0.x.22441] 
[0.x.22442] 
[0.x.22443] 
[0.x.22444] 
//
[0.x.22445] 
//
[0.x.22446] 
[0.x.22447] 
[0.x.22448] 
[0.x.22449] 
[0.x.22450] 
[0.x.22451] 
//
[0.x.22452] 
[0.x.22453] 
//
[0.x.22454] 
[0.x.22455] 
[0.x.22456] 
[0.x.22457] 
[0.x.22458] 
[0.x.22459] 
//
[0.x.22460] 
[0.x.22461] 
[0.x.22462] 
[0.x.22463] 
[0.x.22464] 
//
[0.x.22465] 
[0.x.22466] 
//
[0.x.22467] 
//
[0.x.22468] 
[0.x.22469] 
[0.x.22470] 
[0.x.22471] 
//
[0.x.22472] 
//
[0.x.22473] 
//
[0.x.22474] 
[0.x.22475] 
[0.x.22476] 
[0.x.22477] 
[0.x.22478] 
[0.x.22479] 
//
[0.x.22480] 
[0.x.22481] 
//
[0.x.22482] 
[0.x.22483] 
//
[0.x.22484] 
[0.x.22485] 
[0.x.22486] 
[0.x.22487] 
//
[0.x.22488] 
//
[0.x.22489] 
[0.x.22490] 
[0.x.22491] 
[0.x.22492] 
//
[0.x.22493] 
//
[0.x.22494] 
[0.x.22495] 
[0.x.22496] 
[0.x.22497] 
[0.x.22498] 
[0.x.22499] 
[0.x.22500] 
//
[0.x.22501] 
[0.x.22502] 
//
[0.x.22503] 
[0.x.22504] 
//
[0.x.22505] 
[0.x.22506] 
//
[0.x.22507] 
//
[0.x.22508] 
[0.x.22509] 
[0.x.22510] 
[0.x.22511] 
//
[0.x.22512] 
[0.x.22513] 
//
[0.x.22514] 
[0.x.22515] 
[0.x.22516] 
[0.x.22517] 
[0.x.22518] 
//
[0.x.22519] 
[0.x.22520] 
//
[0.x.22521] 
[0.x.22522] 
[0.x.22523] 
//
[0.x.22524] 
[0.x.22525] 
//
[0.x.22526] 
[0.x.22527] 
[0.x.22528] 
[0.x.22529] 
//
[0.x.22530] 
[0.x.22531] 
//
[0.x.22532] 
[0.x.22533] 
//[2.x.2915] 
//
// 接下来的几个函数专门用来设置我们在这个程序中必须处理的各种系统和预处理矩阵及右手边。
//
// [2.x.2916] 
//
// 这个函数组装我们用于预处理达西系统的矩阵。我们需要的是在速度分量上用[2.x.2917]加权的向量质量矩阵和在压力分量上用[2.x.2918]加权的质量矩阵。我们首先生成一个适当阶数的正交对象，即FEValues对象，可以给出正交点的数值和梯度（连同正交权重）。接下来我们为单元格矩阵和局部与全局DoF之间的关系创建数据结构。向量phi_u和grad_phi_p将保存基函数的值，以便更快地建立局部矩阵，正如在 [2.x.2919] 中已经做的。在我们开始对所有活动单元进行循环之前，我们必须指定哪些成分是压力，哪些是速度。
//
// 局部矩阵的创建是相当简单的。只有一个由[2.x.2920]加权的项（关于速度）和一个由[2.x.2921]加权的拉普拉斯矩阵需要生成，所以局部矩阵的创建基本上只需要两行就可以完成。由于该文件顶部的材料模型函数只提供了渗透率和迁移率的倒数，我们必须根据给定的数值手工计算[2.x.2922]和[2.x.2923]，每个正交点一次。
//
// 一旦本地矩阵准备好了（在每个正交点上对本地矩阵的行和列进行循环），我们就可以得到本地的DoF指数，并将本地信息写入全局矩阵中。我们通过直接应用约束条件（即darcy_preconditioner_constraints）来做到这一点，该约束条件负责处理悬挂节点和零Dirichlet边界条件约束。这样做，我们就不必事后再做，以后也不必使用[2.x.2924]和[2.x.2925]这两个需要修改矩阵和向量项的函数，因此对于我们不能立即访问单个内存位置的特里诺斯类来说，很难编写。
//
[0.x.22534] 
[0.x.22535] 
[0.x.22536] 
[0.x.22537] 
//
[0.x.22538] 
//
[0.x.22539] 
[0.x.22540] 
[0.x.22541] 
[0.x.22542] 
[0.x.22543] 
[0.x.22544] 
[0.x.22545] 
[0.x.22546] 
[0.x.22547] 
//
[0.x.22548] 
[0.x.22549] 
//
[0.x.22550] 
//
[0.x.22551] 
//
[0.x.22552] 
[0.x.22553] 
//
[0.x.22554] 
[0.x.22555] 
//
[0.x.22556] 
[0.x.22557] 
//
[0.x.22558] 
[0.x.22559] 
[0.x.22560] 
//
[0.x.22561] 
[0.x.22562] 
[0.x.22563] 
[0.x.22564] 
//
[0.x.22565] 
//
[0.x.22566] 
[0.x.22567] 
//
[0.x.22568] 
[0.x.22569] 
//
[0.x.22570] 
[0.x.22571] 
[0.x.22572] 
//
[0.x.22573] 
[0.x.22574] 
[0.x.22575] 
//
[0.x.22576] 
[0.x.22577] 
[0.x.22578] 
[0.x.22579] 
[0.x.22580] 
//
[0.x.22581] 
[0.x.22582] 
[0.x.22583] 
[0.x.22584] 
[0.x.22585] 
[0.x.22586] 
[0.x.22587] 
[0.x.22588] 
[0.x.22589] 
[0.x.22590] 
//
[0.x.22591] 
[0.x.22592] 
[0.x.22593] 
[0.x.22594] 
[0.x.22595] 
//[2.x.2926] 
//
// 在调用上述函数组装预处理矩阵后，该函数生成将用于舒尔补块预处理的内部预处理器。前置条件需要在每个饱和时间步长时重新生成，因为它们取决于随时间变化的饱和度 [2.x.2927] 。
//
// 在这里，我们为速度-速度矩阵 [2.x.2928] 和Schur补码 [2.x.2929] 设置了预处理器。正如介绍中所解释的，我们将使用一个基于矢量矩阵[2.x.2930]的IC预处理器和另一个基于标量拉普拉斯矩阵[2.x.2931]的IC预处理器（它在频谱上与达西矩阵的舒尔补码接近）。通常，[2.x.2932]类可以被看作是一个很好的黑盒预处理程序，不需要对矩阵结构和/或背后的算子有任何特殊的了解。
//
[0.x.22596] 
[0.x.22597] 
[0.x.22598] 
[0.x.22599] 
//
[0.x.22600] 
[0.x.22601] 
//
[0.x.22602] 
[0.x.22603] 
[0.x.22604] 
//[2.x.2933] 
//
// 这是为达西系统组装线性系统的函数。
//
// 关于执行的技术细节，其程序与 [2.x.2934] 和 [2.x.2935] 中的程序相似。我们重置矩阵和向量，在单元格上创建正交公式，然后创建相应的FEValues对象。
//
// 有一件事需要评论：由于我们有一个单独的有限元和DoFHandler来处理饱和问题，我们需要生成第二个FEValues对象来正确评估饱和解。要实现这一点并不复杂：只需使用饱和结构，并为基函数值设置一个更新标志，我们需要对饱和解进行评估。这里需要记住的唯一重要部分是，两个FEValues对象使用相同的正交公式，以确保我们在循环计算两个对象的正交点时获得匹配的信息。
//
// 声明的过程中，对数组的大小、本地矩阵的创建、右手边以及与全局系统相比较的本地道夫指数的向量都有一些快捷方式。
//
[0.x.22605] 
[0.x.22606] 
[0.x.22607] 
[0.x.22608] 
[0.x.22609] 
//
[0.x.22610] 
[0.x.22611] 
//
[0.x.22612] 
[0.x.22613] 
[0.x.22614] 
[0.x.22615] 
[0.x.22616] 
//
[0.x.22617] 
[0.x.22618] 
[0.x.22619] 
//
[0.x.22620] 
[0.x.22621] 
[0.x.22622] 
[0.x.22623] 
[0.x.22624] 
[0.x.22625] 
//
[0.x.22626] 
//
[0.x.22627] 
[0.x.22628] 
//
[0.x.22629] 
[0.x.22630] 
//
[0.x.22631] 
//
[0.x.22632] 
[0.x.22633] 
//
[0.x.22634] 
[0.x.22635] 
[0.x.22636] 
//
// 接下来我们需要一个向量，该向量将包含前一时间层在正交点的饱和解的值，以组装达西方程中的饱和相关系数。
//
// 我们接下来创建的向量集包含了基函数的评价以及它们的梯度，将用于创建矩阵。把这些放到自己的数组中，而不是每次都向FEValues对象索取这些信息，是为了加速装配过程的优化，详情请见[2.x.2936]。
//
// 最后两个声明是用来从整个FE系统中提取各个块（速度、压力、饱和度）的。
//
[0.x.22637] 
//
[0.x.22638] 
[0.x.22639] 
[0.x.22640] 
//
[0.x.22641] 
[0.x.22642] 
//
// 现在开始对问题中的所有单元格进行循环。我们在这个装配例程中使用了两个不同的DoFHandlers，所以我们必须为使用中的两个对象设置两个不同的单元格迭代器。这可能看起来有点奇怪，但是由于达西系统和饱和系统都使用相同的网格，我们可以假设这两个迭代器在两个DoFHandler对象的单元格中同步运行。
//
// 循环中的第一条语句又是非常熟悉的，按照更新标志的规定对有限元数据进行更新，将局部数组清零，并得到正交点上的旧解的值。 在这一点上，我们还必须在正交点上获得前一个时间步长的饱和函数的值。为此，我们可以使用[2.x.2937]（之前已经在[2.x.2938]、[2.x.2939]和[2.x.2940]中使用），这个函数接收一个解向量，并返回当前单元的正交点的函数值列表。事实上，它返回每个正交点的完整矢量值解，即不仅是饱和度，还有速度和压力。
//
// 然后，我们就可以在单元格上的正交点上进行循环，以进行积分。这方面的公式直接来自介绍中所讨论的内容。
//
// 一旦这样做了，我们就开始在局部矩阵的行和列上进行循环，并将相关的乘积输入矩阵中。
//
// 循环所有单元的最后一步是将本地贡献输入到全局矩阵和向量结构中，并在local_dof_indices中指定位置。同样，我们让AffineConstraints类将单元格矩阵元素插入到全局矩阵中，全局矩阵已经浓缩了悬挂节点的约束。
//
[0.x.22643] 
[0.x.22644] 
[0.x.22645] 
//
[0.x.22646] 
[0.x.22647] 
[0.x.22648] 
[0.x.22649] 
//
[0.x.22650] 
[0.x.22651] 
//
[0.x.22652] 
[0.x.22653] 
//
[0.x.22654] 
[0.x.22655] 
[0.x.22656] 
[0.x.22657] 
//
[0.x.22658] 
[0.x.22659] 
[0.x.22660] 
[0.x.22661] 
[0.x.22662] 
[0.x.22663] 
[0.x.22664] 
[0.x.22665] 
[0.x.22666] 
[0.x.22667] 
[0.x.22668] 
[0.x.22669] 
[0.x.22670] 
[0.x.22671] 
[0.x.22672] 
[0.x.22673] 
[0.x.22674] 
[0.x.22675] 
[0.x.22676] 
//
[0.x.22677] 
[0.x.22678] 
[0.x.22679] 
[0.x.22680] 
//
[0.x.22681] 
[0.x.22682] 
[0.x.22683] 
[0.x.22684] 
//
[0.x.22685] 
[0.x.22686] 
//
[0.x.22687] 
[0.x.22688] 
[0.x.22689] 
[0.x.22690] 
[0.x.22691] 
//
[0.x.22692] 
[0.x.22693] 
[0.x.22694] 
[0.x.22695] 
[0.x.22696] 
//
[0.x.22697] 
[0.x.22698] 
[0.x.22699] 
//
[0.x.22700] 
//
[0.x.22701] 
[0.x.22702] 
[0.x.22703] 
[0.x.22704] 
//[2.x.2941] 

// 这个函数是为了组装饱和传输方程的线性系统。如果有必要，它会调用另外两个成员函数：assemble_saturation_matrix()和assemble_saturation_rhs()。前一个函数然后组装饱和度矩阵，只需要偶尔改变。另一方面，后一个组装右手边的函数必须在每个饱和时间步骤中调用。
//
[0.x.22705] 
[0.x.22706] 
[0.x.22707] 
[0.x.22708] 
[0.x.22709] 
[0.x.22710] 
[0.x.22711] 
[0.x.22712] 
//
[0.x.22713] 
[0.x.22714] 
[0.x.22715] 
//
// [2.x.2942] 
//
// 这个函数很容易理解，因为它只是通过基函数phi_i_s和phi_j_s为饱和线性系统的左侧形成一个简单的质量矩阵。最后，像往常一样，我们通过在local_dof_indices中指定位置将局部贡献输入全局矩阵。这是通过让AffineConstraints类将单元矩阵元素插入全局矩阵来完成的，全局矩阵已经浓缩了悬挂节点约束。
//
[0.x.22716] 
[0.x.22717] 
[0.x.22718] 
[0.x.22719] 
//
[0.x.22720] 
[0.x.22721] 
[0.x.22722] 
//
[0.x.22723] 
//
[0.x.22724] 
//
[0.x.22725] 
[0.x.22726] 
//
[0.x.22727] 
//
[0.x.22728] 
[0.x.22729] 
[0.x.22730] 
[0.x.22731] 
[0.x.22732] 
//
[0.x.22733] 
[0.x.22734] 
[0.x.22735] 
[0.x.22736] 
[0.x.22737] 
[0.x.22738] 
[0.x.22739] 
[0.x.22740] 
[0.x.22741] 
[0.x.22742] 
[0.x.22743] 
[0.x.22744] 
//
[0.x.22745] 
[0.x.22746] 
[0.x.22747] 
[0.x.22748] 
[0.x.22749] 
//
// [2.x.2943] 
//
// 这个函数是用来组装饱和传输方程的右边。在进行这项工作之前，我们必须为达西系统和饱和系统分别创建两个FEValues对象，此外，还必须为这两个系统创建两个FEFaceValues对象，因为我们在饱和方程的弱形式中存在一个边界积分项。对于饱和系统的FEFaceValues对象，我们还需要法向量，我们使用update_normal_vectors标志来申请。
//
// 接下来，在对所有单元进行循环之前，我们必须计算一些参数（例如global_u_infty、global_S_variation和global_Omega_diameter），这是人工黏度[2.x.2944]需要的。这与[2.x.2945]中的做法基本相同，所以你可以在那里看到更多的信息。
//
// 真正的工作是从循环所有的饱和和Darcy单元开始的，以便将局部贡献放到全局矢量中。在这个循环中，为了简化实现，我们把一些工作分成两个辅助函数：assemble_saturation_rhs_cell_term和assemble_saturation_rhs_boundary_term。 我们注意到，我们在这两个函数中把细胞或边界贡献插入全局向量，而不是在本函数中。
//
[0.x.22750] 
[0.x.22751] 
[0.x.22752] 
[0.x.22753] 
[0.x.22754] 
//
[0.x.22755] 
[0.x.22756] 
[0.x.22757] 
[0.x.22758] 
[0.x.22759] 
[0.x.22760] 
[0.x.22761] 
[0.x.22762] 
[0.x.22763] 
[0.x.22764] 
[0.x.22765] 
[0.x.22766] 
[0.x.22767] 
[0.x.22768] 
[0.x.22769] 
[0.x.22770] 
[0.x.22771] 
//
[0.x.22772] 
[0.x.22773] 
[0.x.22774] 
//
[0.x.22775] 
[0.x.22776] 
[0.x.22777] 
[0.x.22778] 
[0.x.22779] 
//
[0.x.22780] 
[0.x.22781] 
[0.x.22782] 
[0.x.22783] 
[0.x.22784] 
[0.x.22785] 
[0.x.22786] 
//
[0.x.22787] 
//
[0.x.22788] 
[0.x.22789] 
[0.x.22790] 
[0.x.22791] 
[0.x.22792] 
//
[0.x.22793] 
[0.x.22794] 
[0.x.22795] 
[0.x.22796] 
[0.x.22797] 
[0.x.22798] 
[0.x.22799] 
[0.x.22800] 
[0.x.22801] 
[0.x.22802] 
[0.x.22803] 
//
// [2.x.2946] 
//
// 这个函数负责整合饱和度方程右边的单元项，然后将其组装成全局右边的矢量。鉴于介绍中的讨论，这些贡献的形式很清楚。唯一棘手的部分是获得人工黏度和计算它所需的一切。该函数的前半部分专门用于这项任务。
//
// 该函数的最后一部分是将局部贡献复制到全局向量中，其位置由local_dof_indices指定。
//
[0.x.22804] 
[0.x.22805] 
[0.x.22806] 
[0.x.22807] 
[0.x.22808] 
[0.x.22809] 
[0.x.22810] 
[0.x.22811] 
[0.x.22812] 
[0.x.22813] 
//
[0.x.22814] 
[0.x.22815] 
[0.x.22816] 
[0.x.22817] 
[0.x.22818] 
[0.x.22819] 
[0.x.22820] 
//
[0.x.22821] 
[0.x.22822] 
[0.x.22823] 
[0.x.22824] 
[0.x.22825] 
[0.x.22826] 
[0.x.22827] 
[0.x.22828] 
[0.x.22829] 
[0.x.22830] 
//
[0.x.22831] 
[0.x.22832] 
[0.x.22833] 
[0.x.22834] 
[0.x.22835] 
[0.x.22836] 
[0.x.22837] 
[0.x.22838] 
[0.x.22839] 
//
[0.x.22840] 
//
[0.x.22841] 
[0.x.22842] 
[0.x.22843] 
[0.x.22844] 
[0.x.22845] 
[0.x.22846] 
[0.x.22847] 
//
[0.x.22848] 
[0.x.22849] 
[0.x.22850] 
//
[0.x.22851] 
[0.x.22852] 
[0.x.22853] 
[0.x.22854] 
[0.x.22855] 
[0.x.22856] 
[0.x.22857] 
[0.x.22858] 
//
[0.x.22859] 
[0.x.22860] 
[0.x.22861] 
[0.x.22862] 
//[2.x.2947] 
//
// 下一个函数负责饱和方程右侧形式中的边界积分项。 对于这些，我们必须计算全局边界面上的上行通量，也就是说，我们只对全局边界的流入部分弱加迪里切特边界条件。如前所述，这在[2.x.2948]中已经描述过了，所以我们不对其进行更多的描述。
//
[0.x.22863] 
[0.x.22864] 
[0.x.22865] 
[0.x.22866] 
[0.x.22867] 
[0.x.22868] 
[0.x.22869] 
[0.x.22870] 
[0.x.22871] 
//
[0.x.22872] 
//
 
[0.x.22874] 
[0.x.22875] 
[0.x.22876] 
//
[0.x.22877] 
[0.x.22878] 
[0.x.22879] 
[0.x.22880] 
//
[0.x.22881] 
[0.x.22882] 
[0.x.22883] 
//
[0.x.22884] 
[0.x.22885] 
[0.x.22886] 
[0.x.22887] 
[0.x.22888] 
//
 
[0.x.22890] 
//
[0.x.22891] 
//
[0.x.22892] 
[0.x.22893] 
[0.x.22894] 
[0.x.22895] 
[0.x.22896] 
[0.x.22897] 
[0.x.22898] 
[0.x.22899] 
[0.x.22900] 
[0.x.22901] 
[0.x.22902] 
[0.x.22903] 
[0.x.22904] 
[0.x.22905] 
//[2.x.2949] 
//
// 该函数实现了算子分割算法，即在每个时间步长中，它要么重新计算达西系统的解，要么从以前的时间步长中推算出速度/压力，然后确定时间步长的大小，然后更新饱和度变量。其实现主要遵循 [2.x.2950] 中的类似代码。除了run()函数外，它是本程序中的核心函数。
//
// 在函数的开始，我们询问是否要通过评估后验准则来解决压力-速度部分（见下面的函数）。如果有必要，我们将使用GMRES求解器和Schur补充块预处理来求解压力-速度部分，如介绍中所述。
//
[0.x.22906] 
[0.x.22907] 
[0.x.22908] 
[0.x.22909] 
[0.x.22910] 
//
[0.x.22911] 
[0.x.22912] 
[0.x.22913] 
[0.x.22914] 
//
[0.x.22915] 
[0.x.22916] 
//
[0.x.22917] 
[0.x.22918] 
[0.x.22919] 
[0.x.22920] 
[0.x.22921] 
//
[0.x.22922] 
[0.x.22923] 
[0.x.22924] 
[0.x.22925] 
//
[0.x.22926] 
[0.x.22927] 
//
[0.x.22928] 
[0.x.22929] 
[0.x.22930] 
[0.x.22931] 
//
[0.x.22932] 
[0.x.22933] 
[0.x.22934] 
//
[0.x.22935] 
//
[0.x.22936] 
//
[0.x.22937] 
[0.x.22938] 
[0.x.22939] 
//
[0.x.22940] 
[0.x.941] 
[0.x.22942] 
//
[0.x.22943] 
[0.x.22944] 
[0.x.22945] 
[0.x.22946] 
//
// 另一方面，如果我们决定不计算当前时间步长的达西系统的解，那么我们需要简单地将前两个达西解外推到与我们计算速度/压力的时间相同。我们做一个简单的线性外推，即给定从上次计算达西解到现在的宏观时间步长[2.x.2951]（由[2.x.2952]给出），以及[2.x.2953]上一个宏观时间步长（由[2.x.2954]给出），然后得到[2.x.2955] ，其中[2.x.2956]和[2.x.2957]是最近两个计算的达西解。我们只需用两行代码就可以实现这个公式。
//
// 请注意，这里的算法只有在我们至少有两个先前计算的Darcy解，我们可以从中推断出当前的时间，这一点通过要求重新计算前两个时间步骤的Darcy解来保证。
//
[0.x.22947] 
[0.x.22948] 
[0.x.22949] 
[0.x.22950] 
[0.x.22951] 
[0.x.22952] 
[0.x.22953] 
//
// 用这样计算出来的速度矢量，根据介绍中讨论的CFL标准计算出最佳时间步长......
//
[0.x.22954] 
[0.x.22955] 
//
[0.x.22956] 
[0.x.22957] 
[0.x.22958] 
[0.x.22959] 
[0.x.22960] 
[0.x.22961] 
[0.x.22962] 
//
// ......然后在我们处理时间步长的时候，还要更新我们使用的宏观时间步长。具体而言，这涉及到。(i) 如果我们刚刚重新计算了达西解，那么之前的宏观时间步长现在是固定的，当前的宏观时间步长，到现在为止，只是当前（微观）时间步长。(ii) 如果我们没有重新计算达西解，那么当前的宏观时间步长刚刚增长了[2.x.2958] 。
//
[0.x.22963] 
[0.x.22964] 
[0.x.22965] 
[0.x.22966] 
[0.x.22967] 
[0.x.22968] 
[0.x.22969] 
//
// 这个函数的最后一步是根据我们刚刚得到的速度场重新计算饱和解。这自然发生在每一个时间步骤中，我们不会跳过这些计算。在计算饱和度的最后，我们投射回允许的区间[2.x.2959]，以确保我们的解保持物理状态。
//
[0.x.22970] 
[0.x.22971] 
//
[0.x.22972] 
//
[0.x.22973] 
[0.x.22974] 
[0.x.22975] 
//
[0.x.22976] 
[0.x.22977] 
//
[0.x.22978] 
[0.x.22979] 
[0.x.22980] 
[0.x.22981] 
//
[0.x.22982] 
[0.x.22983] 
//
[0.x.22984] 
[0.x.22985] 
[0.x.22986] 
[0.x.22987] 
//[2.x.2960] 

// 下一个函数是对网格进行细化和粗化。它的工作分三块进行。(i) 计算细化指标，方法是通过使用各自的时间步长（如果这是第一个时间步长，则取唯一的解决方案），从前两个时间步长中线性推断出的解决方案向量的梯度。(ii) 在梯度大于或小于某一阈值的单元中标记出细化和粗化的单元，保留网格细化的最小和最大水平。(iii) 将解决方案从旧网格转移到新网格。这些都不是特别困难。
//
[0.x.22988] 
[0.x.22989] 
[0.x.22990] 
[0.x.22991] 
[0.x.22992] 
[0.x.22993] 
[0.x.22994] 
[0.x.22995] 
[0.x.22996] 
[0.x.22997] 
[0.x.22998] 
//
[0.x.22999] 
[0.x.23000] 
[0.x.23001] 
[0.x.23002] 
[0.x.23003] 
[0.x.23004] 
//
[0.x.23005] 
[0.x.23006] 
[0.x.23007] 
[0.x.23008] 
[0.x.23009] 
[0.x.23010] 
//
[0.x.23011] 
[0.x.23012] 
[0.x.23013] 
//
[0.x.23014] 
[0.x.23015] 
[0.x.23016] 
[0.x.23017] 
[0.x.23018] 
[0.x.23019] 
//
[0.x.23020] 
[0.x.23021] 
[0.x.23022] 
[0.x.23023] 
[0.x.23024] 
[0.x.23025] 
[0.x.23026] 
[0.x.23027] 
[0.x.23028] 
[0.x.23029] 
[0.x.23030] 
//
[0.x.23031] 
//
[0.x.23032] 
[0.x.23033] 
[0.x.23034] 
[0.x.23035] 
[0.x.23036] 
//
[0.x.23037] 
[0.x.23038] 
[0.x.23039] 
//
[0.x.23040] 
[0.x.23041] 
//
[0.x.23042] 
[0.x.23043] 
//
[0.x.23044] 
[0.x.23045] 
//
[0.x.23046] 
//
[0.x.23047] 
[0.x.23048] 
//
[0.x.23049] 
[0.x.23050] 
[0.x.23051] 
[0.x.23052] 
[0.x.23053] 
//
[0.x.23054] 
[0.x.23055] 
[0.x.23056] 
//
[0.x.23057] 
[0.x.23058] 
[0.x.23059] 
[0.x.23060] 
//
[0.x.23061] 
[0.x.23062] 
[0.x.23063] 
[0.x.23064] 
//
[0.x.23065] 
[0.x.23066] 
//
[0.x.23067] 
[0.x.23068] 
//
[0.x.23069] 
[0.x.23070] 
[0.x.23071] 
//
// [2.x.2961] 
//
// 这个函数生成图形输出。它实质上是对 [2.x.2962] 中实现的复制。
//
[0.x.23072] 
[0.x.23073] 
[0.x.23074] 
[0.x.23075] 
[0.x.23076] 
[0.x.23077] 
[0.x.23078] 
[0.x.23079] 
[0.x.23080] 
//
[0.x.23081] 
//
[0.x.23082] 
[0.x.23083] 
[0.x.23084] 
[0.x.23085] 
[0.x.23086] 
[0.x.23087] 
[0.x.23088] 
//
[0.x.23089] 
[0.x.23090] 
[0.x.23091] 
[0.x.23092] 
//
[0.x.23093] 
[0.x.23094] 
[0.x.23095] 
[0.x.23096] 
[0.x.23097] 
[0.x.23098] 
//
[0.x.23099] 
[0.x.23100] 
[0.x.23101] 
[0.x.23102] 
[0.x.23103] 
[0.x.23104] 
[0.x.23105] 
[0.x.23106] 
[0.x.23107] 
[0.x.23108] 
[0.x.23109] 
[0.x.23110] 
[0.x.23111] 
[0.x.23112] 
[0.x.23113] 
[0.x.23114] 
[0.x.23115] 
[0.x.23116] 
[0.x.23117] 
[0.x.23118] 
[0.x.23119] 
[0.x.23120] 
[0.x.23121] 
[0.x.23122] 
[0.x.23123] 
[0.x.23124] 
[0.x.23125] 
//
[0.x.23126] 
[0.x.23127] 
[0.x.23128] 
[0.x.23129] 
[0.x.23130] 
[0.x.23131] 
[0.x.23132] 
//
[0.x.23133] 
//
[0.x.23134] 
[0.x.23135] 
[0.x.23136] 
[0.x.23137] 
[0.x.23138] 
//
[0.x.23139] 
//
[0.x.23140] 
[0.x.23141] 
[0.x.23142] 
[0.x.23143] 
[0.x.23144] 
//
// [2.x.2963] 
//[2.x.2964] 
//
// 这个函数实现了自适应运算符拆分的后验标准。考虑到我们在上面实现其他函数的方式，并考虑到论文中得出的准则公式，该函数是相对简单的。
//
// 如果我们决定要采用原始的IMPES方法，即在每个时间步长中求解Darcy方程，那么可以通过将阈值[2.x.2965]（默认为[2.x.2966]）设置为0来实现，从而迫使该函数总是返回true。
//
// 最后，请注意，该函数在前两个时间步骤中无条件地返回真，以确保我们在跳过达西系统的解时总是至少解了两次，从而允许我们从[2.x.2967]中的最后两次解中推算出速度。
//
[0.x.23145] 
[0.x.23146] 
[0.x.23147] 
[0.x.23148] 
[0.x.23149] 
[0.x.23150] 
//
[0.x.23151] 
[0.x.23152] 
//
[0.x.23153] 
[0.x.23154] 
[0.x.23155] 
//
[0.x.23156] 
[0.x.23157] 
//
[0.x.23158] 
//
[0.x.23159] 
//
[0.x.23160] 
[0.x.23161] 
[0.x.23162] 
[0.x.23163] 
//
[0.x.23164] 
[0.x.23165] 
[0.x.23166] 
[0.x.23167] 
[0.x.23168] 
//
[0.x.23169] 
[0.x.23170] 
//
[0.x.23171] 
[0.x.23172] 
[0.x.23173] 
[0.x.23174] 
[0.x.23175] 
[0.x.23176] 
//
[0.x.23177] 
[0.x.23178] 
[0.x.23179] 
//
[0.x.23180] 
[0.x.23181] 
[0.x.23182] 
[0.x.23183] 
//
[0.x.23184] 
[0.x.23185] 
[0.x.23186] 
[0.x.23187] 
[0.x.23188] 
//
[0.x.23189] 
[0.x.23190] 
//
// [2.x.2968] 
//
// 下一个函数只是确保饱和度值始终保持在 [2.x.2969] 的物理合理范围内。虽然连续方程保证了这一点，但离散方程并没有。然而，如果我们允许离散解逃脱这个范围，我们就会遇到麻烦，因为像[2.x.2970]和[2.x.2971]这样的项会产生不合理的结果（例如[2.x.2972]为[2.x.2973]，这将意味着润湿液相的流动方向为[1.x.92]的散流体速度））。因此，在每个时间步骤结束时，我们只需将饱和场投射回物理上合理的区域。
//
[0.x.23191] 
[0.x.23192] 
[0.x.23193] 
[0.x.23194] 
[0.x.23195] 
[0.x.23196] 
[0.x.23197] 
[0.x.23198] 
[0.x.23199] 
//
// [2.x.2974] 
//
// 另一个比较简单的辅助函数。计算总速度乘以分数流函数的导数的最大值，即计算 [2.x.2975] 。这个项既用于时间步长的计算，也用于人工黏度中熵留项的正常化。
//
[0.x.23200] 
[0.x.23201] 
[0.x.23202] 
[0.x.23203] 
[0.x.23204] 
//
[0.x.23205] 
[0.x.23206] 
[0.x.23207] 
[0.x.23208] 
//
[0.x.23209] 
[0.x.23210] 
[0.x.23211] 
//
[0.x.23212] 
//
[0.x.23213] 
[0.x.23214] 
[0.x.23215] 
[0.x.23216] 
[0.x.23217] 
[0.x.23218] 
[0.x.23219] 
//
[0.x.23220] 
[0.x.23221] 
[0.x.23222] 
[0.x.23223] 
//
[0.x.23224] 
[0.x.23225] 
[0.x.23226] 
[0.x.23227] 
[0.x.23228] 
//
[0.x.23229] 
[0.x.23230] 
//
[0.x.23231] 
[0.x.23232] 
[0.x.23233] 
[0.x.23234] 
//
[0.x.23235] 
[0.x.23236] 
//[2.x.2976] 
//
// 为了计算稳定化项，我们需要知道饱和变量的范围。与[2.x.2977]不同，这个范围很容易被区间[2.x.2978]所约束，但是我们可以通过在正交点的集合上循环，看看那里的值是多少，从而做得更好。如果可以的话，也就是说，如果周围至少有两个时间步长，我们甚至可以把这些值推算到下一个时间步长。
//
// 和以前一样，这个函数是在对 [2.x.2979] 进行最小修改后取的。
//
[0.x.23237] 
[0.x.23238] 
[0.x.23239] 
[0.x.23240] 
[0.x.23241] 
[0.x.23242] 
//
[0.x.23243] 
[0.x.23244] 
[0.x.23245] 
//
[0.x.23246] 
[0.x.23247] 
[0.x.23248] 
[0.x.23249] 
//
[0.x.23250] 
[0.x.23251] 
[0.x.23252] 
[0.x.23253] 
[0.x.23254] 
[0.x.23255] 
[0.x.23256] 
//
[0.x.23257] 
[0.x.23258] 
[0.x.23259] 
[0.x.23260] 
[0.x.23261] 
//
[0.x.23262] 
[0.x.23263] 
[0.x.23264] 
[0.x.23265] 
//
[0.x.23266] 
[0.x.23267] 
[0.x.23268] 
[0.x.23269] 
[0.x.23270] 
[0.x.23271] 
//
[0.x.23272] 
[0.x.23273] 
[0.x.23274] 
[0.x.23275] 
[0.x.23276] 
//
[0.x.23277] 
[0.x.23278] 
[0.x.23279] 
//
[0.x.23280] 
[0.x.23281] 
[0.x.23282] 
[0.x.23283] 
//
[0.x.23284] 
[0.x.23285] 
[0.x.23286] 
//
// [2.x.2980] 
//
// 最后一个工具函数是用来计算给定单元上的人工粘度的。如果你面前有它的公式，这并不特别复杂，看一下 [2.x.2981] 中的实现。与那个教程程序的主要区别是，这里的速度不是简单的[2.x.2982]，而是[2.x.2983]，一些公式需要做相应的调整。
//
[0.x.23287] 
[0.x.23288] 
[0.x.23289] 
[0.x.23290] 
[0.x.23291] 
[0.x.23292] 
[0.x.23293] 
[0.x.23294] 
[0.x.23295] 
[0.x.23296] 
[0.x.23297] 
[0.x.23298] 
[0.x.23299] 
//
[0.x.23300] 
[0.x.23301] 
//
[0.x.23302] 
//
[0.x.23303] 
[0.x.23304] 
//
[0.x.23305] 
//
[0.x.23306] 
[0.x.23307] 
[0.x.23308] 
[0.x.23309] 
[0.x.23310] 
//
[0.x.23311] 
[0.x.23312] 
[0.x.23313] 
//
[0.x.23314] 
[0.x.23315] 
//
[0.x.23316] 
[0.x.23317] 
[0.x.23318] 
//
[0.x.23319] 
[0.x.23320] 
[0.x.23321] 
[0.x.23322] 
//
[0.x.23323] 
[0.x.23324] 
[0.x.23325] 
[0.x.23326] 
[0.x.23327] 
//
[0.x.23328] 
[0.x.23329] 
[0.x.23330] 
[0.x.23331] 
//
[0.x.23332] 
[0.x.23333] 
[0.x.23334] 
[0.x.23335] 
[0.x.23336] 
[0.x.23337] 
//[2.x.2984] 
//
// 除了[2.x.2985]之外，这个函数是这个程序的主要功能，因为它控制了迭代的时间，以及何时将解决方案写入输出文件，何时进行网格细化。
//
// 除了启动代码通过[2.x.2986]标签循环回到函数的开头外，一切都应该是相对简单的。无论如何，它模仿了 [2.x.2987] 中的相应函数。
//
[0.x.23338] 
[0.x.23339] 
[0.x.23340] 
[0.x.23341] 
[0.x.23342] 
//
[0.x.23343] 
[0.x.23344] 
[0.x.23345] 
//
[0.x.23346] 
//
[0.x.23347] 
//
[0.x.23348] 
//
[0.x.23349] 
[0.x.23350] 
[0.x.23351] 
[0.x.23352] 
[0.x.23353] 
//
[0.x.23354] 
[0.x.23355] 
//
[0.x.23356] 
//
[0.x.23357] 
[0.x.23358] 
[0.x.23359] 
[0.x.23360] 
//
[0.x.23361] 
//
[0.x.23362] 
//
[0.x.23363] 
[0.x.23364] 
//
[0.x.23365] 
[0.x.23366] 
[0.x.23367] 
//
[0.x.23368] 
[0.x.23369] 
[0.x.23370] 
[0.x.23371] 
[0.x.23372] 
[0.x.23373] 
//
[0.x.23374] 
[0.x.23375] 
//
[0.x.23376] 
[0.x.23377] 
[0.x.23378] 
[0.x.23379] 
[0.x.23380] 
[0.x.23381] 
//
// [2.x.2988] 
//
// 主函数看起来与所有其他程序几乎一样。对于使用Trilinos的程序来说，需要初始化MPI子系统--即使是那些实际上没有并行运行的程序--在 [2.x.2989] 中有解释。
//
[0.x.23382] 
[0.x.23383] 
[0.x.23384] 
[0.x.23385] 
[0.x.23386] 
[0.x.23387] 
//
[0.x.23388] 
[0.x.23389] 
//
// 这个程序只能在串行中运行。否则，将抛出一个异常。
//
[0.x.23390] 
[0.x.23391] 
[0.x.23392] 
//
[0.x.23393] 
[0.x.23394] 
[0.x.23395] 
[0.x.23396] 
[0.x.23397] 
[0.x.23398] 
[0.x.23399] 
[0.x.23400] 
[0.x.23401] 
[0.x.23402] 
[0.x.23403] 
[0.x.23404] 
[0.x.23405] 
[0.x.23406] 
//
[0.x.23407] 
[0.x.23408] 
[0.x.23409] 
[0.x.23410] 
[0.x.23411] 
[0.x.23412] 
[0.x.23413] 
[0.x.23414] 
[0.x.23415] 
[0.x.23416] 
[0.x.23417] 
[0.x.23418] 
[0.x.23419] 
[0.x.23420] 
//
[0.x.23421] 
[0.x.23422] 
[0.x.23423] 
[0.x.23424] 
[0.x.23425] 
[0.x.23426] 
[0.x.23427] 
[0.x.23428] 
[0.x.23429] 
[0.x.23430] 
[0.x.23431] 
[0.x.23432] 
[0.x.23433] 
[0.x.23434] 
[0.x.23435] 
[0.x.23436] 
[0.x.23437] 
//
[0.x.23438] 
[0.x.23439] 
[0.x.23440] 
[0.x.23441] 
//
// 我们首先包括所有必要的deal.II头文件和一些C++相关的文件。它们已经在以前的教程程序中详细讨论过了，所以你只需要参考过去的教程就可以了。
//
[0.x.23442] 
[0.x.23443] 
[0.x.23444] 
[0.x.23445] 
[0.x.23446] 
[0.x.23447] 
[0.x.23448] 
[0.x.23449] 
[0.x.23450] 
[0.x.23451] 
//
// 这个标头为我们提供了在正交点存储数据的功能
//
[0.x.23452] 
//
[0.x.23453] 
[0.x.23454] 
[0.x.23455] 
[0.x.23456] 
//
[0.x.23457] 
[0.x.23458] 
[0.x.23459] 
[0.x.23460] 
[0.x.23461] 
[0.x.23462] 
//
[0.x.23463] 
[0.x.23464] 
[0.x.23465] 
[0.x.23466] 
[0.x.23467] 
[0.x.23468] 
[0.x.23469] 
[0.x.23470] 
[0.x.23471] 
//
// 这里是使用LinearOperator类所需的头文件。这些头文件也都被方便地打包到一个头文件中，即<deal.II/lac/linear_operator_tools.h>，但为了透明起见，我们在此列出那些特别需要的头文件。
//
[0.x.23472] 
[0.x.23473] 
//
[0.x.23474] 
[0.x.23475] 
//
// 在这两个标题中定义的是一些与有限应变弹性有关的操作。第一个将帮助我们计算一些运动量，第二个提供一些标准的张量定义。
//
[0.x.23476] 
[0.x.23477] 
//
[0.x.23478] 
[0.x.23479] 
//
// 然后，我们将所有与本教程程序有关的东西都放入一个自己的命名空间，并将所有deal.II的函数和类名导入其中。
//
[0.x.23480] 
[0.x.23481] 
[0.x.23482] 
//[2.x.2990] 
//
// 有几个参数可以在代码中设置，所以我们设置了一个ParameterHandler对象，在运行时读入选择。
//
[0.x.23483] 
[0.x.23484] 
//[2.x.2991] 
//
// 正如介绍中提到的，对于位移[2.x.2992]应该使用不同的阶次插值，而不是压力[2.x.2993]和膨胀[2.x.2994]。 选择[2.x.2995]和[2.x.2996]作为元素级的不连续（常数）函数，导致了平均扩张方法。不连续的近似允许[2.x.2997]和[2.x.2998]被浓缩出来，并恢复了基于位移的经典方法。这里我们指定用于近似解的多项式阶数。正交阶数应作相应调整。
//
[0.x.23485] 
[0.x.23486] 
[0.x.23487] 
[0.x.23488] 
//
[0.x.23489] 
//
[0.x.23490] 
[0.x.23491] 
//
[0.x.23492] 
[0.x.23493] 
[0.x.23494] 
[0.x.23495] 
[0.x.23496] 
[0.x.23497] 
[0.x.23498] 
[0.x.23499] 
//
[0.x.23500] 
[0.x.23501] 
[0.x.23502] 
[0.x.23503] 
[0.x.23504] 
[0.x.23505] 
[0.x.23506] 
//
[0.x.23507] 
[0.x.23508] 
[0.x.23509] 
[0.x.23510] 
[0.x.23511] 
[0.x.23512] 
[0.x.23513] 
[0.x.23514] 
[0.x.23515] 
//[2.x.2999] 
//
// 对问题的几何形状和应用的载荷进行调整。 由于这里模拟的问题比较特殊，所以可以将载荷比例改变为特定的数值，以便与文献中给出的结果进行比较。
//
[0.x.23516] 
[0.x.23517] 
[0.x.23518] 
[0.x.23519] 
[0.x.23520] 
//
[0.x.23521] 
//
[0.x.23522] 
[0.x.23523] 
//
[0.x.23524] 
[0.x.23525] 
[0.x.23526] 
[0.x.23527] 
[0.x.23528] 
[0.x.23529] 
[0.x.23530] 
[0.x.23531] 
//
[0.x.23532] 
[0.x.23533] 
[0.x.23534] 
[0.x.23535] 
//
[0.x.23536] 
[0.x.23537] 
[0.x.23538] 
[0.x.23539] 
[0.x.23540] 
[0.x.23541] 
[0.x.23542] 
//
[0.x.23543] 
[0.x.23544] 
[0.x.23545] 
[0.x.23546] 
[0.x.23547] 
[0.x.23548] 
[0.x.23549] 
[0.x.23550] 
[0.x.23551] 
[0.x.23552] 
//[2.x.3000] 
//
// 我们还需要新胡克材料的剪切模量[2.x.3001]和泊松率[2.x.3002]。
//
[0.x.23553] 
[0.x.23554] 
[0.x.23555] 
[0.x.23556] 
//
[0.x.23557] 
//
[0.x.23558] 
[0.x.23559] 
//
[0.x.23560] 
[0.x.23561] 
[0.x.23562] 
[0.x.23563] 
[0.x.23564] 
[0.x.23565] 
[0.x.23566] 
[0.x.23567] 
//
[0.x.23568] 
[0.x.23569] 
[0.x.23570] 
[0.x.23571] 
[0.x.23572] 
[0.x.23573] 
[0.x.23574] 
//
[0.x.23575] 
[0.x.23576] 
[0.x.23577] 
[0.x.23578] 
[0.x.23579] 
[0.x.23580] 
[0.x.23581] 
[0.x.23582] 
[0.x.23583] 
//[2.x.3003] 
//
// 接下来，我们选择求解器和预处理器的设置。 当牛顿增量中出现大的非线性运动时，使用有效的前置条件对于确保收敛性至关重要。
//
[0.x.23584] 
[0.x.23585] 
[0.x.23586] 
[0.x.23587] 
[0.x.23588] 
[0.x.23589] 
[0.x.23590] 
[0.x.23591] 
//
[0.x.23592] 
//
[0.x.23593] 
[0.x.23594] 
//
[0.x.23595] 
[0.x.23596] 
[0.x.23597] 
[0.x.23598] 
[0.x.23599] 
[0.x.23600] 
[0.x.23601] 
[0.x.23602] 
//
[0.x.23603] 
[0.x.23604] 
[0.x.23605] 
[0.x.23606] 
//
[0.x.23607] 
[0.x.23608] 
[0.x.23609] 
[0.x.23610] 
[0.x.23611] 
//
[0.x.23612] 
[0.x.23613] 
[0.x.23614] 
[0.x.23615] 
//
[0.x.23616] 
[0.x.23617] 
[0.x.23618] 
[0.x.23619] 
//
[0.x.23620] 
[0.x.23621] 
[0.x.23622] 
[0.x.23623] 
[0.x.23624] 
[0.x.23625] 
[0.x.23626] 
//
[0.x.23627] 
[0.x.23628] 
[0.x.23629] 
[0.x.23630] 
[0.x.23631] 
[0.x.23632] 
[0.x.23633] 
[0.x.23634] 
[0.x.23635] 
[0.x.23636] 
[0.x.23637] 
[0.x.23638] 
[0.x.23639] 
//[2.x.3004] 
//
// 采用牛顿-拉弗森方案来解决非线性治理方程组。 我们现在定义牛顿-拉弗森非线性求解器的公差和最大迭代次数。
//
[0.x.23640] 
[0.x.23641] 
[0.x.23642] 
[0.x.23643] 
[0.x.23644] 
//
[0.x.23645] 
//
[0.x.23646] 
[0.x.23647] 
//
[0.x.23648] 
[0.x.23649] 
[0.x.23650] 
[0.x.23651] 
[0.x.23652] 
[0.x.23653] 
[0.x.23654] 
[0.x.23655] 
//
[0.x.23656] 
[0.x.23657] 
[0.x.23658] 
[0.x.23659] 
//
[0.x.23660] 
[0.x.23661] 
[0.x.23662] 
[0.x.23663] 
[0.x.23664] 
[0.x.23665] 
[0.x.23666] 
//
[0.x.23667] 
[0.x.23668] 
[0.x.23669] 
[0.x.23670] 
[0.x.23671] 
[0.x.23672] 
[0.x.23673] 
[0.x.23674] 
[0.x.23675] 
[0.x.23676] 
//[2.x.3005] 
//
// 设置时间步长[2.x.3006]和模拟结束时间。
//
[0.x.23677] 
[0.x.23678] 
[0.x.23679] 
[0.x.23680] 
//
[0.x.23681] 
//
[0.x.23682] 
[0.x.23683] 
//
[0.x.23684] 
[0.x.23685] 
[0.x.23686] 
[0.x.23687] 
[0.x.23688] 
//
[0.x.23689] 
[0.x.23690] 
[0.x.23691] 
[0.x.23692] 
[0.x.23693] 
[0.x.23694] 
[0.x.23695] 
//
[0.x.23696] 
[0.x.23697] 
[0.x.23698] 
[0.x.23699] 
[0.x.23700] 
[0.x.23701] 
[0.x.23702] 
[0.x.23703] 
[0.x.23704] 
//[2.x.3007] 
//
// 最后，我们将上述所有的结构合并到一个容器中，这个容器可以容纳我们所有的运行时选择。
//
[0.x.23705] 
[0.x.23706] 
[0.x.23707] 
[0.x.23708] 
[0.x.23709] 
[0.x.23710] 
//
[0.x.23711] 
[0.x.23712] 
//
[0.x.23713] 
//
[0.x.23714] 
[0.x.23715] 
//
[0.x.23716] 
[0.x.23717] 
[0.x.23718] 
[0.x.23719] 
[0.x.23720] 
[0.x.23721] 
[0.x.23722] 
//
[0.x.23723] 
[0.x.23724] 
[0.x.23725] 
[0.x.23726] 
[0.x.23727] 
[0.x.23728] 
[0.x.23729] 
[0.x.23730] 
[0.x.23731] 
//
[0.x.23732] 
[0.x.23733] 
[0.x.23734] 
[0.x.23735] 
[0.x.23736] 
[0.x.23737] 
[0.x.23738] 
[0.x.23739] 
[0.x.23740] 
[0.x.23741] 
//[2.x.3008] 
//
// 一个简单的类来存储时间数据。它的功能是透明的，所以没有必要讨论。为了简单起见，我们假设一个恒定的时间步长。
//
[0.x.23742] 
[0.x.23743] 
[0.x.23744] 
[0.x.23745] 
[0.x.23746] 
[0.x.23747] 
[0.x.23748] 
[0.x.23749] 
[0.x.23750] 
//
[0.x.23751] 
//
[0.x.23752] 
[0.x.23753] 
[0.x.23754] 
[0.x.23755] 
[0.x.23756] 
[0.x.23757] 
[0.x.23758] 
[0.x.23759] 
[0.x.23760] 
[0.x.23761] 
[0.x.23762] 
[0.x.23763] 
[0.x.23764] 
[0.x.23765] 
[0.x.23766] 
[0.x.23767] 
[0.x.23768] 
[0.x.23769] 
[0.x.23770] 
[0.x.23771] 
[0.x.23772] 
//
[0.x.23773] 
[0.x.23774] 
[0.x.23775] 
[0.x.23776] 
[0.x.23777] 
[0.x.23778] 
//[2.x.3009] 
//
// 正如介绍中所讨论的，新胡克材料是一种超弹性材料。 整个领域被假定为由可压缩的新胡克材料组成。 这个类别定义了这种材料在三场公式中的行为。 可压缩的新胡克材料可以用应变能量函数（SEF）来描述 [2.x.3010] 。
//
// 等效响应由[2.x.3011]给出，其中[2.x.3012]和[2.x.3013]是左或右等效Cauchy-Green变形张量的第一不变量。这就是[2.x.3014] 。在这个例子中，支配体积响应的SEF被定义为[2.x.3015] ，其中[2.x.3016] 是[1.x.93]，[2.x.3017]是[1.x.94]。
//
// 下面的类将被用来描述我们工作中的材料特征，并提供了一个中心点，如果要实现不同的材料模型，就需要对其进行修改。为了使其发挥作用，我们将在每个正交点存储一个这种类型的对象，并在每个对象中存储当前状态（由三个场的值或度量来表征），这样我们就可以围绕当前状态计算出线性化的弹性系数。
//
[0.x.23779] 
[0.x.23780] 
[0.x.23781] 
[0.x.23782] 
[0.x.23783] 
[0.x.23784] 
[0.x.23785] 
[0.x.23786] 
[0.x.23787] 
[0.x.23788] 
[0.x.23789] 
[0.x.23790] 
[0.x.23791] 
[0.x.23792] 
//
// 我们用基于 [2.x.3018] 和压力 [2.x.3019] 以及膨胀 [2.x.3020] 的各种变形相关数据来更新材料模型，并在函数的最后包括一个内部一致性的物理检查。
//
[0.x.23793] 
[0.x.23794] 
[0.x.23795] 
[0.x.23796] 
[0.x.23797] 
[0.x.23798] 
[0.x.23799] 
[0.x.23800] 
[0.x.23801] 
//
[0.x.23802] 
[0.x.23803] 
//
// 第二个函数决定了基尔霍夫应力 [2.x.3021] 。
[0.x.23804] 
[0.x.23805] 
[0.x.23806] 
[0.x.23807] 
//
// 空间设置中的四阶弹性张量[2.x.3022]由SEF[2.x.3023]计算为[2.x.3024] 其中[2.x.3025] 
[0.x.23808] 
[0.x.23809] 
[0.x.23810] 
[0.x.23811] 
//
// 体积自由能相对于 [2.x.3026] 的导数，返回 [2.x.3027] 。
[0.x.23812] 
[0.x.23813] 
[0.x.23814] 
[0.x.23815] 
//
// 体积自由能的二次导数，相对于 [2.x.3028] 。我们需要在切线中明确地进行以下计算，所以我们将其公开。 我们计算出 [2.x.3029] 。
[0.x.23816] 
[0.x.23817] 
[0.x.23818] 
[0.x.23819] 
//
// 接下来的几个函数会返回各种数据，我们选择将其与材料一起存储。
//
[0.x.23820] 
[0.x.23821] 
[0.x.23822] 
[0.x.23823] 
//
[0.x.23824] 
[0.x.23825] 
[0.x.23826] 
[0.x.23827] 
//
[0.x.23828] 
[0.x.23829] 
[0.x.23830] 
[0.x.23831] 
//
[0.x.23832] 
//
// 定义构成模型参数 [2.x.3030] （体积模量）和新胡克模型参数 [2.x.3031] 。
//
[0.x.23833] 
[0.x.23834] 
//
// 模型的具体数据，方便与材料一起存储。
//
[0.x.23835] 
[0.x.23836] 
[0.x.23837] 
[0.x.23838] 
//
// 以下函数在内部用于确定上述一些公共函数的结果。第一个函数决定了体积基尔霍夫应力 [2.x.3032] 。
//
[0.x.23839] 
[0.x.23840] 
[0.x.23841] 
[0.x.23842] 
//
// 接下来，确定等效基尔霍夫应力 [2.x.3033] 。
//
[0.x.23843] 
[0.x.23844] 
[0.x.23845] 
[0.x.23846] 
//
// 然后，确定虚构的基尔霍夫应力 [2.x.3034] 。
//
[0.x.23847] 
[0.x.23848] 
[0.x.23849] 
[0.x.23850] 
//
// 计算切线的体积部分 [2.x.3035] 。
//
[0.x.23851] 
[0.x.23852] 
[0.x.23853] 
[0.x.23854] 
[0.x.23855] 
[0.x.23856] 
//
// 计算切线的等值部分 [2.x.3036] 。
//
[0.x.23857] 
[0.x.23858] 
[0.x.23859] 
[0.x.23860] 
[0.x.23861] 
[0.x.23862] 
[0.x.23863] 
[0.x.23864] 
[0.x.23865] 
//
[0.x.23866] 
[0.x.23867] 
[0.x.23868] 
[0.x.23869] 
[0.x.23870] 
[0.x.23871] 
//
// 计算虚构的弹性张量 [2.x.3037] 。对于所选择的材料模型，这只是零。
//
[0.x.23872] 
[0.x.23873] 
[0.x.23874] 
[0.x.23875] 
[0.x.23876] 
//[2.x.3038] 
//
// 正如在[2.x.3039]中所看到的，[2.x.3040]类提供了一种在正交点存储数据的方法。 这里每个正交点都持有一个指向材料描述的指针。 因此，不同的材料模型可以用在域的不同区域。 在其他数据中，我们选择为正交点存储Kirchhoff应力[2.x.3041]和正切[2.x.3042]。
//
[0.x.23877] 
[0.x.23878] 
[0.x.23879] 
[0.x.23880] 
[0.x.23881] 
[0.x.23882] 
[0.x.23883] 
[0.x.23884] 
[0.x.23885] 
[0.x.23886] 
[0.x.23887] 
//
[0.x.23888] 
//
// 第一个函数用于创建一个材料对象并正确初始化所有的张量。第二个函数根据当前的变形量[2.x.3043]、压力[2.x.3044]和扩张[2.x.3045]场值更新存储的数值和应力。
//
[0.x.23889] 
[0.x.23890] 
[0.x.23891] 
[0.x.23892] 
[0.x.23893] 
[0.x.23894] 
[0.x.23895] 
//
// 为此，我们从位移梯度[2.x.3047]中计算出变形梯度[2.x.3046] ，即[2.x.3048]，然后让与这个正交点相关的材料模型进行自我更新。当计算变形梯度时，我们必须注意与哪些数据类型进行比较[2.x.3049]：由于[2.x.3050]有数据类型SymmetricTensor，只要写[2.x.3051]就可以将第二个参数转换为对称张量，进行求和，然后将结果投给Tensor（即可能是非对称张量的类型）。然而，由于[2.x.3052]在一般情况下是非对称的，转换为SymmetricTensor将会失败。我们可以通过先将[2.x.3053]转换为Tensor，然后像在非对称张量之间一样执行加法，来避免这种来回折腾。
//
[0.x.23896] 
[0.x.23897] 
[0.x.23898] 
[0.x.23899] 
[0.x.23900] 
[0.x.23901] 
//
// 材料已经更新，所以我们现在计算基尔霍夫应力[2.x.3054]，切线[2.x.3055]和体积自由能的一、二次导数。
//
// 我们还存储了变形梯度的逆值，因为我们经常使用它。
//
[0.x.23902] 
[0.x.23903] 
[0.x.23904] 
[0.x.23905] 
[0.x.23906] 
[0.x.23907] 
//
// 我们提供一个接口来检索某些数据。 下面是运动学变量。
//
[0.x.23908] 
[0.x.23909] 
[0.x.23910] 
[0.x.23911] 
//
[0.x.23912] 
[0.x.23913] 
[0.x.23914] 
[0.x.23915] 
//
[0.x.23916] 
[0.x.23917] 
[0.x.23918] 
[0.x.23919] 

// ...和动能变量。 这些在材料和全局切线矩阵以及残余装配操作中使用。
//
[0.x.23920] 
[0.x.23921] 
[0.x.23922] 
[0.x.23923] 
//
[0.x.23924] 
[0.x.23925] 
[0.x.23926] 
[0.x.23927] 
//
[0.x.23928] 
[0.x.23929] 
[0.x.23930] 
[0.x.23931] 
//
[0.x.23932] 
[0.x.23933] 
[0.x.23934] 
[0.x.23935] 
//
// 最后是切线。
//
[0.x.23936] 
[0.x.23937] 
[0.x.23938] 
[0.x.23939] 
//
// 在成员函数方面，这个类为它所代表的正交点存储了一个材料类型的副本，以备在域的不同区域使用不同的材料，以及变形梯度的逆值...
//
[0.x.23940] 
[0.x.23941] 
//
[0.x.23942] 
//
// ...... 和应力型变量以及切线 [2.x.3056] 。
//
[0.x.23943] 
[0.x.23944] 
[0.x.23945] 
//
[0.x.23946] 
[0.x.23947] 
//[2.x.3057] 
//
// Solid类是中心类，它代表了手头的问题。它遵循通常的方案，即它真正拥有的是一个构造函数、解构函数和一个[2.x.3058]函数，该函数将所有的工作分派给这个类的私有函数。
//
[0.x.23948] 
[0.x.23949] 
[0.x.23950] 
[0.x.23951] 
[0.x.23952] 
//
[0.x.23953] 
//
[0.x.23954] 
//
// 在这个类的私有部分，我们首先向前声明一些对象，这些对象在使用WorkStream对象进行并行工作时使用（关于这方面的更多信息，请参见[2.x.3059]模块）。
//
// 我们声明这样的结构，用于正切（刚度）矩阵和右手边矢量的计算，静态冷凝，以及更新正交点。
//
[0.x.23955] 
[0.x.23956] 
//
[0.x.23957] 
[0.x.23958] 
//
[0.x.23959] 
[0.x.23960] 
//
// 我们从一个建立网格的成员函数开始收集。
//
[0.x.23961] 
//
// 设置要解决的有限元系统。
//
[0.x.23962] 
//
[0.x.23963] 
//
// 为增量位移场创建Dirichlet约束。
//
[0.x.23964] 
//
// 使用多线程的几个函数来组装系统和右手边的矩阵。它们中的每一个都是包装函数，一个是在WorkStream模型中对一个单元进行工作的执行函数，另一个是将对这一个单元的工作复制到代表它的全局对象中。
//
[0.x.23965] 
//
[0.x.23966] 
[0.x.23967] 
[0.x.23968] 
[0.x.23969] 
//
// 还有类似的，执行全局静态冷凝。
//
[0.x.23970] 
//
[0.x.23971] 
[0.x.23972] 
[0.x.23973] 
[0.x.23974] 
//
[0.x.23975] 
//
// 创建并更新正交点。在这里，没有数据需要被复制到全局对象中，所以copy_local_to_global函数是空的。
//
[0.x.23976] 
//
[0.x.23977] 
//
[0.x.23978] 
[0.x.23979] 
[0.x.23980] 
[0.x.23981] 
//
[0.x.23982] 
[0.x.23983] 
//
// 用牛顿-拉弗森方法求解位移。我们把这个函数分成非线性循环和解决线性化的Newton-Raphson步骤的函数。
//
[0.x.23984] 
//
[0.x.23985] 
[0.x.23986] 
//
// 检索解决方案，以及后期处理和将数据写入文件。
//
[0.x.23987] 
[0.x.23988] 
//
[0.x.23989] 
//
// 最后是一些描述当前状态的成员变量。一个用于描述问题设置的参数集合...
//
[0.x.23990] 
//
// ...参考配置的体积...
//
[0.x.23991] 
//
// ......以及对解决问题的几何形状的描述。
//
[0.x.23992] 
//
// 同时，记录当前时间和评估某些函数的时间
//
[0.x.23993] 
[0.x.23994] 
//
// 一个存储正交点信息的对象。与[2.x.3060]不同，这里采用了deal.II的本地正交点数据管理器。
//
[0.x.23995] 
[0.x.23996] 
[0.x.23997] 
//
// 对有限元系统的描述，包括位移多项式程度、自由度处理程序、每个单元的DoF数量以及用于从解向量中检索信息的提取器对象。
//
[0.x.23998] 
[0.x.23999] 
[0.x.24000] 
[0.x.24001] 
[0.x.24002] 
[0.x.24003] 
[0.x.24004] 
//
// 说明块系统是如何安排的。有3个块，第一个包含一个矢量DOF [2.x.3061] ，而另外两个描述标量DOF，[2.x.3062] 和 [2.x.3063] 。
//
[0.x.24005] 
[0.x.24006] 
[0.x.24007] 
[0.x.24008] 
[0.x.24009] 
//
[0.x.24010] 
[0.x.24011] 
[0.x.24012] 
[0.x.24013] 
[0.x.24014] 
[0.x.24015] 
//
[0.x.24016] 
[0.x.24017] 
[0.x.24018] 
[0.x.24019] 
//
//单元和面的高斯正交规则。单元和面的正交点的数量被记录下来。
//
[0.x.24020] 
[0.x.24021] 
[0.x.24022] 
[0.x.24023] 
//
// 用于存储收敛的解和右手边向量以及切线矩阵的对象。有一个AffineConstraints对象，用于跟踪约束条件。 我们利用了为块状系统设计的稀疏性模式。
//
[0.x.24024] 
[0.x.24025] 
[0.x.24026] 
[0.x.24027] 
[0.x.24028] 
//然后
//定义一些变量来存储规范，并更新规范和归一化系数。
//
[0.x.24029] 
[0.x.24030] 
[0.x.24031] 
[0.x.24032] 
[0.x.24033] 
[0.x.24034] 
[0.x.24035] 
[0.x.24036] 
//
[0.x.24037] 
[0.x.24038] 
[0.x.24039] 
[0.x.24040] 
[0.x.24041] 
[0.x.24042] 
[0.x.24043] 
[0.x.24044] 
[0.x.24045] 
[0.x.24046] 
[0.x.24047] 
[0.x.24048] 
[0.x.24049] 
[0.x.24050] 
[0.x.24051] 
[0.x.24052] 
[0.x.24053] 
[0.x.24054] 
//
[0.x.24055] 
[0.x.24056] 
//
[0.x.24057] 
[0.x.24058] 
//
// 计算误差措施的方法
//
[0.x.24059] 
//
[0.x.24060] 
[0.x.24061] 
//
[0.x.24062] 
//
// 计算空间配置中的体积
//
[0.x.24063] 
//
// 以悦目的方式向屏幕打印信息...
//
[0.x.24064] 
//
[0.x.24065] 
[0.x.24066] 
//[2.x.3064] 
//[2.x.3065] 
//
// 我们使用从参数文件中提取的数据来初始化Solid类。
//
[0.x.24067] 
[0.x.24068] 
[0.x.24069] 
[0.x.24070] 
[0.x.24071] 
[0.x.24072] 
[0.x.24073] 
[0.x.24074] 
[0.x.24075] 
//
// 有限元系统是由昏暗的连续位移DOF和不连续的压力和膨胀DOF组成。为了满足Babuska-Brezzi或LBB稳定性条件（见Hughes（2000）），我们设置了一个[2.x.3066]系统。 2.x.3067]元素满足这个条件，而[2.x.3068]元素不满足。然而，事实证明，后者还是表现出良好的收敛特性。
//
[0.x.24076] 
[0.x.24077] 
[0.x.24078] 
[0.x.24079] 
[0.x.24080] 
[0.x.24081] 
[0.x.24082] 
[0.x.24083] 
[0.x.24084] 
[0.x.24085] 
[0.x.24086] 
[0.x.24087] 
[0.x.24088] 
[0.x.24089] 
[0.x.24090] 
[0.x.24091] 
[0.x.24092] 
[0.x.24093] 
[0.x.24094] 
[0.x.24095] 
[0.x.24096] 
[0.x.24097] 
//
// 在解决准静态问题时，时间成为一个加载参数，即我们随着时间线性增加加载量，使得这两个概念可以互换。我们选择用恒定的时间步长来线性递增时间。
//
// 我们从预处理开始，设置初始扩张值，然后输出初始网格，然后开始模拟，开始第一次时间（和载荷）递增。
//
// 在对初始解场施加约束[2.x.3069]时，必须注意（或者至少要考虑一下）。该约束对应于未变形构型中变形梯度的行列式，也就是身份张量。我们使用FE_DGPMonomial基数来插值扩张场，因此我们不能简单地将相应的dof设置为unity，因为它们对应于单项式系数。因此，我们使用[2.x.3070]函数来为我们做这项工作。[2.x.3071]函数需要一个参数，表明悬挂节点的约束。我们在这个程序中没有 所以我们必须创建一个约束对象。在原始状态下，约束对象是没有排序的，必须先进行排序（使用[2.x.3072]函数）才能使用。请看 [2.x.3073] 以了解更多信息。我们只需要强制执行扩张的初始条件。为了做到这一点，我们使用ComponentSelectFunction，它作为一个掩码，将n_components的J_component设置为1。 这正是我们想要的。请看[2.x.3074]中的用法，了解更多信息。
//
[0.x.24098] 
[0.x.24099] 
[0.x.24100] 
[0.x.24101] 
[0.x.24102] 
[0.x.24103] 
[0.x.24104] 
[0.x.24105] 
//
[0.x.24106] 
//
[0.x.24107] 
[0.x.24108] 
[0.x.24109] 
[0.x.24110] 
[0.x.24111] 
//
// 然后我们宣布增量解决方案更新[2.x.3075]并开始在时域上循环。
//
// 在开始的时候，我们重置这个时间步长的解决方案更新...
//
[0.x.24112] 
[0.x.24113] 
[0.x.24114] 
[0.x.24115] 
//
// ...求解当前时间步长并更新总解向量 [2.x.3076] ...
//
[0.x.24116] 
[0.x.24117] 
//
// ...并在快乐地进入下一个时间步骤之前绘制结果。
//
[0.x.24118] 
[0.x.24119] 
[0.x.24120] 
[0.x.24121] 
//[2.x.3077] 
//[2.x.3078] 
//
// 第一组私有成员函数与并行化有关。我们使用线程积木库（TBB）来执行尽可能多的计算密集型分布式任务。特别是，我们使用TBB组装正切矩阵和右手向量、静态凝结贡献，以及更新存储在正交点的数据。我们在这方面的主要工具是WorkStream类（更多信息见[2.x.3079]线程模块）。
//
// 首先我们要处理正切矩阵和右手边的装配结构。PerTaskData对象存储了本地对全局系统的贡献。
//
[0.x.24122] 
[0.x.24123] 
[0.x.24124] 
[0.x.24125] 
[0.x.24126] 
[0.x.24127] 
//
[0.x.24128] 
[0.x.24129] 
[0.x.24130] 
[0.x.24131] 
[0.x.24132] 
//
[0.x.24133] 
[0.x.24134] 
[0.x.24135] 
[0.x.24136] 
[0.x.24137] 
[0.x.24138] 
//
// 另一方面，ScratchData对象存储了较大的对象，如形状函数值数组（ [2.x.3080] ）和形状函数梯度和对称梯度向量，我们将在装配时使用。
//
[0.x.24139] 
[0.x.24140] 
[0.x.24141] 
[0.x.24142] 
[0.x.24143] 
//
[0.x.24144] 
[0.x.24145] 
[0.x.24146] 
//
[0.x.24147] 
[0.x.24148] 
[0.x.24149] 
[0.x.24150] 
[0.x.24151] 
[0.x.24152] 
[0.x.24153] 
[0.x.24154] 
[0.x.24155] 
[0.x.24156] 
[0.x.24157] 
[0.x.24158] 
[0.x.24159] 
[0.x.24160] 
//
[0.x.24161] 
[0.x.24162] 
[0.x.24163] 
[0.x.24164] 
[0.x.24165] 
[0.x.24166] 
[0.x.24167] 
[0.x.24168] 
[0.x.24169] 
[0.x.24170] 
[0.x.24171] 
//
[0.x.24172] 
[0.x.24173] 
[0.x.24174] 
[0.x.24175] 
[0.x.24176] 
[0.x.24177] 
[0.x.24178] 
[0.x.24179] 
[0.x.24180] 
[0.x.24181] 
[0.x.24182] 
[0.x.24183] 
[0.x.24184] 
[0.x.24185] 
[0.x.24186] 
[0.x.24187] 
[0.x.24188] 
[0.x.24189] 
[0.x.24190] 
[0.x.24191] 
//
// 然后我们定义结构来组装静态凝结的切线矩阵。回顾一下，我们希望解决一个基于位移的公式。由于[2.x.3081]和[2.x.3082]字段在元素层面上是不连续的，所以我们在元素层面上进行缩合。 由于这些操作是基于矩阵的，我们需要设置一些矩阵来存储一些切线矩阵子块的局部贡献。 我们把这些放在PerTaskData结构中。
//
// 我们选择不在[2.x.3083]函数中重置任何数据，因为矩阵提取和替换工具会处理这个问题。
//
[0.x.24192] 
[0.x.24193] 
[0.x.24194] 
[0.x.24195] 
[0.x.24196] 
//
[0.x.24197] 
[0.x.24198] 
[0.x.24199] 
[0.x.24200] 
[0.x.24201] 
[0.x.24202] 
[0.x.24203] 
[0.x.24204] 
[0.x.24205] 
//
[0.x.24206] 
[0.x.24207] 
[0.x.24208] 
[0.x.24209] 
[0.x.24210] 
[0.x.24211] 
[0.x.24212] 
[0.x.24213] 
[0.x.24214] 
[0.x.24215] 
[0.x.24216] 
[0.x.24217] 
[0.x.24218] 
[0.x.24219] 
[0.x.24220] 
[0.x.24221] 
//
[0.x.24222] 
[0.x.24223] 
[0.x.24224] 
//
// 我们希望在这里执行的操作的ScratchData对象是空的，因为我们不需要临时数据，但它仍然需要为当前deal.II中TBB的实现而定义。 所以我们为此创建了一个假的结构。
//
[0.x.24225] 
[0.x.24226] 
[0.x.24227] 
[0.x.24228] 
[0.x.24229] 
[0.x.24230] 
//
// 最后我们定义结构以协助更新正交点信息。与SC的装配过程类似，我们不需要PerTaskData对象（因为这里没有什么可存储的），但还是必须定义一个。请注意，这是因为对于我们这里的操作--更新正交点的数据--是纯粹的局部操作：我们在每个单元上做的事情在每个单元上都会被消耗掉，没有像使用WorkStream类时通常会有的全局聚合操作。我们仍然必须定义每个任务的数据结构，这表明WorkStream类可能不适合这种操作（原则上，我们可以简单地为每个单元使用[2.x.3084]创建一个新的任务），但无论如何这样做也没有什么坏处。此外，如果一个正交点有不同的材料模型，需要不同程度的计算费用，那么这里使用的方法可能是有利的。
//
[0.x.24231] 
[0.x.24232] 
[0.x.24233] 
[0.x.24234] 
[0.x.24235] 
[0.x.24236] 
//
// ScratchData对象将被用来存储解向量的别名，这样我们就不必复制这个大的数据结构。然后我们定义一些向量来提取正交点的解值和梯度。
//
[0.x.24237] 
[0.x.24238] 
[0.x.24239] 
[0.x.24240] 
//
[0.x.24241] 
[0.x.24242] 
[0.x.24243] 
//
[0.x.24244] 
//
[0.x.24245] 
[0.x.24246] 
[0.x.24247] 
[0.x.24248] 
[0.x.24249] 
[0.x.24250] 
[0.x.24251] 
[0.x.24252] 
[0.x.24253] 
[0.x.24254] 
//
[0.x.24255] 
[0.x.24256] 
[0.x.24257] 
[0.x.24258] 
[0.x.24259] 
[0.x.24260] 
[0.x.24261] 
[0.x.24262] 
[0.x.24263] 
//
[0.x.24264] 
[0.x.24265] 
[0.x.24266] 
[0.x.24267] 
[0.x.24268] 
[0.x.24269] 
[0.x.24270] 
[0.x.24271] 
[0.x.24272] 
[0.x.24273] 
[0.x.24274] 
//[2.x.3085] 
//
// 进入第一个私有成员函数。在这里我们创建域的三角形，为此我们选择了按比例的立方体，每个面都有一个边界ID号。 对于缩进问题，网格必须至少被细化一次。
//
// 然后，我们确定参考配置的体积，并将其打印出来进行比较。
//
[0.x.24275] 
[0.x.24276] 
[0.x.24277] 
[0.x.24278] 
[0.x.24279] 
[0.x.24280] 
[0.x.24281] 
[0.x.24282] 
[0.x.24283] 
[0.x.24284] 
//
[0.x.24285] 
[0.x.24286] 
//
// 由于我们希望对顶面的一个补丁应用诺伊曼BC，我们必须找到域的这一部分的单元格面，并用一个明显的边界ID号来标记它们。 我们要找的面在+y面上，将得到边界ID 6（0到5已经在创建立方体域的六个面时使用了）。
//
[0.x.24287] 
[0.x.24288] 
[0.x.24289] 
[0.x.24290] 
[0.x.24291] 
[0.x.24292] 
[0.x.24293] 
[0.x.24294] 
[0.x.24295] 
[0.x.24296] 
[0.x.24297] 
[0.x.24298] 
[0.x.24299] 
[0.x.24300] 
[0.x.24301] 
[0.x.24302] 
[0.x.24303] 
[0.x.24304] 
[0.x.24305] 
[0.x.24306] 
//[2.x.3086] 
//
// 接下来我们描述FE系统是如何设置的。 我们首先确定每块的分量数量。由于位移是一个矢量分量，所以前两个分量属于它，而后两个分量描述标量压力和扩张DOF。
//
[0.x.24307] 
[0.x.24308] 
[0.x.24309] 
[0.x.24310] 
//
[0.x.24311] 
[0.x.24312] 
[0.x.24313] 
[0.x.24314] 
//
// 然后，DOF处理程序被初始化，我们以一种有效的方式对网格进行重新编号。我们还记录了每块DOF的数量。
//
[0.x.24315] 
[0.x.24316] 
[0.x.24317] 
//
[0.x.24318] 
[0.x.24319] 
//
[0.x.24320] 
[0.x.24321] 
[0.x.24322] 
[0.x.24323] 
[0.x.24324] 
//
// 设置稀疏模式和切线矩阵
//
[0.x.24325] 
[0.x.24326] 
[0.x.24327] 
[0.x.24328] 
[0.x.24329] 
//
[0.x.24330] 
//
[0.x.24331] 
[0.x.24332] 
[0.x.24333] 
//
[0.x.24334] 
[0.x.24335] 
[0.x.24336] 
//
[0.x.24337] 
[0.x.24338] 
[0.x.24339] 
[0.x.24340] 
//
// 全局系统矩阵最初具有以下结构 [1.x.95] 我们优化稀疏模式以反映这一结构，并防止为右对角块成分创建不必要的数据。
//
[0.x.24341] 
[0.x.24342] 
[0.x.24343] 
[0.x.24344] 
[0.x.24345] 
[0.x.24346] 
[0.x.24347] 
[0.x.24348] 
[0.x.24349] 
[0.x.24350] 
[0.x.24351] 
[0.x.24352] 
[0.x.24353] 
//
[0.x.24354] 
//
// 然后，我们设置了存储向量
//
[0.x.24355] 
[0.x.24356] 
//
[0.x.24357] 
[0.x.24358] 
//
// ...最后设置正交点历史。
//
[0.x.24359] 
//
[0.x.24360] 
[0.x.24361] 
//接下来我们从FE系统中计算出一些信息，描述哪些局部元素DOF连接到哪个块组件上。 这将在后面用于从全局矩阵中提取子块。
//
// 本质上，我们所需要的就是让FES系统对象指出参考单元上的DOF连接到哪个块状部件上。 目前，插值域的设置是这样的：0表示位移DOF，1表示压力DOF，2表示膨胀DOF。
//
[0.x.24362] 
[0.x.24363] 
[0.x.24364] 
[0.x.24365] 
[0.x.24366] 
[0.x.24367] 
//
[0.x.24368] 
[0.x.24369] 
[0.x.24370] 
[0.x.24371] 
[0.x.24372] 
[0.x.24373] 
[0.x.24374] 
[0.x.24375] 
[0.x.24376] 
[0.x.24377] 
[0.x.24378] 
[0.x.24379] 
[0.x.24380] 
[0.x.24381] 
[0.x.24382] 
//[2.x.3088] 用于存储正交信息的方法已经在 [2.x.3089] 中描述。这里我们为SMP机器实现一个类似的设置。
//
// 首先，实际的QPH数据对象被创建。这必须在网格被细化到最细的程度后才能完成。
//
[0.x.24383] 
[0.x.24384] 
[0.x.24385] 
[0.x.24386] 
//
[0.x.24387] 
[0.x.24388] 
[0.x.24389] 
//
// 接下来我们设置初始正交点数据。请注意，当检索正交点数据时，它将作为一个智能指针的向量返回。
//
[0.x.24390] 
[0.x.24391] 
[0.x.24392] 
[0.x.24393] 
[0.x.24394] 
//
[0.x.24395] 
[0.x.24396] 
[0.x.24397] 
[0.x.24398] 
//[2.x.3090] 由于QP信息的更新经常发生，并且涉及一些昂贵的操作，我们定义了一个多线程的方法，将任务分布在一些CPU核心上。
//
// 要开始这样做，首先我们需要获得这个牛顿增量时的总解，然后创建初始的从头开始的副本和复制数据对象。
//
[0.x.24399] 
[0.x.24400] 
[0.x.24401] 
[0.x.24402] 
[0.x.24403] 
[0.x.24404] 
//
[0.x.24405] 
[0.x.24406] 
//
[0.x.24407] 
[0.x.24408] 
[0.x.24409] 
//
// 然后，我们将它们和单格更新函数传递给WorkStream进行处理。
//
[0.x.24410] 
[0.x.24411] 
[0.x.24412] 
[0.x.24413] 
[0.x.24414] 
[0.x.24415] 
//
[0.x.24416] 
[0.x.24417] 
//
// 现在我们描述一下我们如何从解决方案向量中提取数据，并将其传递给每个QP存储对象进行处理。
//
[0.x.24418] 
[0.x.24419] 
[0.x.24420] 
[0.x.24421] 
[0.x.24422] 
[0.x.24423] 
[0.x.24424] 
[0.x.24425] 
[0.x.24426] 
//
[0.x.24427] 
[0.x.24428] 
[0.x.24429] 
[0.x.24430] 
[0.x.24431] 
[0.x.24432] 
//
[0.x.24433] 
//
// 我们首先需要找到当前单元内正交点的数值和梯度，然后利用位移梯度和总压力及扩张解数值更新每个局部QP。
//
[0.x.24434] 
[0.x.24435] 
[0.x.24436] 
[0.x.24437] 
[0.x.24438] 
[0.x.24439] 
[0.x.24440] 
//
[0.x.24441] 
[0.x.24442] 
[0.x.24443] 
[0.x.24444] 
[0.x.24445] 
[0.x.24446] 
//[2.x.3091] 
//
// 下一个函数是牛顿-拉弗逊方案的驱动方法。在它的顶部，我们创建一个新的向量来存储当前的牛顿更新步骤，重置错误存储对象并打印求解器头。
//
[0.x.24447] 
[0.x.24448] 
[0.x.24449] 
[0.x.24450] 
[0.x.24451] 
[0.x.24452] 
//
[0.x.24453] 
//
[0.x.24454] 
[0.x.24455] 
[0.x.24456] 
[0.x.24457] 
[0.x.24458] 
[0.x.24459] 
//
[0.x.24460] 
//
// 我们现在进行一些牛顿迭代来迭代解决这个非线性问题。 由于问题是完全非线性的，而且我们使用的是完全牛顿方法，所以存储在切线矩阵和右手边向量中的数据是不能重复使用的，必须在每个牛顿步骤中清除。然后，我们最初建立线性系统并检查收敛性（并在第一次迭代中存储这个值）。rhs向量的无约束DOF持有失衡的力，并共同决定是否达到了平衡解。
//
// 尽管对于这个特定的问题，我们可以在组合系统矩阵之前构建RHS向量，但为了扩展性，我们选择不这样做。分别组装RHS向量和系统矩阵的好处是，后者是一个昂贵的操作，我们可以通过在达到收敛时不组装切线矩阵来避免一个额外的组装过程。然而，这使得使用MPI并行化代码变得更加困难。此外，当把问题扩展到瞬态情况时，由于时间离散化和对速度和加速度场的约束应用，可能会对RHS产生额外的贡献。
//
[0.x.24461] 
[0.x.24462] 
[0.x.24463] 
[0.x.24464] 
[0.x.24465] 
//
// 我们构建线性系统，但暂不求解它（这一步应该比装配要贵得多）。
//
[0.x.24466] 
[0.x.24467] 
//
// 我们现在可以确定归一化剩余误差，并检查解决方案的收敛性。
//
[0.x.24468] 
[0.x.24469] 
[0.x.24470] 
//
[0.x.24471] 
[0.x.24472] 
//
[0.x.24473] 
[0.x.24474] 
[0.x.24475] 
[0.x.24476] 
[0.x.24477] 
//
[0.x.24478] 
[0.x.24479] 
//
// 如果我们决定要继续迭代，我们就解决线性化系统。
//
[0.x.24480] 
[0.x.24481] 
//
// 我们现在可以确定归一化的牛顿更新误差。
//
[0.x.24482] 
[0.x.24483] 
[0.x.24484] 
//
[0.x.24485] 
[0.x.24486] 
//
// 最后，由于我们隐含地接受了求解步骤，我们可以对当前时间步骤的求解增量进行实际更新，更新与这个新位移和应力状态有关的所有正交点信息，并继续迭代。
//
[0.x.24487] 
[0.x.24488] 
//
[0.x.24489] 
[0.x.24490] 
[0.x.24491] 
[0.x.24492] 
[0.x.24493] 
[0.x.24494] 
[0.x.24495] 
[0.x.24496] 
[0.x.24497] 
//
// 在最后，如果发现我们事实上做了比参数文件允许的更多的迭代，我们会引发一个异常，可以在main()函数中捕获。调用<code>AssertThrow(condition, exc_object)</code>实质上等同于<code>if (!cond) throw exc_object;</code>，但前一种形式在异常对象中填充了某些字段，以确定异常发生的位置（文件名和行号），使之更容易识别问题发生的位置。
//
[0.x.24498] 
[0.x.24499] 
[0.x.24500] 
//[2.x.3092] 
//
// 这个程序在一个漂亮的表格中打印出数据，这个表格在每次迭代的基础上被更新。接下来的两个函数设置了表头和表脚。
//
[0.x.24501] 
[0.x.24502] 
[0.x.24503] 
[0.x.24504] 
//
[0.x.24505] 
[0.x.24506] 
[0.x.24507] 
//
[0.x.24508] 
[0.x.24509] 
[0.x.24510] 
[0.x.24511] 
//
[0.x.24512] 
[0.x.24513] 
[0.x.24514] 
[0.x.24515] 
//
[0.x.24516] 
[0.x.24517] 
[0.x.24518] 
[0.x.24519] 
//
[0.x.24520] 
[0.x.24521] 
[0.x.24522] 
//
[0.x.24523] 
//
[0.x.24524] 
[0.x.24525] 
[0.x.24526] 
[0.x.24527] 
[0.x.24528] 
[0.x.24529] 
[0.x.24530] 
[0.x.24531] 
[0.x.24532] 
//[2.x.3093] 
//
// 计算空间配置中的域的体积
//
[0.x.24533] 
[0.x.24534] 
[0.x.24535] 
[0.x.24536] 
//
[0.x.24537] 
//
[0.x.24538] 
[0.x.24539] 
[0.x.24540] 
//
// 与之前调用的不同，在这个例子中，正交点的数据是特别不可修改的，因为我们将只访问数据。我们通过将这个更新函数标记为常量来确保正确的get_data函数被调用。
//
[0.x.24541] 
[0.x.24542] 
[0.x.24543] 
//
[0.x.24544] 
[0.x.24545] 
[0.x.24546] 
[0.x.24547] 
//
[0.x.24548] 
[0.x.24549] 
[0.x.24550] 
[0.x.24551] 
[0.x.24552] 
[0.x.24553] 
//
//从[2.x.3096]的误差[2.x.3097]中计算出扩张[2.x.3094]与[2.x.3095]的吻合程度。我们还返回域的当前体积与参考体积的比率。这对于不可压缩介质来说是很有意义的，因为我们要检查等熵约束的执行情况。
//
[0.x.24554] 
[0.x.24555] 
[0.x.24556] 
[0.x.24557] 
//
[0.x.24558] 
//
[0.x.24559] 
[0.x.24560] 
[0.x.24561] 
//
[0.x.24562] 
[0.x.24563] 
[0.x.24564] 
//
[0.x.24565] 
[0.x.24566] 
[0.x.24567] 
[0.x.24568] 
[0.x.24569] 
[0.x.24570] 
[0.x.24571] 
//
[0.x.24572] 
[0.x.24573] 
[0.x.24574] 
//
[0.x.24575] 
[0.x.24576] 
[0.x.24577] 
//[2.x.3098] 
//
// 确定问题的真实残差误差。 也就是说，确定无约束自由度的残差误差。 注意，要做到这一点，我们需要忽略受约束的自由度，将这些向量分量的残差设置为零。
//
[0.x.24578] 
[0.x.24579] 
[0.x.24580] 
[0.x.24581] 
//
[0.x.24582] 
[0.x.24583] 
[0.x.24584] 
//
[0.x.24585] 
[0.x.24586] 
[0.x.24587] 
[0.x.24588] 
[0.x.24589] 
//[2.x.3099] 
//
// 确定问题的真实牛顿更新误差
//
[0.x.24590] 
[0.x.24591] 
[0.x.24592] 
[0.x.24593] 
[0.x.24594] 
[0.x.24595] 
[0.x.24596] 
[0.x.24597] 
//
[0.x.24598] 
[0.x.24599] 
[0.x.24600] 
[0.x.24601] 
[0.x.24602] 
//
// [2.x.3100] 
//
// 这个函数提供了总解，它在任何牛顿步都有效。这是必须的，因为为了减少计算误差，总解只在时间步数结束时更新。
//
[0.x.24603] 
[0.x.24604] 
[0.x.24605] 
[0.x.24606] 
[0.x.24607] 
[0.x.24608] 
[0.x.24609] 
[0.x.24610] 
//[2.x.3101] 
//
// 由于我们使用TBB进行装配，我们只需设置一份流程所需的数据结构，并将其与装配函数一起传递给WorkStream对象进行处理。请注意，我们必须确保在任何装配操作发生之前，矩阵和RHS向量被重置。此外，由于我们描述的是一个诺伊曼BC的问题，我们将需要面的法线，因此必须在面的更新标志中指定这个。
//
[0.x.24611] 
[0.x.24612] 
[0.x.24613] 
[0.x.24614] 
[0.x.24615] 
//
[0.x.24616] 
[0.x.24617] 
//
[0.x.24618] 
[0.x.24619] 
[0.x.24620] 
[0.x.24621] 
//
[0.x.24622] 
[0.x.24623] 
//
// 这里用于向WorkStream类传递数据的语法在 [2.x.3102] 中讨论。
//
[0.x.24624] 
[0.x.24625] 
[0.x.24626] 
[0.x.24627] 
[0.x.24628] 
[0.x.24629] 
[0.x.24630] 
[0.x.24631] 
[0.x.24632] 
[0.x.24633] 
[0.x.24634] 
[0.x.24635] 
[0.x.24636] 
[0.x.24637] 
[0.x.24638] 
[0.x.24639] 
//
[0.x.24640] 
[0.x.24641] 
//
// 当然，我们仍然要定义如何组装单个单元的切线矩阵贡献。 我们首先需要重置和初始化一些从头开始的数据结构，并检索一些关于这个单元上DOF编号的基本信息。 我们可以预先计算单元的形状函数值和梯度。请注意，形状函数梯度是根据当前配置来定义的。 也就是 [2.x.3103] 。
//
[0.x.24642] 
[0.x.24643] 
[0.x.24644] 
[0.x.24645] 
[0.x.24646] 
[0.x.24647] 
[0.x.24648] 
[0.x.24649] 
[0.x.24650] 
[0.x.24651] 
//
[0.x.24652] 
[0.x.24653] 
[0.x.24654] 
//
[0.x.24655] 
[0.x.24656] 
[0.x.24657] 
[0.x.24658] 
[0.x.24659] 
[0.x.24660] 
[0.x.24661] 
//
[0.x.24662] 
[0.x.24663] 
[0.x.24664] 
[0.x.24665] 
[0.x.24666] 
[0.x.24667] 
[0.x.24668] 
[0.x.24669] 
[0.x.24670] 
[0.x.24671] 
[0.x.24672] 
[0.x.24673] 
[0.x.24674] 
[0.x.24675] 
[0.x.24676] 
[0.x.24677] 
[0.x.24678] 
//
// 现在我们建立本地单元刚度矩阵和RHS向量。由于全局和局部系统矩阵是对称的，我们可以利用这一特性，只建立局部矩阵的下半部分，并将其值复制到上半部分。 所以我们只组装一半的[2.x.3104] , [2.x.3105] , [2.x.3106]块，而整个[2.x.3107] , [2.x.3108] , [2.x.3109]块被构建。
//
// 在这样做的时候，我们首先从我们的正交历史对象中提取一些配置相关的变量，用于当前的正交点。
//
[0.x.24679] 
[0.x.24680] 
[0.x.24681] 
[0.x.24682] 
[0.x.24683] 
[0.x.24684] 
[0.x.24685] 
[0.x.24686] 
[0.x.24687] 
[0.x.24688] 
[0.x.24689] 
[0.x.24690] 
[0.x.24691] 
//
// 这两个张量存储了一些预计算的数据。它们的用途将很快得到解释。
//
[0.x.24692] 
[0.x.24693] 
//
// 接下来我们定义一些别名，使装配过程更容易操作。
//
[0.x.24694] 
[0.x.24695] 
[0.x.24696] 
[0.x.24697] 
[0.x.24698] 
//
[0.x.24699] 
[0.x.24700] 
[0.x.24701] 
[0.x.24702] 
[0.x.24703] 
//
// 我们首先计算来自内力的贡献。 注意，根据rhs作为残差负数的定义，这些贡献被减去。
//
[0.x.24704] 
[0.x.24705] 
[0.x.24706] 
[0.x.24707] 
[0.x.24708] 
[0.x.24709] 
[0.x.24710] 
[0.x.24711] 
//
// 在我们进入内循环之前，我们还有最后一次机会来引入一些优化。我们已经考虑到了系统的对称性，现在我们可以预先计算一些在内循环中反复应用的常用项。  我们在这里不会过分，而是将重点放在昂贵的操作上，即那些涉及等级4材料刚度张量和等级2应力张量的操作。    我们可以观察到的是，这两个张量都是以 "i "DoF为索引的形状函数梯度收缩的。这意味着，当我们在 "j "DoF上循环时，这个特殊的操作保持不变。出于这个原因，我们可以从内循环中提取这个操作，并节省许多操作，对于每个正交点和DoF索引 "i"，并在索引 "j "上重复，需要用等级4对称张量对等级2对称张量进行双重收缩，用等级2张量对等级1张量进行双重收缩。    在损失一些可读性的情况下，当使用模拟默认参数时，这个小变化将使对称系统的装配时间减少一半左右，并且随着h-细化水平的提高而变得更加显著。
//
[0.x.24712] 
[0.x.24713] 
[0.x.24714] 
[0.x.24715] 
[0.x.24716] 
//
// 现在我们准备计算正切矩阵的贡献。
//
[0.x.24717] 
[0.x.24718] 
[0.x.24719] 
[0.x.24720] 
[0.x.24721] 
[0.x.24722] 
[0.x.24723] 
//
// 这就是[2.x.3110]的贡献。它包括一个材料贡献和一个几何应力贡献，后者只沿局部矩阵对角线添加。
//
[0.x.24724] 
[0.x.24725] 
//
// 材料贡献。
//
[0.x.24726] 
[0.x.24727] 
//
// 几何应力的贡献。
//
[0.x.24728] 
[0.x.24729] 
[0.x.24730] 
[0.x.24731] 
//
// 接下来是[2.x.3111]的贡献。
//
[0.x.24732] 
[0.x.24733] 
[0.x.24734] 
[0.x.24735] 
[0.x.24736] 
//
// 最后是 [2.x.3112] 和 [2.x.3113] 的贡献。
//
[0.x.24737] 
[0.x.24738] 
[0.x.24739] 
[0.x.24740] 
[0.x.24741] 
[0.x.24742] 
[0.x.24743] 
[0.x.24744] 
[0.x.24745] 
[0.x.24746] 
//
// 接下来，我们组装诺伊曼贡献。我们首先检查单元格面是否存在于施加了牵引力的边界上，如果是这样的话，就加入贡献。
//
[0.x.24747] 
[0.x.24748] 
[0.x.24749] 
[0.x.24750] 
//
[0.x.24751] 
[0.x.24752] 
[0.x.24753] 
[0.x.24754] 
[0.x.24755] 
//
// 使用该正交点的面法线，我们指定参考配置中的牵引力。对于这个问题，在参考配置中应用了一个定义的压力。    假设施加的牵引力的方向不随领域的变形而变化。牵引力是用第一个Piola-Kirchhoff应力简单地定义的[2.x.3114]我们用时间变量来线性提升压力负荷。        请注意，我们在这里计算的对右手边向量的贡献只存在于向量的位移分量中。
//
[0.x.24756] 
[0.x.24757] 
[0.x.24758] 
[0.x.24759] 
[0.x.24760] 
//
[0.x.24761] 
[0.x.24762] 
[0.x.24763] 
[0.x.24764] 
//
[0.x.24765] 
[0.x.24766] 
[0.x.24767] 
[0.x.24768] 
[0.x.24769] 
[0.x.24770] 
[0.x.24771] 
//
[0.x.24772] 
[0.x.24773] 
[0.x.24774] 
[0.x.24775] 
[0.x.24776] 
//
// 最后，我们需要将本地矩阵的下半部分复制到上半部分。
//
[0.x.24777] 
[0.x.24778] 
[0.x.24779] 
[0.x.24780] 
[0.x.24781] 
//
// [2.x.3115] 这个问题的约束条件很容易描述。在这个特殊的例子中，边界值将被计算为牛顿算法的两次第一次迭代。一般来说，我们会在第2次迭代中建立非均质约束（也就是在后面的代码块中`apply_dirichlet_bc == true`时），在接下来的步骤中只建立相应的均质约束。虽然目前的例子只有同质约束，但以前的经验表明，一个常见的错误是在重构代码到特定用途时忘记添加额外的条件。这可能导致难以调试的错误。本着这种精神，我们选择让代码在每个牛顿步骤中执行什么操作方面更加啰嗦。
//
[0.x.24782] 
[0.x.24783] 
[0.x.24784] 
//
// 由于我们(a)处理的是牛顿迭代方法，(b)使用的是位移的增量公式，以及(c)将约束条件应用于增量位移场，所以对位移更新的任何非均质约束条件只应在第2次迭代时指定。由于该迭代后约束条件将得到完全满足，因此不需要做后续的贡献。
//
[0.x.24785] 
//
此外，//在一个时间段内的第一次牛顿迭代之后，约束条件保持不变，只要不清除[2.x.3116]对象，我们就不需要修改或重建它们。
//
[0.x.24786] 
[0.x.24787] 
[0.x.24788] 
[0.x.24789] 
[0.x.24790] 
//
[0.x.24791] 
//
[0.x.24792] 
[0.x.24793] 
//
// 在牛顿第2次迭代时，我们希望应用代表位移增量的边界条件的全套非均质和均质约束。因为一般来说，每个时间步长的约束条件可能是不同的，我们需要清除约束矩阵并完全重建它。一个例子是，如果一个表面正在加速，在这种情况下，每个时间步长的位移变化是不恒定的。
//
[0.x.24794] 
//
// 三维压痕问题的边界条件如下。在-x、-y和-z面（IDs 0,2,4）我们设置了一个对称条件，只允许平面运动，而+x和+z面（IDs 1,5）无牵引力。在这个设计好的问题中，+y面的一部分（ID 3）被设定为在x-和z-分量上没有运动。最后，如前所述，+y面的另一部分有一个施加的压力，但在x和z方向上也受到约束。
//
// 在下文中，我们必须告诉函数插值的边界值应该约束解向量的哪些分量（也就是说，是x-、y-、z-位移还是它们的组合）。这是用ComponentMask对象完成的（见[2.x.3117]），如果我们为有限元提供一个我们希望选择的分量的提取器对象，我们可以从有限元得到这些对象。为此，我们首先设置了这样的提取器对象，然后在生成相关构件掩码时使用它。
//
[0.x.24795] 
[0.x.24796] 
//
[0.x.24797] 
[0.x.24798] 
//
[0.x.24799] 
[0.x.24800] 
[0.x.24801] 
[0.x.24802] 
[0.x.24803] 
[0.x.24804] 
[0.x.24805] 
[0.x.24806] 
[0.x.24807] 
//
[0.x.24808] 
[0.x.24809] 
[0.x.24810] 
[0.x.24811] 
[0.x.24812] 
[0.x.24813] 
[0.x.24814] 
//
[0.x.24815] 
[0.x.24816] 
[0.x.24817] 
//
[0.x.24818] 
[0.x.24819] 
//
[0.x.24820] 
[0.x.24821] 
[0.x.24822] 
[0.x.24823] 
[0.x.24824] 
[0.x.24825] 
[0.x.24826] 
[0.x.24827] 
[0.x.24828] 
[0.x.24829] 
//
[0.x.24830] 
[0.x.24831] 
[0.x.24832] 
[0.x.24833] 
[0.x.24834] 
[0.x.24835] 
[0.x.24836] 
//
[0.x.24837] 
[0.x.24838] 
//
[0.x.24839] 
[0.x.24840] 
[0.x.24841] 
[0.x.24842] 
[0.x.24843] 
[0.x.24844] 
[0.x.24845] 
[0.x.24846] 
[0.x.24847] 
[0.x.24848] 
[0.x.24849] 
[0.x.24850] 
[0.x.24851] 
//
[0.x.24852] 
[0.x.24853] 
[0.x.24854] 
[0.x.24855] 
[0.x.24856] 
[0.x.24857] 
[0.x.24858] 
[0.x.24859] 
[0.x.24860] 
//
[0.x.24861] 
[0.x.24862] 
[0.x.24863] 
[0.x.24864] 
[0.x.24865] 
[0.x.24866] 
[0.x.24867] 
[0.x.24868] 
[0.x.24869] 
[0.x.24870] 
[0.x.24871] 
//
// 由于所有的Dirichlet约束在牛顿第2次迭代后被完全满足，我们要确保对这些条目不做进一步的修改。这意味着我们要将所有非均质的Dirichlet约束转换成均质的约束。
//
// 在这个例子中，这样做的程序是非常简单的，事实上，当只应用同质边界条件时，我们可以（也会）规避任何不必要的操作。在一个更普遍的问题中，我们应该注意悬挂节点和周期性约束，这也可能引入一些不均匀性。那么，为不同类型的约束保留不同的对象可能是有利的，一旦构建了同质Dirichlet约束，就将它们合并在一起。
//
[0.x.24872] 
[0.x.24873] 
//
// 由于仿生约束是在上一次牛顿迭代中完成的，所以不能直接修改。所以我们需要将它们复制到另一个临时对象，并在那里进行修改。一旦我们完成了，我们将把它们转移回主[2.x.3118]对象。
//
[0.x.24874] 
[0.x.24875] 
[0.x.24876] 
[0.x.24877] 
//
[0.x.24878] 
[0.x.24879] 
[0.x.24880] 
[0.x.24881] 
//
[0.x.24882] 
[0.x.24883] 
//[2.x.3119] 解决整个块系统有点问题，因为对[2.x.3120]块没有贡献，使其不可逆转（当使用迭代求解器时）。由于压力和扩张变量DOF是不连续的，我们可以将它们浓缩成一个较小的仅有位移的系统，然后我们将对其进行求解，随后进行后处理以检索出压力和扩张的解决方案。
//
// 静态凝结过程可以在全局层面上进行，但我们需要其中一个块的逆向。然而，由于压力和扩张变量是不连续的，静态凝结（SC）操作也可以在每个单元的基础上进行，我们可以通过反转局部块来产生块对角线[2.x.3121]块的逆。我们可以再次使用TBB来做这件事，因为每个操作都将是相互独立的。
//
//通过WorkStream类使用TBB，我们把每个元素的贡献集合起来形成[2.x.3122]。然后这些贡献被添加到全局刚度矩阵中。鉴于这样的描述，以下两个函数应该是清楚的。
//
[0.x.24884] 
[0.x.24885] 
[0.x.24886] 
[0.x.24887] 
[0.x.24888] 
//
[0.x.24889] 
[0.x.24890] 
[0.x.24891] 
[0.x.24892] 
[0.x.24893] 
//
[0.x.24894] 
[0.x.24895] 
[0.x.24896] 
[0.x.24897] 
[0.x.24898] 
[0.x.24899] 
//
[0.x.24900] 
[0.x.24901] 
//
[0.x.24902] 
[0.x.24903] 
[0.x.24904] 
[0.x.24905] 
[0.x.24906] 
[0.x.24907] 
[0.x.24908] 
[0.x.24909] 
[0.x.24910] 
//
// 现在我们描述静态凝结过程。按照惯例，我们必须首先找出这个单元上的自由度有哪些全局数字，并重置一些数据结构。
//
[0.x.24911] 
[0.x.24912] 
[0.x.24913] 
[0.x.24914] 
[0.x.24915] 
[0.x.24916] 
[0.x.24917] 
[0.x.24918] 
[0.x.24919] 
//
// 我们现在提取与当前单元相关的DFS对全局刚度矩阵的贡献。 [2.x.3123]和[2.x.3124]插值的不连续性质意味着它们在全局水平上没有局部贡献的耦合。而[2.x.3125]道夫则不是这样。 换句话说，[2.x.3126]、[2.x.3127]和[2.x.3128]，当从全局刚度矩阵中提取时是元素贡献。 而[2.x.3129]则不是这种情况。
//
// 注：用小写的符号表示元素刚度矩阵。
//
// 目前，与当前元素相关的dof矩阵（松散地表示为[2.x.3130]）是这样的。[1.x.96]
//
// 我们现在需要对其进行修改，使其显示为[1.x.97]与[2.x.3131]，其中[2.x.3132]和[2.x.3133] 。
//
// 在这一点上，我们需要注意到全局数据已经存在于[2.x.3134] , [2.x.3135] 和 [2.x.3136] 子块中。 因此，如果我们要修改它们，我们必须考虑到已经存在的数据（也就是说，如果需要的话，简单地添加到它或删除它）。 由于copy_local_to_global操作是一个 "+="操作，我们需要考虑到这一点
//
// 特别是对于[2.x.3137]块，这意味着从周围的单元格中加入了贡献，所以我们在操作这个块时需要小心。 我们不能直接擦除子块。
//
// 我们将采用这种策略来获得我们想要的子块。
//
//
//
// - [2.x.3138] : 由于我们不能访问[2.x.3139]，但我们知道它的贡献被添加到全局[2.x.3140]矩阵中，我们只想添加元素明智的静态凝结[2.x.3141] 。
//
//
//
// - [2.x.3142] : 类似地，[2.x.3143]存在于子块中。由于复制操作是一个+=操作，我们需要减去现有的[2.x.3144]子矩阵，此外还需要 "添加 "我们想要替换它的东西。
//
//
//
// - [2.x.3145] : 由于全局矩阵是对称的，这个块和上面那个块是一样的，我们可以简单地用[2.x.3146]来代替这个块。
//
// 我们首先从系统矩阵中提取元素数据。因此，首先我们得到单元格的整个子块，然后提取[2.x.3147]作为与当前元素相关的道夫。
//
[0.x.24920] 
[0.x.24921] 
[0.x.24922] 
//
//接下来是[2.x.3148]的局部矩阵 
//[2.x.3149] 和 [2.x.3150] 的局部矩阵。
//
[0.x.24923] 
[0.x.24924] 
[0.x.24925] 
[0.x.24926] 
[0.x.24927] 
[0.x.24928] 
[0.x.24929] 
[0.x.24930] 
[0.x.24931] 
//
// 为了得到[2.x.3151]的逆值，我们直接将其反转。 由于[2.x.3152]是块状对角线，所以这个操作相对便宜。
//
[0.x.24932] 
//
// 现在，我们可以将凝结项添加到[2.x.3153]块中，并将其放入单元格局部矩阵[2.x.3154] 中。
//
[0.x.24933] 
//[2.x.3155] 
[0.x.24934] 
//[2.x.3156] 
[0.x.24935] 
//[2.x.3157] 
[0.x.24936] 
[0.x.24937] 
[0.x.24938] 
[0.x.24939] 
//
// 接下来我们将[2.x.3158]放在[2.x.3159]块中进行后处理。 再次注意，我们需要删除那里已经存在的贡献。
//
[0.x.24940] 
[0.x.24941] 
[0.x.24942] 
[0.x.24943] 
[0.x.24944] 
//[2.x.3160] 我们现在拥有所有必要的组件，可以使用两种可能的方法之一来解决线性化系统。第一种是在元素层面上进行静态凝结，这需要对切线矩阵和RHS向量进行一些改动。另外，也可以通过在全局层面上进行凝结来解决全块系统。下面我们将实现这两种方法。
//
[0.x.24945] 
[0.x.24946] 
[0.x.24947] 
[0.x.24948] 
[0.x.24949] 
[0.x.24950] 
//
[0.x.24951] 
[0.x.24952] 
//
// 首先，这里是使用切线矩阵的（永久）增量的方法。对于下面的内容，回顾一下[1.x.98]和[1.x.99]，从而[1.x.100]其中[1.x.101]
//
// 在顶部，我们分配了两个临时向量来帮助进行静态凝结，并分配了变量来存储线性求解器的迭代次数和（希望收敛的）残差。
//
[0.x.24953] 
[0.x.24954] 
//
// 在这个函数的第一步，我们求解增量位移 [2.x.3161] 。 为此，我们进行静态浓缩，使[2.x.3162]，并将[2.x.3163]放在原[2.x.3164]块中。也就是说，我们制作[2.x.3165] 。
//
[0.x.24955] 
[0.x.24956] 
//
// [2.x.3166] 
[0.x.24957] 
[0.x.24958] 
//[2.x.3167] 
[0.x.24959] 
[0.x.24960] 
//[2.x.3168] 
[0.x.24961] 
[0.x.24962] 
//[2.x.3169] 
[0.x.24963] 
[0.x.24964] 
//[2.x.3170] 
[0.x.24965] 
[0.x.24966] 
//[2.x.3171] 
[0.x.24967] 

[0.x.24968] 
[0.x.24969] 
[0.x.24970] 
[0.x.24971] 
[0.x.24972] 
[0.x.24973] 
[0.x.24974] 
[0.x.24975] 
[0.x.24976] 
//
[0.x.24977] 
//
[0.x.24978] 
[0.x.24979] 
//
// 我们默认选择了SSOR预处理程序，因为在单线程机器上，它似乎为这个问题提供了最快的求解器收敛特性。 然而，对于不同的问题规模，这可能不是真的。
//
[0.x.24980] 
[0.x.24981] 
[0.x.24982] 
[0.x.24983] 
//
[0.x.24984] 
[0.x.24985] 
[0.x.24986] 
[0.x.24987] 
//
[0.x.24988] 
[0.x.24989] 
[0.x.24990] 
[0.x.24991] 
[0.x.24992] 
//
// 否则，如果问题足够小，可以利用直接求解器。
//
[0.x.24993] 
[0.x.24994] 
[0.x.24995] 
[0.x.24996] 
//
[0.x.24997] 
[0.x.24998] 
[0.x.24999] 
[0.x.25000] 
[0.x.25001] 
//
[0.x.25002] 
[0.x.25003] 
//
// 现在我们有了位移更新，将约束分配回牛顿更新。
//
[0.x.25004] 
//
[0.x.25005] 
[0.x.25006] 
//
// 解决位移问题后的下一步是进行后处理，从置换中得到扩张解。    [2.x.3172] 
[0.x.25007] 
//[2.x.3173] 
[0.x.25008] 
[0.x.25009] 
//[2.x.3174] 
[0.x.25010] 
//[2.x.3175] 
[0.x.25011] 
//[2.x.3176] 
[0.x.25012] 
[0.x.25013] 
[0.x.25014] 
//
// 我们在此确保任何迪里希特约束都分布在更新的解决方案上。
//
[0.x.25015] 
//
// 最后我们用代入法求解压力的更新。    [2.x.3177] 
[0.x.25016] 
//[2.x.3178] 
[0.x.25017] 
[0.x.25018] 
//[2.x.3179] 
[0.x.25019] 
//[2.x.3180] 
[0.x.25020] 

和//最后....     [2.x.3181] 
[0.x.25021] 
[0.x.25022] 
[0.x.25023] 
//
// 我们现在已经到了终点，所以我们将所有受限的道夫分配到牛顿更新中。
//
[0.x.25024] 
//
[0.x.25025] 
[0.x.25026] 
[0.x.25027] 
[0.x.25028] 
[0.x.25029] 
//
[0.x.25030] 
[0.x.25031] 
//
[0.x.25032] 
[0.x.25033] 
//
// 在局部水平上手动凝结扩张和压力场，以及随后的后处理，需要花费相当大的努力才能实现。简而言之，我们必须产生逆矩阵[2.x.3182]，并将其永久写入全局切线矩阵中。然后我们对[2.x.3183]进行永久修改，产生[2.x.3184]。这涉及到对切线矩阵的局部子块的提取和操作。在对位移进行求解后，对扩张和压力进行求解所需的各个矩阵-向量操作被仔细地执行。将这些众多的步骤与使用LinearOperator类提供的功能进行的更简单、更透明的实现形成对比。
//
// 为了便于以后使用，我们为RHS向量中的块定义了一些别名
//
[0.x.25034] 
[0.x.25035] 
[0.x.25036] 
//
// ... 对于牛顿更新向量中的块。
//
[0.x.25037] 
[0.x.25038] 
[0.x.25039] 
//
// 我们将利用系统的对称性，所以不是所有的块都需要。
//
[0.x.25040] 
[0.x.25041] 
[0.x.25042] 
[0.x.25043] 
[0.x.25044] 
[0.x.25045] 
[0.x.25046] 
[0.x.25047] 
[0.x.25048] 
[0.x.25049] 
//
// 然后我们构建一个LinearOperator，代表（方形块）[2.x.3185]的逆。由于它是对角线的（或者，当使用高阶分解时，几乎是对角线的），所以雅可比预处理器是合适的。
//
[0.x.25050] 
[0.x.25051] 
[0.x.25052] 
[0.x.25053] 
[0.x.25054] 
[0.x.25055] 
[0.x.25056] 
[0.x.25057] 
[0.x.25058] 
[0.x.25059] 
[0.x.25060] 
[0.x.25061] 
[0.x.25062] 
[0.x.25063] 
//
// 现在我们可以构建[2.x.3186]的那个转置和一个线性算子，它代表了浓缩的操作[2.x.3187]和[2.x.3188]以及最后的增强矩阵[2.x.3189] 。  请注意，schur_complement()算子在这里也能派上用场，但为了清楚起见，也为了展示线性求解方案的表述和实现之间的相似性，我们将手动执行这些操作。
//
[0.x.25064] 
[0.x.25065] 
[0.x.25066] 
[0.x.25067] 
//
// 最后，我们定义了一个增强刚度矩阵的逆运算，即 [2.x.3190] 。请注意，增强刚度矩阵的预处理程序与我们使用静态凝结的情况不同。在这种情况下，预处理程序是基于未修改的[2.x.3191]，而在第一种方法中，我们实际上修改了这个子块的条目。然而，由于[2.x.3192]和[2.x.3193]在同一空间操作，它对这个问题仍然足够。
//
[0.x.25068] 
[0.x.25069] 
[0.x.25070] 
[0.x.25071] 
[0.x.25072] 
[0.x.25073] 
[0.x.25074] 
[0.x.25075] 
[0.x.25076] 
[0.x.25077] 
[0.x.25078] 
[0.x.25079] 
[0.x.25080] 
[0.x.25081] 
[0.x.25082] 
[0.x.25083] 
[0.x.25084] 
//
// 现在我们可以对位移场进行求解了。  我们可以嵌套线性运算，结果立即写入牛顿更新向量中。  很明显，这个实现密切模仿了介绍中所说的推导。
//
[0.x.25085] 
[0.x.25086] 
//
[0.x.25087] 
//
// 需要对扩张场和压力场进行后处理的操作，也同样容易表达。
//
[0.x.25088] 
[0.x.25089] 
//
[0.x.25090] 
[0.x.25091] 
//
[0.x.25092] 
[0.x.25093] 
[0.x.25094] 
[0.x.25095] 
[0.x.25096] 
//
// 用直接求解器求解全块系统。由于它是相对稳健的，它可能对因零[2.x.3194]块的存在而产生的问题免疫。
//
[0.x.25097] 
[0.x.25098] 
[0.x.25099] 
//
[0.x.25100] 
[0.x.25101] 
//
[0.x.25102] 
[0.x.25103] 
[0.x.25104] 
[0.x.25105] 
//
[0.x.25106] 
//
// 最后，我们在这里再次确保任何Dirichlet约束都分布在更新的解决方案上。
//
[0.x.25107] 
[0.x.25108] 
//
[0.x.25109] 
[0.x.25110] 
//[2.x.3195] 这里我们介绍如何将结果写入文件，以便用ParaView或Visi来查看。该方法与以前的教程中的方法类似，因此将不作详细讨论。
//
[0.x.25111] 
[0.x.25112] 
[0.x.25113] 
[0.x.25114] 
[0.x.25115] 
[0.x.25116] 
[0.x.25117] 
[0.x.25118] 
[0.x.25119] 
[0.x.25120] 
[0.x.25121] 
//
[0.x.25122] 
[0.x.25123] 
[0.x.25124] 
//
[0.x.25125] 
[0.x.25126] 
[0.x.25127] 
//
[0.x.25128] 
[0.x.25129] 
[0.x.25130] 
[0.x.25131] 
[0.x.25132] 
//
// 由于我们处理的是一个大的变形问题，如果能在一个位移的网格上显示结果就更好了!  与DataOut类相连的MappingQEulerian类提供了一个接口，通过该接口可以实现这一目的，而不需要我们自己物理地移动三角测量对象中的网格点。 我们首先需要将解决方案复制到一个临时矢量，然后创建欧拉映射。我们还向DataOut对象指定了多项式的度数，以便在使用高阶多项式时产生一个更精细的输出数据集。
//
[0.x.25133] 
[0.x.25134] 
[0.x.25135] 
[0.x.25136] 
[0.x.25137] 
//
[0.x.25138] 
[0.x.25139] 
[0.x.25140] 
[0.x.25141] 
//
[0.x.25142] 
//[2.x.3196] 最后我们提供了主要的驱动函数，它看起来与其他教程没有什么不同。
//
[0.x.25143] 
[0.x.25144] 
[0.x.25145] 
//
[0.x.25146] 
[0.x.25147] 
[0.x.25148] 
[0.x.25149] 
[0.x.25150] 
[0.x.25151] 
[0.x.25152] 
[0.x.25153] 
[0.x.25154] 
[0.x.25155] 
[0.x.25156] 
[0.x.25157] 
[0.x.25158] 
[0.x.25159] 
[0.x.25160] 
[0.x.25161] 
[0.x.25162] 
//
[0.x.25163] 
[0.x.25164] 
[0.x.25165] 
[0.x.25166] 
[0.x.25167] 
[0.x.25168] 
[0.x.25169] 
[0.x.25170] 
[0.x.25171] 
[0.x.25172] 
[0.x.25173] 
[0.x.25174] 
[0.x.25175] 
[0.x.25176] 
//
[0.x.25177] 
[0.x.25178] 
[0.x.25179] 
[0.x.25180] 
[0.x.25181] 
[0.x.25182] 
[0.x.25183] 
[0.x.25184] 
[0.x.25185] 
[0.x.25186] 
[0.x.25187] 
[0.x.25188] 
[0.x.25189] 
[0.x.25190] 
[0.x.25191] 
[0.x.25192] 
//
[0.x.25193] 
[0.x.25194] 
[0.x.25195] 
[0.x.25196] 
[0.x.25197] 
//
// 这个例子程序是对[2.x.3197]的轻微修改，使用Trilinos并行运行，以演示交易.II中周期性边界条件的使用。因此我们不讨论大部分的源代码，只对处理周期性约束的部分进行评论。其余的请看[2.x.3198]和底部的完整源代码。
//
// 为了实现周期性边界条件，只有两个函数需要修改。
//
// - [2.x.3199] : 用周期性约束来填充AffineConstraints对象
//
// - [2.x.3200] : 为分布式三角形提供周期性信息。
//
// 程序的其余部分与[2.x.3201]相同，所以让我们跳过这一部分，只在下面显示这两个函数。完整的程序可以在下面的 "普通程序 "部分找到）。
//
// [2.x.3202] 跳过
//
[0.x.25198] 
//
[0.x.25199] 
//
[0.x.25200] 
[0.x.25201] 
//
[0.x.25202] 
[0.x.25203] 
[0.x.25204] 
[0.x.25205] 
[0.x.25206] 
//
[0.x.25207] 
[0.x.25208] 
//
[0.x.25209] 
[0.x.25210] 
//
[0.x.25211] 
[0.x.25212] 
[0.x.25213] 
//
[0.x.25214] 
[0.x.25215] 
[0.x.25216] 
//
[0.x.25217] 
[0.x.25218] 
[0.x.25219] 
//
[0.x.25220] 
[0.x.25221] 
[0.x.25222] 
[0.x.25223] 
[0.x.25224] 
[0.x.25225] 
//
[0.x.25226] 
[0.x.25227] 
[0.x.25228] 
[0.x.25229] 
[0.x.25230] 
[0.x.25231] 
[0.x.25232] 
//
[0.x.25233] 
//
[0.x.25234] 
//
[0.x.25235] 
[0.x.25236] 
[0.x.25237] 
//
[0.x.25238] 
[0.x.25239] 
[0.x.25240] 
//
[0.x.25241] 
//
[0.x.25242] 
//
[0.x.25243] 
[0.x.25244] 
//
[0.x.25245] 
//
[0.x.25246] 
[0.x.25247] 
//
[0.x.25248] 
[0.x.25249] 
[0.x.25250] 
[0.x.25251] 
[0.x.25252] 
[0.x.25253] 
[0.x.25254] 
//
[0.x.25255] 
[0.x.25256] 
//
[0.x.25257] 
[0.x.25258] 
[0.x.25259] 
//
[0.x.25260] 
[0.x.25261] 
[0.x.25262] 
[0.x.25263] 
[0.x.25264] 
[0.x.25265] 
[0.x.25266] 
//
[0.x.25267] 
[0.x.25268] 
//
[0.x.25269] 
[0.x.25270] 
[0.x.25271] 
[0.x.25272] 
[0.x.25273] 
[0.x.25274] 
[0.x.25275] 
//
[0.x.25276] 
[0.x.25277] 
[0.x.25278] 
[0.x.25279] 
[0.x.25280] 
[0.x.25281] 
[0.x.25282] 
//
[0.x.25283] 
[0.x.25284] 
//
[0.x.25285] 
[0.x.25286] 
[0.x.25287] 
//
[0.x.25288] 
[0.x.25289] 
[0.x.25290] 
[0.x.25291] 
[0.x.25292] 
[0.x.25293] 
//
[0.x.25294] 
[0.x.25295] 
[0.x.25296] 
[0.x.25297] 
//
[0.x.25298] 
[0.x.25299] 
[0.x.25300] 
[0.x.25301] 
[0.x.25302] 
[0.x.25303] 
[0.x.25304] 
//
[0.x.25305] 
[0.x.25306] 
[0.x.25307] 
[0.x.25308] 
[0.x.25309] 
[0.x.25310] 
[0.x.25311] 
[0.x.25312] 
//
[0.x.25313] 
[0.x.25314] 
//
[0.x.25315] 
[0.x.25316] 
[0.x.25317] 
//
[0.x.25318] 
[0.x.25319] 
[0.x.25320] 
//
[0.x.25321] 
[0.x.25322] 
[0.x.25323] 
[0.x.25324] 
[0.x.25325] 
[0.x.25326] 
[0.x.25327] 
[0.x.25328] 
[0.x.25329] 
[0.x.25330] 
[0.x.25331] 
//
[0.x.25332] 
[0.x.25333] 
[0.x.25334] 
[0.x.25335] 
[0.x.25336] 
[0.x.25337] 
[0.x.25338] 
[0.x.25339] 
//
[0.x.25340] 
[0.x.25341] 
[0.x.25342] 
[0.x.25343] 
//
[0.x.25344] 
[0.x.25345] 
[0.x.25346] 
[0.x.25347] 
[0.x.25348] 
[0.x.25349] 
[0.x.25350] 
[0.x.25351] 
[0.x.25352] 
//
[0.x.25353] 
[0.x.25354] 
//
[0.x.25355] 
[0.x.25356] 
[0.x.25357] 
[0.x.25358] 
[0.x.25359] 
[0.x.25360] 
[0.x.25361] 
//
[0.x.25362] 
[0.x.25363] 
[0.x.25364] 
[0.x.25365] 
[0.x.25366] 
[0.x.25367] 
[0.x.25368] 
[0.x.25369] 
[0.x.25370] 
[0.x.25371] 
[0.x.25372] 
[0.x.25373] 
//
[0.x.25374] 
[0.x.25375] 
[0.x.25376] 
[0.x.25377] 
[0.x.25378] 
[0.x.25379] 
[0.x.25380] 
[0.x.25381] 
[0.x.25382] 
//
[0.x.25383] 
[0.x.25384] 
[0.x.25385] 
[0.x.25386] 
[0.x.25387] 
[0.x.25388] 
[0.x.25389] 
[0.x.25390] 
[0.x.25391] 
[0.x.25392] 
//[2.x.3203] 
//[2.x.3204] 
[0.x.25393] 
[0.x.25394] 
[0.x.25395] 
[0.x.25396] 
[0.x.25397] 
[0.x.25398] 
//
[0.x.25399] 
[0.x.25400] 
//
// 在我们可以规定周期性约束之前，我们需要确保位于域的对面但由周期性面连接的单元是幽灵层的一部分，如果其中一个单元存储在本地处理器上。在这一点上，我们需要考虑我们要如何规定周期性。左边边界上的面的顶点[2.x.3205]应该与下面边界上的面的顶点[2.x.3206]相匹配，由[2.x.3207]给出，其中旋转矩阵[2.x.3208]和偏移量[2.x.3209]由[1.x.102]给出。 我们将所得信息保存到这里的数据结构是基于三角结构的。
//
[0.x.25401] 
[0.x.25402] 
[0.x.25403] 
//
[0.x.25404] 
[0.x.25405] 
[0.x.25406] 
//
[0.x.25407] 
[0.x.25408] 
[0.x.25409] 
[0.x.25410] 
[0.x.25411] 
[0.x.25412] 
[0.x.25413] 
//
// 现在，只要调用[2.x.3210]就可以告诉三角函数所需的周期性，特别容易。
[0.x.25414] 
//
[0.x.25415] 
[0.x.25416] 
//
[0.x.25417] 
[0.x.25418] 
[0.x.25419] 
[0.x.25420] 
//
[0.x.25421] 
[0.x.25422] 
[0.x.25423] 
//
[0.x.25424] 
[0.x.25425] 
[0.x.25426] 
//
[0.x.25427] 
[0.x.25428] 
[0.x.25429] 
[0.x.25430] 
[0.x.25431] 
//
[0.x.25432] 
[0.x.25433] 
[0.x.25434] 
[0.x.25435] 
[0.x.25436] 
[0.x.25437] 
[0.x.25438] 
//
[0.x.25439] 
[0.x.25440] 
//
[0.x.25441] 
//
[0.x.25442] 
[0.x.25443] 
[0.x.25444] 
[0.x.25445] 
[0.x.25446] 
[0.x.25447] 
[0.x.25448] 
[0.x.25449] 
[0.x.25450] 
[0.x.25451] 
[0.x.25452] 
[0.x.25453] 
[0.x.25454] 
//
// 在我们为网格提供了周期性约束的必要信息后，我们现在可以实际创建它们。对于描述匹配，我们使用与之前相同的方法，也就是说，左边边界上的一个面的[2.x.3211]应该与下面边界上的一个面的顶点[2.x.3212]匹配，由[2.x.3213 ]，其中旋转矩阵[2.x.3214]和偏移量[2.x.3215]由[1.x.103]给出。 这两个对象不仅描述了应该如何匹配面，而且还描述了解决方案应该从[2.x.3216]转换到[2.x.3217]的意义。
//
[0.x.25455] 
[0.x.25456] 
[0.x.25457] 
//
[0.x.25458] 
//
// 为了设置约束，我们首先将周期性信息存储在一个类型为[2.x.3218]的辅助对象中。
//[2.x.3219] </code>。周期性边界的边界指标为2（x=0）和3（y=0）。所有其他的参数我们之前已经设置好了。在这种情况下，方向并不重要。由于[2.x.3220]这正是我们想要的。
//
[0.x.25459] 
[0.x.25460] 
[0.x.25461] 
//
[0.x.25462] 
//
[0.x.25463] 
[0.x.25464] 
[0.x.25465] 
[0.x.25466] 
[0.x.25467] 
[0.x.25468] 
[0.x.25469] 
//
// 接下来，我们需要提供关于解决方案中哪些矢量值分量应该被旋转的信息。由于我们在这里选择只约束速度，并且从解决方案矢量的第一个分量开始，我们只需插入一个0。
//
[0.x.25470] 
[0.x.25471] 
//
// 在设置了周期性_vector中的所有信息之后，我们要做的就是告诉make_periodicity_constraints来创建所需的约束。
//
[0.x.25472] 
[0.x.25473] 
[0.x.25474] 
[0.x.25475] 
[0.x.25476] 
//
[0.x.25477] 
[0.x.25478] 
[0.x.25479] 
[0.x.25480] 
[0.x.25481] 
[0.x.25482] 
[0.x.25483] 
[0.x.25484] 
[0.x.25485] 
[0.x.25486] 
[0.x.25487] 
[0.x.25488] 
[0.x.25489] 
//
[0.x.25490] 
//
[0.x.25491] 
[0.x.25492] 
[0.x.25493] 
[0.x.25494] 
[0.x.25495] 
//
[0.x.25496] 
[0.x.25497] 
[0.x.25498] 
[0.x.25499] 
[0.x.25500] 
[0.x.25501] 
[0.x.25502] 
//
[0.x.25503] 
[0.x.25504] 
[0.x.25505] 
[0.x.25506] 
[0.x.25507] 
[0.x.25508] 
[0.x.25509] 
//
[0.x.25510] 
//
[0.x.25511] 
[0.x.25512] 
//
[0.x.25513] 
[0.x.25514] 
[0.x.25515] 
[0.x.25516] 
[0.x.25517] 
[0.x.25518] 
//
[0.x.25519] 
[0.x.25520] 
[0.x.25521] 
[0.x.25522] 
[0.x.25523] 
[0.x.25524] 
[0.x.25525] 
//
[0.x.25526] 
[0.x.25527] 
[0.x.25528] 
[0.x.25529] 
[0.x.25530] 
[0.x.25531] 
[0.x.25532] 
//
[0.x.25533] 
//
[0.x.25534] 
[0.x.25535] 
//
[0.x.25536] 
[0.x.25537] 
[0.x.25538] 
[0.x.25539] 
[0.x.25540] 
//
// 然后程序的其余部分又与 [2.x.3221] 相同。我们现在省略它，但和以前一样，你可以在下面的 "普通程序 "部分找到这些部分。
//
// [2.x.3222] SKIP
//
[0.x.25541] 
[0.x.25542] 
[0.x.25543] 
[0.x.25544] 
[0.x.25545] 
[0.x.25546] 
//
[0.x.25547] 
//
[0.x.25548] 
[0.x.25549] 
[0.x.25550] 
[0.x.25551] 
[0.x.25552] 
//
[0.x.25553] 
//
[0.x.25554] 
//
[0.x.25555] 
[0.x.25556] 
[0.x.25557] 
[0.x.25558] 
//
[0.x.25559] 
//
[0.x.25560] 
[0.x.25561] 
//
[0.x.25562] 
[0.x.25563] 
//
[0.x.25564] 
[0.x.25565] 
[0.x.25566] 
//
[0.x.25567] 
[0.x.25568] 
[0.x.25569] 
[0.x.25570] 
[0.x.25571] 
[0.x.25572] 
[0.x.25573] 
//
[0.x.25574] 
[0.x.25575] 
//
[0.x.25576] 
[0.x.25577] 
[0.x.25578] 
[0.x.25579] 
[0.x.25580] 
[0.x.25581] 
[0.x.25582] 
[0.x.25583] 
[0.x.25584] 
//
[0.x.25585] 
[0.x.25586] 
[0.x.25587] 
[0.x.25588] 
[0.x.25589] 
[0.x.25590] 
[0.x.25591] 
[0.x.25592] 
[0.x.25593] 
//
[0.x.25594] 
[0.x.25595] 
[0.x.25596] 
//
[0.x.25597] 
[0.x.25598] 
[0.x.25599] 
[0.x.25600] 
[0.x.25601] 
[0.x.25602] 
[0.x.25603] 
//
[0.x.25604] 
[0.x.25605] 
[0.x.25606] 
[0.x.25607] 
[0.x.25608] 
[0.x.25609] 
[0.x.25610] 
//
[0.x.25611] 
[0.x.25612] 
[0.x.25613] 
[0.x.25614] 
[0.x.25615] 
[0.x.25616] 
[0.x.25617] 
[0.x.25618] 
[0.x.25619] 
[0.x.25620] 
//
[0.x.25621] 
[0.x.25622] 
//
[0.x.25623] 
[0.x.25624] 
//
[0.x.25625] 
[0.x.25626] 
[0.x.25627] 
[0.x.25628] 
[0.x.25629] 
//
[0.x.25630] 
[0.x.25631] 
[0.x.25632] 
[0.x.25633] 
[0.x.25634] 
[0.x.25635] 
//
[0.x.25636] 
[0.x.25637] 
//
 
[0.x.25639] 
[0.x.25640] 
[0.x.25641] 
[0.x.25642] 
[0.x.25643] 
//
[0.x.25644] 
[0.x.25645] 
//
[0.x.25646] 
[0.x.25647] 
[0.x.25648] 
//
[0.x.25649] 
[0.x.25650] 
//
[0.x.25651] 
[0.x.25652] 
[0.x.25653] 
[0.x.25654] 
[0.x.25655] 
[0.x.25656] 
//
[0.x.25657] 
//
[0.x.25658] 
[0.x.25659] 
[0.x.25660] 
//
[0.x.25661] 
[0.x.25662] 
[0.x.25663] 
[0.x.25664] 
//
[0.x.25665] 
//
[0.x.25666] 
[0.x.25667] 
[0.x.25668] 
[0.x.25669] 
//
[0.x.25670] 
[0.x.25671] 
[0.x.25672] 
[0.x.25673] 
[0.x.25674] 
[0.x.25675] 
//
[0.x.25676] 
[0.x.25677] 
[0.x.25678] 
[0.x.25679] 
[0.x.25680] 
//
[0.x.25681] 
[0.x.25682] 
[0.x.25683] 
[0.x.25684] 
[0.x.25685] 
[0.x.25686] 
[0.x.25687] 
[0.x.25688] 
[0.x.25689] 
[0.x.25690] 
[0.x.25691] 
//
[0.x.25692] 
[0.x.25693] 
[0.x.25694] 
//
[0.x.25695] 
[0.x.25696] 
[0.x.25697] 
[0.x.25698] 
//
[0.x.25699] 
[0.x.25700] 
[0.x.25701] 
[0.x.25702] 
[0.x.25703] 
[0.x.25704] 
[0.x.25705] 
[0.x.25706] 
//
[0.x.25707] 
[0.x.25708] 
[0.x.25709] 
[0.x.25710] 
//
[0.x.25711] 
[0.x.25712] 
[0.x.25713] 
[0.x.25714] 
//
[0.x.25715] 
[0.x.25716] 
[0.x.25717] 
[0.x.25718] 
//
[0.x.25719] 
[0.x.25720] 
//
[0.x.25721] 
//
[0.x.25722] 
[0.x.25723] 
//
[0.x.25724] 
[0.x.25725] 
//
[0.x.25726] 
//
[0.x.25727] 
[0.x.25728] 
[0.x.25729] 
[0.x.25730] 
//
[0.x.25731] 
[0.x.25732] 
[0.x.25733] 
[0.x.25734] 
[0.x.25735] 
[0.x.25736] 
//
[0.x.25737] 
[0.x.25738] 
[0.x.25739] 
[0.x.25740] 
[0.x.25741] 
[0.x.25742] 
[0.x.25743] 
[0.x.25744] 
[0.x.25745] 
[0.x.25746] 
[0.x.25747] 
[0.x.25748] 
[0.x.25749] 
[0.x.25750] 
[0.x.25751] 
//
[0.x.25752] 
[0.x.25753] 
[0.x.25754] 
[0.x.25755] 
[0.x.25756] 
[0.x.25757] 
[0.x.25758] 
[0.x.25759] 
[0.x.25760] 
[0.x.25761] 
[0.x.25762] 
[0.x.25763] 
[0.x.25764] 
[0.x.25765] 
//
[0.x.25766] 
[0.x.25767] 
//[2.x.3223] 
[0.x.25768] 
[0.x.25769] 
[0.x.25770] 
[0.x.25771] 
[0.x.25772] 
[0.x.25773] 
[0.x.25774] 
[0.x.25775] 
[0.x.25776] 
[0.x.25777] 
[0.x.25778] 
[0.x.25779] 
[0.x.25780] 
[0.x.25781] 
//
[0.x.25782] 
[0.x.25783] 
[0.x.25784] 
//[2.x.3224] 
//
// 这个程序的包含文件与之前许多其他程序的包含文件是一样的。唯一的新文件是在介绍中讨论的声明FE_Nothing的文件。hp目录下的文件已经在 [2.x.3225] 中讨论过了。
//
[0.x.25785] 
[0.x.25786] 
[0.x.25787] 
[0.x.25788] 
//
[0.x.25789] 
[0.x.25790] 
[0.x.25791] 
[0.x.25792] 
[0.x.25793] 
//
[0.x.25794] 
[0.x.25795] 
[0.x.25796] 
//
[0.x.25797] 
//
[0.x.25798] 
[0.x.25799] 
[0.x.25800] 
[0.x.25801] 
//
[0.x.25802] 
[0.x.25803] 
//
[0.x.25804] 
[0.x.25805] 
[0.x.25806] 
//
[0.x.25807] 
[0.x.25808] 
//
[0.x.25809] 
[0.x.25810] 
[0.x.25811] 
//[2.x.3226] 
//
// 这是主类。如果你想的话，它是[2.x.3227]和[2.x.3228]的组合，因为它的成员变量要么针对全局问题（Triangulation和DoFHandler对象，以及[2.x.3229]和各种线性代数对象），要么与弹性或斯托克斯子问题有关。然而，该类的一般结构与其他大多数实现静止问题的程序一样。
//
// 有几个不言自明的辅助函数（<code>cell_is_in_fluid_domain, cell_is_in_solid_domain</code>）（对两个子域的符号名称进行操作，这些名称将被用作属于子域的单元的 material_ids。正如介绍中所解释的那样）和几个函数（<code>make_grid, set_active_fe_indices, assemble_interface_terms</code>），这些函数已经从其他的函数中分离出来，可以在其他的教程程序中找到，我们将在实现它们的时候讨论。
//
// 最后一组变量 ( [2.x.3230] ) 描述了用于两个物理模型的材料属性。
//
[0.x.25812] 
[0.x.25813] 
[0.x.25814] 
[0.x.25815] 
[0.x.25816] 
[0.x.25817] 
[0.x.25818] 
//
[0.x.25819] 
[0.x.25820] 
[0.x.25821] 
[0.x.25822] 
[0.x.25823] 
[0.x.25824] 
//
[0.x.25825] 
[0.x.25826] 
//
[0.x.25827] 
[0.x.25828] 
//
[0.x.25829] 
[0.x.25830] 
[0.x.25831] 
[0.x.25832] 
[0.x.25833] 
[0.x.25834] 
[0.x.25835] 
[0.x.25836] 
[0.x.25837] 
[0.x.25838] 
[0.x.25839] 
[0.x.25840] 
[0.x.25841] 
[0.x.25842] 
//
[0.x.25843] 
[0.x.25844] 
//
[0.x.25845] 
[0.x.25846] 
[0.x.25847] 
[0.x.25848] 
[0.x.25849] 
//
[0.x.25850] 
//
[0.x.25851] 
[0.x.25852] 
//
[0.x.25853] 
[0.x.25854] 
//
[0.x.25855] 
[0.x.25856] 
[0.x.25857] 
[0.x.25858] 
//[2.x.3231] 
//
// 下面这个类如其名。速度的边界值分别为2d的[2.x.3232]和3d的[2.x.3233]。这个问题的其余边界条件都是同质的，在介绍中已经讨论过。右边的强迫项对于流体和固体都是零，所以我们不需要为它设置额外的类。
//
[0.x.25859] 
[0.x.25860] 
[0.x.25861] 
[0.x.25862] 
[0.x.25863] 
[0.x.25864] 
[0.x.25865] 
//
[0.x.25866] 
[0.x.25867] 
//
[0.x.25868] 
[0.x.25869] 
[0.x.25870] 
//
[0.x.25871] 
[0.x.25872] 
[0.x.25873] 
[0.x.25874] 
[0.x.25875] 
[0.x.25876] 
//
[0.x.25877] 
[0.x.25878] 
[0.x.25879] 
[0.x.25880] 
[0.x.25881] 
[0.x.25882] 
[0.x.25883] 
[0.x.25884] 
[0.x.25885] 
[0.x.25886] 
//
[0.x.25887] 
[0.x.25888] 
//
[0.x.25889] 
[0.x.25890] 
[0.x.25891] 
[0.x.25892] 
[0.x.25893] 
[0.x.25894] 
[0.x.25895] 
//
// [2.x.3234] 
//[2.x.3235] 
//
// 现在我们来谈谈这个程序的主类的实现。最初的几个函数是构造函数和辅助函数，可以用来确定一个单元格在域的哪个部分。鉴于介绍中对这些主题的讨论，它们的实现是相当明显的。在构造函数中，注意我们必须从斯托克斯和弹性的基本元素中构造[2.x.3236]对象；使用[2.x.3237]函数在这个集合中为它们分配了0和1的位置，我们必须记住这个顺序，并在程序的其余部分一致使用。
//
[0.x.25896] 
[0.x.25897] 
[0.x.25898] 
[0.x.25899] 
[0.x.25900] 
[0.x.25901] 
[0.x.25902] 
[0.x.25903] 
[0.x.25904] 
[0.x.25905] 
[0.x.25906] 
[0.x.25907] 
[0.x.25908] 
[0.x.25909] 
[0.x.25910] 
[0.x.25911] 
[0.x.25912] 
[0.x.25913] 
[0.x.25914] 
[0.x.25915] 
[0.x.25916] 
[0.x.25917] 
[0.x.25918] 
[0.x.25919] 
[0.x.25920] 
[0.x.25921] 
[0.x.25922] 
//
[0.x.25923] 
[0.x.25924] 
[0.x.25925] 
[0.x.25926] 
[0.x.25927] 
[0.x.25928] 
//
[0.x.25929] 
[0.x.25930] 
[0.x.25931] 
[0.x.25932] 
[0.x.25933] 
[0.x.25934] 
//[2.x.3238] 
//
// 接下来的一对函数是处理生成网格，并确保所有表示子域的标志都是正确的。 [2.x.3239] ，正如在介绍中所讨论的，生成一个[2.x.3240]的网格（或者一个[2.x.3241]的三维网格）以确保每个粗略的网格单元完全在一个子域内。生成这个网格后，我们在其边界上循环，并在顶部边界设置边界指标为1，这是我们设置非零迪里希特边界条件的唯一地方。在这之后，我们再次在所有单元上循环，设置材料指标&mdash;用来表示我们处于域的哪一部分，是流体指标还是固体指标。
//
[0.x.25935] 
[0.x.25936] 
[0.x.25937] 
[0.x.25938] 
//
[0.x.25939] 
[0.x.25940] 
[0.x.25941] 
[0.x.25942] 
//
[0.x.25943] 
[0.x.25944] 
[0.x.25945] 
[0.x.25946] 
[0.x.25947] 
[0.x.25948] 
[0.x.25949] 
[0.x.25950] 
[0.x.25951] 
//
// 这对函数的第二部分决定在每个单元上使用哪个有限元。上面我们设置了每个粗略网格单元的材料指标，正如在介绍中提到的，这个信息在网格细化时将从母单元继承到子单元。
//
// 换句话说，只要我们细化（或创建）了网格，我们就可以依靠材料指示器来正确描述一个单元所处的域的哪一部分。然后我们利用这一点将单元的活动FE索引设置为该类的[2.x.3242]成员变量中的相应元素：流体单元为0，固体单元为1。
//
[0.x.25952] 
[0.x.25953] 
[0.x.25954] 
[0.x.25955] 
[0.x.25956] 
[0.x.25957] 
[0.x.25958] 
[0.x.25959] 
[0.x.25960] 
[0.x.25961] 
[0.x.25962] 
[0.x.25963] 
[0.x.25964] 
//[2.x.3243] 
//
// 下一步是为线性系统设置数据结构。为此，我们首先要用上面的函数设置活动FE指数，然后分配自由度，再确定线性系统的约束。后者包括像往常一样的悬挂节点约束，但也包括顶部流体边界的不均匀边界值，以及沿固体子域周边的零边界值。
//
[0.x.25965] 
[0.x.25966] 
[0.x.25967] 
[0.x.25968] 
[0.x.25969] 
//
[0.x.25970] 
[0.x.25971] 
[0.x.25972] 
//
[0.x.25973] 
[0.x.25974] 
[0.x.25975] 
[0.x.25976] 
[0.x.25977] 
[0.x.25978] 
[0.x.25979] 
//
[0.x.25980] 
[0.x.25981] 
[0.x.25982] 
[0.x.25983] 
[0.x.25984] 
[0.x.25985] 
[0.x.25986] 
[0.x.25987] 
//
// 不过，我们还需要处理更多的约束条件：我们必须确保在流体和固体的界面上速度为零。下面这段代码已经在介绍中介绍过了。
//
[0.x.25988] 
[0.x.25989] 
[0.x.25990] 
[0.x.25991] 
[0.x.25992] 
[0.x.25993] 
[0.x.25994] 
[0.x.25995] 
[0.x.25996] 
//
[0.x.25997] 
[0.x.25998] 
[0.x.25999] 
[0.x.26000] 
[0.x.26001] 
[0.x.26002] 
[0.x.26003] 
[0.x.26004] 
[0.x.26005] 
[0.x.26006] 
[0.x.26007] 
[0.x.26008] 
[0.x.26009] 
[0.x.26010] 
[0.x.26011] 
//
[0.x.26012] 
[0.x.26013] 
[0.x.26014] 
[0.x.26015] 
[0.x.26016] 
[0.x.26017] 
[0.x.26018] 
[0.x.26019] 
[0.x.26020] 
[0.x.26021] 
[0.x.26022] 
[0.x.26023] 
//
// 在这一切结束后，我们可以向约束对象声明，我们现在已经准备好了所有的约束，并且该对象可以重建其内部数据结构以提高效率。
//
[0.x.26024] 
//
[0.x.26025] 
[0.x.26026] 
[0.x.26027] 
[0.x.26028] 
//
// 在这个函数的其余部分，我们创建了一个在介绍中广泛讨论的稀疏模式，并使用它来初始化矩阵；然后还将向量设置为正确的大小。
//
[0.x.26029] 
[0.x.26030] 
//
[0.x.26031] 
[0.x.26032] 
[0.x.26033] 
[0.x.26034] 
//
[0.x.26035] 
[0.x.26036] 
[0.x.26037] 
[0.x.26038] 
[0.x.26039] 
[0.x.26040] 
[0.x.26041] 
//
[0.x.26042] 
[0.x.26043] 
[0.x.26044] 
//
[0.x.26045] 
[0.x.26046] 
[0.x.26047] 
[0.x.26048] 
[0.x.26049] 
[0.x.26050] 
[0.x.26051] 
//
[0.x.26052] 
//
[0.x.26053] 
[0.x.26054] 
[0.x.26055] 
//
// [2.x.3244] 
//
// 下面是这个程序的中心函数：组装线性系统的函数。它在开始时有一长段设置辅助函数的内容：从创建正交公式到设置FEValues、FEFaceValues和FESubfaceValues对象，这些都是整合单元项以及界面项所必需的，以应对界面上的单元以相同大小或不同细化程度聚集在一起的情况...
//
[0.x.26056] 
[0.x.26057] 
[0.x.26058] 
[0.x.26059] 
[0.x.26060] 
//
[0.x.26061] 
[0.x.26062] 
//
[0.x.26063] 
[0.x.26064] 
[0.x.26065] 
//
[0.x.26066] 
[0.x.26067] 
[0.x.26068] 
[0.x.26069] 
//
[0.x.26070] 
[0.x.26071] 
//
[0.x.26072] 
[0.x.26073] 
[0.x.26074] 
[0.x.26075] 
[0.x.26076] 
[0.x.26077] 
[0.x.26078] 
[0.x.26079] 
[0.x.26080] 
[0.x.26081] 
[0.x.26082] 
[0.x.26083] 
[0.x.26084] 
[0.x.26085] 
[0.x.26086] 
[0.x.26087] 
[0.x.26088] 
//
// ...描述局部对全局线性系统贡献所需的对象...
//
[0.x.26089] 
[0.x.26090] 
[0.x.26091] 
//
[0.x.26092] 
[0.x.26093] 
[0.x.26094] 
[0.x.26095] 
//
[0.x.26096] 
[0.x.26097] 
[0.x.26098] 
//
[0.x.26099] 
//
// ...到变量，允许我们提取形状函数的某些成分并缓存它们的值，而不是在每个正交点重新计算它们。
//
[0.x.26100] 
[0.x.26101] 
[0.x.26102] 
//
[0.x.26103] 
[0.x.26104] 
[0.x.26105] 
[0.x.26106] 
//
[0.x.26107] 
[0.x.26108] 
[0.x.26109] 
//
// 然后是所有单元格的主循环，和[2.x.3245]一样，初始化当前单元格的[2.x.3246]对象，提取适合当前单元格的FEValues对象。
//
[0.x.26110] 
[0.x.26111] 
[0.x.26112] 
//
[0.x.26113] 
//
[0.x.26114] 
[0.x.26115] 
[0.x.26116] 
//
// 做完这些后，我们继续为属于斯托克斯和弹性区域的单元组装单元项。虽然我们原则上可以在一个公式中完成，实际上就是实现了介绍中所说的双线性形式，但我们意识到，我们的有限元空间的选择方式是，在每个单元上，有一组变量（速度和压力，或者位移）总是为零，因此，计算局部积分的更有效的方法是，根据测试我们处于域的哪一部分的[2.x.3247]条款，只做必要的事情。
//
// 局部矩阵的实际计算与[2.x.3248]以及[2.x.3249]文件模块中给出的弹性方程的计算相同。
//
[0.x.26117] 
[0.x.26118] 
[0.x.26119] 
[0.x.26120] 
//
[0.x.26121] 
[0.x.26122] 
[0.x.26123] 
[0.x.26124] 
[0.x.26125] 
[0.x.26126] 
[0.x.26127] 
[0.x.26128] 
[0.x.26129] 
[0.x.26130] 
//
[0.x.26131] 
[0.x.26132] 
[0.x.26133] 
[0.x.26134] 
[0.x.26135] 
[0.x.26136] 
[0.x.26137] 
[0.x.26138] 
[0.x.26139] 
[0.x.26140] 
[0.x.26141] 
[0.x.26142] 
[0.x.26143] 
[0.x.26144] 
[0.x.26145] 
//
[0.x.26146] 
[0.x.26147] 
[0.x.26148] 
[0.x.26149] 
[0.x.26150] 
[0.x.26151] 
[0.x.26152] 
[0.x.26153] 
[0.x.26154] 
//
[0.x.26155] 
[0.x.26156] 
[0.x.26157] 
[0.x.26158] 
[0.x.26159] 
[0.x.26160] 
[0.x.26161] 
[0.x.26162] 
[0.x.26163] 
[0.x.26164] 
[0.x.26165] 
[0.x.26166] 
[0.x.26167] 
[0.x.26168] 
[0.x.26169] 
//
// 一旦我们得到了单元积分的贡献，我们就把它们复制到全局矩阵中（通过[2.x.3250]函数，立即处理约束）。请注意，我们没有向[2.x.3251]变量中写入任何东西，尽管我们仍然需要传递它，因为消除非零边界值需要修改局部，因此也需要修改全局的右手值。
//
[0.x.26170] 
[0.x.26171] 
[0.x.26172] 
[0.x.26173] 
[0.x.26174] 
[0.x.26175] 
[0.x.26176] 
//
// 这个函数更有趣的部分是我们看到关于两个子域之间的界面上的脸部条款。为此，我们首先要确保我们只组装一次，即使在所有单元的所有面的循环中会遇到界面的每一部分两次。我们武断地决定，只有当当前单元是固体子域的一部分，并且因此一个面不在边界上，并且它后面的潜在邻居是流体域的一部分时，我们才会评估界面条款。让我们从这些条件开始。
//
[0.x.26177] 
[0.x.26178] 
[0.x.26179] 
[0.x.26180] 
//
// 在这一点上，我们知道当前的单元格是一个候选的整合对象，并且面[2.x.3252]后面存在一个邻居。现在有三种可能性。           
//
// - 邻居处于同一细化水平，并且没有孩子。     
//
// - 邻居有子女。     
//
// - 邻居比较粗糙。            在所有这三种情况下，我们只对它感兴趣，如果它是流体子域的一部分。因此，让我们从第一种最简单的情况开始：如果邻居处于同一层次，没有子女，并且是一个流体单元，那么这两个单元共享一个边界，这个边界是界面的一部分，我们想沿着这个边界整合界面项。我们所要做的就是用当前面和邻接单元的面初始化两个FEFaceValues对象（注意我们是如何找出邻接单元的哪个面与当前单元接壤的），然后把东西传给评估界面项的函数（这个函数的第三个到第五个参数为它提供了抓取数组）。然后，结果再次被复制到全局矩阵中，使用一个知道本地矩阵的行和列的DoF指数来自不同单元的函数。
//
[0.x.26181] 
[0.x.26182] 
[0.x.26183] 
[0.x.26184] 
[0.x.26185] 
[0.x.26186] 
[0.x.26187] 
//
[0.x.26188] 
[0.x.26189] 
[0.x.26190] 
[0.x.26191] 
[0.x.26192] 
[0.x.26193] 
//
[0.x.26194] 
[0.x.26195] 
[0.x.26196] 
[0.x.26197] 
[0.x.26198] 
[0.x.26199] 
[0.x.26200] 
//
// 第二种情况是，如果邻居还有更多的孩子。在这种情况下，我们必须在邻居的所有子女中进行循环，看他们是否属于流体子域的一部分。如果它们是，那么我们就在共同界面上进行整合，这个界面是邻居的一个面和当前单元的一个子面，要求我们对邻居使用FEFaceValues，对当前单元使用FESubfaceValues。
//
[0.x.26201] 
[0.x.26202] 
[0.x.26203] 
[0.x.26204] 
[0.x.26205] 
[0.x.26206] 
[0.x.26207] 
[0.x.26208] 
[0.x.26209] 
[0.x.26210] 
[0.x.26211] 
[0.x.26212] 
[0.x.26213] 
//
[0.x.26214] 
[0.x.26215] 
[0.x.26216] 
[0.x.26217] 
[0.x.26218] 
[0.x.26219] 
//
[0.x.26220] 
[0.x.26221] 
[0.x.26222] 
[0.x.26223] 
[0.x.26224] 
[0.x.26225] 
[0.x.26226] 
[0.x.26227] 
[0.x.26228] 
//
// 最后一个选项是，邻居比较粗大。在这种情况下，我们必须为邻居使用一个FESubfaceValues对象，为当前单元使用一个FEFaceValues；其余部分与之前相同。
//
[0.x.26229] 
[0.x.26230] 
[0.x.26231] 
[0.x.26232] 
[0.x.26233] 
[0.x.26234] 
[0.x.26235] 
[0.x.26236] 
//
[0.x.26237] 
[0.x.26238] 
[0.x.26239] 
[0.x.26240] 
[0.x.26241] 
[0.x.26242] 
//
[0.x.26243] 
[0.x.26244] 
[0.x.26245] 
[0.x.26246] 
[0.x.26247] 
[0.x.26248] 
[0.x.26249] 
[0.x.26250] 
[0.x.26251] 
[0.x.26252] 
//
// 在组装全局系统的函数中，我们将计算接口条款传递给我们在此讨论的一个单独的函数。关键是，尽管我们无法预测FEFaceValues和FESubfaceValues对象的组合，但它们都是从FEFaceValuesBase类派生出来的，因此我们不必在意：该函数被简单地调用，有两个这样的对象表示面的两边的正交点上的形状函数值。然后我们做我们一直在做的事情：我们用形状函数的值和它们的导数来填充从头数组，然后循环计算矩阵的所有条目来计算局部积分。我们在这里评估的双线性形式的细节在介绍中给出。
//
[0.x.26253] 
[0.x.26254] 
[0.x.26255] 
[0.x.26256] 
[0.x.26257] 
[0.x.26258] 
[0.x.26259] 
[0.x.26260] 
[0.x.26261] 
[0.x.26262] 
[0.x.26263] 
[0.x.26264] 
[0.x.26265] 
[0.x.26266] 
//
[0.x.26267] 
[0.x.26268] 
[0.x.26269] 
//
[0.x.26270] 
[0.x.26271] 
[0.x.26272] 
[0.x.26273] 
[0.x.26274] 
//
[0.x.26275] 
[0.x.26276] 
[0.x.26277] 
[0.x.26278] 
[0.x.26279] 
[0.x.26280] 
[0.x.26281] 
[0.x.26282] 
[0.x.26283] 
[0.x.26284] 
//
[0.x.26285] 
[0.x.26286] 
[0.x.26287] 
[0.x.26288] 
[0.x.26289] 
[0.x.26290] 
[0.x.26291] 
[0.x.26292] 
[0.x.26293] 
//[2.x.3253] 
//
// 正如介绍中所讨论的，我们在这里使用了一个相当琐碎的求解器：我们只是将线性系统传递给SparseDirectUMFPACK直接求解器（例如，见[2.x.3254] ）。在求解之后，我们唯一要做的是确保悬挂的节点和边界值约束是正确的。
//
[0.x.26294] 
[0.x.26295] 
[0.x.26296] 
[0.x.26297] 
[0.x.26298] 
[0.x.26299] 
//
[0.x.26300] 
[0.x.26301] 
//
// [2.x.3255] 
//
// 生成图形输出在这里相当简单：我们所要做的就是确定解向量的哪些成分属于标量和/或向量（例如，见[2.x.3256]之前的例子），然后把它全部传递给DataOut类。
//
[0.x.26302] 
[0.x.26303] 
[0.x.26304] 
[0.x.26305] 
[0.x.26306] 
[0.x.26307] 
[0.x.26308] 
[0.x.26309] 
//
[0.x.26310] 
[0.x.26311] 
[0.x.26312] 
[0.x.26313] 
[0.x.26314] 
[0.x.26315] 
[0.x.26316] 
[0.x.26317] 
//
[0.x.26318] 
[0.x.26319] 
//
[0.x.26320] 
[0.x.26321] 
[0.x.26322] 
[0.x.26323] 
[0.x.26324] 
//
[0.x.26325] 
[0.x.26326] 
[0.x.26327] 
[0.x.26328] 
//[2.x.3257] 
//
// 下一步是细化网格。正如在介绍中所讨论的，这有点棘手，主要是因为流体和固体子域使用的变量具有不同的物理尺寸，因此，误差估计的绝对大小不能直接比较。因此，我们将不得不对它们进行缩放。因此，在函数的顶部，我们首先分别计算不同变量的误差估计值（在流体域中使用速度而不是压力，在固体域中使用位移）。
//
[0.x.26329] 
[0.x.26330] 
[0.x.26331] 
[0.x.26332] 
[0.x.26333] 
[0.x.26334] 
[0.x.26335] 
//
[0.x.26336] 
[0.x.26337] 
//
[0.x.26338] 
[0.x.26339] 
[0.x.26340] 
//
[0.x.26341] 
[0.x.26342] 
[0.x.26343] 
[0.x.26344] 
[0.x.26345] 
[0.x.26346] 
[0.x.26347] 
[0.x.26348] 
//
[0.x.26349] 
[0.x.26350] 
[0.x.26351] 
[0.x.26352] 
[0.x.26353] 
[0.x.26354] 
[0.x.26355] 
[0.x.26356] 
//
// 然后，我们通过除以误差估计值的法线对其进行归一化处理，并按照介绍中所讨论的那样，将流体误差指标按4的系数进行缩放。然后将这些结果加在一起，形成一个包含所有单元的误差指标的向量。
//
[0.x.26357] 
[0.x.26358] 
[0.x.26359] 
[0.x.26360] 
//
[0.x.26361] 
//
[0.x.26362] 
[0.x.26363] 
//
// 在实际细化网格之前，函数的倒数第二部分涉及到我们在介绍中已经提到的启发式方法：由于解是不连续的，KellyErrorEstimator类对位于子域之间边界的单元感到困惑：它认为那里的误差很大，因为梯度的跳跃很大，尽管这完全是预期的，事实上在精确解中也存在这一特征，因此不表明任何数值错误。
//
// 因此，我们将界面上的所有单元的误差指标设置为零；决定影响哪些单元的条件略显尴尬，因为我们必须考虑到自适应细化网格的可能性，这意味着邻近的单元可能比当前的单元更粗，或者事实上可能被细化一些。这些嵌套条件的结构与我们在[2.x.3258]中组装接口条款时遇到的情况基本相同。
//
[0.x.26364] 
[0.x.26365] 
[0.x.26366] 
[0.x.26367] 
[0.x.26368] 
[0.x.26369] 
[0.x.26370] 
[0.x.26371] 
[0.x.26372] 
[0.x.26373] 
[0.x.26374] 
[0.x.26375] 
[0.x.26376] 
[0.x.26377] 
[0.x.26378] 
[0.x.26379] 
[0.x.26380] 
[0.x.26381] 
[0.x.26382] 
[0.x.26383] 
[0.x.26384] 
[0.x.26385] 
[0.x.26386] 
[0.x.26387] 
[0.x.26388] 
[0.x.26389] 
[0.x.26390] 
[0.x.26391] 
[0.x.26392] 
[0.x.26393] 
//
[0.x.26394] 
[0.x.26395] 
[0.x.26396] 
[0.x.26397] 
[0.x.26398] 
[0.x.26399] 
//
// [2.x.3259] 
//
// 像往常一样，这是控制整个操作流程的函数。如果你读过教程程序 [2.x.3260] 到 [2.x.3261] ，例如，那么你已经对以下结构相当熟悉。
//
[0.x.26400] 
[0.x.26401] 
[0.x.26402] 
[0.x.26403] 
//
[0.x.26404] 
[0.x.26405] 
[0.x.26406] 
[0.x.26407] 
//
[0.x.26408] 
[0.x.26409] 
//
[0.x.26410] 
//
[0.x.26411] 
[0.x.26412] 
//
[0.x.26413] 
[0.x.26414] 
//
[0.x.26415] 
[0.x.26416] 
//
[0.x.26417] 
[0.x.26418] 
[0.x.26419] 
[0.x.26420] 
//
// [2.x.3262] 
//
// 这个，最后的，函数所包含的内容几乎与其他大多数教程程序的内容完全一样。
//
[0.x.26421] 
[0.x.26422] 
[0.x.26423] 
[0.x.26424] 
[0.x.26425] 
//
[0.x.26426] 
[0.x.26427] 
[0.x.26428] 
[0.x.26429] 
[0.x.26430] 
[0.x.26431] 
[0.x.26432] 
[0.x.26433] 
[0.x.26434] 
[0.x.26435] 
[0.x.26436] 
[0.x.26437] 
[0.x.26438] 
[0.x.26439] 
//
[0.x.26440] 
[0.x.26441] 
[0.x.26442] 
[0.x.26443] 
[0.x.26444] 
[0.x.26445] 
[0.x.26446] 
[0.x.26447] 
[0.x.26448] 
[0.x.26449] 
[0.x.26450] 
[0.x.26451] 
[0.x.26452] 
[0.x.26453] 
//
[0.x.26454] 
[0.x.26455] 
[0.x.26456] 
[0.x.26457] 
[0.x.26458] 
[0.x.26459] 
[0.x.26460] 
[0.x.26461] 
[0.x.26462] 
[0.x.26463] 
[0.x.26464] 
[0.x.26465] 
[0.x.26466] 
[0.x.26467] 
[0.x.26468] 
[0.x.26469] 
//
[0.x.26470] 
[0.x.26471] 
[0.x.26472] 
[0.x.26473] 
[0.x.26474] 
[0.x.26475] 
[0.x.26476] 
//[2.x.3263] 
//
// 前面的几个include文件已经在前面的例子中使用过了，所以我们在这里不再解释它们的含义。该程序的主要结构与例如[2.x.3264]的结构非常相似，因此我们包含了许多相同的头文件。
//
[0.x.26477] 
[0.x.26478] 
//
[0.x.26479] 
[0.x.26480] 
[0.x.26481] 
[0.x.26482] 
[0.x.26483] 
[0.x.26484] 
//
[0.x.26485] 
[0.x.26486] 
//
[0.x.26487] 
[0.x.26488] 
[0.x.26489] 
//
[0.x.26490] 
[0.x.26491] 
//
[0.x.26492] 
[0.x.26493] 
//
// 最有趣的两个头文件将是这两个。
//
[0.x.26494] 
[0.x.26495] 
//
// 其中第一个文件负责提供FEInterfaceValues类，该类可用于评估单元间界面的形状函数（或其梯度）的跳跃或平均值等数量。这个类在评估C0IP公式中出现的惩罚项时将相当有用。
//
[0.x.26496] 
[0.x.26497] 
[0.x.26498] 
//
[0.x.26499] 
[0.x.26500] 
[0.x.26501] 
//
// 在下面的命名空间中，让我们定义精确解，我们将与数值计算的解进行比较。它的形式是[2.x.3265]（只实现了2d的情况），该命名空间还包含一个对应于产生该解的右手边的类。
//
[0.x.26502] 
[0.x.26503] 
[0.x.26504] 
//
[0.x.26505] 
[0.x.26506] 
[0.x.26507] 
[0.x.26508] 
[0.x.26509] 
//
[0.x.26510] 
[0.x.26511] 
[0.x.26512] 
[0.x.26513] 
[0.x.26514] 
//
[0.x.26515] 
[0.x.26516] 
[0.x.26517] 
[0.x.26518] 
[0.x.26519] 
[0.x.26520] 
[0.x.26521] 
[0.x.26522] 
[0.x.26523] 
//
[0.x.26524] 
[0.x.26525] 
[0.x.26526] 
[0.x.26527] 
[0.x.26528] 
[0.x.26529] 
[0.x.26530] 
[0.x.26531] 
[0.x.26532] 
//
[0.x.26533] 
[0.x.26534] 
[0.x.26535] 
[0.x.26536] 
[0.x.26537] 
[0.x.26538] 
//
[0.x.26539] 
[0.x.26540] 
[0.x.26541] 
[0.x.26542] 
[0.x.26543] 
//
[0.x.26544] 
[0.x.26545] 
//
[0.x.26546] 
[0.x.26547] 
[0.x.26548] 
[0.x.26549] 
[0.x.26550] 
[0.x.26551] 
//
// [2.x.3266] 
//
// 以下是本教程程序的主类。它具有许多其他教程程序的结构，其内容和后面的构造函数应该没有什么特别令人惊讶的地方。
//
[0.x.26552] 
[0.x.26553] 
[0.x.26554] 
[0.x.26555] 
[0.x.26556] 
//
[0.x.26557] 
//
[0.x.26558] 
[0.x.26559] 
[0.x.26560] 
[0.x.26561] 
[0.x.26562] 
[0.x.26563] 
[0.x.26564] 
//
[0.x.26565] 
//
[0.x.26566] 
//
[0.x.26567] 
[0.x.26568] 
[0.x.26569] 
//
[0.x.26570] 
[0.x.26571] 
//
[0.x.26572] 
[0.x.26573] 
[0.x.26574] 
//
[0.x.26575] 
[0.x.26576] 
[0.x.26577] 
[0.x.26578] 
[0.x.26579] 
[0.x.26580] 
//
// 接下来是创建初始网格（一次精炼的单元格）和设置每个网格的约束、向量和矩阵的函数。同样，这两个函数与之前的许多教程程序基本没有变化。
//
[0.x.26581] 
[0.x.26582] 
[0.x.26583] 
[0.x.26584] 
[0.x.26585] 
//
[0.x.26586] 
[0.x.26587] 
[0.x.26588] 
[0.x.26589] 
[0.x.26590] 
//
[0.x.26591] 
[0.x.26592] 
[0.x.26593] 
[0.x.26594] 
//
[0.x.26595] 
[0.x.26596] 
//
[0.x.26597] 
[0.x.26598] 
//
[0.x.26599] 
[0.x.26600] 
[0.x.26601] 
[0.x.26602] 
[0.x.26603] 
//
[0.x.26604] 
[0.x.26605] 
[0.x.26606] 
[0.x.26607] 
//
[0.x.26608] 
[0.x.26609] 
[0.x.26610] 
//
// [2.x.3267] 
//
// 下面的几段代码更有意思。它们都与线性系统的组装有关。虽然组装单元格内部项的难度不大--这在本质上就像组装拉普拉斯方程的相应项一样，你已经在[2.x.3268]或[2.x.3269]中看到了这是如何工作的，例如，困难在于公式中的惩罚项。这需要在单元格的界面上对形状函数的梯度进行评估。因此，至少需要使用两个FEFaceValues对象，但如果其中一个面是自适应细化的，那么实际上需要一个FEFaceValues和一个FESubfaceValues对象；我们还需要跟踪哪些形状函数在哪里，最后我们需要确保每个面只被访问一次。所有这些对于我们真正想要实现的逻辑（即双线性形式中的惩罚项）来说都是一笔不小的开销。因此，我们将使用FEInterfaceValues类--这是deal.II中的一个辅助类，它允许我们抽象出两个FEFaceValues或FESubfaceValues对象，直接访问我们真正关心的东西：跳跃、平均等。
//
// 但这还没有解决我们的问题，即当我们在所有单元格和它们的所有面中循环时，必须跟踪我们已经访问过哪些面。为了使这个过程更简单，我们使用了[2.x.3270]函数，它为这个任务提供了一个简单的接口：基于WorkStream命名空间文档中概述的想法，[2.x.3271]需要三个函数对单元、内部面和边界面进行工作。这些函数在抓取对象上工作，以获得中间结果，然后将其计算结果复制到复制数据对象中，由一个复制器函数将其复制到全局矩阵和右侧对象中。
//
// 然后，下面的结构提供了这种方法所需的从头开始和复制对象。你可以查阅WorkStream命名空间以及[2.x.3272]"多处理器并行计算 "模块，了解更多关于它们通常如何工作的信息。
//
[0.x.26611] 
[0.x.26612] 
[0.x.26613] 
[0.x.26614] 
[0.x.26615] 
[0.x.26616] 
[0.x.26617] 
[0.x.26618] 
[0.x.26619] 
[0.x.26620] 
[0.x.26621] 
[0.x.26622] 
[0.x.26623] 
[0.x.26624] 
//
[0.x.26625] 
[0.x.26626] 
[0.x.26627] 
[0.x.26628] 
[0.x.26629] 
[0.x.26630] 
[0.x.26631] 
[0.x.26632] 
[0.x.26633] 
[0.x.26634] 
//
[0.x.26635] 
[0.x.26636] 
[0.x.26637] 
//
[0.x.26638] 
[0.x.26639] 
[0.x.26640] 
[0.x.26641] 
[0.x.26642] 
[0.x.26643] 
[0.x.26644] 
//
[0.x.26645] 
//
[0.x.26646] 
//
[0.x.26647] 
//
[0.x.26648] 
//
[0.x.26649] 
//
[0.x.26650] 
[0.x.26651] 
[0.x.26652] 
[0.x.26653] 
[0.x.26654] 
//
[0.x.26655] 
[0.x.26656] 
[0.x.26657] 
[0.x.26658] 
[0.x.26659] 
//
// 更有趣的部分是我们实际组装线性系统的地方。从根本上说，这个函数有五个部分。
//
// - `cell_worker`λ函数的定义，这是一个定义在`assemble_system()`函数中的小函数，它将负责计算单个单元上的局部积分。它将在`ScratchData`类的副本上工作，并将其结果放入相应的`CopyData`对象。
//
// - `face_worker` lambda函数的定义，它将对单元格之间的界面上的所有项进行积分。
//
// - 定义了`boundary_worker`函数，对位于域的边界上的单元面做同样的工作。
//
// - `copier`函数的定义，该函数负责将前面三个函数中的所有数据复制到单个单元的复制对象中，并复制到全局矩阵和右侧。
//
// 第五部分是我们把所有这些都集中在一起。
//
// 让我们轮流浏览一下这些组装所需的每一块。
//
[0.x.26660] 
[0.x.26661] 
[0.x.26662] 
[0.x.26663] 
//
// 第一部分是`cell_worker'，它在细胞内部进行组装。它是一个（lambda）函数，以一个单元格（输入）、一个抓取对象和一个复制对象（输出）为参数。它看起来像许多其他教程程序的装配函数，或者至少是所有单元格的循环主体。
//
// 我们在这里整合的条款是单元格对全局矩阵的贡献[1.x.104]，以及对右侧向量的贡献[1.x.105]。
//
// 我们使用与组装[2.x.3273]相同的技术来加速该函数。我们不在最里面的循环中调用`fe_values.shape_hessian(i, qpoint)`，而是创建一个变量`hessian_i`，在循环中对`i`进行一次评估，在循环中对`j`重新使用如此评估的值。为了对称，我们对变量`hessian_j`也做了同样的处理，尽管它确实只用了一次，而且我们可以在计算两个项之间标量乘积的指令中留下对`fe_values.shape_hessian(j,qpoint)`的调用。
//
[0.x.26664] 
[0.x.26665] 
[0.x.26666] 
[0.x.26667] 
[0.x.26668] 
//
[0.x.26669] 
[0.x.26670] 
//
[0.x.26671] 
//
[0.x.26672] 
//
[0.x.26673] 
[0.x.26674] 
//
[0.x.26675] 
[0.x.26676] 
[0.x.26677] 
[0.x.26678] 
[0.x.26679] 
[0.x.26680] 
[0.x.26681] 
//
[0.x.26682] 
[0.x.26683] 
[0.x.26684] 
[0.x.26685] 
//
[0.x.26686] 
[0.x.26687] 
[0.x.26688] 
[0.x.26689] 
[0.x.26690] 
//
[0.x.26691] 
[0.x.26692] 
[0.x.26693] 
[0.x.26694] 
[0.x.26695] 
[0.x.26696] 
[0.x.26697] 
[0.x.26698] 
//
// 下一个构建模块是在网格的每个内部面组装惩罚项。正如[2.x.3274]文档中所描述的，这个函数接收到的参数表示一个单元和它的相邻单元，以及（对于这两个单元中的每一个）我们必须整合的面（以及潜在的子面）。同样地，我们也得到了一个从头开始的对象，以及一个用于放置结果的拷贝对象。
//
// 这个函数本身有三个部分。在顶部，我们初始化FEInterfaceValues对象，并创建一个新的[2.x.3275]对象来存储我们的输入。这将被推到`copy_data.face_data`变量的末尾。我们需要这样做，因为我们对一个给定单元进行积分的面（或子面）的数量因单元而异，而且这些矩阵的大小也不同，取决于面或子面相邻的自由度。正如[2.x.3276]文档中所讨论的，每次访问一个新的单元时，复制对象都会被重置，所以我们推到`copy_data.face_data()`末尾的内容实际上就是后来的`copier`函数在复制每个单元的贡献到全局矩阵和右侧对象时所能看到的。
//
[0.x.26699] 
[0.x.26700] 
[0.x.26701] 
[0.x.26702] 
[0.x.26703] 
[0.x.26704] 
[0.x.26705] 
[0.x.26706] 
[0.x.26707] 
[0.x.26708] 
[0.x.26709] 
//
[0.x.26710] 
[0.x.26711] 
//
[0.x.26712] 
[0.x.26713] 
//
[0.x.26714] 
[0.x.26715] 
[0.x.26716] 
//
// 第二部分涉及到确定惩罚参数应该是什么。通过观察双线性形式中各种项的单位，很明显，惩罚必须具有[2.x.3277]的形式（即，超过长度尺度的一个），但如何选择无维数[2.x.3278]并不是先验的。从拉普拉斯方程的不连续Galerkin理论来看，人们可能猜想正确的选择是[2.x.3279]是正确的选择，其中[2.x.3280]是所用有限元的多项式程度。我们将在本程序的结果部分更详细地讨论这个选择。
//
// 在上面的公式中，[2.x.3281] 是单元格 [2.x.3282] 的大小。但这也不是很简单的事情。如果使用高度拉伸的单元格，那么一个更复杂的理论说，[2.x.3283]应该被单元格[2.x.3284]的直径取代，该直径是有关边缘方向的法线。 事实证明，在deal.II中有一个函数用于此。其次，当从一个面的两个不同侧面看时，[2.x.3285]可能是不同的。
//
// 为了安全起见，我们取这两个值的最大值。我们将注意到，如果使用自适应网格细化所产生的悬空节点，有可能需要进一步调整这一计算方法。
//
[0.x.26717] 
[0.x.26718] 
[0.x.26719] 
[0.x.26720] 
[0.x.26721] 
[0.x.26722] 
[0.x.26723] 
[0.x.26724] 
//
// 最后，像往常一样，我们在正交点和指数`i`和`j`上循环，把这个面或子面的贡献加起来。然后将这些数据存储在上面创建的`copy_data.face_data`对象中。至于单元格工作者，如果可能的话，我们将平均数和跳跃的评估从循环中拉出来，引入局部变量来存储这些结果。然后组件只需要在最里面的循环中使用这些局部变量。关于这段代码实现的具体公式，回顾一下，双线性形式的接口项如下。[1.x.106]
//
[0.x.26725] 
[0.x.26726] 
[0.x.26727] 
[0.x.26728] 
[0.x.26729] 
//
[0.x.26730] 
[0.x.26731] 
[0.x.26732] 
[0.x.26733] 
[0.x.26734] 
[0.x.26735] 
//
[0.x.26736] 
[0.x.26737] 
[0.x.26738] 
[0.x.26739] 
[0.x.26740] 
[0.x.26741] 
//
[0.x.26742] 
[0.x.26743] 
[0.x.26744] 
[0.x.26745] 
[0.x.26746] 
[0.x.26747] 
[0.x.26748] 
[0.x.26749] 
[0.x.26750] 
[0.x.26751] 
[0.x.26752] 
[0.x.26753] 
[0.x.26754] 
[0.x.26755] 
//
// 第三块是对处于边界的面做同样的装配。当然，想法和上面一样，唯一不同的是，现在有惩罚条款也进入了右手边。
//
// 和以前一样，这个函数的第一部分只是设置了一些辅助对象。
//
[0.x.26756] 
[0.x.26757] 
[0.x.26758] 
[0.x.26759] 
[0.x.26760] 
[0.x.26761] 
[0.x.26762] 
[0.x.26763] 
//
[0.x.26764] 
[0.x.26765] 
//
[0.x.26766] 
[0.x.26767] 
[0.x.26768] 
[0.x.26769] 
//
[0.x.26770] 
//
[0.x.26771] 
[0.x.26772] 
[0.x.26773] 
//
[0.x.26774] 
[0.x.26775] 
[0.x.26776] 
//
// 从正面看，由于我们现在只处理与面相邻的一个单元（因为我们在边界上），惩罚因子[2.x.3286]的计算大大简化了。
//
[0.x.26777] 
[0.x.26778] 
[0.x.26779] 
[0.x.26780] 
[0.x.26781] 
//
// 第三块是术语的组合。由于这些条款包含了矩阵的条款和右手边的条款，所以现在稍微有些麻烦。前者与上面所说的内部面完全相同，如果我们只是适当地定义了跳跃和平均（这就是FEInterfaceValues类所做的）。后者需要我们评估边界条件[2.x.3287]，在当前情况下（我们知道确切的解决方案），我们从[2.x.3288]中计算出来。然后，要添加到右侧向量的项是 [2.x.3289] 。
//
[0.x.26782] 
[0.x.26783] 
[0.x.26784] 
//
[0.x.26785] 
[0.x.26786] 
[0.x.26787] 
[0.x.26788] 
[0.x.26789] 
[0.x.26790] 
//
[0.x.26791] 
[0.x.26792] 
[0.x.26793] 
[0.x.26794] 
[0.x.26795] 
[0.x.26796] 
//
[0.x.26797] 
[0.x.26798] 
[0.x.26799] 
//
//                                      
//
[0.x.26800] 
[0.x.26801] 
//
//                                      
//
[0.x.26802] 
[0.x.26803] 
[0.x.26804] 
[0.x.26805] 
[0.x.26806] 
[0.x.26807] 
//
[0.x.26808] 
[0.x.26809] 
[0.x.26810] 
[0.x.26811] 
[0.x.26812] 
[0.x.26813] 
[0.x.26814] 
[0.x.26815] 
[0.x.26816] 
[0.x.26817] 
[0.x.26818] 
[0.x.26819] 
//
// 第四部分是一个小函数，它将上面的单元格、内部和边界面装配程序产生的数据复制到全局矩阵和右手向量中。这里真的没有什么可做的。我们分配单元格矩阵和右侧贡献，就像我们在其他几乎所有的教程程序中使用约束对象那样。然后，我们还必须对面矩阵的贡献做同样的处理，这些贡献已经获得了面（内部和边界）的内容，并且`面_工作`和`边界_工作`已经添加到`copy_data.face_data`阵列中。
//
[0.x.26820] 
[0.x.26821] 
[0.x.26822] 
[0.x.26823] 
[0.x.26824] 
[0.x.26825] 
//
[0.x.26826] 
[0.x.26827] 
[0.x.26828] 
[0.x.26829] 
[0.x.26830] 
[0.x.26831] 
[0.x.26832] 
//
// 在设置了所有这些之后，剩下的就是创建一个从头开始和复制数据的对象，并调用[2.x.3290]函数，然后遍历所有的单元格和面，调用它们各自的工作器，然后是复制器函数，将东西放入全局矩阵和右侧。作为一个额外的好处，[2.x.3291]以并行方式完成所有这些工作，使用你的机器恰好有多少个处理器核心。
//
[0.x.26833] 
[0.x.26834] 
[0.x.26835] 
[0.x.26836] 
[0.x.26837] 
[0.x.26838] 
[0.x.26839] 
[0.x.26840] 
[0.x.26841] 
[0.x.26842] 
[0.x.26843] 
[0.x.26844] 
[0.x.26845] 
[0.x.26846] 
[0.x.26847] 
[0.x.26848] 
[0.x.26849] 
[0.x.26850] 
[0.x.26851] 
[0.x.26852] 
[0.x.26853] 
[0.x.26854] 
[0.x.26855] 
//
// [2.x.3292] 
//
// 到此为止，节目基本上结束了。其余的函数并不太有趣或新颖。第一个函数只是用一个直接求解器来求解线性系统（也见[2.x.3293] ）。
//
[0.x.26856] 
[0.x.26857] 
[0.x.26858] 
[0.x.26859] 
//
[0.x.26860] 
[0.x.26861] 
[0.x.26862] 
//
[0.x.26863] 
[0.x.26864] 
//
// 下一个函数评估了计算出的解和精确解之间的误差（在这里是已知的，因为我们选择了右手边和边界值的方式，所以我们知道相应的解）。在下面的前两个代码块中，我们计算了[2.x.3294]准则和[2.x.3295]半准则下的误差。
//
[0.x.26865] 
[0.x.26866] 
[0.x.26867] 
[0.x.26868] 
[0.x.26869] 
[0.x.26870] 
[0.x.26871] 
[0.x.26872] 
[0.x.26873] 
[0.x.26874] 
[0.x.26875] 
[0.x.26876] 
[0.x.26877] 
[0.x.26878] 
[0.x.26879] 
[0.x.26880] 
[0.x.26881] 
[0.x.26882] 
[0.x.26883] 
//
[0.x.26884] 
[0.x.26885] 
[0.x.26886] 
[0.x.26887] 
[0.x.26888] 
[0.x.26889] 
[0.x.26890] 
[0.x.26891] 
[0.x.26892] 
[0.x.26893] 
[0.x.26894] 
[0.x.26895] 
[0.x.26896] 
[0.x.26897] 
[0.x.26898] 
[0.x.26899] 
//
// 现在也计算一下[2.x.3296]半正态误差的近似值。实际的[2.x.3297]半规范要求我们对解决方案[2.x.3298]的二阶导数进行积分，但是考虑到我们使用的拉格朗日形状函数，[2.x.3299]当然在单元间的界面上有结点，因此二阶导数在界面是奇异的。因此，我们实际上只对单元的内部进行积分，而忽略了界面的贡献。这不是*等同于问题的能量准则，但是仍然可以让我们了解误差收敛的速度。
//
// 我们注意到，我们可以通过定义一个等同于能量准则的准则来解决这个问题。这将涉及到不仅要像我们下面做的那样将细胞内部的积分相加，而且还要为[2.x.3300]的导数在界面上的跳跃添加惩罚项，并对这两种项进行适当的缩放。我们将把这个问题留给以后的工作。
//
[0.x.26900] 
[0.x.26901] 
[0.x.26902] 
[0.x.26903] 
//
[0.x.26904] 
[0.x.26905] 
[0.x.26906] 
[0.x.26907] 
[0.x.26908] 
//
[0.x.26909] 
[0.x.26910] 
//
[0.x.26911] 
[0.x.26912] 
[0.x.26913] 
[0.x.26914] 
[0.x.26915] 
[0.x.26916] 
[0.x.26917] 
[0.x.26918] 
//
[0.x.26919] 
[0.x.26920] 
[0.x.26921] 
[0.x.26922] 
[0.x.26923] 
[0.x.26924] 
[0.x.26925] 
[0.x.26926] 
[0.x.26927] 
//
[0.x.26928] 
[0.x.26929] 
[0.x.26930] 
[0.x.26931] 
[0.x.26932] 
//
// 同样无趣的是生成图形输出的函数。它看起来和 [2.x.3301] 中的一模一样，比如说。
//
[0.x.26933] 
[0.x.26934] 
[0.x.26935] 
[0.x.26936] 
[0.x.26937] 
//
[0.x.26938] 
//
[0.x.26939] 
[0.x.26940] 
[0.x.26941] 
//
[0.x.26942] 
[0.x.26943] 
[0.x.26944] 
[0.x.26945] 
[0.x.26946] 
//
// `run()`函数的情况也是如此。就像在以前的程序中一样。
//
[0.x.26947] 
[0.x.26948] 
[0.x.26949] 
[0.x.26950] 
//
[0.x.26951] 
[0.x.26952] 
[0.x.26953] 
[0.x.26954] 
//
[0.x.26955] 
[0.x.26956] 
//
[0.x.26957] 
[0.x.26958] 
//
[0.x.26959] 
//
[0.x.26960] 
[0.x.26961] 
[0.x.26962] 
[0.x.26963] 
[0.x.26964] 
//
// [2.x.3302] 
//
// 最后是 "main() "函数。同样，这里没有什么可看的。它看起来和以前的教程程序中的一样。有一个变量，可以选择我们要用来解方程的元素的多项式程度。因为我们使用的C0IP公式要求元素的度数至少为2，所以我们用一个断言来检查，无论为多项式度数设置什么都是有意义的。
//
[0.x.26965] 
[0.x.26966] 
[0.x.26967] 
[0.x.26968] 
[0.x.26969] 
[0.x.26970] 
//
[0.x.26971] 
[0.x.26972] 
[0.x.26973] 
[0.x.26974] 
[0.x.26975] 
//
[0.x.26976] 
[0.x.26977] 
[0.x.26978] 
[0.x.26979] 
[0.x.26980] 
[0.x.26981] 
[0.x.26982] 
[0.x.26983] 
[0.x.26984] 
[0.x.26985] 
[0.x.26986] 
[0.x.26987] 
[0.x.26988] 
[0.x.26989] 
//
[0.x.26990] 
[0.x.26991] 
[0.x.26992] 
[0.x.26993] 
[0.x.26994] 
[0.x.26995] 
[0.x.26996] 
[0.x.26997] 
[0.x.26998] 
[0.x.26999] 
[0.x.27000] 
[0.x.27001] 
[0.x.27002] 
[0.x.27003] 
//
[0.x.27004] 
[0.x.27005] 
[0.x.27006] 
[0.x.27007] 
[0.x.27008] 
[0.x.27009] 
[0.x.27010] 
[0.x.27011] 
[0.x.27012] 
[0.x.27013] 
[0.x.27014] 
[0.x.27015] 
[0.x.27016] 
[0.x.27017] 
[0.x.27018] 
[0.x.27019] 
//
[0.x.27020] 
[0.x.27021] 
[0.x.27022] 
//
// deal.II库中的必要文件。
//
[0.x.27023] 
[0.x.27024] 
[0.x.27025] 
[0.x.27026] 
[0.x.27027] 
[0.x.27028] 
[0.x.27029] 
[0.x.27030] 
[0.x.27031] 
[0.x.27032] 
[0.x.27033] 
[0.x.27034] 
[0.x.27035] 
[0.x.27036] 
[0.x.27037] 
[0.x.27038] 
//
// 这包括用于有效实现无矩阵方法的数据结构。
//
[0.x.27039] 
[0.x.27040] 
[0.x.27041] 
//
[0.x.27042] 
[0.x.27043] 
[0.x.27044] 
//
[0.x.27045] 
[0.x.27046] 
[0.x.27047] 
//
// 我们首先定义了两个全局变量，以便在一个地方收集所有需要改变的参数。一个是尺寸，一个是有限元度。维度在主函数中是作为实际类的模板参数使用的（就像所有其他deal.II程序一样），而有限元的度数则更为关键，因为它是作为模板参数传递给Sine-Gordon算子的实现。因此，它需要成为一个编译时常数。
//
[0.x.27048] 
[0.x.27049] 
//[2.x.3303] 
//
// [2.x.3304]类实现了每个时间步骤中需要的基于单元的操作。这个非线性操作可以在[2.x.3305]类的基础上直接实现，与线性操作在这个实现的有限元算子应用中的处理方式相同。我们对该类应用了两个模板参数，一个是尺寸，一个是有限元的程度。这与deal.II中的其他函数不同，其中只有维度是模板参数。这对于为[2.x.3306]中的内循环提供关于循环长度等的信息是必要的，这对于效率是至关重要的。另一方面，这使得将度数作为一个运行时参数来实现更具挑战性。
//
[0.x.27050] 
[0.x.27051] 
[0.x.27052] 
[0.x.27053] 
[0.x.27054] 
[0.x.27055] 
//
[0.x.27056] 
[0.x.27057] 
[0.x.27058] 
//
[0.x.27059] 
[0.x.27060] 
[0.x.27061] 
[0.x.27062] 
//
[0.x.27063] 
[0.x.27064] 
[0.x.27065] 
[0.x.27066] 
[0.x.27067] 
[0.x.27068] 
//
// [2.x.3307] 
//
// 这是SineGordonOperation类的构造函数。它接收一个对MatrixFree的引用，该引用持有问题信息和时间步长作为输入参数。初始化程序设置了质量矩阵。由于我们使用Gauss-Lobatto元素，质量矩阵是一个对角矩阵，可以存储为一个矢量。利用FEEvaluation提供的数据结构，质量矩阵对角线的计算很容易实现。只要在所有的单元格批次上循环，即由于SIMD矢量化的单元格集合，并通过使用[2.x.3308]函数与[2.x.3309]参数在数值的槽上对所有正交点上常一的函数进行积分。最后，我们将对角线条目进行反转，以便在每个时间步长中直接获得反质量矩阵。
//
[0.x.27069] 
[0.x.27070] 
[0.x.27071] 
[0.x.27072] 
[0.x.27073] 
[0.x.27074] 
[0.x.27075] 
[0.x.27076] 
//
[0.x.27077] 
[0.x.27078] 
//
[0.x.27079] 
[0.x.27080] 
[0.x.27081] 
[0.x.27082] 
[0.x.27083] 
[0.x.27084] 
[0.x.27085] 
[0.x.27086] 
//
[0.x.27087] 
[0.x.27088] 
[0.x.27089] 
[0.x.27090] 
[0.x.27091] 
[0.x.27092] 
[0.x.27093] 
[0.x.27094] 
//
// [2.x.3310] 
//
// 这个算子实现了程序的核心操作，即对正弦-戈登问题的非线性算子进行单元范围的积分。其实现是基于 [2.x.3311] 中的FEEvaluation类。由于Gauss-Lobatto元素的特殊结构，某些操作变得更加简单，特别是正交点上的形状函数值的评估，这只是单元自由度值的注入。MatrixFree类在初始化时检测了正交点上有限元的可能结构，然后由FEEvaluation自动用于选择最合适的数值核。
//
// 我们要为时间步进例程评估的非线性函数包括当前时间的函数值[2.x.3312]以及前一个时间步进的值[2.x.3313]这两个值都在源向量集合[2.x.3314]中传递给运算器，该集合只是一个指向实际解向量的[2.x.3315]指针。这种将多个源向量收集到一起的结构是必要的，因为[2.x.3316]中的单元格循环正好需要一个源向量和一个目的向量，即使我们碰巧使用了很多向量，比如本例中的两个。请注意，单元格循环接受任何有效的输入和输出类，这不仅包括向量，还包括一般的数据类型。 然而，只有在遇到收集这些向量的[2.x.3317]或[2.x.3318]时，它才会在循环的开始和结束时调用由于MPI而交换幽灵数据的函数。在单元格的循环中，我们首先要读入与本地值相关的向量中的值。 然后，我们评估当前求解向量的值和梯度以及正交点的旧向量的值。接下来，我们在正交点的循环中结合方案中的条款。最后，我们将结果与测试函数进行积分，并将结果累积到全局解向量[2.x.3319] dst。
//
[0.x.27095] 
[0.x.27096] 
[0.x.27097] 
[0.x.27098] 
[0.x.27099] 
[0.x.27100] 
[0.x.27101] 
[0.x.27102] 
[0.x.27103] 
[0.x.27104] 
[0.x.27105] 
[0.x.27106] 
[0.x.27107] 
//
[0.x.27108] 
[0.x.27109] 
//
[0.x.27110] 
[0.x.27111] 
//
[0.x.27112] 
[0.x.27113] 
[0.x.27114] 
[0.x.27115] 
//
[0.x.27116] 
[0.x.27117] 
[0.x.27118] 
[0.x.27119] 
[0.x.27120] 
//
[0.x.27121] 
[0.x.27122] 
[0.x.27123] 
[0.x.27124] 
//
// [2.x.3320] 
//
// 该函数根据单元本地策略执行时间步进例程。请注意，在添加当前时间步长的积分贡献之前，我们需要将目标向量设置为零（通过[2.x.3321]调用）。在本教程中，我们通过传递给[2.x.3322]的第五个`true`参数让单元格循环进行归零操作。 循环可以将归零操作安排在更接近对支持的向量项的操作，从而可能提高数据的定位性（首先被归零的向量项后来在`distribute_local_to_global()`调用中重新使用）。单元循环的结构是在单元有限元运算器类中实现的。在每个单元上，它应用定义为类[2.x.3323]方法的例程 [2.x.3324] 。我们也可以提供一个具有相同签名的、不属于类的函数。最后，积分的结果要乘以质量矩阵的逆值。
//
[0.x.27125] 
[0.x.27126] 
[0.x.27127] 
[0.x.27128] 
[0.x.27129] 
[0.x.27130] 
[0.x.27131] 
[0.x.27132] 
[0.x.27133] 
//
// [2.x.3325] 
//
// 我们定义了一个随时间变化的函数，作为初始值使用。通过改变起始时间，可以得到不同的解决方案。这个函数取自[2.x.3326]，将代表一维中所有时间的分析解，但在这里只是用来设置一些感兴趣的起始解。在 [2.x.3327] 中给出了可以测试该程序收敛性的更详细的选择。
//
[0.x.27134] 
[0.x.27135] 
[0.x.27136] 
[0.x.27137] 
[0.x.27138] 
[0.x.27139] 
[0.x.27140] 
[0.x.27141] 
[0.x.27142] 
[0.x.27143] 
[0.x.27144] 
[0.x.27145] 
//
[0.x.27146] 
[0.x.27147] 
[0.x.27148] 
[0.x.27149] 
[0.x.27150] 
[0.x.27151] 
[0.x.27152] 
[0.x.27153] 
[0.x.27154] 
[0.x.27155] 
[0.x.27156] 
//
// [2.x.3328] 
//
// 这是在 [2.x.3329] 中的类基础上的主类。 然而，我们用MatrixFree类代替了SparseMatrix<double>类来存储几何数据。另外，我们在这个例子中使用了一个分布式三角形。
//
[0.x.27157] 
[0.x.27158] 
[0.x.27159] 
[0.x.27160] 
[0.x.27161] 
[0.x.27162] 
//
[0.x.27163] 
[0.x.27164] 
//
[0.x.27165] 
[0.x.27166] 
//
[0.x.27167] 
[0.x.27168] 
[0.x.27169] 
[0.x.27170] 
[0.x.27171] 
[0.x.27172] 
[0.x.27173] 
//
[0.x.27174] 
//
[0.x.27175] 
[0.x.27176] 
//
[0.x.27177] 
//
[0.x.27178] 
[0.x.27179] 
//
[0.x.27180] 
[0.x.27181] 
[0.x.27182] 
[0.x.27183] 
[0.x.27184] 
[0.x.27185] 
//[2.x.3330] 
//
// 这是SineGordonProblem类的构造函数。时间间隔和时间步长在此定义。此外，我们使用在程序顶部定义的有限元的程度来初始化一个基于Gauss-Lobatto支持点的FE_Q有限元。这些点很方便，因为与同阶的QGauss-Lobatto正交规则相结合，它们可以得到一个对角线质量矩阵，而不会太影响精度（注意，虽然积分是不精确的），也可以参见介绍中的讨论。请注意，FE_Q默认选择Gauss-Lobatto结点，因为它们相对于等距结点有更好的条件。为了使事情更加明确，我们还是要说明节点的选择。
//
[0.x.27186] 
[0.x.27187] 
[0.x.27188] 
[0.x.27189] 
[0.x.27190] 
[0.x.27191] 
[0.x.27192] 
[0.x.27193] 
[0.x.27194] 
[0.x.27195] 
[0.x.27196] 
[0.x.27197] 
[0.x.27198] 
[0.x.27199] 
[0.x.27200] 
[0.x.27201] 
[0.x.27202] 
//[2.x.3331] 
//
// 和[2.x.3332]一样，这个函数在[2.x.3333]维度上设置了一个范围为[2.x.3334]的立方体网格。我们在域的中心更多的细化网格，因为解决方案都集中在那里。我们首先细化所有中心在半径为11的单元，然后再细化一次半径为6的单元。 这种简单的临时细化可以通过在时间步进过程中使用误差估计器来适应网格，并使用[2.x.3335]将解决方案转移到新的网格中来完成。
//
[0.x.27203] 
[0.x.27204] 
[0.x.27205] 
[0.x.27206] 
[0.x.27207] 
[0.x.27208] 
[0.x.27209] 
[0.x.27210] 
[0.x.27211] 
[0.x.27212] 
[0.x.27213] 
[0.x.27214] 
[0.x.27215] 
[0.x.27216] 
//
[0.x.27217] 
[0.x.27218] 
[0.x.27219] 
[0.x.27220] 
[0.x.27221] 
[0.x.27222] 
[0.x.27223] 
[0.x.27224] 
//
[0.x.27225] 
[0.x.27226] 
[0.x.27227] 
[0.x.27228] 
[0.x.27229] 
[0.x.27230] 
[0.x.27231] 
//
[0.x.27232] 
//
[0.x.27233] 
[0.x.27234] 
//
// 我们生成悬挂节点约束，以确保解决方案的连续性。如同在[2.x.3336]中，我们需要为约束矩阵配备本地相关自由度的IndexSet，以避免它在大问题中消耗过多的内存。接下来，问题的<code>MatrixFree</code>对象被设置。请注意，我们为共享内存并行化指定了一个特定的方案（因此，人们会使用多线程来实现节点内的并行化，而不是MPI；我们在这里选择了标准选项&mdash；如果我们想在程序中有一个以上的TBB线程的情况下禁用共享内存并行化，我们会选择[2.x.3337] 另外请注意，我们没有使用默认的QGauss正交参数，而是提供一个QGaussLobatto正交公式来实现期望的行为。最后，三个求解向量被初始化。MatrixFree期望有一个特定的鬼魂索引布局（因为它在MPI本地数字中处理索引访问，需要在向量和MatrixFree之间匹配），所以我们只是要求它初始化向量，以确保鬼魂交换得到正确处理。
//
[0.x.27235] 
[0.x.27236] 
[0.x.27237] 
[0.x.27238] 
[0.x.27239] 
//
[0.x.27240] 
[0.x.27241] 
[0.x.27242] 
//
[0.x.27243] 
[0.x.27244] 
[0.x.27245] 
[0.x.27246] 
[0.x.27247] 
//
[0.x.27248] 
[0.x.27249] 
[0.x.27250] 
[0.x.27251] 
//
// [2.x.3338] 
//
// 这个函数打印出解的规范，并将解的向量写到一个文件中。法线是标准的（除了我们需要累积所有处理器上的法线，用于并行网格，我们通过 [2.x.3339] 函数来做），第二项类似于我们在 [2.x.3340] 或 [2.x.3341] . 请注意，我们可以使用与计算过程中使用的相同的向量进行输出。无矩阵框架中的向量总是提供所有本地拥有的单元的全部信息（这也是本地评估中需要的），包括这些单元上的鬼向量条目。这是[2.x.3342]函数以及DataOut中唯一需要的数据。这时唯一要做的就是确保在我们从矢量中读取数据之前更新其鬼魂值，并在完成后重置鬼魂值。这是一个只存在于[2.x.3343]类中的特性。另一方面，带有PETSc和Trilinos的分布式向量需要被复制到包括ghost值的特殊向量（见[2.x.3344]中的相关章节 ）。如果我们还想访问幽灵单元上的所有自由度（例如，当计算使用单元边界上的解的跳跃的误差估计时），我们将需要更多的信息，并创建一个初始化了本地相关自由度的向量，就像在 [2.x.3345] 中一样。还请注意，我们需要为输出分配约束条件
//
// --它们在计算过程中不被填充（相反，它们在无矩阵的方法中被实时插值 [2.x.3346] 
[0.x.27252] 
[0.x.27253] 
[0.x.27254] 
[0.x.27255] 
[0.x.27256] 
//
[0.x.27257] 
[0.x.27258] 
[0.x.27259] 
[0.x.27260] 
[0.x.27261] 
[0.x.27262] 
[0.x.27263] 
[0.x.27264] 
[0.x.27265] 
[0.x.27266] 
[0.x.27267] 
[0.x.27268] 
[0.x.27269] 
//
[0.x.27270] 
[0.x.27271] 
[0.x.27272] 
//
[0.x.27273] 
//
[0.x.27274] 
[0.x.27275] 
[0.x.27276] 
//
[0.x.27277] 
[0.x.27278] 
//
[0.x.27279] 
[0.x.27280] 
//[2.x.3347] 
//
// 这个函数被主函数调用，并步入类的子程序中。
//
// 在打印了一些关于并行设置的信息后，第一个动作是设置网格和单元运算器。然后，根据构造函数中给出的CFL编号和最细的网格尺寸计算出时间步长。最细的网格尺寸计算为三角形中最后一个单元的直径，也就是网格中最细层次上的最后一个单元。这只适用于一个层次上的所有元素都具有相同尺寸的网格，否则就需要对所有单元进行循环。请注意，我们需要查询所有处理器的最细单元，因为不是所有的处理器都可能持有网格处于最细级别的区域。然后，我们重新调整一下时间步长，以准确地达到最后的时间。
//
[0.x.27281] 
[0.x.27282] 
[0.x.27283] 
[0.x.27284] 
[0.x.27285] 
[0.x.27286] 
[0.x.27287] 
[0.x.27288] 
[0.x.27289] 
[0.x.27290] 
[0.x.27291] 
[0.x.27292] 
[0.x.27293] 
[0.x.27294] 
[0.x.27295] 
[0.x.27296] 
[0.x.27297] 
//
[0.x.27298] 
[0.x.27299] 
[0.x.27300] 
[0.x.27301] 
[0.x.27302] 
[0.x.27303] 
[0.x.27304] 
[0.x.27305] 
[0.x.27306] 
//
// 接下来是初始值的设置。由于我们有一个两步的时间步进方法，我们还需要一个在时间步进时的解的值。为了得到准确的结果，需要根据初始时间的解的时间导数来计算，但是在这里我们忽略了这个困难，只是将其设置为该人工时间的初始值函数。
//
// 然后，我们继续将初始状态写入文件，并将两个初始解收集到[2.x.3348]的指针中，这些指针随后被[2.x.3349]函数消耗。接下来，根据文件顶部指定的有限元程度，建立一个[2.x.3350]的实例。
//
[0.x.27307] 
[0.x.27308] 
[0.x.27309] 
[0.x.27310] 
[0.x.27311] 
[0.x.27312] 
[0.x.27313] 
[0.x.27314] 
[0.x.27315] 
//
[0.x.27316] 
[0.x.27317] 
//
[0.x.27318] 
[0.x.27319] 
//
// 现在在时间步骤上循环。在每个迭代中，我们将解的向量移动一个，并调用`正弦戈登运算器'类的`应用'函数。然后，我们将解决方案写到一个文件中。我们对所需的计算时间和创建输出所需的时间进行计时，并在时间步长结束后报告这些数字。
//
// 注意这个交换是如何实现的。我们只是在两个向量上调用了交换方法，只交换了一些指针，而不需要复制数据，这在显式时间步进方法中是比较昂贵的操作。让我们来看看发生了什么。首先，我们交换[2.x.3351]，这意味着[2.x.3352]得到[2.x.3353]，这就是我们所期望的。同样，在下一步中，[2.x.3354]也是如此。在这之后，[2.x.3355]持有[2.x.3356]，但这将在这一步被覆盖。
//
[0.x.27320] 
//
[0.x.27321] 
[0.x.27322] 
[0.x.27323] 
[0.x.27324] 
[0.x.27325] 
[0.x.27326] 
[0.x.27327] 
[0.x.27328] 
[0.x.27329] 
[0.x.27330] 
[0.x.27331] 
//
[0.x.27332] 
[0.x.27333] 
[0.x.27334] 
//
[0.x.27335] 
[0.x.27336] 
[0.x.27337] 
[0.x.27338] 
[0.x.27339] 
//
[0.x.27340] 
[0.x.27341] 
//
[0.x.27342] 
[0.x.27343] 
//
[0.x.27344] 
[0.x.27345] 
[0.x.27346] 
[0.x.27347] 
//
// [2.x.3357] 
//
// 与[2.x.3358]中一样，我们在程序开始时初始化MPI。由于我们一般会将MPI并行化与线程混合在一起，所以我们也将MPI_InitFinalize中控制线程数量的第三个参数设置为无效数字，这意味着TBB库会自动选择线程的数量，通常为系统中可用的内核数量。作为一种选择，如果你想设置一个特定的线程数（例如，当需要只使用MPI时），你也可以手动设置这个数字。
//
[0.x.27348] 
[0.x.27349] 
[0.x.27350] 
[0.x.27351] 
//
[0.x.27352] 
[0.x.27353] 
//
[0.x.27354] 
[0.x.27355] 
[0.x.27356] 
[0.x.27357] 
[0.x.27358] 
[0.x.27359] 
[0.x.27360] 
[0.x.27361] 
[0.x.27362] 
[0.x.27363] 
[0.x.27364] 
[0.x.27365] 
[0.x.27366] 
[0.x.27367] 
[0.x.27368] 
[0.x.27369] 
//
[0.x.27370] 
[0.x.27371] 
[0.x.27372] 
[0.x.27373] 
[0.x.27374] 
[0.x.27375] 
[0.x.27376] 
[0.x.27377] 
[0.x.27378] 
[0.x.27379] 
[0.x.27380] 
[0.x.27381] 
[0.x.27382] 
[0.x.27383] 
//
[0.x.27384] 
[0.x.27385] 
[0.x.27386] 
[0.x.27387] 
[0.x.27388] 
[0.x.27389] 
[0.x.27390] 
[0.x.27391] 
[0.x.27392] 
[0.x.27393] 
[0.x.27394] 
[0.x.27395] 
[0.x.27396] 
[0.x.27397] 
[0.x.27398] 
[0.x.27399] 
//
[0.x.27400] 
[0.x.27401] 
[0.x.27402] 
//
// 这个教程程序很奇怪，与其他大多数步骤不同，介绍中已经提供了关于如何使用各种策略来生成网格的大部分信息。因此，这里没有什么需要评论的，我们在代码中穿插了相对较少的文字。从本质上讲，这里的代码只是提供了一个在介绍中已经描述过的内容的参考实现。
//
// [2.x.3359] 
[0.x.27403] 
[0.x.27404] 
[0.x.27405] 
[0.x.27406] 
[0.x.27407] 
[0.x.27408] 
//
[0.x.27409] 
[0.x.27410] 
//
[0.x.27411] 
//
[0.x.27412] 
//[2.x.3360] 
//
// 下面的函数为我们将在本程序的剩余部分中生成的任何网格生成一些输出。特别是，它生成了以下信息。
//
//
//
// - 一些关于这个网格所处的空间维数和它的单元数的一般信息。
//
// - 使用每个边界指标的边界面的数量，这样就可以和我们预期的情况进行比较。
//
// 最后，该函数将网格输出为VTU格式，可以方便地在Paraview或VisIt中进行可视化。
//
[0.x.27413] 
[0.x.27414] 
[0.x.27415] 
[0.x.27416] 
[0.x.27417] 
[0.x.27418] 
[0.x.27419] 
//
// 接下来循环所有单元格的所有面，找出每个边界指标的使用频率（请记住，如果你访问一个不存在的[2.x.3361]对象的元素，它将被隐式创建并默认初始化--在当前情况下为零--然后我们再将其增加）。
//
[0.x.27420] 
[0.x.27421] 
[0.x.27422] 
[0.x.27423] 
[0.x.27424] 
//
[0.x.27425] 
[0.x.27426] 
[0.x.27427] 
[0.x.27428] 
[0.x.27429] 
[0.x.27430] 
[0.x.27431] 
[0.x.27432] 
//
// 最后，产生一个网格的图形表示到一个输出文件。
//
[0.x.27433] 
[0.x.27434] 
[0.x.27435] 
[0.x.27436] 
[0.x.27437] 
//[2.x.3362] 
//[2.x.3363] 
//
// 在这第一个例子中，我们展示了如何加载我们在介绍中讨论过的如何生成的网格。这与[2.x.3364]中加载网格的模式相同，尽管那里是以不同的文件格式（UCD而不是MSH）编写。
//
[0.x.27438] 
[0.x.27439] 
[0.x.27440] 
//
[0.x.27441] 
[0.x.27442] 
[0.x.27443] 
[0.x.27444] 
//
[0.x.27445] 
[0.x.27446] 
//[2.x.3365] 
//
// 在这里，我们首先创建两个三角形，然后将它们合并成一个。 正如介绍中所讨论的，必须确保共同界面的顶点位于相同的坐标上。
//
[0.x.27447] 
[0.x.27448] 
[0.x.27449] 
[0.x.27450] 
//
[0.x.27451] 
[0.x.27452] 
[0.x.27453] 
[0.x.27454] 
[0.x.27455] 
[0.x.27456] 
[0.x.27457] 
[0.x.27458] 
//
[0.x.27459] 
[0.x.27460] 
//
[0.x.27461] 
[0.x.27462] 
//[2.x.3366] 
//
// 在这个函数中，我们移动一个网格的顶点。这比人们通常想象的要简单：如果你用[2.x.3367]询问一个单元格的[2.x.3368]的顶点的坐标，它不只是提供这个顶点的位置，实际上是对存储这些坐标的位置的引用。然后我们可以修改存储在那里的值。
//
// 所以这就是我们在这个函数的第一部分所做的。我们创建一个几何形状为[2.x.3369]的正方形，在原点处有一个半径为0.25的圆孔。然后我们在所有单元格和所有顶点上循环，如果一个顶点的[2.x.3370]坐标等于1，我们就把它向上移动0.5。
//
// 注意，这种程序通常不是这样工作的，因为通常会多次遇到相同的顶点，并且可能会多次移动它们。它在这里起作用是因为我们根据顶点的几何位置来选择要使用的顶点，而移动过一次的顶点在未来将无法通过这个测试。解决这个问题的一个更普遍的方法是保留一个[2.x.3371]，即那些我们已经移动过的顶点索引（我们可以用[2.x.3372]获得，并且只移动那些索引还不在这个集合中的顶点。
//
[0.x.27463] 
[0.x.27464] 
[0.x.27465] 
[0.x.27466] 
//
[0.x.27467] 
[0.x.27468] 
[0.x.27469] 
[0.x.27470] 
[0.x.27471] 
[0.x.27472] 
[0.x.27473] 
[0.x.27474] 
[0.x.27475] 
//
// 在第二步，我们将对网格进行两次细化。为了正确做到这一点，我们应该沿着以原点为中心的圆的表面在内部边界上放置新的点。幸运的是，[2.x.3373]已经在内部边界上附加了一个Manifold对象，所以我们不需要做任何事情，只需要细化网格（参见[1.x.107]中一个完全可行的例子，我们[2.x.3374]做[2.x.3375]附加一个Manifold对象）。
//
[0.x.27476] 
[0.x.27477] 
[0.x.27478] 
//
// 如上图所示，做事有一个障碍。如果像这里所示的那样移动边界上的节点，由于内部的节点没有被移动，所以经常会出现内部的单元被严重扭曲的情况。在目前的情况下，这并不是一个很大的问题，因为当节点被移动时，网格并不包含任何内部节点--它是粗略的网格，而且恰好所有的顶点都在边界上。还有一种情况是，我们在这里的移动，与平均单元的大小相比，并没有太大影响。然而，有时我们确实想把顶点移动一段距离，在这种情况下，我们也需要移动内部节点。一个自动完成的方法是调用函数[2.x.3376]，该函数接收一组转换后的顶点坐标并移动所有其他的顶点，使产生的网格在某种意义上有一个小的变形。
//
// [2.x.3377] 
//
// 这个例子从前面的函数中获取初始网格，并简单地将其挤压到第三空间维度。
//
[0.x.27479] 
[0.x.27480] 
[0.x.27481] 
[0.x.27482] 
[0.x.27483] 
//
[0.x.27484] 
[0.x.27485] 
[0.x.27486] 
//[2.x.3378] 
//
// 这个例子和下一个例子首先创建一个网格，然后根据一个函数移动网格的每个节点，这个函数接收一个点并返回一个映射的点。在这个例子中，我们转换 [2.x.3379] 。
//
// [2.x.3380] 需要一个三角形和一个参数，这个参数可以像一个函数一样被调用，接收一个点并返回一个点。有不同的方式来提供这样一个参数。它可以是一个函数的指针；它可以是一个具有`operator()`的类的对象；它可以是一个lambda函数；或者它可以是任何通过[2.x.3381]对象描述的东西。
//
// 更现代的方法是使用一个接受一个点并返回一个点的lambda函数，这就是我们在下面所做的。
//
[0.x.27487] 
[0.x.27488] 
[0.x.27489] 
[0.x.27490] 
[0.x.27491] 
[0.x.27492] 
[0.x.27493] 
[0.x.27494] 
[0.x.27495] 
[0.x.27496] 
//
[0.x.27497] 
[0.x.27498] 
[0.x.27499] 
[0.x.27500] 
[0.x.27501] 
[0.x.27502] 
[0.x.27503] 
//
// [2.x.3382] 
//
// 在第二个例子中，我们将使用映射 [2.x.3383] 将原始网格中的点转换为新的网格。为了使事情更有趣，而不是像前面的例子那样在一个单一的函数中完成，我们在这里创建一个具有 [2.x.3384] 的对象，这个对象将被 [2.x.3385] 所调用。当然，这个对象实际上可能要复杂得多：这个对象可能有成员变量，在计算顶点的新位置时起作用。
//
[0.x.27504] 
[0.x.27505] 
[0.x.27506] 
[0.x.27507] 
[0.x.27508] 
[0.x.27509] 
//
[0.x.27510] 
[0.x.27511] 
[0.x.27512] 
[0.x.27513] 
[0.x.27514] 
//
[0.x.27515] 
[0.x.27516] 
[0.x.27517] 
[0.x.27518] 
[0.x.27519] 
[0.x.27520] 
[0.x.27521] 
[0.x.27522] 
[0.x.27523] 
//
[0.x.27524] 
[0.x.27525] 
[0.x.27526] 
//[2.x.3386] 
//
// 在这最后一个例子中，我们创建了一个网格，然后通过随机扰动使其（内部）顶点变形。这不是你想在生产计算中做的事情（因为在具有 "良好形状 "单元的网格上的结果通常比在[2.x.3387]产生的变形单元上的结果要好，但这是一个有用的工具，可以测试离散化和代码，确保它们不会因为网格恰好是均匀结构和支持超级收敛特性而意外地工作。
//
[0.x.27527] 
[0.x.27528] 
[0.x.27529] 
[0.x.27530] 
[0.x.27531] 
[0.x.27532] 
[0.x.27533] 
[0.x.27534] 
[0.x.27535] 
//
[0.x.27536] 
[0.x.27537] 
[0.x.27538] 
//[2.x.3388] 
//
// 最后是主函数。这里没有什么可做的，只是调用我们上面写的所有各种函数。
//
[0.x.27539] 
[0.x.27540] 
[0.x.27541] 
[0.x.27542] 
[0.x.27543] 
[0.x.27544] 
[0.x.27545] 
[0.x.27546] 
[0.x.27547] 
[0.x.27548] 
[0.x.27549] 
[0.x.27550] 
[0.x.27551] 
[0.x.27552] 
[0.x.27553] 
[0.x.27554] 
[0.x.27555] 
[0.x.27556] 
[0.x.27557] 
[0.x.27558] 
[0.x.27559] 
[0.x.27560] 
[0.x.27561] 
//
[0.x.27562] 
[0.x.27563] 
[0.x.27564] 
[0.x.27565] 
[0.x.27566] 
[0.x.27567] 
[0.x.27568] 
[0.x.27569] 
[0.x.27570] 
[0.x.27571] 
[0.x.27572] 
[0.x.27573] 
[0.x.27574] 
[0.x.27575] 
[0.x.27576] 
[0.x.27577] 
[0.x.27578] 
[0.x.27579] 
[0.x.27580] 
[0.x.27581] 
[0.x.27582] 
[0.x.27583] 
[0.x.27584] 
[0.x.27585] 
[0.x.27586] 
[0.x.27587] 
[0.x.27588] 
[0.x.27589] 
[0.x.27590] 
//
[0.x.27591] 
[0.x.27592] 
[0.x.27593] 
//[2.x.3389] 
//
// 同样，前几个include文件已经知道了，所以我们不会对它们进行评论。
//
[0.x.27594] 
[0.x.27595] 
[0.x.27596] 
[0.x.27597] 
[0.x.27598] 
[0.x.27599] 
[0.x.27600] 
[0.x.27601] 
[0.x.27602] 
[0.x.27603] 
[0.x.27604] 
[0.x.27605] 
[0.x.27606] 
[0.x.27607] 
[0.x.27608] 
[0.x.27609] 
[0.x.27610] 
//
// 这个是新的。我们想从磁盘上读取一个三角图，做这个的类在下面的文件中声明。
//
[0.x.27611] 
//
// 我们将使用一个圆形域，而描述其边界的对象来自这个文件。
//
[0.x.27612] 
//
// 这是C++ ...
//
[0.x.27613] 
[0.x.27614] 
//
// 最后，这在以前的教程程序中已经讨论过了。
//
[0.x.27615] 
//[2.x.3390] 
//
// 主类大部分和前面的例子一样。最明显的变化是删除了[2.x.3391]函数，因为现在创建网格是在[2.x.3392]函数中完成的，其余功能都在[2.x.3393]中。除此以外，一切都和以前一样。
//
[0.x.27616] 
[0.x.27617] 
[0.x.27618] 
[0.x.27619] 
[0.x.27620] 
[0.x.27621] 
//
[0.x.27622] 
[0.x.27623] 
[0.x.27624] 
[0.x.27625] 
[0.x.27626] 
//
[0.x.27627] 
[0.x.27628] 
[0.x.27629] 
//
[0.x.27630] 
[0.x.27631] 
//
[0.x.27632] 
[0.x.27633] 
[0.x.27634] 
//[2.x.3394] 
//
// 在 [2.x.3395] 中，我们展示了如何使用非恒定边界值和右手边。 在这个例子中，我们想在椭圆算子中使用一个可变系数来代替。由于我们有一个只取决于空间中的点的函数，我们可以做得更简单一些，使用一个普通的函数而不是继承自Function。
//
// 这是对单点的系数函数的实现。如果与原点的距离小于0.5，我们让它返回20，否则返回1。
//
[0.x.27635] 
[0.x.27636] 
[0.x.27637] 
[0.x.27638] 
[0.x.27639] 
[0.x.27640] 
[0.x.27641] 
[0.x.27642] 
//[2.x.3396] 
//[2.x.3397] 
//
// 这个函数和以前一样。
//
[0.x.27643] 
[0.x.27644] 
[0.x.27645] 
[0.x.27646] 
[0.x.27647] 
//
// [2.x.3398] 
//
// 这是前面例子中的函数[2.x.3399]，减去了生成网格的部分。其他一切都没有变化。
//
[0.x.27648] 
[0.x.27649] 
[0.x.27650] 
[0.x.27651] 
//
[0.x.27652] 
[0.x.27653] 
//
[0.x.27654] 
[0.x.27655] 
[0.x.27656] 
//
[0.x.27657] 
//
[0.x.27658] 
[0.x.27659] 
[0.x.27660] 
//
// [2.x.3400] 
//
// 和前面的例子一样，这个函数在功能上没有太大变化，但仍有一些优化，我们将展示这些优化。对此，需要注意的是，如果使用高效的求解器（如预设条件的CG方法），组装矩阵和右手边会花费相当的时间，你应该考虑在某些地方使用一到两个优化。
//
// 该函数的前几部分与之前完全没有变化。
//
[0.x.27661] 
[0.x.27662] 
[0.x.27663] 
[0.x.27664] 
//
[0.x.27665] 
[0.x.27666] 
[0.x.27667] 
[0.x.27668] 
//
[0.x.27669] 
//
[0.x.27670] 
[0.x.27671] 
//
[0.x.27672] 
//
// 接下来是对所有单元的典型循环，以计算局部贡献，然后将它们转移到全局矩阵和向量中。与[2.x.3401]相比，这部分的唯一变化是我们将使用上面定义的[2.x.3402]函数来计算每个正交点的系数值。
//
[0.x.27673] 
[0.x.27674] 
[0.x.27675] 
[0.x.27676] 
//
[0.x.27677] 
//
[0.x.27678] 
[0.x.27679] 
[0.x.27680] 
[0.x.27681] 
[0.x.27682] 
[0.x.27683] 
[0.x.27684] 
[0.x.27685] 
[0.x.27686] 
[0.x.27687] 
[0.x.27688] 
[0.x.27689] 
//
[0.x.27690] 
[0.x.27691] 
[0.x.27692] 
[0.x.27693] 
[0.x.27694] 
//
[0.x.27695] 
[0.x.27696] 
[0.x.27697] 
[0.x.27698] 
[0.x.27699] 
[0.x.27700] 
[0.x.27701] 
//
[0.x.27702] 
[0.x.27703] 
[0.x.27704] 
//
// 有了这样构建的矩阵，我们再次使用零边界值。
//
[0.x.27705] 
[0.x.27706] 
[0.x.27707] 
[0.x.27708] 
[0.x.27709] 
[0.x.27710] 
[0.x.27711] 
[0.x.27712] 
[0.x.27713] 
[0.x.27714] 
//[2.x.3403] 
//
// 求解过程看起来又和前面的例子差不多。然而，我们现在将使用一个预设条件的共轭梯度算法。做出这种改变并不难。事实上，我们唯一需要改变的是，我们需要一个作为预处理程序的对象。我们将使用SSOR（对称连续过度放松），放松系数为1.2。为此，[2.x.3404]类有一个函数可以做一个SSOR步骤，我们需要把这个函数的地址和它应该作用的矩阵（也就是要反转的矩阵）以及松弛因子打包成一个对象。[2.x.3405]类为我们做了这个。( [2.x.3406] 类需要一个模板参数，表示它应该工作的矩阵类型。默认值是[2.x.3407]，这正是我们在这里需要的，所以我们只需坚持使用默认值，不在角括号中指定任何东西。)
//
// 请注意，在目前的情况下，SSOR的表现并不比其他大多数预处理程序好多少（尽管比没有预处理好）。在下一个教程程序 [2.x.3408] 的结果部分，将对不同的预处理进行简要比较。
//
// 有了这个，函数的其余部分就很简单了：我们现在使用我们声明的预处理程序，而不是之前创建的[2.x.3409]对象，CG求解器将为我们完成其余的工作。
//
[0.x.27715] 
[0.x.27716] 
[0.x.27717] 
[0.x.27718] 
[0.x.27719] 
//
[0.x.27720] 
[0.x.27721] 
//
[0.x.27722] 
//
[0.x.27723] 
[0.x.27724] 
[0.x.27725] 
//[2.x.3410] 
//
// 将输出写入文件的方法与上一个教程中的基本相同。唯一不同的是，我们现在需要为每个细化周期构建一个不同的文件名。
//
// 这个函数以VTU格式写入输出，这是VTK格式的一个变种，因为它压缩了数据，所以需要更少的磁盘空间。当然，如果你希望使用一个不理解VTK或VTU的可视化程序，DataOut类还支持许多其他格式。
//
[0.x.27726] 
[0.x.27727] 
[0.x.27728] 
[0.x.27729] 
//
[0.x.27730] 
[0.x.27731] 
//
[0.x.27732] 
//
[0.x.27733] 
[0.x.27734] 
[0.x.27735] 
//
// [2.x.3411] 
//
// 在这个程序中，倒数第二件事是对[2.x.3412]函数的定义。与之前的程序不同，我们将在一个网格序列上进行计算，在每次迭代后都会进行全局细化。因此，该函数由6个周期的循环组成。在每个循环中，我们首先打印循环编号，然后决定如何处理网格。如果这不是第一个周期，我们就简单地对现有的网格进行一次全局精炼。然而，在运行这些循环之前，我们必须先生成一个网格。
//
// 在前面的例子中，我们已经使用了[2.x.3413]类中的一些函数。在这里，我们想从一个存储单元的文件中读取网格，这个文件可能来自其他人，也可能是一个网格生成工具的产物。
//
// 为了从文件中读取网格，我们生成一个数据类型为GridIn的对象，并将三角剖分与之相关联（也就是说，当我们要求它读取文件时，我们告诉它要填充我们的三角剖分对象）。然后我们打开相应的文件，用文件中的数据初始化三角剖分。
//
[0.x.27736] 
[0.x.27737] 
[0.x.27738] 
[0.x.27739] 
[0.x.27740] 
[0.x.27741] 
//
// 我们现在想读取该文件。但是，输入文件只针对二维三角图，而这个函数是一个任意维度的模板。由于这只是一个演示程序，我们不会为不同的维度使用不同的输入文件，而是在不在二维的情况下迅速杀死整个程序。当然，由于下面的主函数假定我们是在二维空间工作，我们可以跳过这个检查，在这个版本的程序中，不会有任何不良影响。
//
// 事实证明，90%以上的编程错误都是无效的函数参数，如无效的数组大小等，所以我们在整个deal.II中大量使用断言来捕捉此类错误。为此，[2.x.3414]宏是一个很好的选择，因为它确保作为第一个参数的条件是有效的，如果不是，就抛出一个异常（它的第二个参数），通常会终止程序，并给出错误发生的位置和原因的信息。关于[2.x.3415]宏的具体作用，可以在[2.x.3416]"异常文档模块 "中找到更详细的讨论）。这通常会大大减少发现编程错误的时间，我们发现断言是快速编程的宝贵手段。
//
// 另一方面，如果你想做大的计算，所有这些检查（目前库中有超过10000个）不应该使程序太慢。为此，[2.x.3417]宏只在调试模式下使用，如果在优化模式下则扩展为零。因此，当你在小问题上测试你的程序并进行调试时，断言会告诉你问题出在哪里。一旦你的程序稳定了，你可以关闭调试，程序将在没有断言的情况下以最大速度运行你的实际计算。更准确地说：通过在优化模式下编译你的程序，关闭库中的所有检查（这些检查可以防止你用错误的参数调用函数，从数组中走出来，等等），通常可以使程序的运行速度提高四倍左右。即使优化后的程序性能更高，我们仍然建议在调试模式下开发，因为它允许库自动发现许多常见的编程错误。对于那些想尝试的人来说。从调试模式切换到优化模式的方法是用<code>make release</code>命令重新编译你的程序。现在[2.x.3418]程序的输出应该向你表明，该程序现在是以优化模式编译的，以后也会被链接到已经为优化模式编译的库。为了切换回调试模式，只需用 [2.x.3419] 命令重新编译。
//
[0.x.27742] 
//
// ExcInternalError是一个全局定义的异常，每当出现严重的错误时就会抛出。通常，人们希望使用更具体的异常，特别是在这种情况下，如果[2.x.3420]不等于2，人们当然会尝试做其他事情，例如使用库函数创建一个网格。终止程序通常不是一个好主意，断言实际上只应该用于不应该发生的特殊情况，但由于程序员、用户或其他人的愚蠢而可能发生。上面的情况并不是对Assert的巧妙使用，但是再次强调：这是一个教程，也许值得展示一下什么是不应该做的，毕竟。
//
// 所以，如果我们通过了断言，我们就知道dim==2，现在我们就可以真正地读取网格。它的格式是UCD（非结构化单元数据）（尽管惯例是使用UCD文件的后缀[2.x.3421]）。
//
[0.x.27743] 
//
// 如果你想使用其他输入格式，你必须使用其他[2.x.3422]函数之一。(参见 [2.x.3423] 类的文档，以了解目前支持哪些输入格式)。
//
// 文件中的网格描述了一个圆。因此，我们必须使用一个流形对象，告诉三角计算在细化网格时将边界上的新点放在哪里。与[2.x.3424]不同的是，由于GridIn不知道域的边界是圆形的（与[2.x.3425]不同的是，我们必须在创建三角网格后明确地将流形附加到边界上，以便在细化网格时获得正确的结果。
//
[0.x.27744] 
[0.x.27745] 
[0.x.27746] 
//
[0.x.27747] 
[0.x.27748] 
[0.x.27749] 
//
[0.x.27750] 
[0.x.27751] 
//
// 现在我们有了一个确定的网格，我们写一些输出，做所有我们在前面的例子中已经看到的事情。
//
[0.x.27752] 
[0.x.27753] 
[0.x.27754] 
[0.x.27755] 
[0.x.27756] 
[0.x.27757] 
//
[0.x.27758] 
[0.x.27759] 
[0.x.27760] 
[0.x.27761] 
[0.x.27762] 
[0.x.27763] 
//[2.x.3426] 
//
// 主函数看起来和前面的例子中的函数差不多，所以我们就不进一步评论了。
//
[0.x.27764] 
[0.x.27765] 
[0.x.27766] 
[0.x.27767] 
[0.x.27768] 
[0.x.27769] 
[0.x.27770] 
[0.x.27771] 
[0.x.27772] 
[0.x.27773] 
[0.x.27774] 
[0.x.27775] 
[0.x.27776] 
[0.x.27777] 
[0.x.27778] 
[0.x.27779] 
[0.x.27780] 
[0.x.27781] 
[0.x.27782] 
[0.x.27783] 
//
[0.x.27784] 
[0.x.27785] 
[0.x.27786] 
[0.x.27787] 
[0.x.27788] 
[0.x.27789] 
//[2.x.3427] 
//
// 包含文件是 [2.x.3428] , [2.x.3429] , 和 [2.x.3430] 的组合。
//
[0.x.27790] 
[0.x.27791] 
[0.x.27792] 
[0.x.27793] 
[0.x.27794] 
[0.x.27795] 
[0.x.27796] 
[0.x.27797] 
[0.x.27798] 
[0.x.27799] 
[0.x.27800] 
[0.x.27801] 
[0.x.27802] 
[0.x.27803] 
[0.x.27804] 
[0.x.27805] 
[0.x.27806] 
[0.x.27807] 
//
// 我们使用与[2.x.3431]相同的策略，在PETSc和Trilinos之间进行切换。
//
[0.x.27808] 
//
// 如果你已经安装了PETSc和Trilinos，并且你喜欢在本例中使用PETSc，请将下面的预处理程序定义注释进去或退出。
//
[0.x.27809] 
//
[0.x.27810] 
[0.x.27811] 
[0.x.27812] 
[0.x.27813] 
[0.x.27814] 
[0.x.27815] 
[0.x.27816] 
[0.x.27817] 
[0.x.27818] 
[0.x.27819] 
[0.x.27820] 
[0.x.27821] 
//
[0.x.27822] 
[0.x.27823] 
[0.x.27824] 
[0.x.27825] 
[0.x.27826] 
[0.x.27827] 
[0.x.27828] 
[0.x.27829] 
[0.x.27830] 
[0.x.27831] 
[0.x.27832] 
[0.x.27833] 
[0.x.27834] 
//
// 以下文件用于组装误差估计器，如 [2.x.3432] 。
//
[0.x.27835] 
[0.x.27836] 
//
[0.x.27837] 
//[2.x.3433] 
//
// MatrixFree运算符必须使用[2.x.3434]矢量类型。这里我们定义了复制到Trilinos向量的操作，以便与基于矩阵的代码兼容。请注意，目前PETSc矢量类型不存在这种功能，所以必须安装Trilinos来使用本教程中的MatrixFree求解器。
//
[0.x.27838] 
[0.x.27839] 
[0.x.27840] 
[0.x.27841] 
[0.x.27842] 
[0.x.27843] 
[0.x.27844] 
[0.x.27845] 
[0.x.27846] 
[0.x.27847] 
[0.x.27848] 
[0.x.27849] 
[0.x.27850] 
[0.x.27851] 
[0.x.27852] 
[0.x.27853] 
[0.x.27854] 
//
[0.x.27855] 
[0.x.27856] 
[0.x.27857] 
[0.x.27858] 
[0.x.27859] 
[0.x.27860] 
[0.x.27861] 
[0.x.27862] 
[0.x.27863] 
[0.x.27864] 
[0.x.27865] 
[0.x.27866] 
[0.x.27867] 
[0.x.27868] 
[0.x.27869] 
[0.x.27870] 
//
// 让我们继续描述我们要解决的问题。我们把右边的函数设置为1.0。[2.x.3435]函数返回一个VectorizedArray，被无矩阵代码路径所使用。
//
[0.x.27871] 
[0.x.27872] 
[0.x.27873] 
[0.x.27874] 
[0.x.27875] 
[0.x.27876] 
[0.x.27877] 
[0.x.27878] 
[0.x.27879] 
//
[0.x.27880] 
[0.x.27881] 
[0.x.27882] 
[0.x.27883] 
[0.x.27884] 
[0.x.27885] 
[0.x.27886] 
[0.x.27887] 
//
// 接下来的这个类表示扩散系数。我们使用一个可变的系数，在任何一个至少有一个坐标小于-0.5的点上是100.0，在所有其他点上是1.0。如上所述，一个单独的value()返回一个VectorizedArray，用于无矩阵代码。一个[2.x.3436]average()函数计算了一组点的算术平均。
//
[0.x.27888] 
[0.x.27889] 
[0.x.27890] 
[0.x.27891] 
[0.x.27892] 
[0.x.27893] 
//
[0.x.27894] 
[0.x.27895] 
[0.x.27896] 
//
[0.x.27897] 
[0.x.27898] 
//
// 当在MatrixFree框架中使用一个系数时，我们还需要一个函数，为MatrixFree运算符参数提供的一组单元格创建一个系数表。
//
[0.x.27899] 
[0.x.27900] 
[0.x.27901] 
[0.x.27902] 
//
[0.x.27903] 
[0.x.27904] 
[0.x.27905] 
[0.x.27906] 
[0.x.27907] 
[0.x.27908] 
[0.x.27909] 
[0.x.27910] 
[0.x.27911] 
[0.x.27912] 
//
[0.x.27913] 
[0.x.27914] 
[0.x.27915] 
[0.x.27916] 
[0.x.27917] 
[0.x.27918] 
[0.x.27919] 
[0.x.27920] 
[0.x.27921] 
[0.x.27922] 
[0.x.27923] 
[0.x.27924] 
[0.x.27925] 
[0.x.27926] 
[0.x.27927] 
[0.x.27928] 
//
[0.x.27929] 
[0.x.27930] 
//
[0.x.27931] 
[0.x.27932] 
[0.x.27933] 
[0.x.27934] 
[0.x.27935] 
[0.x.27936] 
[0.x.27937] 
[0.x.27938] 
[0.x.27939] 
//
[0.x.27940] 
[0.x.27941] 
//
[0.x.27942] 
[0.x.27943] 
[0.x.27944] 
[0.x.27945] 
[0.x.27946] 
[0.x.27947] 
[0.x.27948] 
[0.x.27949] 
//
[0.x.27950] 
//
[0.x.27951] 
[0.x.27952] 
//
[0.x.27953] 
//
[0.x.27954] 
[0.x.27955] 
[0.x.27956] 
//
[0.x.27957] 
[0.x.27958] 
[0.x.27959] 
[0.x.27960] 
//
[0.x.27961] 
[0.x.27962] 
//
[0.x.27963] 
[0.x.27964] 
//
// [2.x.3437] 
//
// 我们将使用ParameterHandler来在运行时传入参数。 该结构[2.x.3438]解析并存储这些参数，以便在整个程序中进行查询。
//
[0.x.27965] 
[0.x.27966] 
[0.x.27967] 
//
[0.x.27968] 
[0.x.27969] 
[0.x.27970] 
[0.x.27971] 
[0.x.27972] 
[0.x.27973] 
//
[0.x.27974] 
//
[0.x.27975] 
[0.x.27976] 
[0.x.27977] 
[0.x.27978] 
[0.x.27979] 
[0.x.27980] 
//
[0.x.27981] 
[0.x.27982] 
[0.x.27983] 
[0.x.27984] 
[0.x.27985] 
[0.x.27986] 
[0.x.27987] 
[0.x.27988] 
[0.x.27989] 
[0.x.27990] 
[0.x.27991] 
[0.x.27992] 
[0.x.27993] 
[0.x.27994] 
[0.x.27995] 
[0.x.27996] 
[0.x.27997] 
[0.x.27998] 
[0.x.27999] 
[0.x.28000] 
[0.x.28001] 
[0.x.28002] 
[0.x.28003] 
[0.x.28004] 
[0.x.28005] 
//
[0.x.28006] 
[0.x.28007] 
[0.x.28008] 
[0.x.28009] 
[0.x.28010] 
[0.x.28011] 
[0.x.28012] 
[0.x.28013] 
[0.x.28014] 
[0.x.28015] 
[0.x.28016] 
[0.x.28017] 
//
[0.x.28018] 
[0.x.28019] 
[0.x.28020] 
[0.x.28021] 
[0.x.28022] 
[0.x.28023] 
[0.x.28024] 
[0.x.28025] 
[0.x.28026] 
[0.x.28027] 
//
[0.x.28028] 
[0.x.28029] 
[0.x.28030] 
[0.x.28031] 
[0.x.28032] 
[0.x.28033] 
[0.x.28034] 
[0.x.28035] 
//
[0.x.28036] 
[0.x.28037] 
[0.x.28038] 
[0.x.28039] 
[0.x.28040] 
//
[0.x.28041] 
[0.x.28042] 
//
// [2.x.3439] 
//
// 这是该程序的主类。它看起来与 [2.x.3440] , [2.x.3441] , 和 [2.x.3442] 非常相似。对于MatrixFree的设置，我们使用[2.x.3443]类，它在内部定义了`local_apply()`, `compute_diagonal()`, 和`set_coefficient()`函数。请注意，多项式的度数是这个类的一个模板参数。这对无矩阵代码来说是必要的。
//
[0.x.28043] 
[0.x.28044] 
[0.x.28045] 
[0.x.28046] 
[0.x.28047] 
[0.x.28048] 
//
[0.x.28049] 
//
// 我们将在整个程序中使用以下类型。首先是基于矩阵的类型，之后是无矩阵的类。对于无矩阵的实现，我们使用[2.x.3444]作为水平运算符。
//
[0.x.28050] 
[0.x.28051] 
[0.x.28052] 
[0.x.28053] 
//
[0.x.28054] 
[0.x.28055] 
[0.x.28056] 
[0.x.28057] 
[0.x.28058] 
[0.x.28059] 
[0.x.28060] 
[0.x.28061] 
[0.x.28062] 
[0.x.28063] 
[0.x.28064] 
[0.x.28065] 
//
[0.x.28066] 
[0.x.28067] 
//
[0.x.28068] 
[0.x.28069] 
[0.x.28070] 
[0.x.28071] 
[0.x.28072] 
[0.x.28073] 
[0.x.28074] 
[0.x.28075] 
[0.x.28076] 
//
[0.x.28077] 
//
[0.x.28078] 
[0.x.28079] 
//
[0.x.28080] 
[0.x.28081] 
[0.x.28082] 
//
[0.x.28083] 
//
 
[0.x.28085] 
[0.x.28086] 
//
[0.x.28087] 
[0.x.28088] 
[0.x.28089] 
[0.x.28090] 
[0.x.28091] 
//
[0.x.28092] 
[0.x.28093] 
[0.x.28094] 
//
[0.x.28095] 
//
[0.x.28096] 
[0.x.28097] 
//
// 关于构造函数的唯一有趣的部分是，除非我们使用AMG，否则我们会构造多网格的层次结构。为此，我们需要在这个构造函数完成之前解析运行时参数。
//
[0.x.28098] 
[0.x.28099] 
[0.x.28100] 
[0.x.28101] 
[0.x.28102] 
[0.x.28103] 
[0.x.28104] 
[0.x.28105] 
[0.x.28106] 
[0.x.28107] 
[0.x.28108] 
[0.x.28109] 
[0.x.28110] 
[0.x.28111] 
[0.x.28112] 
[0.x.28113] 
[0.x.28114] 
[0.x.28115] 
[0.x.28116] 
//
// [2.x.3445] 
//
// 与 [2.x.3446] 和 [2.x.3447] 不同，我们将设置分成两部分，setup_system() 和 setup_multigrid() 。下面是大多数教程中常见的主动网格的典型setup_system()函数。对于无矩阵，活动网格的设置类似于 [2.x.3448] ；对于基于矩阵（GMG和AMG求解器），设置类似于 [2.x.3449] 。
//
[0.x.28117] 
[0.x.28118] 
[0.x.28119] 
[0.x.28120] 
//
[0.x.28121] 
//
[0.x.28122] 
[0.x.28123] 
//
[0.x.28124] 
[0.x.28125] 
[0.x.28126] 
[0.x.28127] 
//
[0.x.28128] 
[0.x.28129] 
[0.x.28130] 
//
[0.x.28131] 
[0.x.28132] 
[0.x.28133] 
[0.x.28134] 
[0.x.28135] 
[0.x.28136] 
[0.x.28137] 
[0.x.28138] 
[0.x.28139] 
[0.x.28140] 
[0.x.28141] 
[0.x.28142] 
[0.x.28143] 
[0.x.28144] 
[0.x.28145] 
[0.x.28146] 
//
[0.x.28147] 
//
[0.x.28148] 
[0.x.28149] 
[0.x.28150] 
//
[0.x.28151] 
[0.x.28152] 
//
[0.x.28153] 
[0.x.28154] 
[0.x.28155] 
[0.x.28156] 
[0.x.28157] 
[0.x.28158] 
//
[0.x.28159] 
[0.x.28160] 
[0.x.28161] 
[0.x.28162] 
//
[0.x.28163] 
[0.x.28164] 
[0.x.28165] 
[0.x.28166] 
[0.x.28167] 
[0.x.28168] 
[0.x.28169] 
[0.x.28170] 
[0.x.28171] 
[0.x.28172] 
[0.x.28173] 
[0.x.28174] 
[0.x.28175] 
//
[0.x.28176] 
[0.x.28177] 
//
[0.x.28178] 
[0.x.28179] 
[0.x.28180] 
[0.x.28181] 
//[2.x.3450] 
//
// 该函数为无矩阵和基于矩阵的GMG进行多级设置。无矩阵的设置类似于[2.x.3451]，而基于矩阵的设置类似于[2.x.3452]，只是我们必须使用适当的分布式稀疏度模式。
//
// 该函数没有被AMG方法调用，但为了安全起见，该函数的主`switch`语句还是确保了该函数只在已知的多网格设置下运行，如果该函数被调用到两种几何多网格方法以外的地方，则抛出一个断言。
//
[0.x.28182] 
[0.x.28183] 
[0.x.28184] 
[0.x.28185] 
//
[0.x.28186] 
//
[0.x.28187] 
[0.x.28188] 
//
[0.x.28189] 
[0.x.28190] 
//
[0.x.28191] 
//
[0.x.28192] 
[0.x.28193] 
[0.x.28194] 
[0.x.28195] 
[0.x.28196] 
//
[0.x.28197] 
[0.x.28198] 
[0.x.28199] 
[0.x.28200] 
[0.x.28201] 
[0.x.28202] 
[0.x.28203] 
[0.x.28204] 
[0.x.28205] 
[0.x.28206] 
[0.x.28207] 
//
[0.x.28208] 
[0.x.28209] 
[0.x.28210] 
[0.x.28211] 
[0.x.28212] 
[0.x.28213] 
[0.x.28214] 
[0.x.28215] 
[0.x.28216] 
[0.x.28217] 
[0.x.28218] 
[0.x.28219] 
[0.x.28220] 
[0.x.28221] 
//
[0.x.28222] 
[0.x.28223] 
[0.x.28224] 
//
[0.x.28225] 
[0.x.28226] 
[0.x.28227] 
//
[0.x.28228] 
[0.x.28229] 
//
[0.x.28230] 
[0.x.28231] 
//
[0.x.28232] 
[0.x.28233] 
[0.x.28234] 
[0.x.28235] 
[0.x.28236] 
[0.x.28237] 
//
[0.x.28238] 
[0.x.28239] 
[0.x.28240] 
[0.x.28241] 
[0.x.28242] 
[0.x.28243] 
//
[0.x.28244] 
[0.x.28245] 
[0.x.28246] 
[0.x.28247] 
[0.x.28248] 
[0.x.28249] 
[0.x.28250] 
[0.x.28251] 
[0.x.28252] 
[0.x.28253] 
//
[0.x.28254] 
[0.x.28255] 
[0.x.28256] 
[0.x.28257] 
[0.x.28258] 
[0.x.28259] 
[0.x.28260] 
[0.x.28261] 
[0.x.28262] 
[0.x.28263] 
[0.x.28264] 
[0.x.28265] 
//
[0.x.28266] 
[0.x.28267] 
[0.x.28268] 
[0.x.28269] 
//
[0.x.28270] 
[0.x.28271] 
[0.x.28272] 
[0.x.28273] 
[0.x.28274] 
[0.x.28275] 
[0.x.28276] 
[0.x.28277] 
[0.x.28278] 
[0.x.28279] 
[0.x.28280] 
[0.x.28281] 
[0.x.28282] 
//
[0.x.28283] 
[0.x.28284] 
[0.x.28285] 
[0.x.28286] 
[0.x.28287] 
[0.x.28288] 
[0.x.28289] 
[0.x.28290] 
[0.x.28291] 
[0.x.28292] 
[0.x.28293] 
//
[0.x.28294] 
[0.x.28295] 
[0.x.28296] 
[0.x.28297] 
[0.x.28298] 
[0.x.28299] 
[0.x.28300] 
[0.x.28301] 
[0.x.28302] 
[0.x.28303] 
[0.x.28304] 
//
[0.x.28305] 
[0.x.28306] 
[0.x.28307] 
[0.x.28308] 
//[2.x.3453] 
//
// 汇编被分成三个部分：`assemble_system()`, `assemble_multigrid()`, 和`assemble_rhs()`。这里的`assemble_system()`函数组装并存储（全局）系统矩阵和基于矩阵的方法的右手边。它类似于 [2.x.3454] 中的装配。
//
// 注意，无矩阵方法不执行这个函数，因为它不需要组装矩阵，而是在assemble_rhs()中组装右手边。
//
[0.x.28309] 
[0.x.28310] 
[0.x.28311] 
[0.x.28312] 
//
[0.x.28313] 
//
[0.x.28314] 
[0.x.28315] 
[0.x.28316] 
[0.x.28317] 
//
[0.x.28318] 
[0.x.28319] 
//
[0.x.28320] 
[0.x.28321] 
//
[0.x.28322] 
//
[0.x.28323] 
[0.x.28324] 
[0.x.28325] 
//
[0.x.28326] 
[0.x.28327] 
[0.x.28328] 
[0.x.28329] 
[0.x.28330] 
//
[0.x.28331] 
//
[0.x.28332] 
[0.x.28333] 
[0.x.28334] 
//
[0.x.28335] 
[0.x.28336] 
[0.x.28337] 
[0.x.28338] 
[0.x.28339] 
[0.x.28340] 
[0.x.28341] 
[0.x.28342] 
[0.x.28343] 
//
[0.x.28344] 
[0.x.28345] 
[0.x.28346] 
[0.x.28347] 
[0.x.28348] 
//
[0.x.28349] 
[0.x.28350] 
[0.x.28351] 
[0.x.28352] 
[0.x.28353] 
[0.x.28354] 
[0.x.28355] 
//
[0.x.28356] 
[0.x.28357] 
[0.x.28358] 
//[2.x.3455] 
//
// 下面的函数为基于矩阵的GMG方法组装和存储多级矩阵。这个函数与[2.x.3456]中的函数类似，只是在这里它适用于分布式网格。这个区别在于增加了一个条件，即我们只在本地拥有的水平单元上进行组装，并为每个被建立的矩阵调用压缩（）。
//
[0.x.28359] 
[0.x.28360] 
[0.x.28361] 
[0.x.28362] 
//
[0.x.28363] 
//
[0.x.28364] 
[0.x.28365] 
[0.x.28366] 
[0.x.28367] 
//
[0.x.28368] 
[0.x.28369] 
//
[0.x.28370] 
//
[0.x.28371] 
//
[0.x.28372] 
//
[0.x.28373] 
[0.x.28374] 
[0.x.28375] 
[0.x.28376] 
[0.x.28377] 
[0.x.28378] 
[0.x.28379] 
[0.x.28380] 
[0.x.28381] 
[0.x.28382] 
[0.x.28383] 
[0.x.28384] 
[0.x.28385] 
//
[0.x.28386] 
[0.x.28387] 
//
[0.x.28388] 
[0.x.28389] 
[0.x.28390] 
[0.x.28391] 
[0.x.28392] 
//
[0.x.28393] 
[0.x.28394] 
//
[0.x.28395] 
[0.x.28396] 
[0.x.28397] 
[0.x.28398] 
[0.x.28399] 
[0.x.28400] 
//
[0.x.28401] 
//
[0.x.28402] 
[0.x.28403] 
//
[0.x.28404] 
[0.x.28405] 
[0.x.28406] 
[0.x.28407] 
[0.x.28408] 
[0.x.28409] 
[0.x.28410] 
[0.x.28411] 
//
[0.x.28412] 
[0.x.28413] 
[0.x.28414] 
[0.x.28415] 
[0.x.28416] 
[0.x.28417] 
//
// [2.x.3457] 
//
// 这个三要素中的最后一个函数为无矩阵方法组装右手边的向量--因为在无矩阵框架中，我们不需要组装矩阵，只需要组装右手边就可以了。我们可以通过从上面的`assemble_system()`函数中提取处理右手边的代码来做到这一点，但是我们决定完全采用无矩阵的方法，也用这种方法进行装配。
//
// 结果是一个类似于[2.x.3459]中 "使用[2.x.3458]来避免解决约束 "一节中的函数。
//
// 这个函数的原因是MatrixFree运算符不考虑非同质的Dirichlet约束，而是将所有的Dirichlet约束视为同质的。为了说明这一点，这里的右手边被组装成残差[2.x.3460]，其中[2.x.3461]是一个零向量，除了在Dirichlet值中。然后在求解的时候，我们可以看到，解决方案是 [2.x.3462] 。这可以看作是对初始猜测为 [2.x.3463] 的线性系统进行的牛顿迭代。下面`solve()`函数中的CG解计算了[2.x.3464]，调用`constraints.distribution()`（直接在后面）增加了[2.x.3465] 。
//
// 显然，由于我们考虑的是一个零迪里希特边界的问题，我们可以采取类似于[2.x.3466] `assemble_rhs()`的方法，但是这个额外的工作允许我们改变问题声明，如果我们选择的话。
//
// 这个函数在积分循环中有两个部分：通过提交梯度的负值将矩阵 [2.x.3467] 的负值应用于 [2.x.3468] ，并通过提交值 [2.x.3469] 添加右手边的贡献。我们必须确保使用`read_dof_values_plain()`来评估[2.x.3470]，因为`read_dof_vaues()`会将所有Dirichlet值设置为0。
//
// 最后，system_rhs向量的类型是[2.x.3471]，但MatrixFree类只对[2.x.3472]起作用，因此我们必须使用MatrixFree功能计算右手边，然后使用`ChangeVectorType`命名空间的函数将其复制到正确的类型。
//
[0.x.28418] 
[0.x.28419] 
[0.x.28420] 
[0.x.28421] 
//
[0.x.28422] 
[0.x.28423] 
[0.x.28424] 
[0.x.28425] 
//
[0.x.28426] 
[0.x.28427] 
[0.x.28428] 
[0.x.28429] 
[0.x.28430] 
[0.x.28431] 
//
[0.x.28432] 
//
[0.x.28433] 
[0.x.28434] 
//
[0.x.28435] 
[0.x.28436] 
[0.x.28437] 
[0.x.28438] 
[0.x.28439] 
[0.x.28440] 
[0.x.28441] 
//
[0.x.28442] 
[0.x.28443] 
[0.x.28444] 
[0.x.28445] 
[0.x.28446] 
[0.x.28447] 
[0.x.28448] 
[0.x.28449] 
//
[0.x.28450] 
[0.x.28451] 
[0.x.28452] 
[0.x.28453] 
//
[0.x.28454] 
//
[0.x.28455] 
[0.x.28456] 
//
// [2.x.3473] 
//
// 这里我们设置了多网格预处理程序，测试了单个V型周期的时间，并解决了线性系统。不出所料，这是三种方法差别最大的地方之一。
//
[0.x.28457] 
[0.x.28458] 
[0.x.28459] 
[0.x.28460] 
//
[0.x.28461] 
[0.x.28462] 
//
[0.x.28463] 
//
// 无矩阵GMG方法的求解器类似于 [2.x.3474] ，除了增加一些接口矩阵，完全类似于 [2.x.3475] 。
//
[0.x.28464] 
[0.x.28465] 
[0.x.28466] 
[0.x.28467] 
[0.x.28468] 
//
[0.x.28469] 
[0.x.28470] 
//
[0.x.28471] 
[0.x.28472] 
[0.x.28473] 
[0.x.28474] 
[0.x.28475] 
[0.x.28476] 
[0.x.28477] 
[0.x.28478] 
//
[0.x.28479] 
[0.x.28480] 
[0.x.28481] 
[0.x.28482] 
[0.x.28483] 
[0.x.28484] 
[0.x.28485] 
[0.x.28486] 
[0.x.28487] 
//
[0.x.28488] 
//
[0.x.28489] 
[0.x.28490] 
[0.x.28491] 
[0.x.28492] 
[0.x.28493] 
[0.x.28494] 
[0.x.28495] 
[0.x.28496] 
//
[0.x.28497] 
[0.x.28498] 
[0.x.28499] 
//
[0.x.28500] 
[0.x.28501] 
[0.x.28502] 
[0.x.28503] 

// 将求解向量和右手边从[2.x.3476]复制到[2.x.3477]，这样我们就可以解决了。
//
[0.x.28504] 
[0.x.28505] 
[0.x.28506] 
[0.x.28507] 
//
[0.x.28508] 
[0.x.28509] 
[0.x.28510] 
//
// 1个V型周期的时间安排。
//
[0.x.28511] 
[0.x.28512] 
[0.x.28513] 
[0.x.28514] 
[0.x.28515] 
[0.x.28516] 
//
// 解出线性系统，更新解的鬼魂值，复制回[2.x.3478]并分配约束。
//
[0.x.28517] 
[0.x.28518] 
//
[0.x.28519] 
[0.x.28520] 
[0.x.28521] 
[0.x.28522] 
[0.x.28523] 
[0.x.28524] 
//
[0.x.28525] 
[0.x.28526] 
[0.x.28527] 
//
[0.x.28528] 
[0.x.28529] 
//
// 基于矩阵的GMG方法的求解器，类似于 [2.x.3479] ，只是使用了雅可比平滑器，而不是SOR平滑器（该平滑器没有并行实现）。
//
[0.x.28530] 
[0.x.28531] 
[0.x.28532] 
//
[0.x.28533] 
[0.x.28534] 
//
[0.x.28535] 
[0.x.28536] 
[0.x.28537] 
[0.x.28538] 
[0.x.28539] 
[0.x.28540] 
[0.x.28541] 
[0.x.28542] 
//
[0.x.28543] 
[0.x.28544] 
//
[0.x.28545] 
[0.x.28546] 
[0.x.28547] 
[0.x.28548] 
[0.x.28549] 
[0.x.28550] 
[0.x.28551] 
[0.x.28552] 
[0.x.28553] 
//
[0.x.28554] 
//
[0.x.28555] 
[0.x.28556] 
[0.x.28557] 
//
[0.x.28558] 
[0.x.28559] 
[0.x.28560] 
//
[0.x.28561] 
[0.x.28562] 
//
[0.x.28563] 
//
// 1个V型周期的计时。
//
[0.x.28564] 
[0.x.28565] 
[0.x.28566] 
[0.x.28567] 
[0.x.28568] 
[0.x.28569] 
//
// 解决线性系统和分配约束。
//
[0.x.28570] 
[0.x.28571] 
//
[0.x.28572] 
[0.x.28573] 
[0.x.28574] 
[0.x.28575] 
[0.x.28576] 
[0.x.28577] 
//
[0.x.28578] 
//
 
[0.x.28580] 
//
// AMG方法的求解器，类似于 [2.x.3480] 。
//
[0.x.28581] 
[0.x.28582] 
[0.x.28583] 
//
[0.x.28584] 
[0.x.28585] 
//
[0.x.28586] 
[0.x.28587] 
[0.x.28588] 
[0.x.28589] 
[0.x.28590] 
[0.x.28591] 
[0.x.28592] 
[0.x.28593] 
[0.x.28594] 
//
[0.x.28595] 
//
[0.x.28596] 
[0.x.28597] 
//
// 1个V型周期的计时。
//
[0.x.28598] 
[0.x.28599] 
[0.x.28600] 
[0.x.28601] 
[0.x.28602] 
[0.x.28603] 
//
// 解决线性系统和分配约束。
//
[0.x.28604] 
[0.x.28605] 
//
[0.x.28606] 
[0.x.28607] 
[0.x.28608] 
[0.x.28609] 
[0.x.28610] 
[0.x.28611] 
[0.x.28612] 
//
[0.x.28613] 
[0.x.28614] 
//
[0.x.28615] 
[0.x.28616] 
[0.x.28617] 
//
[0.x.28618] 
[0.x.28619] 
[0.x.28620] 
//[2.x.3481] 
//
// 我们使用FEInterfaceValues类来组装一个误差估计器，以决定哪些单元需要细化。请看介绍中对单元和面积分的确切定义。为了使用该方法，我们为[2.x.3482]定义了Scratch和Copy对象，下面的大部分代码本质上与[2.x.3483]中已经设置的一样（或者至少精神上相似）。
//
[0.x.28621] 
[0.x.28622] 
[0.x.28623] 
[0.x.28624] 
[0.x.28625] 
[0.x.28626] 
[0.x.28627] 
[0.x.28628] 
[0.x.28629] 
[0.x.28630] 
[0.x.28631] 
[0.x.28632] 
[0.x.28633] 
[0.x.28634] 
//
[0.x.28635] 
[0.x.28636] 
[0.x.28637] 
[0.x.28638] 
[0.x.28639] 
[0.x.28640] 
[0.x.28641] 
[0.x.28642] 
[0.x.28643] 
[0.x.28644] 
//
[0.x.28645] 
[0.x.28646] 
[0.x.28647] 
//
[0.x.28648] 
[0.x.28649] 
[0.x.28650] 
[0.x.28651] 
[0.x.28652] 
[0.x.28653] 
//
[0.x.28654] 
//
[0.x.28655] 
[0.x.28656] 
[0.x.28657] 
[0.x.28658] 
[0.x.28659] 
//
[0.x.28660] 
[0.x.28661] 
[0.x.28662] 
[0.x.28663] 
//
[0.x.28664] 
[0.x.28665] 
[0.x.28666] 
[0.x.28667] 
//
[0.x.28668] 
[0.x.28669] 
[0.x.28670] 
[0.x.28671] 
[0.x.28672] 
//
[0.x.28673] 
//
[0.x.28674] 
//
[0.x.28675] 
//
// 剩余单元的汇编程序 [2.x.3484] 。
[0.x.28676] 
[0.x.28677] 
[0.x.28678] 
[0.x.28679] 
[0.x.28680] 
//
[0.x.28681] 
[0.x.28682] 
//
[0.x.28683] 
//
 
[0.x.28685] 
//
[0.x.28686] 
//
[0.x.28687] 
[0.x.28688] 
[0.x.28689] 
[0.x.28690] 
[0.x.28691] 
[0.x.28692] 
//
[0.x.28693] 
[0.x.28694] 
[0.x.28695] 
//
// 脸部术语的汇编器 [2.x.3485] 。
[0.x.28696] 
[0.x.28697] 
[0.x.28698] 
[0.x.28699] 
[0.x.28700] 
[0.x.28701] 
[0.x.28702] 
[0.x.28703] 
[0.x.28704] 
[0.x.28705] 
[0.x.28706] 
//
[0.x.28707] 
[0.x.28708] 
//
[0.x.28709] 
[0.x.28710] 
//
[0.x.28711] 
[0.x.28712] 
//
[0.x.28713] 
//
[0.x.28714] 
[0.x.28715] 
[0.x.28716] 
[0.x.28717] 
[0.x.28718] 
[0.x.28719] 
//
[0.x.28720] 
//
[0.x.28721] 
[0.x.28722] 
[0.x.28723] 
[0.x.28724] 
[0.x.28725] 
[0.x.28726] 
[0.x.28727] 
//
[0.x.28728] 
[0.x.28729] 
//
[0.x.28730] 
[0.x.28731] 
[0.x.28732] 
[0.x.28733] 
//
[0.x.28734] 
[0.x.28735] 
[0.x.28736] 
//
[0.x.28737] 
[0.x.28738] 
[0.x.28739] 
[0.x.28740] 
//
[0.x.28741] 
[0.x.28742] 
[0.x.28743] 
[0.x.28744] 
[0.x.28745] 
[0.x.28746] 
[0.x.28747] 
[0.x.28748] 
[0.x.28749] 
//
// 我们需要对每个内部面进行一次装配，但我们需要确保两个进程都对本地拥有的单元和幽灵单元之间的面术语进行装配。这可以通过设置[2.x.3486]标志来实现。我们需要这样做，因为我们不在这里交流误差估计器的贡献。
//
[0.x.28750] 
[0.x.28751] 
[0.x.28752] 
[0.x.28753] 
[0.x.28754] 
[0.x.28755] 
[0.x.28756] 
[0.x.28757] 
[0.x.28758] 
//
// *boundary_worker= [2.x.3487] nullptr。
//
 
//
[0.x.28760] 
[0.x.28761] 
[0.x.28762] 
[0.x.28763] 
[0.x.28764] 
[0.x.28765] 
//[2.x.3488] 
//
// 我们使用存储在向量[2.x.3489]中的单元估计器，并细化固定数量的单元（这里选择的是每一步中大约两倍的DoFs数量）。
//
[0.x.28766] 
[0.x.28767] 
[0.x.28768] 
[0.x.28769] 
//
[0.x.28770] 
[0.x.28771] 
[0.x.28772] 
//
[0.x.28773] 
[0.x.28774] 
//[2.x.3490] 
//
// output_results()函数与许多教程中的函数类似（例如，见[2.x.3491]）。
//
[0.x.28775] 
[0.x.28776] 
[0.x.28777] 
[0.x.28778] 
//
[0.x.28779] 
[0.x.28780] 
[0.x.28781] 
[0.x.28782] 
[0.x.28783] 
//
[0.x.28784] 
[0.x.28785] 
[0.x.28786] 
//
[0.x.28787] 
[0.x.28788] 
[0.x.28789] 
[0.x.28790] 
//
[0.x.28791] 
[0.x.28792] 
[0.x.28793] 
[0.x.28794] 
//
[0.x.28795] 
[0.x.28796] 
[0.x.28797] 
//
[0.x.28798] 
//
[0.x.28799] 
[0.x.28800] 
//
[0.x.28801] 
[0.x.28802] 
//[2.x.3492] 
//
// 和大多数教程一样，这个函数调用上面定义的各种函数来设置、组合、求解和输出结果。
//
[0.x.28803] 
[0.x.28804] 
[0.x.28805] 
[0.x.28806] 
[0.x.28807] 
[0.x.28808] 
[0.x.28809] 
[0.x.28810] 
//
[0.x.28811] 
[0.x.28812] 
//
// 我们只为GMG方法输出层次单元数据（与下面的DoF数据相同）。请注意，对于AMG来说，分区效率是不相关的，因为在计算过程中没有分布或使用层次结构。
//
[0.x.28813] 
[0.x.28814] 
[0.x.28815] 
[0.x.28816] 
[0.x.28817] 
[0.x.28818] 
[0.x.28819] 
//
[0.x.28820] 
//
// 只为GMG设置多级层次结构。
//
[0.x.28821] 
[0.x.28822] 
[0.x.28823] 
//
[0.x.28824] 
[0.x.28825] 
[0.x.28826] 
[0.x.28827] 
[0.x.28828] 
[0.x.28829] 
[0.x.28830] 
[0.x.28831] 
[0.x.28832] 
[0.x.28833] 
[0.x.28834] 
[0.x.28835] 
//
// 对于无矩阵的方法，我们只组装右手边。对于这两种基于矩阵的方法，我们同时装配主动矩阵和右手边，对于基于矩阵的GMG，我们只装配多网格矩阵。
//
[0.x.28836] 
[0.x.28837] 
[0.x.28838] 
[0.x.28839] 
[0.x.28840] 
[0.x.28841] 
[0.x.28842] 
[0.x.28843] 
//
[0.x.28844] 
[0.x.28845] 
//
[0.x.28846] 
[0.x.28847] 
//
[0.x.28848] 
[0.x.28849] 
[0.x.28850] 
[0.x.28851] 
//[2.x.3493] 
//
// 这是一个类似于[2.x.3494]的主函数，但我们要求用户传递一个.prm文件作为唯一的命令行参数（参见[2.x.3495]和ParameterHandler类的文档，以了解关于参数文件的完整讨论）。
//
[0.x.28852] 
[0.x.28853] 
[0.x.28854] 
[0.x.28855] 
//
[0.x.28856] 
[0.x.28857] 
[0.x.28858] 
//
[0.x.28859] 
[0.x.28860] 
[0.x.28861] 
//
[0.x.28862] 
[0.x.28863] 
[0.x.28864] 
[0.x.28865] 
[0.x.28866] 
[0.x.28867] 
//
[0.x.28868] 
[0.x.28869] 
//
[0.x.28870] 
[0.x.28871] 
[0.x.28872] 
[0.x.28873] 
//
[0.x.28874] 
[0.x.28875] 
//
[0.x.28876] 
[0.x.28877] 
[0.x.28878] 
[0.x.28879] 
[0.x.28880] 
[0.x.28881] 
[0.x.28882] 
[0.x.28883] 
[0.x.28884] 
[0.x.28885] 
[0.x.28886] 
[0.x.28887] 
[0.x.28888] 
[0.x.28889] 
[0.x.28890] 
[0.x.28891] 
[0.x.28892] 
[0.x.28893] 
[0.x.28894] 
[0.x.28895] 
[0.x.28896] 
[0.x.28897] 
[0.x.28898] 
[0.x.28899] 
[0.x.28900] 
[0.x.28901] 
[0.x.28902] 
[0.x.28903] 
[0.x.28904] 
[0.x.28905] 
[0.x.28906] 
//
[0.x.28907] 
[0.x.28908] 
[0.x.28909] 
[0.x.28910] 
[0.x.28911] 
[0.x.28912] 
[0.x.28913] 
[0.x.28914] 
[0.x.28915] 
[0.x.28916] 
[0.x.28917] 
[0.x.28918] 
[0.x.28919] 
[0.x.28920] 
[0.x.28921] 
[0.x.28922] 
//
[0.x.28923] 
[0.x.28924] 
[0.x.28925] 
[0.x.28926] 
//[2.x.3496] 
//
// 大多数deal.II的include文件已经在前面的例子中涉及到了，没有注释。
//
[0.x.28927] 
[0.x.28928] 
[0.x.28929] 
[0.x.28930] 
[0.x.28931] 
[0.x.28932] 
[0.x.28933] 
[0.x.28934] 
[0.x.28935] 
[0.x.28936] 
[0.x.28937] 
[0.x.28938] 
[0.x.28939] 
[0.x.28940] 
[0.x.28941] 
[0.x.28942] 
[0.x.28943] 
[0.x.28944] 
[0.x.28945] 
[0.x.28946] 
[0.x.28947] 
[0.x.28948] 
[0.x.28949] 
[0.x.28950] 
[0.x.28951] 
[0.x.28952] 
//
// 然而，我们确实有一些新的包括在这个例子中。第一个定义了三角形面的有限元空间，我们把它称为 "骨架"。这些有限元在元素内部没有任何支持，它们代表的是在每个模数一的表面上有一个单一的值的多项式，但在模数二的表面上允许有不连续。
//
[0.x.28953] 
//
// 我们包含的第二个新文件定义了一种新的稀疏矩阵类型。 常规的[2.x.3497]类型存储了所有非零条目的索引。 [2.x.3498]则是利用了DG解的耦合性。 它存储了一个指定大小的矩阵子块的索引。 在HDG背景下，这个子块大小实际上是由骨架解场定义的每个面的自由度数量。这使得矩阵的内存消耗减少了三分之一，并且在求解器中使用矩阵时也会有类似的速度提升。
//
[0.x.28954] 
//
// 这个例子的最后一个新的包括涉及到数据输出。 由于我们在网格的骨架上定义了一个有限元场，我们希望能够直观地看到这个解决方案的实际情况。DataOutFaces正是这样做的；它的接口与我们熟悉的DataOut几乎一样，但输出的数据只有模拟的二维1数据。
//
[0.x.28955] 
//
[0.x.28956] 
//
// 我们首先将所有的类放入自己的命名空间。
//
[0.x.28957] 
[0.x.28958] 
[0.x.28959] 
//[2.x.3499] 
//
//分析解的结构与[2.x.3500]中相同。有两个例外情况。首先，我们也为3D情况创建了一个解决方案，其次，我们对解决方案进行了缩放，使其在解决方案的所有宽度值上的规范是统一的。
//
[0.x.28960] 
[0.x.28961] 
[0.x.28962] 
[0.x.28963] 
[0.x.28964] 
[0.x.28965] 
[0.x.28966] 
[0.x.28967] 
//
[0.x.28968] 
[0.x.28969] 
[0.x.28970] 
[0.x.28971] 
//
[0.x.28972] 
[0.x.28973] 
[0.x.28974] 
[0.x.28975] 
//
[0.x.28976] 
[0.x.28977] 
[0.x.28978] 
[0.x.28979] 
[0.x.28980] 
[0.x.28981] 
//
[0.x.28982] 
[0.x.28983] 
//
[0.x.28984] 
[0.x.28985] 
[0.x.28986] 
[0.x.28987] 
[0.x.28988] 
[0.x.28989] 
[0.x.28990] 
[0.x.28991] 
[0.x.28992] 
[0.x.28993] 
[0.x.28994] 
[0.x.28995] 
[0.x.28996] 
[0.x.28997] 
//
[0.x.28998] 
[0.x.28999] 
[0.x.29000] 
//
[0.x.29001] 
[0.x.29002] 
[0.x.29003] 
[0.x.29004] 
[0.x.29005] 
[0.x.29006] 
[0.x.29007] 
[0.x.29008] 
//
[0.x.29009] 
[0.x.29010] 
[0.x.29011] 
[0.x.29012] 
[0.x.29013] 
//
[0.x.29014] 
[0.x.29015] 
[0.x.29016] 
[0.x.29017] 
//
// 这个类实现了一个函数，标量解和它的负梯度被收集在一起。这个函数在计算HDG近似的误差时使用，它的实现是简单地调用Solution类的值和梯度函数。
//
[0.x.29018] 
[0.x.29019] 
[0.x.29020] 
[0.x.29021] 
[0.x.29022] 
[0.x.29023] 
[0.x.29024] 
//
[0.x.29025] 
[0.x.29026] 
[0.x.29027] 
[0.x.29028] 
[0.x.29029] 
[0.x.29030] 
[0.x.29031] 
[0.x.29032] 
[0.x.29033] 
[0.x.29034] 
[0.x.29035] 
//
// 接下来是对流速度的实现。如介绍中所述，我们选择的速度场在二维是[2.x.3501]，在三维是[2.x.3502]。这就得到了一个无发散的速度场。
//
[0.x.29036] 
[0.x.29037] 
[0.x.29038] 
[0.x.29039] 
[0.x.29040] 
[0.x.29041] 
[0.x.29042] 
//
[0.x.29043] 
[0.x.29044] 
[0.x.29045] 
[0.x.29046] 
[0.x.29047] 
[0.x.29048] 
[0.x.29049] 
[0.x.29050] 
[0.x.29051] 
[0.x.29052] 
[0.x.29053] 
[0.x.29054] 
[0.x.29055] 
[0.x.29056] 
[0.x.29057] 
[0.x.29058] 
[0.x.29059] 
[0.x.29060] 
[0.x.29061] 
[0.x.29062] 
[0.x.29063] 
[0.x.29064] 
[0.x.29065] 
//
// 我们实现的最后一个函数是用于制造解决方案的右手边。它与[2.x.3503]非常相似，不同的是我们现在有一个对流项而不是反应项。由于速度场是不可压缩的，即[2.x.3504]，对流项简单读作 [2.x.3505] 。
//
[0.x.29066] 
[0.x.29067] 
[0.x.29068] 
[0.x.29069] 
[0.x.29070] 
[0.x.29071] 
[0.x.29072] 
[0.x.29073] 
[0.x.29074] 
[0.x.29075] 
[0.x.29076] 
[0.x.29077] 
[0.x.29078] 
//
[0.x.29079] 
[0.x.29080] 
[0.x.29081] 
[0.x.29082] 
[0.x.29083] 
[0.x.29084] 
//
[0.x.29085] 
[0.x.29086] 
[0.x.29087] 
[0.x.29088] 
//
// [2.x.3506] 
//
// HDG的求解过程与 [2.x.3507] 的求解过程非常相似。主要区别在于使用了三套不同的DoFHandler和FE对象，以及ChunkSparseMatrix和相应的解决方案向量。我们还使用WorkStream来实现多线程的本地求解过程，该过程利用了本地求解器的尴尬的并行性质。对于WorkStream，我们定义了对单元格的本地操作和复制到全局矩阵和向量的函数。我们这样做既是为了装配（装配要运行两次，一次是在我们生成系统矩阵时，另一次是在我们从骨架值计算元素内部解时），也是为了后处理，在后处理中我们提取一个在高阶收敛的解。
//
[0.x.29089] 
[0.x.29090] 
[0.x.29091] 
[0.x.29092] 
[0.x.29093] 
[0.x.29094] 
[0.x.29095] 
[0.x.29096] 
[0.x.29097] 
//
[0.x.29098] 
[0.x.29099] 
//
[0.x.29100] 
[0.x.29101] 
[0.x.29102] 
[0.x.29103] 
[0.x.29104] 
[0.x.29105] 
[0.x.29106] 
//
// 用于组装和解决原始变量的数据。
//
[0.x.29107] 
[0.x.29108] 
//
// 对解决方案进行后处理以获得 [2.x.3508] 是一个逐个元素的过程；因此，我们不需要组装任何全局数据，也不需要声明任何 "任务数据 "供WorkStream使用。
//
[0.x.29109] 
//
// 以下三个函数被 WorkStream 用来完成程序的实际工作。
//
[0.x.29110] 
[0.x.29111] 
[0.x.29112] 
[0.x.29113] 
//
[0.x.29114] 
//
[0.x.29115] 
[0.x.29116] 
[0.x.29117] 
[0.x.29118] 
//
[0.x.29119] 
//
// "局部 "解是每个元素的内部。 这些代表了原始解场 [2.x.3509] 以及辅助场 [2.x.3510] 。
//
[0.x.29120] 
[0.x.29121] 
[0.x.29122] 
//
// 新的有限元类型和相应的[2.x.3511]被用于耦合元素级局部解的全局骨架解。
//
[0.x.29123] 
[0.x.29124] 
[0.x.29125] 
[0.x.29126] 
//
// 如介绍中所述，HDG解可以通过后处理达到 [2.x.3512] 的超收敛率。 后处理的解是一个不连续的有限元解，代表每个单元内部的原始变量。 我们定义了一个程度为[2.x.3513]的FE类型来表示这个后处理的解，我们只在构造后用于输出。
//
[0.x.29127] 
[0.x.29128] 
[0.x.29129] 
//
// 与骨架相对应的自由度强烈地执行Dirichlet边界条件，就像在连续Galerkin有限元方法中一样。我们可以通过AffineConstraints对象以类似的方式强制执行边界条件。此外，悬挂节点的处理方式与连续有限元的处理方式相同。对于只在面定义自由度的面元素，这个过程将精炼面的解设置为与粗略面的表示相吻合。
//
// 请注意，对于HDG来说，消除悬空节点并不是唯一的可能性，就HDG理论而言，我们也可以使用精炼侧的未知数，通过精炼侧的跟踪值来表达粗略侧的局部解。然而，这样的设置在deal.II循环方面并不容易实现，因此没有进一步分析。
//
[0.x.29130] 
//
// ChunkSparseMatrix类的用法与通常的稀疏矩阵类似。你需要一个ChunkSparsityPattern类型的稀疏模式和实际的矩阵对象。在创建稀疏模式时，我们只需要额外传递局部块的大小。
//
[0.x.29131] 
[0.x.29132] 
//
// 与 [2.x.3514] 相同。
//
[0.x.29133] 
[0.x.29134] 
[0.x.29135] 
//[2.x.3515] 
//[2.x.3516] 该构造函数与其他例子中的构造函数类似，除了处理多个DoFHandler和FiniteElement对象。请注意，我们为局部DG部分创建了一个有限元系统，包括梯度/通量部分和标量部分。
//
[0.x.29136] 
[0.x.29137] 
[0.x.29138] 
[0.x.29139] 
[0.x.29140] 
[0.x.29141] 
[0.x.29142] 
[0.x.29143] 
[0.x.29144] 
[0.x.29145] 
//
// [2.x.3517] HDG解决方案的系统是以类似于其他大多数教程程序的方式设置的。 我们小心翼翼地用我们所有的DoFHandler对象来分配道夫。 [2.x.3518]和[2.x.3519]对象与全局骨架解决方案一起。
//
[0.x.29146] 
[0.x.29147] 
[0.x.29148] 
[0.x.29149] 
[0.x.29150] 
[0.x.29151] 
//
[0.x.29152] 
[0.x.29153] 
//
[0.x.29154] 
[0.x.29155] 
//
[0.x.29156] 
[0.x.29157] 
//
[0.x.29158] 
[0.x.29159] 
[0.x.29160] 
[0.x.29161] 
[0.x.29162] 
[0.x.29163] 
[0.x.29164] 
[0.x.29165] 
[0.x.29166] 
[0.x.29167] 
//
// 在创建块状稀疏模式时，我们首先创建通常的动态稀疏模式，然后设置块状大小，该大小等于一个面的道夫数，当把它复制到最终的稀疏模式时。
//
[0.x.29168] 
[0.x.29169] 
[0.x.29170] 
[0.x.29171] 
[0.x.29172] 
[0.x.29173] 
[0.x.29174] 
//
// [2.x.3520] 接下来是定义并行装配的本地数据结构。第一个结构[2.x.3521]包含了被写入全局矩阵的本地向量和矩阵，而ScratchData包含了我们在本地装配中需要的所有数据。这里有一个变量值得注意，即布尔变量[2.x.3522] trace_reconstruct。正如介绍中提到的，我们分两步解决HDG系统。首先，我们为骨架系统创建一个线性系统，通过舒尔补码[2.x.3523] 将局部部分浓缩到其中。然后，我们用骨架的解来解决局部部分。对于这两个步骤，我们需要两次元素上的相同矩阵，我们希望通过两个装配步骤来计算。由于大部分的代码是相似的，我们用相同的函数来做这件事，但只是根据我们在开始装配时设置的一个标志在两者之间切换。因为我们需要把这个信息传递给本地的工作程序，所以我们把它存储在任务数据中一次。
//
[0.x.29175] 
[0.x.29176] 
[0.x.29177] 
[0.x.29178] 
[0.x.29179] 
[0.x.29180] 
//
[0.x.29181] 
//
[0.x.29182] 
[0.x.29183] 
[0.x.29184] 
[0.x.29185] 
[0.x.29186] 
[0.x.29187] 
[0.x.29188] 
//
// [2.x.3524] 
//[2.x.3525] 包含WorkStream中每个线程的持久化数据。 FEValues、矩阵和矢量对象现在应该很熟悉了。 有两个对象需要讨论。 [2.x.3526] int> > fe_local_support_on_face` 和 [2.x.3527] int> > fe_support_on_face`。 这些用于指示所选择的有限元是否在与[2.x.3528]相关的局部部分和骨架部分[2.x.3529]的参考单元的特定面上有支持（非零值）。 我们在构造函数中提取这一信息，并为我们工作的所有单元存储一次。 如果我们不存储这一信息，我们将被迫在每个单元上装配大量的零项，这将大大降低程序的速度。
//
[0.x.29189] 
[0.x.29190] 
[0.x.29191] 
[0.x.29192] 
[0.x.29193] 
[0.x.29194] 
//
[0.x.29195] 
[0.x.29196] 
[0.x.29197] 
[0.x.29198] 
[0.x.29199] 
[0.x.29200] 
//
[0.x.29201] 
[0.x.29202] 
[0.x.29203] 
[0.x.29204] 
[0.x.29205] 
[0.x.29206] 
//
[0.x.29207] 
[0.x.29208] 
//
[0.x.29209] 
[0.x.29210] 
[0.x.29211] 
//
[0.x.29212] 
[0.x.29213] 
[0.x.29214] 
[0.x.29215] 
[0.x.29216] 
[0.x.29217] 
[0.x.29218] 
[0.x.29219] 
[0.x.29220] 
[0.x.29221] 
[0.x.29222] 
[0.x.29223] 
[0.x.29224] 
[0.x.29225] 
[0.x.29226] 
[0.x.29227] 
[0.x.29228] 
[0.x.29229] 
[0.x.29230] 
[0.x.29231] 
[0.x.29232] 
[0.x.29233] 
[0.x.29234] 
[0.x.29235] 
[0.x.29236] 
[0.x.29237] 
[0.x.29238] 
[0.x.29239] 
[0.x.29240] 
[0.x.29241] 
[0.x.29242] 
[0.x.29243] 
[0.x.29244] 
[0.x.29245] 
//
[0.x.29246] 
[0.x.29247] 
[0.x.29248] 
[0.x.29249] 
[0.x.29250] 
[0.x.29251] 
[0.x.29252] 
//
[0.x.29253] 
[0.x.29254] 
[0.x.29255] 
[0.x.29256] 
[0.x.29257] 
[0.x.29258] 
[0.x.29259] 
[0.x.29260] 
[0.x.29261] 
[0.x.29262] 
[0.x.29263] 
[0.x.29264] 
[0.x.29265] 
[0.x.29266] 
[0.x.29267] 
[0.x.29268] 
[0.x.29269] 
[0.x.29270] 
[0.x.29271] 
[0.x.29272] 
[0.x.29273] 
[0.x.29274] 
[0.x.29275] 
[0.x.29276] 
[0.x.29277] 
[0.x.29278] 
[0.x.29279] 
//
// [2.x.3530] 
//[2.x.3531] 包含WorkStream在对本地解决方案进行后处理时使用的数据 [2.x.3532] 。 它与 [2.x.3533] 类似，但要简单得多。
[0.x.29280] 
[0.x.29281] 
[0.x.29282] 
[0.x.29283] 
[0.x.29284] 
//
[0.x.29285] 
[0.x.29286] 
[0.x.29287] 
//
[0.x.29288] 
[0.x.29289] 
//
[0.x.29290] 
[0.x.29291] 
[0.x.29292] 
[0.x.29293] 
[0.x.29294] 
[0.x.29295] 
[0.x.29296] 
[0.x.29297] 
[0.x.29298] 
[0.x.29299] 
[0.x.29300] 
[0.x.29301] 
[0.x.29302] 
//
[0.x.29303] 
[0.x.29304] 
[0.x.29305] 
[0.x.29306] 
[0.x.29307] 
[0.x.29308] 
[0.x.29309] 
[0.x.29310] 
[0.x.29311] 
[0.x.29312] 
[0.x.29313] 
[0.x.29314] 
[0.x.29315] 
[0.x.29316] 
//
// [2.x.3534] [2.x.3535]函数与[2.x.3536]上的函数类似，其中正交公式和更新标志被设置，然后[2.x.3537]被用来以多线程的方式进行工作。 [2.x.3538] 输入参数用于决定我们是求全局骨架解（false）还是局部解（true）。
//
// 对于汇编的多线程执行，有一点值得注意的是，`assemble_system_one_cell()`中的局部计算会调用BLAS和LAPACK函数，如果这些函数在deal.II中可用。因此，底层的BLAS/LAPACK库必须支持同时来自多个线程的调用。大多数实现都支持这一点，但有些库需要以特定方式构建以避免问题。例如，在BLAS/LAPACK调用内部没有多线程的情况下编译的OpenBLAS需要在构建时将一个名为`USE_LOCKING'的标志设置为true。
//
[0.x.29317] 
[0.x.29318] 
[0.x.29319] 
[0.x.29320] 
[0.x.29321] 
//
[0.x.29322] 
[0.x.29323] 
//
[0.x.29324] 
//
[0.x.29325] 
[0.x.29326] 
//
[0.x.29327] 
[0.x.29328] 
[0.x.29329] 
[0.x.29330] 
[0.x.29331] 
[0.x.29332] 
[0.x.29333] 
[0.x.29334] 
//
[0.x.29335] 
[0.x.29336] 
[0.x.29337] 
[0.x.29338] 
[0.x.29339] 
[0.x.29340] 
[0.x.29341] 
[0.x.29342] 
//
// [2.x.3539] HDG程序的实际工作由 [2.x.3540] 组装局部矩阵 [2.x.3541] 在这里完成，同时还有全局矩阵的局部贡献 [2.x.3542] 。
//
[0.x.29343] 
[0.x.29344] 
[0.x.29345] 
[0.x.29346] 
[0.x.29347] 
[0.x.29348] 
//
//为Dof_handler_local构建迭代器，用于FEValues的reinit函数。
//
[0.x.29349] 
[0.x.29350] 
[0.x.29351] 
[0.x.29352] 
//
[0.x.29353] 
[0.x.29354] 
[0.x.29355] 
[0.x.29356] 
//
[0.x.29357] 
[0.x.29358] 
//
[0.x.29359] 
[0.x.29360] 
//
[0.x.29361] 
[0.x.29362] 
[0.x.29363] 
[0.x.29364] 
[0.x.29365] 
[0.x.29366] 
[0.x.29367] 
[0.x.29368] 
[0.x.29369] 
[0.x.29370] 
//
// 我们首先计算对应于局部-局部耦合的[2.x.3543]矩阵（在介绍中称为矩阵[2.x.3544]）的单元内部贡献，以及局部右手向量。 我们在每个正交点存储基函数、右手边值和对流速度的值，以便快速访问这些场。
//
[0.x.29371] 
[0.x.29372] 
[0.x.29373] 
[0.x.29374] 
[0.x.29375] 
[0.x.29376] 
[0.x.29377] 
[0.x.29378] 
[0.x.29379] 
[0.x.29380] 
[0.x.29381] 
[0.x.29382] 
[0.x.29383] 
[0.x.29384] 
[0.x.29385] 
[0.x.29386] 
[0.x.29387] 
[0.x.29388] 
[0.x.29389] 
[0.x.29390] 
[0.x.29391] 
[0.x.29392] 
[0.x.29393] 
[0.x.29394] 
[0.x.29395] 
[0.x.29396] 
[0.x.29397] 
[0.x.29398] 
//
// 脸部条款是在所有元素的所有面上集合起来的。这与更传统的DG方法相反，在组装过程中，每个面只被访问一次。
//
[0.x.29399] 
[0.x.29400] 
[0.x.29401] 
[0.x.29402] 
//
// 在求解局部变量时需要已经得到的 [2.x.3545] 值。
//
[0.x.29403] 
[0.x.29404] 
[0.x.29405] 
//
[0.x.29406] 
[0.x.29407] 
[0.x.29408] 
[0.x.29409] 
[0.x.29410] 
[0.x.29411] 
[0.x.29412] 
[0.x.29413] 
[0.x.29414] 
//
// 这里我们计算介绍中讨论的稳定参数：由于扩散是1，并且扩散长度尺度被设定为1/5，它只是导致扩散部分的贡献为5，而对流部分的贡献是通过元素边界的居中方案中的对流大小。
//
[0.x.29415] 
//
// 我们存储非零通量和标量值，利用我们在[2.x.3546]中创建的 support_on_face 信息。
[0.x.29416] 
[0.x.29417] 
[0.x.29418] 
[0.x.29419] 
[0.x.29420] 
[0.x.29421] 
[0.x.29422] 
[0.x.29423] 
[0.x.29424] 
[0.x.29425] 
[0.x.29426] 
//
// 当 [2.x.3547] 我们准备为骨架变量 [2.x.3548] 组装系统。如果是这种情况，我们必须组装所有与问题相关的局部矩阵：局部-局部、局部-面部、面部-局部和面部-面部。 面-面矩阵被存储为[2.x.3549]，这样就可以通过[2.x.3550]copy_local_to_global将其组装到全局系统中。
//
[0.x.29427] 
[0.x.29428] 
[0.x.29429] 
[0.x.29430] 
[0.x.29431] 
[0.x.29432] 
[0.x.29433] 
[0.x.29434] 
[0.x.29435] 
[0.x.29436] 
[0.x.29437] 
[0.x.29438] 
[0.x.29439] 
[0.x.29440] 
[0.x.29441] 
[0.x.29442] 
[0.x.29443] 
[0.x.29444] 
[0.x.29445] 
[0.x.29446] 
[0.x.29447] 
[0.x.29448] 
[0.x.29449] 
//
// 注意face_no-local矩阵的符号。 我们在组装时否定了这个符号，这样我们就可以在计算舒尔补时使用[2.x.3551]的加法。
//
[0.x.29450] 
[0.x.29451] 
[0.x.29452] 
[0.x.29453] 
[0.x.29454] 
[0.x.29455] 
//
[0.x.29456] 
[0.x.29457] 
[0.x.29458] 
[0.x.29459] 
[0.x.29460] 
[0.x.29461] 
[0.x.29462] 
[0.x.29463] 
[0.x.29464] 
[0.x.29465] 
[0.x.29466] 
[0.x.29467] 
[0.x.29468] 
[0.x.29469] 
[0.x.29470] 
[0.x.29471] 
//
[0.x.29472] 
[0.x.29473] 
[0.x.29474] 
[0.x.29475] 
[0.x.29476] 
[0.x.29477] 
[0.x.29478] 
[0.x.29479] 
[0.x.29480] 
[0.x.29481] 
[0.x.29482] 
[0.x.29483] 
[0.x.29484] 
[0.x.29485] 
[0.x.29486] 
[0.x.29487] 
[0.x.29488] 
[0.x.29489] 
[0.x.29490] 
//
// 这最后一个项将[2.x.3552]项的贡献加入到本地矩阵中。相对于上面的脸部矩阵，我们在两个装配阶段都需要它。
//
[0.x.29491] 
[0.x.29492] 
[0.x.29493] 
[0.x.29494] 
[0.x.29495] 
[0.x.29496] 
[0.x.29497] 
[0.x.29498] 
[0.x.29499] 
[0.x.29500] 
[0.x.29501] 
[0.x.29502] 
[0.x.29503] 
[0.x.29504] 
//
// 当[2.x.3553]时，我们在逐个元素的基础上求解局部解。 局部右手边的计算是通过用计算值[2.x.3556]trace_values替换[2.x.3554]计算中的基函数[2.x.3554]tr_phi。 当然，现在矩阵的符号是减号，因为我们已经把所有的东西移到了方程的另一边。
//
[0.x.29505] 
[0.x.29506] 
[0.x.29507] 
[0.x.29508] 
[0.x.29509] 
[0.x.29510] 
[0.x.29511] 
[0.x.29512] 
[0.x.29513] 
[0.x.29514] 
[0.x.29515] 
[0.x.29516] 
[0.x.29517] 
[0.x.29518] 
//
// 一旦完成所有局部贡献的组装，我们必须：（1）组装全局系统；（2）计算局部贡献。(1)组装全局系统，或者(2)计算局部解值并保存。无论哪种情况，第一步都是对局部-局部矩阵进行反转。
//
[0.x.29519] 
//
// 对于(1)，我们计算舒尔补码，并将其添加到[2.x.3557] cell_matrix，介绍中的矩阵[2.x.3558]。
//
[0.x.29520] 
[0.x.29521] 
[0.x.29522] 
[0.x.29523] 
[0.x.29524] 
[0.x.29525] 
[0.x.29526] 
[0.x.29527] 
[0.x.29528] 
//
// 对于(2)，我们只是求解(ll_matrix). (solution_local) = (l_rhs)。因此，我们用[2.x.3559]乘以我们已经倒置的局部-局部矩阵，并用[2.x.3560]函数来存储结果。
//
[0.x.29529] 
[0.x.29530] 
[0.x.29531] 
[0.x.29532] 
[0.x.29533] 
[0.x.29534] 
//
// 如果我们处于解题的第一步，即[2.x.3561]，那么我们就把局部矩阵组装到全局系统中。
//
[0.x.29535] 
[0.x.29536] 
[0.x.29537] 
[0.x.29538] 
[0.x.29539] 
[0.x.29540] 
[0.x.29541] 
[0.x.29542] 
[0.x.29543] 
[0.x.29544] 
//
// [2.x.3563] 骨架解是通过使用带有身份预处理程序的BiCGStab求解器来解决的。
//
[0.x.29545] 
[0.x.29546] 
[0.x.29547] 
[0.x.29548] 
[0.x.29549] 
[0.x.29550] 
[0.x.29551] 
//
[0.x.29552] 
[0.x.29553] 
//
[0.x.29554] 
[0.x.29555] 
//
[0.x.29556] 
//
// 一旦我们求出了骨架解，我们就可以以逐个元素的方式求出局部解。 我们通过重新使用相同的[2.x.3564]函数来做到这一点，但将[2.x.3565]切换为真。
//
[0.x.29557] 
[0.x.29558] 
//
// [2.x.3566] 
//
// 后处理方法有两个目的。首先，我们要在度数为[2.x.3567]的元素空间中构造一个后处理的标量变量，我们希望它能在阶[2.x.3568]上收敛。这也是一个逐个元素的过程，只涉及标量解以及局部单元上的梯度。为了做到这一点，我们引入了已经定义好的从头开始的数据以及一些更新标志，并运行工作流来并行地完成这一工作。
//
// 第二，我们要计算离散化误差，就像我们在 [2.x.3569] 中做的那样。整个过程与调用[2.x.3570]相似，区别在于我们如何计算标量变量和梯度变量的误差。在[2.x.3571]中，我们通过计算[2.x.3572]或[2.x.3573]的贡献来做到这一点。在这里，我们有一个DoFHandler，计算了这两个贡献，并按其矢量分量排序，[2.x.3574]为梯度，[2.x.3575]为标量。为了计算它们的值，我们用一个ComponentSelectFunction来计算它们中的任何一个，再加上上面介绍的[2.x.3576]SolutionAndGradient类，它包含了它们中任何一个的分析部分。最终，我们还计算了后处理的解决方案的L2-误差，并将结果添加到收敛表中。
//
[0.x.29559] 
[0.x.29560] 
[0.x.29561] 
[0.x.29562] 
[0.x.29563] 
[0.x.29564] 
[0.x.29565] 
[0.x.29566] 
//
[0.x.29567] 
[0.x.29568] 
//
[0.x.29569] 
[0.x.29570] 
[0.x.29571] 
[0.x.29572] 
[0.x.29573] 
[0.x.29574] 
[0.x.29575] 
[0.x.29576] 
[0.x.29577] 
[0.x.29578] 
[0.x.29579] 
[0.x.29580] 
//
[0.x.29581] 
//
[0.x.29582] 
[0.x.29583] 
[0.x.29584] 
[0.x.29585] 
[0.x.29586] 
[0.x.29587] 
[0.x.29588] 
[0.x.29589] 
[0.x.29590] 
[0.x.29591] 
[0.x.29592] 
[0.x.29593] 
//
[0.x.29594] 
[0.x.29595] 
[0.x.29596] 
[0.x.29597] 
[0.x.29598] 
[0.x.29599] 
[0.x.29600] 
[0.x.29601] 
[0.x.29602] 
[0.x.29603] 
[0.x.29604] 
[0.x.29605] 
[0.x.29606] 
//
[0.x.29607] 
[0.x.29608] 
[0.x.29609] 
[0.x.29610] 
[0.x.29611] 
[0.x.29612] 
[0.x.29613] 
[0.x.29614] 
[0.x.29615] 
[0.x.29616] 
//
[0.x.29617] 
[0.x.29618] 
//
[0.x.29619] 
[0.x.29620] 
[0.x.29621] 
//
[0.x.29622] 
[0.x.29623] 
[0.x.29624] 
//
[0.x.29625] 
[0.x.29626] 
[0.x.29627] 
[0.x.29628] 
//
// [2.x.3577] 
//
// 这是为后处理所做的实际工作。根据介绍中的讨论，我们需要建立一个系统，将DG解的梯度部分投影到后处理变量的梯度上。此外，我们还需要将新的后处理变量的平均值设置为等于标量DG解在单元上的平均值。
//
// 从技术上讲，梯度的投影是一个有可能填满我们的[2.x.3578]乘以[2.x.3579]矩阵的系统，但它是单数（所有行的总和为零，因为常数函数的梯度为零）。因此，我们拿掉一行，用它来强加标量值的平均值。我们为标量部分挑选第一行，尽管我们可以为[2.x.3580]元素挑选任何一行。然而，如果我们使用FE_DGP元素，第一行将对应常数部分，删除例如最后一行将得到一个奇异系统。这样一来，我们的程序也可以用于这些元素。
//
[0.x.29629] 
[0.x.29630] 
[0.x.29631] 
[0.x.29632] 
[0.x.29633] 
[0.x.29634] 
[0.x.29635] 
[0.x.29636] 
[0.x.29637] 
[0.x.29638] 
//
[0.x.29639] 
[0.x.29640] 
//
[0.x.29641] 
[0.x.29642] 
//
[0.x.29643] 
[0.x.29644] 
//
[0.x.29645] 
[0.x.29646] 
[0.x.29647] 
[0.x.29648] 
//
[0.x.29649] 
[0.x.29650] 
[0.x.29651] 
[0.x.29652] 
[0.x.29653] 
[0.x.29654] 
[0.x.29655] 
[0.x.29656] 
[0.x.29657] 
[0.x.29658] 
[0.x.29659] 
[0.x.29660] 
//
[0.x.29661] 
[0.x.29662] 
[0.x.29663] 
[0.x.29664] 
[0.x.29665] 
[0.x.29666] 
[0.x.29667] 
[0.x.29668] 
[0.x.29669] 
[0.x.29670] 
[0.x.29671] 
[0.x.29672] 
[0.x.29673] 
[0.x.29674] 
[0.x.29675] 
[0.x.29676] 
[0.x.29677] 
[0.x.29678] 
[0.x.29679] 
//
// 集合了所有条款后，我们又可以继续解决这个线性系统。我们对矩阵进行反转，然后将反转结果乘以右手边。另一种方法（数字上更稳定）是只对矩阵进行因式分解，然后应用因式分解。
//
[0.x.29680] 
[0.x.29681] 
[0.x.29682] 
[0.x.29683] 
//
// [2.x.3581] 我们有三组我们想输出的结果：局部解决方案，后处理的局部解决方案，以及骨架解决方案。前两个结果都 "活 "在元素体积上，而后者则活在三角形的一维表面上。 我们的[2.x.3582]函数将所有的局部解决方案写入同一个vtk文件，尽管它们对应于不同的DoFHandler对象。 骨架变量的图形输出是通过使用DataOutFaces类完成的。
//
[0.x.29684] 
[0.x.29685] 
[0.x.29686] 
[0.x.29687] 
[0.x.29688] 
[0.x.29689] 
[0.x.29690] 
[0.x.29691] 
[0.x.29692] 
[0.x.29693] 
[0.x.29694] 
[0.x.29695] 
[0.x.29696] 
[0.x.29697] 
[0.x.29698] 
//
[0.x.29699] 
[0.x.29700] 
//
[0.x.29701] 
[0.x.29702] 
[0.x.29703] 
[0.x.29704] 
//
[0.x.29705] 
//
// 我们首先定义本地解决方案的名称和类型，并将数据添加到 [2.x.3583] 中。
[0.x.29706] 
[0.x.29707] 
[0.x.29708] 
[0.x.29709] 
[0.x.29710] 
[0.x.29711] 
[0.x.29712] 
[0.x.29713] 
[0.x.29714] 
[0.x.29715] 
[0.x.29716] 
//
// 我们添加的第二个数据项是后处理的解决方案。在这种情况下，它是一个属于不同DoFHandler的单一标量变量。
//
[0.x.29717] 
[0.x.29718] 
[0.x.29719] 
[0.x.29720] 
[0.x.29721] 
[0.x.29722] 
[0.x.29723] 
//
[0.x.29724] 
[0.x.29725] 
//
[0.x.29726] 
[0.x.29727] 
[0.x.29728] 
[0.x.29729] 
//
// [2.x.3584]类的工作原理与[2.x.3585]类似，后者定义了三角形骨架上的解决方案。 我们在此将其视为如此，代码与上面类似。
//
[0.x.29730] 
[0.x.29731] 
[0.x.29732] 
[0.x.29733] 
//
[0.x.29734] 
[0.x.29735] 
[0.x.29736] 
[0.x.29737] 
//
[0.x.29738] 
[0.x.29739] 
[0.x.29740] 
//[2.x.3586] 
//
// 我们为HDG实现了两种不同的细化情况，就像在[2.x.3587]中一样：adaptive_refinement和global_refinement。 global_refinement选项每次都会重新创建整个三角形。这是因为我们想使用比一个细化步骤更细的网格序列，即每个方向2、3、4、6、8、12、16...个元素。
//
// adaptive_refinement模式使用[2.x.3588]对标量局部解中的非规则区域给出一个体面的指示。
//
[0.x.29741] 
[0.x.29742] 
[0.x.29743] 
[0.x.29744] 
[0.x.29745] 
[0.x.29746] 
[0.x.29747] 
[0.x.29748] 
[0.x.29749] 
[0.x.29750] 
[0.x.29751] 
[0.x.29752] 
[0.x.29753] 
[0.x.29754] 
[0.x.29755] 
[0.x.29756] 
[0.x.29757] 
[0.x.29758] 
[0.x.29759] 
[0.x.29760] 
[0.x.29761] 
//
[0.x.29762] 
[0.x.29763] 
[0.x.29764] 
[0.x.29765] 
//
[0.x.29766] 
[0.x.29767] 
[0.x.29768] 
[0.x.29769] 
[0.x.29770] 
[0.x.29771] 
[0.x.29772] 
[0.x.29773] 
[0.x.29774] 
[0.x.29775] 
//
[0.x.29776] 
[0.x.29777] 
//
[0.x.29778] 
//
[0.x.29779] 
[0.x.29780] 
//
[0.x.29781] 
[0.x.29782] 
[0.x.29783] 
[0.x.29784] 
[0.x.29785] 
//
// 就像在[2.x.3589]中一样，我们将其中两个面的边界指标设置为1，在这里我们要指定诺伊曼边界条件而不是迪里希特条件。由于我们每次都会为全局细化重新创建三角形，所以在每个细化步骤中都会设置标志，而不仅仅是在开始时。
//
[0.x.29786] 
[0.x.29787] 
[0.x.29788] 
[0.x.29789] 
[0.x.29790] 
[0.x.29791] 
[0.x.29792] 
//[2.x.3590] 这里的功能与[2.x.3591] 基本相同。我们在10个周期中循环，在每个周期中细化网格。 在最后，收敛表被创建。
//
[0.x.29793] 
[0.x.29794] 
[0.x.29795] 
[0.x.29796] 
[0.x.29797] 
[0.x.29798] 
//
[0.x.29799] 
[0.x.29800] 
[0.x.29801] 
[0.x.29802] 
[0.x.29803] 
[0.x.29804] 
[0.x.29805] 
//
// 与[2.x.3592]相比，收敛表有一个微小的变化：由于我们没有在每个周期内以2的系数细化我们的网格（而是使用2，3，4，6，8，12，...的序列），我们需要告诉收敛率评估这一点。我们通过设置单元格数量作为参考列，并额外指定问题的维度来实现这一目的，这为单元格数量和网格大小之间的关系提供了必要的信息。
//
[0.x.29806] 
[0.x.29807] 
[0.x.29808] 
[0.x.29809] 
[0.x.29810] 
[0.x.29811] 
[0.x.29812] 
[0.x.29813] 
[0.x.29814] 
[0.x.29815] 
[0.x.29816] 
//
[0.x.29817] 
//
[0.x.29818] 
[0.x.29819] 
[0.x.29820] 
//
[0.x.29821] 
[0.x.29822] 
//
// 现在是对主类的三次调用，完全类似于 [2.x.3593] 。
//
[0.x.29823] 
[0.x.29824] 
[0.x.29825] 
[0.x.29826] 
[0.x.29827] 
[0.x.29828] 
//
[0.x.29829] 
[0.x.29830] 
//
[0.x.29831] 
[0.x.29832] 
//
[0.x.29833] 
[0.x.29834] 
[0.x.29835] 
[0.x.29836] 
//
[0.x.29837] 
[0.x.29838] 
//
[0.x.29839] 
[0.x.29840] 
//
[0.x.29841] 
[0.x.29842] 
[0.x.29843] 
[0.x.29844] 
//
[0.x.29845] 
[0.x.29846] 
//
[0.x.29847] 
[0.x.29848] 
[0.x.29849] 
[0.x.29850] 
[0.x.29851] 
[0.x.29852] 
[0.x.29853] 
[0.x.29854] 
[0.x.29855] 
[0.x.29856] 
[0.x.29857] 
[0.x.29858] 
[0.x.29859] 
[0.x.29860] 
[0.x.29861] 
[0.x.29862] 
[0.x.29863] 
[0.x.29864] 
[0.x.29865] 
[0.x.29866] 
[0.x.29867] 
[0.x.29868] 
[0.x.29869] 
[0.x.29870] 
[0.x.29871] 
[0.x.29872] 
[0.x.29873] 
[0.x.29874] 
//
[0.x.29875] 
[0.x.29876] 
[0.x.29877] 
[0.x.29878] 
[0.x.29879] 
[0.x.29880] 
[0.x.29881] 
[0.x.29882] 
[0.x.29883] 
[0.x.29884] 
[0.x.29885] 
[0.x.29886] 
[0.x.29887] 
[0.x.29888] 
[0.x.29889] 
[0.x.29890] 
//
[0.x.29891] 
[0.x.29892] 
[0.x.29893] 
//[2.x.3594] 
//
// 像往常一样，第一个任务是包括这些著名的deal.II库文件和一些C++头文件的功能。
//
[0.x.29894] 
[0.x.29895] 
[0.x.29896] 
//
[0.x.29897] 
[0.x.29898] 
[0.x.29899] 
//
[0.x.29900] 
[0.x.29901] 
//
[0.x.29902] 
[0.x.29903] 
//
[0.x.29904] 
[0.x.29905] 
//
[0.x.29906] 
[0.x.29907] 
//
[0.x.29908] 
[0.x.29909] 
[0.x.29910] 
[0.x.29911] 
//
// 这是唯一一个新的包含文件：它包括所有的Runge-Kutta方法。
//
[0.x.29912] 
//
// 接下来的步骤与之前所有的教程程序一样。我们把所有的东西放到一个自己的命名空间中，然后把deal.II的类和函数导入其中。
//
[0.x.29913] 
[0.x.29914] 
[0.x.29915] 
//[2.x.3595] 
//
// 下一块是主类的声明。这个类中的大部分函数并不新鲜，在以前的教程中已经解释过了。唯一有趣的函数是 [2.x.3596] 和 [2.x.3597] 评估扩散方程， [2.x.3598] ，在一个给定的时间和一个给定的 [2.x.3599] 。 [2.x.3600] 在给定的时间和给定的[2.x.3603]和[2.x.3604]下，评估[2.x.3601]或类似的[2.x.3602]。当使用隐式方法时，就需要这个函数。
//
[0.x.29916] 
[0.x.29917] 
[0.x.29918] 
[0.x.29919] 
//
[0.x.29920] 
//
[0.x.29921] 
[0.x.29922] 
//
[0.x.29923] 
//
[0.x.29924] 
//
[0.x.29925] 
[0.x.29926] 
//
[0.x.29927] 
[0.x.29928] 
[0.x.29929] 
//
[0.x.29930] 
[0.x.29931] 
[0.x.29932] 
//
// 接下来的三个函数分别是显式方法、隐式方法和嵌入式显式方法的驱动。嵌入显式方法的驱动函数返回执行的步数，鉴于它只接受作为参数传递的时间步数作为提示，但内部计算了最佳时间步数本身。
//
[0.x.29933] 
[0.x.29934] 
[0.x.29935] 
[0.x.29936] 
//
[0.x.29937] 
[0.x.29938] 
[0.x.29939] 
[0.x.29940] 
//
[0.x.29941] 
[0.x.29942] 
[0.x.29943] 
[0.x.29944] 
[0.x.29945] 
//
[0.x.29946] 
//
[0.x.29947] 
[0.x.29948] 
//
[0.x.29949] 
//
[0.x.29950] 
//
[0.x.29951] 
//
[0.x.29952] 
//
[0.x.29953] 
//
[0.x.29954] 
[0.x.29955] 
[0.x.29956] 
//
[0.x.29957] 
//
[0.x.29958] 
[0.x.29959] 
//
// 我们选择二次方有限元，并初始化参数。
//
[0.x.29960] 
[0.x.29961] 
[0.x.29962] 
[0.x.29963] 
[0.x.29964] 
[0.x.29965] 
[0.x.29966] 

// 现在，我们创建约束矩阵和稀疏模式。然后，我们初始化这些矩阵和求解向量。
//
[0.x.29967] 
[0.x.29968] 
[0.x.29969] 
//
[0.x.29970] 
[0.x.29971] 
[0.x.29972] 
[0.x.29973] 
[0.x.29974] 
//
[0.x.29975] 
[0.x.29976] 
[0.x.29977] 
//
[0.x.29978] 
[0.x.29979] 
[0.x.29980] 
[0.x.29981] 
[0.x.29982] 
//
// [2.x.3606] 在这个函数中，我们计算 [2.x.3607] 和质量矩阵 [2.x.3608] 。然后使用直接求解器对质量矩阵进行反演；然后[2.x.3609]变量将存储质量矩阵的反值，这样[2.x.3610]就可以使用该对象的[2.x.3611]函数应用于一个矢量。在内部，UMFPACK并没有真正存储矩阵的逆，而是存储它的LU因子；应用矩阵的逆相当于用这两个因子做一次正解和一次逆解，这与应用矩阵的显式逆具有相同的复杂性）。
//
[0.x.29983] 
[0.x.29984] 
[0.x.29985] 
[0.x.29986] 
//
[0.x.29987] 
//
[0.x.29988] 
[0.x.29989] 
[0.x.29990] 
//
[0.x.29991] 
[0.x.29992] 
//
[0.x.29993] 
[0.x.29994] 
//
[0.x.29995] 
//
[0.x.29996] 
[0.x.29997] 
[0.x.29998] 
[0.x.29999] 
//
[0.x.30000] 
//
[0.x.30001] 
[0.x.30002] 
[0.x.30003] 
[0.x.30004] 
[0.x.30005] 
[0.x.30006] 
[0.x.30007] 
[0.x.30008] 
[0.x.30009] 
[0.x.30010] 
[0.x.30011] 
[0.x.30012] 
[0.x.30013] 
[0.x.30014] 
[0.x.30015] 
[0.x.30016] 
//
[0.x.30017] 
//
[0.x.30018] 
[0.x.30019] 
[0.x.30020] 
[0.x.30021] 
[0.x.30022] 
[0.x.30023] 
[0.x.30024] 
//
[0.x.30025] 
[0.x.30026] 
//
// [2.x.3612] 
//
// 在这个函数中，计算出特定时间和特定点的方程的源项。
//
[0.x.30027] 
[0.x.30028] 
[0.x.30029] 
[0.x.30030] 
[0.x.30031] 
[0.x.30032] 
//
[0.x.30033] 
[0.x.30034] 
[0.x.30035] 
[0.x.30036] 
[0.x.30037] 
[0.x.30038] 
//
// [2.x.3613] 
//
// 接下来，我们在给定的时间 [2.x.3614] 和给定的矢量 [2.x.3615] 评价扩散方程的弱形式。换句话说，正如介绍中所述，我们评估 [2.x.3616] 。为此，我们必须将矩阵[2.x.3617]（之前计算并存储在变量[2.x.3618]中）应用于[2.x.3619]，然后添加源项，我们像通常那样进行积分。(如果你想节省几行代码，或者想利用并行积分的优势，可以用[2.x.3620]来进行积分。) 然后将结果乘以[2.x.3621] 。
//
[0.x.30039] 
[0.x.30040] 
[0.x.30041] 
[0.x.30042] 
[0.x.30043] 
[0.x.30044] 
//
[0.x.30045] 
//
[0.x.30046] 
[0.x.30047] 
[0.x.30048] 
[0.x.30049] 
//
[0.x.30050] 
[0.x.30051] 
//
[0.x.30052] 
//
[0.x.30053] 
//
[0.x.30054] 
[0.x.30055] 
[0.x.30056] 
//
[0.x.30057] 
//
[0.x.30058] 
[0.x.30059] 
[0.x.30060] 
[0.x.30061] 
[0.x.30062] 
[0.x.30063] 
[0.x.30064] 
[0.x.30065] 
[0.x.30066] 
//
[0.x.30067] 
//
[0.x.30068] 
[0.x.30069] 
[0.x.30070] 
[0.x.30071] 
//
[0.x.30072] 
[0.x.30073] 
//
[0.x.30074] 
[0.x.30075] 
//[2.x.3622] 
//
// 我们计算 [2.x.3623] 。这要分几个步骤进行。 
//
// - 计算 [2.x.3624] 。  
//
// - 反转矩阵，得到 [2.x.3625] 。  
//
// --计算[2.x.3626]。  
//
// --计算[2.x.3627]。  
//
// - 返回z。
//
[0.x.30076] 
[0.x.30077] 
[0.x.30078] 
[0.x.30079] 
[0.x.30080] 
//
[0.x.30081] 
[0.x.30082] 
//
[0.x.30083] 
//
[0.x.30084] 
[0.x.30085] 
//
[0.x.30086] 
[0.x.30087] 
//
[0.x.30088] 
[0.x.30089] 
//
// [2.x.3628] 
//
// 下面的函数将解决方案以vtu文件的形式输出，并以时间步长和时间步长方法的名称为索引。当然，所有时间步长方法的（精确）结果应该是一样的，但这里的输出至少可以让我们对它们进行比较。
//
[0.x.30090] 
[0.x.30091] 
[0.x.30092] 
[0.x.30093] 
[0.x.30094] 
//
[0.x.30095] 
[0.x.30096] 
[0.x.30097] 
[0.x.30098] 
[0.x.30099] 
[0.x.30100] 
[0.x.30101] 
[0.x.30102] 
[0.x.30103] 
[0.x.30104] 
[0.x.30105] 
[0.x.30106] 
[0.x.30107] 
[0.x.30108] 
[0.x.30109] 
[0.x.30110] 
[0.x.30111] 
[0.x.30112] 
[0.x.30113] 
[0.x.30114] 
[0.x.30115] 
[0.x.30116] 
[0.x.30117] 
[0.x.30118] 
[0.x.30119] 
[0.x.30120] 
[0.x.30121] 
[0.x.30122] 
[0.x.30123] 
[0.x.30124] 
[0.x.30125] 
[0.x.30126] 
[0.x.30127] 
[0.x.30128] 
[0.x.30129] 
[0.x.30130] 
[0.x.30131] 
[0.x.30132] 
[0.x.30133] 
[0.x.30134] 
[0.x.30135] 
[0.x.30136] 
[0.x.30137] 
[0.x.30138] 
[0.x.30139] 
[0.x.30140] 
[0.x.30141] 
[0.x.30142] 
[0.x.30143] 
[0.x.30144] 
[0.x.30145] 
[0.x.30146] 
[0.x.30147] 
[0.x.30148] 
[0.x.30149] 
[0.x.30150] 
[0.x.30151] 
[0.x.30152] 
[0.x.30153] 
[0.x.30154] 
[0.x.30155] 
[0.x.30156] 
//
[0.x.30157] 
//
[0.x.30158] 
[0.x.30159] 
//
[0.x.30160] 
//
[0.x.30161] 
//
[0.x.30162] 
[0.x.30163] 
[0.x.30164] 
[0.x.30165] 
[0.x.30166] 
//
[0.x.30167] 
//
[0.x.30168] 
[0.x.30169] 
[0.x.30170] 
[0.x.30171] 
[0.x.30172] 
[0.x.30173] 
[0.x.30174] 
[0.x.30175] 
[0.x.30176] 
[0.x.30177] 
[0.x.30178] 
[0.x.30179] 
//[2.x.3629] 
//
// 这个函数是所有显式方法的驱动。在顶部，它初始化了时间步长和解决方案（通过将其设置为零，然后确保边界值和悬挂节点约束得到尊重；当然，对于我们在这里使用的网格，悬挂节点约束实际上不是一个问题）。然后调用[2.x.3630]，执行一个时间步骤。时间是通过DiscreteTime对象来存储和增加的。
//
// 对于显式方法，[2.x.3631]需要评估[2.x.3632]，也就是说，它需要[2.x.3633] 。因为[2.x.3634]是一个成员函数，它需要被绑定到[2.x.3635]。在每个进化步骤之后，我们再次应用正确的边界值和悬挂节点约束。
//
// 最后，每隔10个时间步骤就会输出解决方案。
//
[0.x.30180] 
[0.x.30181] 
[0.x.30182] 
[0.x.30183] 
[0.x.30184] 
[0.x.30185] 
[0.x.30186] 
//
[0.x.30187] 
[0.x.30188] 
//
[0.x.30189] 
[0.x.30190] 
[0.x.30191] 
[0.x.30192] 
[0.x.30193] 
[0.x.30194] 
[0.x.30195] 
[0.x.30196] 
[0.x.30197] 
[0.x.30198] 
[0.x.30199] 
[0.x.30200] 
[0.x.30201] 
[0.x.30202] 
//
[0.x.30203] 
//
[0.x.30204] 
[0.x.30205] 
[0.x.30206] 
[0.x.30207] 
[0.x.30208] 
[0.x.30209] 
//
// [2.x.3636] 这个函数等同于[2.x.3637]，但用于隐式方法。当使用隐式方法时，我们需要评估[2.x.3638]和[2.x.3639]，为此我们使用之前介绍的两个成员函数。
//
[0.x.30210] 
[0.x.30211] 
[0.x.30212] 
[0.x.30213] 
[0.x.30214] 
[0.x.30215] 
[0.x.30216] 
//
[0.x.30217] 
[0.x.30218] 
//
[0.x.30219] 
[0.x.30220] 
[0.x.30221] 
[0.x.30222] 
[0.x.30223] 
[0.x.30224] 
[0.x.30225] 
[0.x.30226] 
[0.x.30227] 
[0.x.30228] 
[0.x.30229] 
[0.x.30230] 
[0.x.30231] 
[0.x.30232] 
[0.x.30233] 
[0.x.30234] 
[0.x.30235] 
//
[0.x.30236] 
//
[0.x.30237] 
[0.x.30238] 
[0.x.30239] 
[0.x.30240] 
[0.x.30241] 
[0.x.30242] 
//
// [2.x.3640] 这个函数是嵌入式显式方法的驱动。它需要更多的参数。 
//
// - coarsen_param：当误差低于阈值时，乘以当前时间步长的系数。 
//
// - refine_param: 当误差高于阈值时，乘以当前时间步长的系数。 
//
// - min_delta: 可接受的最小时间步长。 
//
// - max_delta: 可接受的最大时间步长。 
//
// - refine_tol：时间步长超过的阈值。 
//
// - coarsen_tol：阈值，低于该阈值的时间步长将被粗化。
//
// 嵌入方法使用一个猜测的时间步长。如果使用这个时间步长的误差太大，时间步长将被缩小。如果误差低于阈值，则在下一个时间步长时将尝试更大的时间步长。 [2.x.3641]是由嵌入式方法产生的猜测的时间步长。总之，时间步长有可能以三种方式修改。 
//
// - 在[2.x.3642]内减少或增加时间步长。  
//
// - 使用计算出的 [2.x.3643] 。 
//
// - 自动调整最后一个时间步长，以确保模拟在 [2.x.3644] 处精确结束。这种调整是在DiscreteTime实例中处理的。
//
[0.x.30243] 
[0.x.30244] 
[0.x.30245] 
[0.x.30246] 
[0.x.30247] 
[0.x.30248] 
[0.x.30249] 
[0.x.30250] 
[0.x.30251] 
[0.x.30252] 
[0.x.30253] 
[0.x.30254] 
[0.x.30255] 
[0.x.30256] 
//
[0.x.30257] 
[0.x.30258] 
//
[0.x.30259] 
[0.x.30260] 
[0.x.30261] 
[0.x.30262] 
[0.x.30263] 
[0.x.30264] 
[0.x.30265] 
[0.x.30266] 
[0.x.30267] 
[0.x.30268] 
[0.x.30269] 
[0.x.30270] 
[0.x.30271] 
[0.x.30272] 
[0.x.30273] 
[0.x.30274] 
[0.x.30275] 
[0.x.30276] 
[0.x.30277] 
[0.x.30278] 
[0.x.30279] 
[0.x.30280] 
//
[0.x.30281] 
//
[0.x.30282] 
[0.x.30283] 
[0.x.30284] 
[0.x.30285] 
//
[0.x.30286] 
[0.x.30287] 
[0.x.30288] 
//
[0.x.30289] 
[0.x.30290] 
//
// [2.x.3645] 
//
// 下面是该程序的主要功能。在顶部，我们创建网格（一个[0,5]x[0,5]的正方形）并对其进行四次细化，得到一个有16乘16单元的网格，共256个。 然后我们将边界指示器设置为1，用于边界中[2.x.3646]和[2.x.3647]的部分。
//
[0.x.30291] 
[0.x.30292] 
[0.x.30293] 
[0.x.30294] 
//
[0.x.30295] 
[0.x.30296] 
[0.x.30297] 
[0.x.30298] 
[0.x.30299] 
[0.x.30300] 
[0.x.30301] 
[0.x.30302] 
[0.x.30303] 
//
// 接下来，我们设置线性系统并为其填充内容，以便在整个时间步进过程中使用它们。
//
[0.x.30304] 
//
[0.x.30305] 
//
// 最后，我们使用命名空间TimeStepping中实现的几种Runge-Kutta方法来解决扩散问题，每次都会在结束时输出误差。(正如介绍中所解释的，由于精确解在最后时间为零，所以误差等于数值解，只需取解向量的[2.x.3648]准则即可计算出来。)
//
[0.x.30306] 
[0.x.30307] 
[0.x.30308] 
[0.x.30309] 
//
[0.x.30310] 
[0.x.30311] 
[0.x.30312] 
[0.x.30313] 
[0.x.30314] 
[0.x.30315] 
[0.x.30316] 
//
[0.x.30317] 
[0.x.30318] 
[0.x.30319] 
[0.x.30320] 
[0.x.30321] 
[0.x.30322] 
//
[0.x.30323] 
[0.x.30324] 
[0.x.30325] 
[0.x.30326] 
[0.x.30327] 
[0.x.30328] 
[0.x.30329] 
//
[0.x.30330] 
[0.x.30331] 
[0.x.30332] 
[0.x.30333] 
[0.x.30334] 
[0.x.30335] 
[0.x.30336] 
//
[0.x.30337] 
[0.x.30338] 
[0.x.30339] 
[0.x.30340] 
[0.x.30341] 
[0.x.30342] 
//
[0.x.30343] 
[0.x.30344] 
[0.x.30345] 
[0.x.30346] 
[0.x.30347] 
[0.x.30348] 
//
[0.x.30349] 
[0.x.30350] 
[0.x.30351] 
[0.x.30352] 
[0.x.30353] 
[0.x.30354] 
[0.x.30355] 
//
[0.x.30356] 
[0.x.30357] 
[0.x.30358] 
[0.x.30359] 
[0.x.30360] 
[0.x.30361] 
[0.x.30362] 
[0.x.30363] 
//
[0.x.30364] 
[0.x.30365] 
[0.x.30366] 
[0.x.30367] 
[0.x.30368] 
[0.x.30369] 
[0.x.30370] 
//
[0.x.30371] 
[0.x.30372] 
[0.x.30373] 
[0.x.30374] 
[0.x.30375] 
[0.x.30376] 
[0.x.30377] 
//
[0.x.30378] 
[0.x.30379] 
[0.x.30380] 
[0.x.30381] 
[0.x.30382] 
[0.x.30383] 
[0.x.30384] 
//
[0.x.30385] 
[0.x.30386] 
[0.x.30387] 
[0.x.30388] 
[0.x.30389] 
[0.x.30390] 
[0.x.30391] 
[0.x.30392] 
[0.x.30393] 
//
// [2.x.3649] 
//
// 下面的[2.x.3650]函数与前面的例子类似，不需要注释。
//
[0.x.30394] 
[0.x.30395] 
[0.x.30396] 
[0.x.30397] 
[0.x.30398] 
[0.x.30399] 
[0.x.30400] 
[0.x.30401] 
[0.x.30402] 
[0.x.30403] 
[0.x.30404] 
[0.x.30405] 
[0.x.30406] 
[0.x.30407] 
[0.x.30408] 
[0.x.30409] 
[0.x.30410] 
[0.x.30411] 
[0.x.30412] 
[0.x.30413] 
[0.x.30414] 
[0.x.30415] 
[0.x.30416] 
[0.x.30417] 
[0.x.30418] 
[0.x.30419] 
[0.x.30420] 
[0.x.30421] 
[0.x.30422] 
[0.x.30423] 
[0.x.30424] 
[0.x.30425] 
//
[0.x.30426] 
[0.x.30427] 
[0.x.30428] 
[0.x.30429] 
[0.x.30430] 
[0.x.30431] 
[0.x.30432] 
[0.x.30433] 
[0.x.30434] 
[0.x.30435] 
[0.x.30436] 
[0.x.30437] 
[0.x.30438] 
[0.x.30439] 
[0.x.30440] 
[0.x.30441] 
//
[0.x.30442] 
[0.x.30443] 
[0.x.30444] 
[0.x.30445] 
[0.x.30446] 
//
// 让我们从这里需要的包含文件开始。显然，我们需要描述三角形的文件（ [2.x.3651] ），以及允许我们创建和输出三角形的文件（ [2.x.3652] 和 [2.x.3653] ）。此外，我们需要声明Manifold和ChartManifold类的头文件，我们将需要这些类来描述几何体（[2.x.3654]）。然后我们还需要以下头文件中的[2.x.3655]函数；这个函数的用途将在我们使用它时讨论。
//
[0.x.30447] 
[0.x.30448] 
[0.x.30449] 
[0.x.30450] 
[0.x.30451] 
//
// 其余的包含文件与读取地形数据有关。正如介绍中所解释的，我们将从一个文件中读取它，然后使用下面头文件中第一个声明的[2.x.3656] 类。因为数据很大，所以我们读取的文件是以gzip压缩数据的形式存储的，我们利用BOOST提供的一些功能来直接读取gzipped数据。
//
[0.x.30452] 
//
[0.x.30453] 
[0.x.30454] 
[0.x.30455] 
//
[0.x.30456] 
[0.x.30457] 
[0.x.30458] 
//
// 上事的最后部分是打开一个命名空间，把所有东西都放进去，然后把dealii命名空间导入其中。
//
[0.x.30459] 
[0.x.30460] 
[0.x.30461] 
//[2.x.3657] 
//
// 这个程序的第一个重要部分是描述地形[2.x.3658]作为经度和纬度的函数的类。正如在介绍中所讨论的那样，我们在这里将使我们的生活更容易一些，不以最普遍的方式来写这个类，而是只为我们在这里感兴趣的特定目的来写：插值从一个非常具体的数据文件中获得的数据，该文件包含了关于世界上一个特定地区的信息，我们知道该地区的范围。
//
// 该类的总体布局已经在上面讨论过了。下面是它的声明，包括我们在初始化[2.x.3659]成员变量时需要的三个静态成员函数。
//
[0.x.30462] 
[0.x.30463] 
[0.x.30464] 
[0.x.30465] 
//
[0.x.30466] 
//
[0.x.30467] 
[0.x.30468] 
//
[0.x.30469] 
[0.x.30470] 
//
// 让我们来看看这个类的实现。该类的有趣部分是构造函数和[2.x.3660]函数。前者初始化了[2.x.3661]成员变量，我们将使用这个构造函数，它要求我们传入我们要插值的二维数据集的端点（这里由区间[2.x.3662]给出）。 ]，使用介绍中讨论的切换端点的技巧，和[2.x.3663]，都是以度数给出的），数据被分割成的区间数（纬度方向379，经度方向219，总共[2.x.3664]个数据点），和一个包含数据的表对象。然后，数据的大小当然是[2.x.3665]，我们通过提供一个迭代器给下面[2.x.3666]函数返回的[2.x.3667]对象的83,600个元素中的第一个来初始化它。注意，我们在这里调用的所有成员函数都是静态的，因为(i)它们不访问类的任何成员变量，(ii)因为它们是在对象没有完全初始化的时候调用的。
//
[0.x.30471] 
[0.x.30472] 
[0.x.30473] 
[0.x.30474] 
[0.x.30475] 
[0.x.30476] 
//
[0.x.30477] 
[0.x.30478] 
[0.x.30479] 
[0.x.30480] 
[0.x.30481] 
//
// 唯一一个更有意义的函数是[2.x.3668]函数。它返回一个临时向量，其中包含描述高度的所有83600个数据点，并从文件[2.x.3669]中读取。因为文件被gzip压缩了，所以我们不能直接通过类型为[2.x.3670]的对象来读取它，但在BOOST库中有一些方便的方法（见http:www.boost.org），允许我们从压缩的文件中读取，而不用先在磁盘上解压缩。其结果是，基本上，只是另一个输入流，就所有的实际目的而言，看起来就像我们一直使用的那些输入流。
//
// 当读取数据时，我们读取三列数据，但忽略了前两列。最后一列的数据被附加到一个数组中，我们返回的数组将被复制到[2.x.3671]的表中，并被初始化。由于BOOST.iostreams库在输入文件不存在、不可读或不包含正确的数据行数时没有提供非常有用的异常，我们捕捉它可能产生的所有异常并创建我们自己的异常。为此，在[2.x.3672]子句中，我们让程序运行到一个[2.x.3673]语句中。由于条件总是假的，这总是会触发一个异常。换句话说，这相当于写了[2.x.3674]，但它也填补了异常对象中的某些字段，这些字段以后会被打印在屏幕上，识别出发生异常的函数、文件和行。
//
[0.x.30482] 
[0.x.30483] 
[0.x.30484] 
//
// 创建一个流，我们从gzipped数据中读取
//
[0.x.30485] 
[0.x.30486] 
[0.x.30487] 
//
[0.x.30488] 
[0.x.30489] 
[0.x.30490] 
[0.x.30491] 
[0.x.30492] 
[0.x.30493] 
//
[0.x.30494] 
[0.x.30495] 
[0.x.30496] 
[0.x.30497] 
[0.x.30498] 
[0.x.30499] 
[0.x.30500] 
[0.x.30501] 
[0.x.30502] 
//
[0.x.30503] 
[0.x.30504] 
//[2.x.3675] 
//
// 下面的类是本程序的主类。它的结构已经在介绍中详细描述过了，不需要再多做介绍。
//
[0.x.30505] 
[0.x.30506] 
[0.x.30507] 
[0.x.30508] 
//
[0.x.30509] 
//
[0.x.30510] 
//
[0.x.30511] 
[0.x.30512] 
[0.x.30513] 
//
[0.x.30514] 
//
[0.x.30515] 
[0.x.30516] 
//
[0.x.30517] 
[0.x.30518] 
[0.x.30519] 
//
[0.x.30520] 
[0.x.30521] 
//
// 如果你读过介绍，实现起来也是非常简单的。特别是，回拉和前推函数都只是WGS 84和地形图映射各自函数的串联。
//
[0.x.30522] 
[0.x.30523] 
[0.x.30524] 
[0.x.30525] 
//
[0.x.30526] 
[0.x.30527] 
[0.x.30528] 
[0.x.30529] 
//
// 下一个函数是Manifold基类的接口所要求的，它允许克隆AfricaGeometry类。注意，虽然该函数返回一个 [2.x.3676] 我们在内部创建了一个 `unique_ptr<AfricaGeometry>`。换句话说，这个库需要一个指向基类的指针，我们通过创建一个指向派生类的指针来提供这个指针。
//
[0.x.30530] 
[0.x.30531] 
[0.x.30532] 
[0.x.30533] 
//
// 下面的两个函数就定义了对应于地球WGS84参考形状的正向和反向变换。正向变换遵循介绍中所示的公式。反变换要复杂得多，至少不是直观的。它还存在一个问题，即它返回一个角度，在函数结束时，如果它应该从那里逃出来，我们需要将其夹回区间[2.x.3677]。
//
[0.x.30534] 
[0.x.30535] 
[0.x.30536] 
[0.x.30537] 
[0.x.30538] 
//
[0.x.30539] 
[0.x.30540] 
//
[0.x.30541] 
[0.x.30542] 
[0.x.30543] 
[0.x.30544] 
//
[0.x.30545] 
[0.x.30546] 
[0.x.30547] 
[0.x.30548] 
[0.x.30549] 
[0.x.30550] 
[0.x.30551] 
[0.x.30552] 
[0.x.30553] 
[0.x.30554] 
[0.x.30555] 
[0.x.30556] 
[0.x.30557] 
[0.x.30558] 
[0.x.30559] 
//
[0.x.30560] 
[0.x.30561] 
[0.x.30562] 
[0.x.30563] 
[0.x.30564] 
[0.x.30565] 
[0.x.30566] 
[0.x.30567] 
[0.x.30568] 
[0.x.30569] 
[0.x.30570] 
//
// 与此相反，地形变换完全按照介绍中的描述进行。因此，没有什么可以补充的。
//
[0.x.30571] 
[0.x.30572] 
[0.x.30573] 
[0.x.30574] 
[0.x.30575] 
[0.x.30576] 
[0.x.30577] 
[0.x.30578] 
//
[0.x.30579] 
[0.x.30580] 
[0.x.30581] 
[0.x.30582] 
[0.x.30583] 
[0.x.30584] 
[0.x.30585] 
//[2.x.3678] 
//
// 在描述了几何体的属性之后，现在是处理用于离散它的网格的时候了。为此，我们为几何体和三角形创建对象，然后继续创建一个与参考域[2.x.3679]相对应的[2.x.3680]矩形网格。我们选择这个数目的细分，因为它导致了单元格大致上像立方体，而不是在某个方向上被拉伸。
//
// 当然，我们实际上对参考域的网格划分不感兴趣。我们感兴趣的是对真实域的网格划分。因此，我们将使用[2.x.3681]函数，它只是根据一个给定的变换来移动三角形的每个点。它想要的变换函数是一个将参考域中的一个点作为其单一参数的函数，并返回我们想要映射到的域中的相应位置。当然，这正是我们使用的几何学的前推函数。我们用一个lambda函数来包装它，以获得转换所需的那种函数对象。
//
[0.x.30586] 
[0.x.30587] 
[0.x.30588] 
[0.x.30589] 
//
[0.x.30590] 
[0.x.30591] 
[0.x.30592] 
[0.x.30593] 
[0.x.30594] 
[0.x.30595] 
[0.x.30596] 
[0.x.30597] 
[0.x.30598] 
[0.x.30599] 
//
[0.x.30600] 
[0.x.30601] 
[0.x.30602] 
[0.x.30603] 
[0.x.30604] 
[0.x.30605] 
//
// 下一步是向三角计算说明，在细化网格时，每当需要一个新的点时，都要使用我们的几何对象。我们通过告诉三角计算对所有流形指示器为零的物体使用我们的几何体，然后继续用流形指示器为零标记所有单元及其边界面和边。这确保了三角计算在每次需要新的顶点时都会参考我们的几何对象。由于流形指标是由母体继承给子体的，这也会在几个递归细化步骤之后发生。
//
[0.x.30606] 
[0.x.30607] 
[0.x.30608] 
//
// 最后一步是在最初的[2.x.3682]粗略网格之外细化该网格。我们可以在全局范围内细化若干次，但由于本教程程序的目的，我们实际上只对靠近表面的情况感兴趣，所以我们只是对所有在边界上有一个指标为5的面的单元进行6次细化。在我们上面使用的[2.x.3683]函数的文档中查找，发现边界指标5对应于域的顶面（这就是上面调用[2.x.3685]的最后一个[2.x.3684]参数的含义：通过给每个边界分配一个独特的边界指标来给边界 "着色"）。
//
[0.x.30609] 
[0.x.30610] 
[0.x.30611] 
[0.x.30612] 
[0.x.30613] 
[0.x.30614] 
[0.x.30615] 
[0.x.30616] 
[0.x.30617] 
[0.x.30618] 
//
[0.x.30619] 
[0.x.30620] 
[0.x.30621] 
[0.x.30622] 
[0.x.30623] 
//
// 做完这一切，我们现在可以将网格输出到一个自己的文件中。
//
[0.x.30624] 
[0.x.30625] 
[0.x.30626] 
[0.x.30627] 
[0.x.30628] 
[0.x.30629] 
//
// [2.x.3686] 
//
// 最后是主函数，它采用了从 [2.x.3687] 开始的所有教程程序中使用的相同方案。这里没有什么可做的，只需要调用单一的 [2.x.3688] 函数。
//
[0.x.30630] 
[0.x.30631] 
[0.x.30632] 
[0.x.30633] 
[0.x.30634] 
[0.x.30635] 
[0.x.30636] 
[0.x.30637] 
[0.x.30638] 
[0.x.30639] 
[0.x.30640] 
[0.x.30641] 
[0.x.30642] 
[0.x.30643] 
[0.x.30644] 
[0.x.30645] 
[0.x.30646] 
//
[0.x.30647] 
[0.x.30648] 
[0.x.30649] 
[0.x.30650] 
[0.x.30651] 
[0.x.30652] 
[0.x.30653] 
[0.x.30654] 
[0.x.30655] 
[0.x.30656] 
[0.x.30657] 
[0.x.30658] 
[0.x.30659] 
[0.x.30660] 
[0.x.30661] 
[0.x.30662] 
[0.x.30663] 
[0.x.30664] 
[0.x.30665] 
[0.x.30666] 
[0.x.30667] 
[0.x.30668] 
[0.x.30669] 
[0.x.30670] 
[0.x.30671] 
[0.x.30672] 
[0.x.30673] 
[0.x.30674] 
[0.x.30675] 
[0.x.30676] 
[0.x.30677] 
//[2.x.3689] 
//
// 我们首先包括一堆我们将在程序的各个部分使用的文件。它们中的大多数已经在以前的教程中讨论过了。
//
[0.x.30678] 
[0.x.30679] 
[0.x.30680] 
[0.x.30681] 
[0.x.30682] 
[0.x.30683] 
//
// 这些是opencascade支持类和函数的头文件。注意，只有当你在编译deal.II库时支持OpenCASCADE，即在deal.II配置过程中调用[2.x.3690]和[2.x.3691]时，这些将包含合理的数据。
//
[0.x.30684] 
[0.x.30685] 
//
// 最后，几个C++标准头文件
//
[0.x.30686] 
[0.x.30687] 
[0.x.30688] 
[0.x.30689] 
//
// 我们将程序的其他部分隔离在自己的命名空间中
//
[0.x.30690] 
[0.x.30691] 
[0.x.30692] 
//
// [2.x.3693] 
//
// 这是主类。它真正做的是存储输入和输出文件的名称，以及一个三角图。然后，它提供了一个函数，可以从一个粗略的网格中生成这样一个三角形，使用介绍中所讨论的策略之一，并在类的顶部的枚举类型中列出。
//
// 这个类的成员函数与你在其他大多数教程程序中可以找到的类似，都是在模拟的网格设置阶段。
//
[0.x.30693] 
[0.x.30694] 
[0.x.30695] 
[0.x.30696] 
[0.x.30697] 
[0.x.30698] 
[0.x.30699] 
[0.x.30700] 
[0.x.30701] 
//
[0.x.30702] 
[0.x.30703] 
[0.x.30704] 
[0.x.30705] 
[0.x.30706] 
//
[0.x.30707] 
//
[0.x.30708] 
[0.x.30709] 
//
[0.x.30710] 
//
[0.x.30711] 
//
[0.x.30712] 
//
[0.x.30713] 
[0.x.30714] 
[0.x.30715] 
//
[0.x.30716] 
[0.x.30717] 
//[2.x.3694] 
//
// TriangulationOnCAD类的构造函数非常简单。输入参数是输入和输出文件名的字符串，以及决定在网格细化循环中使用哪种曲面投影仪的枚举类型（详见下文）。
//
[0.x.30718] 
[0.x.30719] 
[0.x.30720] 
[0.x.30721] 
[0.x.30722] 
[0.x.30723] 
[0.x.30724] 
[0.x.30725] 
[0.x.30726] 
[0.x.30727] 
//[2.x.3695] 
//
// 下面的函数代表了这个程序的核心。 在这个函数中，我们导入CAD形状，在此基础上生成并完善我们的三角测量。我们假设CAD曲面包含在[2.x.3696]文件中（我们在输入目录中提供了一个名为 "input/DTMB-5415_bulbous_bow.iges "的IGES文件例子，它代表了一艘船的球形船头）。几个凸和凹的高曲率区域的存在使得我们提供的几何体成为一个特别有意义的例子。
//
// 在导入船首表面后，我们提取了一些构成它的曲线和曲面，并使用它们来生成一组投影仪。这些投影仪定义了三角法在细化单元时必须遵循的规则，以定位每个新节点。
//
// 为了初始化Triangulation，就像在以前的教程中一样，我们导入一个以VTK格式保存的现有网格。在这里我们假设用户已经在外部生成了一个粗略的网格，与IGES的几何图形相匹配。在编写本教程的时候，deal.II库并不自动支持生成这样的网格，但是有一些工具可以从CAD文件开始为你提供合理的初始网格。在我们的例子中，导入的网格是由一个四边形单元组成的，其顶点被放置在CAD形状上。
//
// 在导入IGES几何体和初始网格后，我们将之前讨论过的投影仪分配给每个需要在CAD表面上进行细化的边和单元。
//
// 在本教程中，我们将测试介绍中所描述的三种不同的CAD表面投影器，并将分析每一种投影器所得到的结果。 如前所述，这些投影策略中的每一种都是在不同的类中实现的，这些类型的对象可以用[2.x.3697]的方法分配给一个三角形。
//然后，
//下面的函数首先导入给定的CAD文件。函数的参数是一个包含所需文件名的字符串，以及一个比例因子。在这个例子中，比例因子被设置为1e-3，因为原始几何体是以毫米为单位的（这是大多数IGES文件的典型计量单位），而我们更喜欢以米为单位工作。 该函数的输出是一个OpenCASCADE通用拓扑形状类的对象，即一个[2.x.3698]。
[0.x.30728] 
[0.x.30729] 
[0.x.30730] 
//
// 每个CAD几何对象都被定义了一个公差，它表示其位置可能的不精确性。例如，顶点的公差[2.x.3699]表示它可以位于以标称位置为中心，半径为[2.x.3700]的球体中的任何一点。
//
// 下面的方法是提取给定形状的公差，并使其变大一些以避免麻烦。
//
[0.x.30731] 
//
// 我们现在要从通用形状中提取一组复合子形状。特别是，CAD文件的每个面都是由类型为[2.x.3701]的修剪曲线组成的，它是构成曲面边界的[2.x.3702]的集合，以及曲面本身的NURBS描述。我们将使用线型投影仪将我们的三角形的边界与划定曲面的线联系起来。 为了提取所有的复合子形状，如线、壳或实体，我们求助于OpenCASCADE命名空间的一种方法。 [2.x.3703]的输入是一个形状和一组空的[2.x.3704]子形状，它将被填入在给定拓扑形状中发现的所有复合形状。
//
[0.x.30732] 
[0.x.30733] 
[0.x.30734] 
[0.x.30735] 
[0.x.30736] 
//
[0.x.30737] 
[0.x.30738] 
//
// 接下来的几个步骤比较熟悉，允许我们从外部VTK文件中导入一个现有的网格，并将其转换为一个交易三角图。
//
[0.x.30739] 
//
[0.x.30740] 
//
[0.x.30741] 
[0.x.30742] 
[0.x.30743] 
//
// 我们输出这个初始网格，将其保存为细化步骤0。
//
[0.x.30744] 
//
// 导入的网格有一个位于三维空间中的单一的二维单元。我们现在要确保它是根据上面导入的CAD几何图形进行细化的。为此，我们得到一个单元的迭代器，并给它分配manifold_id 1（见 [2.x.3705] "这个词汇表条目"）。我们还得到了一个指向其四个面的迭代器，并为每个面分配了manifold_id 2。
//
[0.x.30745] 
[0.x.30746] 
//
[0.x.30747] 
[0.x.30748] 
//
// 一旦CAD几何体和初始网格都被导入和消化，我们就用CAD的曲面和曲线来定义投影仪，并将它们分配给刚才指定的流形ID。
//
// 使用我们的CAD文件中的单线来定义第一个投影仪。 ArclengthProjectionLineManifold将确保位于导线上的每条网格边缘都被细化为一个位于导线上的点，并将其分割为两个位于边缘顶点之间的相等弧线。我们首先检查线的向量是否至少包含一个元素，然后为它创建一个Manifold对象。
//
// 一旦投影仪被创建，我们就把它分配给三角形的所有部分，manifold_id = 2。
//
[0.x.30749] 
[0.x.30750] 
[0.x.30751] 
[0.x.30752] 
//
[0.x.30753] 
[0.x.30754] 
//
[0.x.30755] 
//
// 根据构造函数的[2.x.3706]选项所指定的内容来创建表面投影仪。特别是，如果surface_projection_kind的值等于[2.x.3707]，我们选择[2.x.3708]，那么新的网格点最初将在所考虑的单元格/边的arycenter处生成，然后沿其法线方向投影到CAD表面。 NormalProjectionManifold构造函数只需要一个形状和一个公差，然后我们把它分配给三角结构，用于所有具有id 1的流形的部分。
//
[0.x.30756] 
[0.x.30757] 
[0.x.30758] 
[0.x.30759] 
[0.x.30760] 
[0.x.30761] 
[0.x.30762] 
//
[0.x.30763] 
[0.x.30764] 
//[2.x.3709] surface_projection_kind值为[2.x.3710] 我们选择[2.x.3711]类。新的网格点将在所考虑的单元格/边的arycenter处初始生成，然后沿着[2.x.3712]构造函数指定的方向投影到CAD表面上。在这个例子中，投影是沿着Y轴进行的。
//
[0.x.30765] 
[0.x.30766] 
[0.x.30767] 
[0.x.30768] 
[0.x.30769] 
[0.x.30770] 
[0.x.30771] 
//
[0.x.30772] 
[0.x.30773] 
//
// 作为第三个选项，如果[2.x.3713]的值是[2.x.3714]，我们选择[2.x.3715] 新的网格点将再次在所考虑的单元/边的arycenter处初始生成，然后沿着一个估计为网格法线方向的方向投影到CAD表面。[2.x.3716] 构造函数只需要一个形状（至少包含一个面）和一个公差。
//
[0.x.30774] 
[0.x.30775] 
[0.x.30776] 
[0.x.30777] 
[0.x.30778] 
//
[0.x.30779] 
[0.x.30780] 
//
// 最后，我们使用良好的软件清洁性，确保这真的涵盖了[2.x.3717]语句的所有可能选项。如果我们得到任何其他的值，我们就直接中止程序。
//
[0.x.30781] 
[0.x.30782] 
[0.x.30783] 
[0.x.30784] 
//[2.x.3718] 
//
// 这个函数是全局细化网格的。在其他教程中，它通常也会分配自由度，并调整矩阵和向量的大小。这里没有进行这些工作，因为我们没有在生成的三角形上运行任何模拟。
//
// 虽然这个函数看起来很简单，但这是我们对这个教程程序感兴趣的大部分工作的实际发生地点。特别是，在完善定义船体表面的四边形和直线时，Triangulation类将询问我们分配给处理单个流形ID的各种对象，以确定新顶点的位置。
//
[0.x.30785] 
[0.x.30786] 
[0.x.30787] 
[0.x.30788] 
//
// [2.x.3719] 
//
// 输出我们的计算结果是一个相当机械的任务。这个函数的所有组成部分之前已经讨论过了。
//
[0.x.30789] 
[0.x.30790] 
[0.x.30791] 
[0.x.30792] 
[0.x.30793] 
[0.x.30794] 
[0.x.30795] 
[0.x.30796] 
//[2.x.3720] 
//
// 这是主函数。它应该是不言自明的。
//
[0.x.30797] 
[0.x.30798] 
[0.x.30799] 
//
[0.x.30800] 
[0.x.30801] 
[0.x.30802] 
[0.x.30803] 
[0.x.30804] 
[0.x.30805] 
[0.x.30806] 
[0.x.30807] 
//[2.x.3721] 
//
// 这是本程序的主要功能。它的基本结构与之前所有的教程程序一样，但通过新顶点放置的三种可能性来运行主类。
//
[0.x.30808] 
[0.x.30809] 
[0.x.30810] 
[0.x.30811] 
[0.x.30812] 
//
[0.x.30813] 
[0.x.30814] 
//
[0.x.30815] 
[0.x.30816] 
[0.x.30817] 
[0.x.30818] 
[0.x.30819] 
[0.x.30820] 
[0.x.30821] 
[0.x.30822] 
[0.x.30823] 
[0.x.30824] 
[0.x.30825] 
[0.x.30826] 
[0.x.30827] 
[0.x.30828]
[0.x.30829] 
[0.x.30830] 
//
[0.x.30831] 
[0.x.30832] 
[0.x.30833] 
[0.x.30834] 
[0.x.30835] 
[0.x.30836] 
[0.x.30837] 
[0.x.30838] 
[0.x.30839] 
[0.x.30840] 
[0.x.30841]  
[0.x.30842]  
[0.x.30843]  
[0.x.30844] 
[0.x.30845] 
[0.x.30846] 
//
[0.x.30847] 
[0.x.30848] 
[0.x.30849] 
[0.x.30850] 
[0.x.30851] 
[0.x.30852] 
[0.x.30853] 
[0.x.30854] 
[0.x.30855] 
[0.x.30856] 
[0.x.30857] 
[0.x.30858] 
[0.x.30859] 
[0.x.30860] 
[0.x.30861] 
[0.x.30862] 
[0.x.30863] 
[0.x.30864] 
[0.x.30865] 
[0.x.30866] 
[0.x.30867] 
[0.x.30868] 
[0.x.30869] 
[0.x.30870] 
[0.x.30871] 
[0.x.30872] 
[0.x.30873] 
[0.x.30874] 
[0.x.30875] 
//
[0.x.30876] 
[0.x.30877] 
[0.x.30878] 
[0.x.30879] 
[0.x.30880] 
[0.x.30881] 
[0.x.30882] 
[0.x.30883] 
[0.x.30884] 
[0.x.30885] 
[0.x.30886] 
[0.x.30887] 
[0.x.30888] 
[0.x.30889] 
//
[0.x.30890] 
[0.x.30891] 
[0.x.30892] 
[0.x.30893] 
[0.x.30894] 
[0.x.30895] 
[0.x.30896] 
[0.x.30897] 
[0.x.30898] 
[0.x.30899] 
[0.x.30900] 
[0.x.30901] 
[0.x.30902] 
[0.x.30903] 
[0.x.30904] 
[0.x.30905] 
//
[0.x.30906] 
[0.x.30907] 
[0.x.30908] 
//
[0.x.30909] 
[0.x.30910] 
[0.x.30911] 
//
// 下面这块出场代码与[2.x.3722]相同，可以在PETSc和Trilinos之间切换。
//
[0.x.30912] 
//
[0.x.30913] 
//
[0.x.30914] 
[0.x.30915] 
[0.x.30916] 
[0.x.30917] 
[0.x.30918] 
[0.x.30919] 
[0.x.30920] 
[0.x.30921] 
[0.x.30922] 
[0.x.30923] 
[0.x.30924] 
[0.x.30925] 
//
[0.x.30926] 
[0.x.30927] 
[0.x.30928] 
[0.x.30929] 
[0.x.30930] 
[0.x.30931] 
[0.x.30932] 
//
[0.x.30933] 
[0.x.30934] 
[0.x.30935] 
[0.x.30936] 
//
[0.x.30937] 
[0.x.30938] 
[0.x.30939] 
[0.x.30940] 
[0.x.30941] 
[0.x.30942] 
[0.x.30943] 
[0.x.30944] 
[0.x.30945] 
[0.x.30946] 
[0.x.30947] 
[0.x.30948] 
//
[0.x.30949] 
[0.x.30950] 
[0.x.30951] 
[0.x.30952] 
[0.x.30953] 
[0.x.30954] 
//
[0.x.30955] 
[0.x.30956] 
[0.x.30957] 
//
[0.x.30958] 
[0.x.30959] 
[0.x.30960] 
//[2.x.3723] 
//
// 我们需要一些辅助类来表示我们在介绍中描述的求解器策略。
//
[0.x.30961] 
[0.x.30962] 
//
// 这个类暴露了通过函数[2.x.3724]应用给定矩阵的逆的动作，在内部，逆不是显式形成的。相反，一个带有CG的线性求解器被执行。这个类扩展了[2.x.3725]中的InverseMatrix类，增加了一个指定预处理程序的选项，并允许在vmult函数中使用不同的矢量类型。
//
[0.x.30963] 
[0.x.30964] 
[0.x.30965] 
[0.x.30966] 
[0.x.30967] 
//
[0.x.30968] 
[0.x.30969] 
//
[0.x.30970] 
[0.x.30971] 
[0.x.30972] 
[0.x.30973] 
//
[0.x.30974] 
[0.x.30975] 
[0.x.30976] 
[0.x.30977] 
[0.x.30978] 
[0.x.30979] 
[0.x.30980] 
//
[0.x.30981] 
[0.x.30982] 
[0.x.30983] 
[0.x.30984] 
[0.x.30985] 
[0.x.30986] 
[0.x.30987] 
[0.x.30988] 
[0.x.30989] 
//
[0.x.30990] 
[0.x.30991] 
[0.x.30992] 
[0.x.30993] 
[0.x.30994] 
[0.x.30995] 
[0.x.30996] 
[0.x.30997] 
[0.x.30998] 
//
// 该类是一个简单的2x2矩阵的块状对角线预处理器的模板类。
//
[0.x.30999] 
[0.x.31000] 
[0.x.31001] 
[0.x.31002] 
[0.x.31003] 
[0.x.31004] 
//
[0.x.31005] 
[0.x.31006] 
//
[0.x.31007] 
[0.x.31008] 
[0.x.31009] 
[0.x.31010] 
//
[0.x.31011] 
[0.x.31012] 
[0.x.31013] 
[0.x.31014] 
[0.x.31015] 
[0.x.31016] 
[0.x.31017] 
//
[0.x.31018] 
[0.x.31019] 
[0.x.31020] 
[0.x.31021] 
[0.x.31022] 
[0.x.31023] 
[0.x.31024] 
[0.x.31025] 
//
 
//[2.x.3726] 
//
// 下面的类代表测试问题的右手边和精确解。
//
[0.x.31027] 
[0.x.31028] 
[0.x.31029] 
[0.x.31030] 
[0.x.31031] 
[0.x.31032] 
[0.x.31033] 
//
[0.x.31034] 
[0.x.31035] 
[0.x.31036] 
//
[0.x.31037] 
[0.x.31038] 
[0.x.31039] 
[0.x.31040] 
[0.x.31041] 
[0.x.31042] 
//
[0.x.31043] 
[0.x.31044] 
[0.x.31045] 
[0.x.31046] 
[0.x.31047] 
[0.x.31048] 
[0.x.31049] 
[0.x.31050] 
[0.x.31051] 
[0.x.31052] 
[0.x.31053] 
[0.x.31054] 
[0.x.31055] 
[0.x.31056] 
[0.x.31057] 
//
[0.x.31058] 
[0.x.31059] 
[0.x.31060] 
[0.x.31061] 
[0.x.31062] 
[0.x.31063] 
[0.x.31064] 
//
[0.x.31065] 
[0.x.31066] 
[0.x.31067] 
//
[0.x.31068] 
[0.x.31069] 
[0.x.31070] 
[0.x.31071] 
[0.x.31072] 
[0.x.31073] 
//
[0.x.31074] 
[0.x.31075] 
[0.x.31076] 
[0.x.31077] 
[0.x.31078] 
[0.x.31079] 
[0.x.31080] 
[0.x.31081] 
[0.x.31082] 
[0.x.31083] 
[0.x.31084] 
[0.x.31085] 
[0.x.31086] 
[0.x.31087] 
[0.x.31088] 
[0.x.31089] 
[0.x.31090] 
[0.x.31091] 
[0.x.31092] 
[0.x.31093] 
[0.x.31094] 
[0.x.31095] 
//
// [2.x.3727] 
//
// 主类与 [2.x.3728] 非常相似，只是矩阵和向量现在是块状的，而且我们为拥有的和相关的DoF存储一个 [2.x.3729] ，而不是一个IndexSet。我们正好有两个IndexSets，一个用于所有速度未知数，一个用于所有压力未知数。
//
[0.x.31096] 
[0.x.31097] 
[0.x.31098] 
[0.x.31099] 
[0.x.31100] 
//
[0.x.31101] 
//
[0.x.31102] 
[0.x.31103] 
[0.x.31104] 
[0.x.31105] 
[0.x.31106] 
[0.x.31107] 
[0.x.31108] 
//
[0.x.31109] 
[0.x.31110] 
[0.x.31111] 
//
[0.x.31112] 
[0.x.31113] 
[0.x.31114] 
//
[0.x.31115] 
[0.x.31116] 
//
[0.x.31117] 
//
[0.x.31118] 
[0.x.31119] 
[0.x.31120] 
[0.x.31121] 
//
[0.x.31122] 
[0.x.31123] 
[0.x.31124] 
//
[0.x.31125] 
[0.x.31126] 
[0.x.31127] 
[0.x.31128] 
[0.x.31129] 
[0.x.31130] 
[0.x.31131] 
[0.x.31132] 
[0.x.31133] 
[0.x.31134] 
[0.x.31135] 
[0.x.31136] 
[0.x.31137] 
[0.x.31138] 
[0.x.31139] 
[0.x.31140] 
[0.x.31141] 
[0.x.31142] 
//
// Kovasnay流定义在域[-0.5, 1.5]^2上，我们通过将最小和最大值传递给[2.x.3730]来创建这个域。
[0.x.31143] 
[0.x.31144] 
[0.x.31145] 
[0.x.31146] 
[0.x.31147] 
[0.x.31148] 
//[2.x.3731] 
//
// 与[2.x.3732]相比，块矩阵和向量的构造是新的，与[2.x.3733]这样的串行代码相比也是不同的，因为我们需要提供属于我们处理器的行的集合。
//
[0.x.31149] 
[0.x.31150] 
[0.x.31151] 
[0.x.31152] 
//
[0.x.31153] 
//
// 将所有的昏暗速度放入0区块，压力放入1区块，然后按区块重新排列未知数。最后计算每块有多少个未知数。
//
[0.x.31154] 
[0.x.31155] 
[0.x.31156] 
//
[0.x.31157] 
[0.x.31158] 
//
[0.x.31159] 
[0.x.31160] 
//
[0.x.31161] 
[0.x.31162] 
//
// 我们根据我们想要创建块状矩阵和向量的方式，将本地拥有的和本地相关的DoF的IndexSet分割成两个IndexSets。
//
[0.x.31163] 
[0.x.31164] 
[0.x.31165] 
[0.x.31166] 
//
[0.x.31167] 
[0.x.31168] 
[0.x.31169] 
[0.x.31170] 
[0.x.31171] 
//
// 设置边界条件和悬挂节点的约束与 [2.x.3734] 相同。尽管我们没有任何悬空节点，因为我们只进行全局细化，但把这个函数调用放进去仍然是个好主意，以备以后引入自适应细化。
//
[0.x.31172] 
[0.x.31173] 
//
[0.x.31174] 
[0.x.31175] 
[0.x.31176] 
[0.x.31177] 
[0.x.31178] 
[0.x.31179] 
[0.x.31180] 
[0.x.31181] 
[0.x.31182] 
//
// 现在我们根据BlockDynamicSparsityPattern来创建系统矩阵。我们知道我们不会有不同速度分量之间的耦合（因为我们使用的是拉普拉斯而不是变形张量），也不会有压力与其测试函数之间的耦合，所以我们使用一个表来将这个耦合信息传达给 [2.x.3735] 。
[0.x.31183] 
[0.x.31184] 
//
[0.x.31185] 
[0.x.31186] 
[0.x.31187] 
[0.x.31188] 
[0.x.31189] 
[0.x.31190] 
[0.x.31191] 
[0.x.31192] 
[0.x.31193] 
//
[0.x.31194] 
//
[0.x.31195] 
[0.x.31196] 
//
[0.x.31197] 
[0.x.31198] 
[0.x.31199] 
[0.x.31200] 
[0.x.31201] 
//
[0.x.31202] 
[0.x.31203] 
//
// 先决条件矩阵有不同的耦合（我们只在1,1块中填入质量矩阵），否则这段代码与上面的system_matrix的构造是相同的。
//
[0.x.31204] 
[0.x.31205] 
//
[0.x.31206] 
[0.x.31207] 
[0.x.31208] 
[0.x.31209] 
[0.x.31210] 
[0.x.31211] 
[0.x.31212] 
//
[0.x.31213] 
//
[0.x.31214] 
[0.x.31215] 
[0.x.31216] 
[0.x.31217] 
[0.x.31218] 
[0.x.31219] 
[0.x.31220] 
[0.x.31221] 
[0.x.31222] 
//
// owned_partitioning。
//
[0.x.31223] 
[0.x.31224] 
[0.x.31225] 
//
// 最后，我们以正确的尺寸构建块状向量。带有两个[2.x.3736]的函数调用将创建一个重影向量。
//
[0.x.31226] 
[0.x.31227] 
[0.x.31228] 
[0.x.31229] 
[0.x.31230] 
//
// [2.x.3737] 
//
// 这个函数将系统矩阵、预处理矩阵和右手边集合起来。其代码非常标准。
//
[0.x.31231] 
[0.x.31232] 
[0.x.31233] 
[0.x.31234] 
//
[0.x.31235] 
[0.x.31236] 
[0.x.31237] 
//
[0.x.31238] 
//
[0.x.31239] 
[0.x.31240] 
[0.x.31241] 
[0.x.31242] 
//
[0.x.31243] 
[0.x.31244] 
//
[0.x.31245] 
[0.x.31246] 
[0.x.31247] 
//
[0.x.31248] 
[0.x.31249] 
//
[0.x.31250] 
[0.x.31251] 
[0.x.31252] 
//
[0.x.31253] 
[0.x.31254] 
[0.x.31255] 
//
[0.x.31256] 
[0.x.31257] 
[0.x.31258] 
[0.x.31259] 
[0.x.31260] 
[0.x.31261] 
//
[0.x.31262] 
[0.x.31263] 
[0.x.31264] 
[0.x.31265] 
[0.x.31266] 
[0.x.31267] 
[0.x.31268] 
[0.x.31269] 
[0.x.31270] 
[0.x.31271] 
[0.x.31272] 
//
[0.x.31273] 
[0.x.31274] 
[0.x.31275] 
[0.x.31276] 
[0.x.31277] 
[0.x.31278] 
[0.x.31279] 
[0.x.31280] 
[0.x.31281] 
//
[0.x.31282] 
[0.x.31283] 
[0.x.31284] 
//
[0.x.31285] 
[0.x.31286] 
[0.x.31287] 
[0.x.31288] 
[0.x.31289] 
[0.x.31290] 
//
[0.x.31291] 
[0.x.31292] 
[0.x.31293] 
[0.x.31294] 
[0.x.31295] 
[0.x.31296] 
//
[0.x.31297] 
[0.x.31298] 
[0.x.31299] 
[0.x.31300] 
//
[0.x.31301] 
[0.x.31302] 
[0.x.31303] 
[0.x.31304] 
//
// [2.x.3738] 
//
// 这个函数用MINRES求解线性系统，如介绍中所述，对两个对角线块使用块状对角线预处理和AMG。预处理程序对0,0块应用v循环，对1,1块应用质量矩阵的CG（Schur补充）。
//
[0.x.31305] 
[0.x.31306] 
[0.x.31307] 
[0.x.31308] 
//
[0.x.31309] 
[0.x.31310] 
[0.x.31311] 
//
[0.x.31312] 
[0.x.31313] 
[0.x.31314] 
[0.x.31315] 
[0.x.31316] 
//
[0.x.31317] 
[0.x.31318] 
[0.x.31319] 
//
[0.x.31320] 
[0.x.31321] 
[0.x.31322] 
[0.x.31323] 
[0.x.31324] 
//
// InverseMatrix用于解决质量矩阵的问题。
//
[0.x.31325] 
[0.x.31326] 
[0.x.31327] 
//
// 这是在上面定义的各个块的预处理的基础上构造的块预处理。
//
[0.x.31328] 
[0.x.31329] 
[0.x.31330] 
//
// 有了这些，我们终于可以设置线性求解器并求解该系统。
//
[0.x.31331] 
[0.x.31332] 
//
[0.x.31333] 
//
[0.x.31334] 
[0.x.31335] 
//
[0.x.31336] 
//
[0.x.31337] 
[0.x.31338] 
[0.x.31339] 
[0.x.31340] 
//
[0.x.31341] 
[0.x.31342] 
//
[0.x.31343] 
//
// 像在 [2.x.3739] 中一样，我们减去平均压力，以便与我们的参考解决方案进行误差计算，该解决方案的平均值为零。
//
[0.x.31344] 
[0.x.31345] 
[0.x.31346] 
[0.x.31347] 
[0.x.31348] 
[0.x.31349] 
[0.x.31350] 
[0.x.31351] 
[0.x.31352] 
//
// [2.x.3740] 
//
// 其余处理网格细化、输出和主循环的代码非常标准。
//
[0.x.31353] 
[0.x.31354] 
[0.x.31355] 
[0.x.31356] 
//
[0.x.31357] 
[0.x.31358] 
//
[0.x.31359] 
[0.x.31360] 
[0.x.31361] 
[0.x.31362] 
[0.x.31363] 
[0.x.31364] 
[0.x.31365] 
//
[0.x.31366] 
[0.x.31367] 
//
[0.x.31368] 
[0.x.31369] 
[0.x.31370] 
[0.x.31371] 
[0.x.31372] 
[0.x.31373] 
[0.x.31374] 
//
[0.x.31375] 
[0.x.31376] 
[0.x.31377] 
[0.x.31378] 
//
[0.x.31379] 
[0.x.31380] 
[0.x.31381] 
[0.x.31382] 
[0.x.31383] 
[0.x.31384] 
[0.x.31385] 
//
[0.x.31386] 
[0.x.31387] 
[0.x.31388] 
[0.x.31389] 
//
[0.x.31390] 
[0.x.31391] 
[0.x.31392] 
//
[0.x.31393] 
[0.x.31394] 
[0.x.31395] 
[0.x.31396] 
[0.x.31397] 
[0.x.31398] 
[0.x.31399] 
//
[0.x.31400] 
[0.x.31401] 
[0.x.31402] 
[0.x.31403] 
[0.x.31404] 
[0.x.31405] 
//
[0.x.31406] 
[0.x.31407] 
[0.x.31408] 
//
[0.x.31409] 
[0.x.31410] 
[0.x.31411] 
[0.x.31412] 
[0.x.31413] 
[0.x.31414] 
[0.x.31415] 
[0.x.31416] 
[0.x.31417] 
[0.x.31418] 
[0.x.31419] 
[0.x.31420] 
//
[0.x.31421] 
[0.x.31422] 
[0.x.31423] 
[0.x.31424] 
//
[0.x.31425] 
//
[0.x.31426] 
[0.x.31427] 
[0.x.31428] 
//
[0.x.31429] 
[0.x.31430] 
[0.x.31431] 
[0.x.31432] 
[0.x.31433] 
[0.x.31434] 
[0.x.31435] 
[0.x.31436] 
[0.x.31437] 
[0.x.31438] 
[0.x.31439] 
[0.x.31440] 
//
[0.x.31441] 
[0.x.31442] 
[0.x.31443] 
[0.x.31444] 
//
[0.x.31445] 
//
[0.x.31446] 
[0.x.31447] 
//
[0.x.31448] 
[0.x.31449] 
[0.x.31450] 
[0.x.31451] 
[0.x.31452] 
//
[0.x.31453] 
[0.x.31454] 
//
[0.x.31455] 
[0.x.31456] 
[0.x.31457] 
[0.x.31458] 
//
[0.x.31459] 
[0.x.31460] 
[0.x.31461] 
[0.x.31462] 
[0.x.31463] 
[0.x.31464] 
//
[0.x.31465] 
//
[0.x.31466] 
[0.x.31467] 
[0.x.31468] 
[0.x.31469] 
[0.x.31470] 
[0.x.31471] 
[0.x.31472] 
[0.x.31473] 
[0.x.31474] 
[0.x.31475] 
[0.x.31476] 
[0.x.31477] 
[0.x.31478] 
[0.x.31479] 
//
[0.x.31480] 
[0.x.31481] 
[0.x.31482] 
[0.x.31483] 
[0.x.31484] 
[0.x.31485] 
[0.x.31486] 
[0.x.31487] 
[0.x.31488] 
[0.x.31489] 
[0.x.31490] 
[0.x.31491] 
[0.x.31492] 
[0.x.31493] 
//
[0.x.31494] 
[0.x.31495] 
[0.x.31496] 
[0.x.31497] 
[0.x.31498] 
[0.x.31499] 
[0.x.31500] 
[0.x.31501] 
[0.x.31502] 
[0.x.31503] 
[0.x.31504] 
[0.x.31505] 
[0.x.31506] 
[0.x.31507] 
[0.x.31508] 
[0.x.31509] 
//
[0.x.31510] 
[0.x.31511] 
[0.x.31512] 
//[2.x.3741] 
[0.x.31513] 
[0.x.31514] 
[0.x.31515] 
[0.x.31516] 
//
[0.x.31517] 
[0.x.31518] 
[0.x.31519] 
[0.x.31520] 
[0.x.31521] 
[0.x.31522] 
[0.x.31523] 
[0.x.31524] 
[0.x.31525] 
//
[0.x.31526] 
[0.x.31527] 
[0.x.31528] 
[0.x.31529] 
//
[0.x.31530] 
[0.x.31531] 
[0.x.31532] 
//
[0.x.31533] 
[0.x.31534] 
[0.x.31535] 
//
[0.x.31536] 
[0.x.31537] 
[0.x.31538] 
[0.x.31539] 
//
[0.x.31540] 
//
[0.x.31541] 
[0.x.31542] 
//
// 我们需要包括以下文件来做计时。
//
[0.x.31543] 
//
// 这包括我们使用几何多网格所需的文件
//
[0.x.31544] 
[0.x.31545] 
[0.x.31546] 
[0.x.31547] 
[0.x.31548] 
[0.x.31549] 
//
[0.x.31550] 
[0.x.31551] 
//
[0.x.31552] 
[0.x.31553] 
[0.x.31554] 
//
// 为了便于在所使用的不同求解器之间进行切换，我们声明了一个枚举，可以作为参数传递给主类的构造函数。
//
[0.x.31555] 
[0.x.31556] 
[0.x.31557] 
[0.x.31558] 
[0.x.31559] 
[0.x.31560] 
//[2.x.3742] 
//
//Solution类用于定义边界条件和计算数值解的误差。请注意，我们需要定义数值和梯度，以便计算L2和H1误差。在这里，我们决定使用模板的特殊化来分离2D和3D的实现。
//
// 请注意，前几个分量是速度分量，最后一个分量是压力。
//
[0.x.31561] 
[0.x.31562] 
[0.x.31563] 
[0.x.31564] 
[0.x.31565] 
[0.x.31566] 
[0.x.31567] 
[0.x.31568] 
[0.x.31569] 
[0.x.31570] 
[0.x.31571] 
[0.x.31572] 
[0.x.31573] 
//
[0.x.31574] 
[0.x.31575] 
[0.x.31576] 
[0.x.31577] 
[0.x.31578] 
//
[0.x.31579] 
[0.x.31580] 
[0.x.31581] 
//
[0.x.31582] 
[0.x.31583] 
[0.x.31584] 
[0.x.31585] 
[0.x.31586] 
[0.x.31587] 
//
[0.x.31588] 
[0.x.31589] 
//
[0.x.31590] 
[0.x.31591] 
[0.x.31592] 
[0.x.31593] 
[0.x.31594] 
//
[0.x.31595] 
[0.x.31596] 
[0.x.31597] 
[0.x.31598] 
//
[0.x.31599] 
[0.x.31600] 
[0.x.31601] 
[0.x.31602] 
[0.x.31603] 
[0.x.31604] 
[0.x.31605] 
[0.x.31606] 
//
[0.x.31607] 
[0.x.31608] 
//
// 注意，对于梯度，我们需要返回一个Tensor<1,dim>。
//
[0.x.31609] 
[0.x.31610] 
[0.x.31611] 
[0.x.31612] 
[0.x.31613] 
//
[0.x.31614] 
[0.x.31615] 
[0.x.31616] 
//
[0.x.31617] 
[0.x.31618] 
[0.x.31619] 
[0.x.31620] 
[0.x.31621] 
[0.x.31622] 
[0.x.31623] 
[0.x.31624] 
[0.x.31625] 
[0.x.31626] 
[0.x.31627] 
[0.x.31628] 
[0.x.31629] 
[0.x.31630] 
[0.x.31631] 
[0.x.31632] 
//
[0.x.31633] 
[0.x.31634] 
//
[0.x.31635] 
[0.x.31636] 
[0.x.31637] 
[0.x.31638] 
[0.x.31639] 
//
[0.x.31640] 
[0.x.31641] 
[0.x.31642] 
[0.x.31643] 
//
[0.x.31644] 
[0.x.31645] 
[0.x.31646] 
[0.x.31647] 
[0.x.31648] 
[0.x.31649] 
[0.x.31650] 
[0.x.31651] 
[0.x.31652] 
[0.x.31653] 
[0.x.31654] 
[0.x.31655] 
[0.x.31656] 
[0.x.31657] 
[0.x.31658] 
[0.x.31659] 
[0.x.31660] 
[0.x.31661] 
[0.x.31662] 
[0.x.31663] 
[0.x.31664] 
[0.x.31665] 
[0.x.31666] 
[0.x.31667] 
[0.x.31668] 
//
[0.x.31669] 
[0.x.31670] 
//
// 实现 [2.x.3743] 。更多信息请参见介绍。
//
[0.x.31671] 
[0.x.31672] 
[0.x.31673] 
[0.x.31674] 
[0.x.31675] 
[0.x.31676] 
[0.x.31677] 
//
[0.x.31678] 
[0.x.31679] 
[0.x.31680] 
//
[0.x.31681] 
[0.x.31682] 
[0.x.31683] 
[0.x.31684] 
[0.x.31685] 
//
[0.x.31686] 
[0.x.31687] 
[0.x.31688] 
[0.x.31689] 
[0.x.31690] 
[0.x.31691] 
[0.x.31692] 
[0.x.31693] 
[0.x.31694] 
//
[0.x.31695] 
[0.x.31696] 
//
[0.x.31697] 
[0.x.31698] 
[0.x.31699] 
[0.x.31700] 
[0.x.31701] 
//
[0.x.31702] 
[0.x.31703] 
[0.x.31704] 
[0.x.31705] 
[0.x.31706] 
[0.x.31707] 
[0.x.31708] 
[0.x.31709] 
[0.x.31710] 
[0.x.31711] 
[0.x.31712] 
[0.x.31713] 
[0.x.31714] 
[0.x.31715] 
[0.x.31716] 
//
[0.x.31717] 
[0.x.31718] 
//
// [2.x.3744] 
//
// 在下文中，我们将实现一个预处理程序，它扩展了 [2.x.3745] 的结果部分所讨论的想法。具体来说，我们1.使用一个上块三角的预处理器，因为我们想使用右预处理。2.可选择允许对速度块使用内部求解器，而不是使用单一的预处理程序。3.不使用InverseMatrix，而是明确地调用SolverCG。这种方法也用于ASPECT代码（见https:aspect.geodynamics.org），该代码在模拟地幔对流的背景下求解斯托克斯方程，该代码已被用于解决成千上万个处理器上的问题。
//
//构造函数中的bool标志[2.x.3746]允许我们对速度块应用一次预处理，或者使用内部迭代求解器来代替更精确的近似。
//
// 注意我们是如何跟踪内部迭代的总和（预处理程序的应用）的。
//
[0.x.31719] 
[0.x.31720] 
[0.x.31721] 
[0.x.31722] 
[0.x.31723] 
[0.x.31724] 
[0.x.31725] 
[0.x.31726] 
[0.x.31727] 
 
//
[0.x.31729] 
//
[0.x.31730] 
[0.x.31731] 
//
[0.x.31732] 
[0.x.31733] 
[0.x.31734] 
[0.x.31735] 
[0.x.31736] 
//
[0.x.31737] 
[0.x.31738] 
//
[0.x.31739] 
[0.x.31740] 
[0.x.31741] 
[0.x.31742] 
[0.x.31743] 
[0.x.31744] 
[0.x.31745] 
[0.x.31746] 
[0.x.31747]  
[0.x.31748] 
[0.x.31749] 
[0.x.31750] 
[0.x.31751] 
[0.x.31752] 
[0.x.31753] 
[0.x.31754] 
//
[0.x.31755] 
[0.x.31756] 
[0.x.31757] 
[0.x.31758] 
[0.x.31759] 
[0.x.31760] 
[0.x.31761] 
//
// 首先用S的近似值求解
//
[0.x.31762] 
[0.x.31763] 
[0.x.31764] 
//
[0.x.31765] 
[0.x.31766] 
[0.x.31767] 
[0.x.31768] 
[0.x.31769] 
//
[0.x.31770] 
[0.x.31771] 
[0.x.31772] 
//
// 第二，应用右上方的块（B^T
//
[0.x.31773] 
[0.x.31774] 
[0.x.31775] 
[0.x.31776] 
[0.x.31777] 
//
// 最后，要么用左上角的块求解，要么只应用一个预设条件器扫频
//
[0.x.31778] 
[0.x.31779] 
[0.x.31780] 
[0.x.31781] 
//
[0.x.31782] 
[0.x.31783] 
[0.x.31784] 
[0.x.31785] 
[0.x.31786] 
//
[0.x.31787] 
[0.x.31788] 
[0.x.31789] 
[0.x.31790] 
[0.x.31791] 
[0.x.31792] 
[0.x.31793] 
[0.x.31794] 
//[2.x.3747] 
//
// 这是该问题的主类。
//
[0.x.31795] 
[0.x.31796] 
[0.x.31797] 
[0.x.31798] 
[0.x.31799] 
[0.x.31800] 
[0.x.31801] 
//
[0.x.31802] 
[0.x.31803] 
[0.x.31804] 
[0.x.31805] 
[0.x.31806] 
[0.x.31807] 
[0.x.31808] 
//
[0.x.31809] 
[0.x.31810] 
//
[0.x.31811] 
[0.x.31812] 
[0.x.31813] 
[0.x.31814] 
[0.x.31815] 
//
[0.x.31816] 
//
[0.x.31817] 
[0.x.31818] 
[0.x.31819] 
//
[0.x.31820] 
[0.x.31821] 
//
[0.x.31822] 
[0.x.31823] 
[0.x.31824] 
[0.x.31825] 
//
[0.x.31826] 
[0.x.31827] 
//
[0.x.31828] 
[0.x.31829] 
[0.x.31830] 
//
[0.x.31831] 
[0.x.31832] 
[0.x.31833] 
[0.x.31834] 
//
// 仅为速度的有限元。
//
[0.x.31835] 
[0.x.31836] 
//
// 整个系统的有限元。
//
[0.x.31837] 
[0.x.31838] 
[0.x.31839] 
[0.x.31840] 
[0.x.31841] 
//
// [2.x.3748] 
//
// 这个函数设置了DoFHandler、矩阵、向量和Multigrid结构（如果需要）。
//
[0.x.31842] 
[0.x.31843] 
[0.x.31844] 
[0.x.31845] 
//
[0.x.31846] 
[0.x.31847] 
//
// 主DoFHandler只需要活动的DoF，所以我们不在这里调用distribution_mg_dofs()
//
[0.x.31848] 
//
// 这个块结构将dim速度分量与压力分量（用于重新排序）分开。注意，我们有2个而不是像[2.x.3749]中的dim+1块，因为我们的FESystem是嵌套的，dim速度分量作为一个块出现。
//
[0.x.31849] 
[0.x.31850] 
[0.x.31851] 
//
// 速度从组件0开始。
//
[0.x.31852] 
//
如果我们应用重新排序来减少填充，//ILU的表现会更好。对于其他求解器来说，这样做并没有什么好处。
//
[0.x.31853] 
[0.x.31854] 
[0.x.31855] 
[0.x.31856] 
[0.x.31857] 
//
// 这确保了所有的速度DoFs在压力未知数之前被列举出来。这允许我们使用块来处理向量和矩阵，并允许我们为dof_handler和velocity_dof_handler获得相同的DoF编号。
//
[0.x.31858] 
//
[0.x.31859] 
[0.x.31860] 
[0.x.31861] 
[0.x.31862] 
[0.x.31863] 
[0.x.31864] 
//
// 这将在一个单独的DoFHandler中分配速度空间的主动道夫和多网格道夫，如介绍中所述。
//
[0.x.31865] 
[0.x.31866] 
//
// 下面的代码块初始化了MGConstrainedDofs（使用速度的边界条件），以及每个层次的稀疏模式和矩阵。MGLevelObject<T>的resize()函数将破坏所有现有的包含对象。
//
[0.x.31867] 
[0.x.31868] 
//
[0.x.31869] 
[0.x.31870] 
[0.x.31871] 
[0.x.31872] 
[0.x.31873] 
//
[0.x.31874] 
[0.x.31875] 
[0.x.31876] 
//
[0.x.31877] 
[0.x.31878] 
[0.x.31879] 
[0.x.31880] 
[0.x.31881] 
[0.x.31882] 
//
[0.x.31883] 
[0.x.31884] 
[0.x.31885] 
[0.x.31886] 
//
[0.x.31887] 
[0.x.31888] 
[0.x.31889] 
[0.x.31890] 
//
[0.x.31891] 
[0.x.31892] 
//
// 下面利用分量掩码对速度的边界值进行插值，这在矢量值dealii [2.x.3750]教程中进一步说明。
//
[0.x.31893] 
[0.x.31894] 
[0.x.31895] 
[0.x.31896] 
[0.x.31897] 
[0.x.31898] 
//
// 正如在介绍中所讨论的，我们需要固定压力变量的一个自由度以确保问题的可解性。在这里，我们将第一个压力自由度标记为受限自由度，该自由度的索引为n_u。
//
[0.x.31899] 
[0.x.31900] 
//
[0.x.31901] 
[0.x.31902] 
//
[0.x.31903] 
[0.x.31904] 
[0.x.31905] 
[0.x.31906] 
//
[0.x.31907] 
[0.x.31908] 
[0.x.31909] 
[0.x.31910] 
[0.x.31911] 
[0.x.31912] 
//
[0.x.31913] 
[0.x.31914] 
[0.x.31915] 
//[2.x.3751] 
//
// 在这个函数中，系统矩阵被组装起来。我们在(1,1)块中组装压力质量矩阵（如果需要），并在此函数结束时将其移出此位置。
//
[0.x.31916] 
[0.x.31917] 
[0.x.31918] 
[0.x.31919] 
[0.x.31920] 
[0.x.31921] 
//
// 如果为真，我们将在(1,1)块中装配压力质量矩阵。
//
[0.x.31922] 
[0.x.31923] 
//
[0.x.31924] 
//
[0.x.31925] 
[0.x.31926] 
[0.x.31927] 
[0.x.31928] 
//
[0.x.31929] 
//
[0.x.31930] 
//
[0.x.31931] 
[0.x.31932] 
//
[0.x.31933] 
//
[0.x.31934] 
[0.x.31935] 
//
[0.x.31936] 
[0.x.31937] 
//
[0.x.31938] 
[0.x.31939] 
[0.x.31940] 
//
[0.x.31941] 
[0.x.31942] 
[0.x.31943] 
[0.x.31944] 
[0.x.31945] 
//
[0.x.31946] 
[0.x.31947] 
//
[0.x.31948] 
[0.x.31949] 
[0.x.31950] 
[0.x.31951] 
[0.x.31952] 
[0.x.31953] 
[0.x.31954] 
[0.x.31955] 
[0.x.31956] 
//
[0.x.31957] 
[0.x.31958] 
[0.x.31959] 
[0.x.31960] 
[0.x.31961] 
[0.x.31962] 
[0.x.31963] 
[0.x.31964] 
[0.x.31965] 
[0.x.31966] 
[0.x.31967] 
//
[0.x.31968] 
[0.x.31969] 
[0.x.31970] 
[0.x.31971] 
[0.x.31972] 
[0.x.31973] 
//
[0.x.31974] 
[0.x.31975] 
[0.x.31976] 
//
[0.x.31977] 
[0.x.31978] 
[0.x.31979] 
[0.x.31980] 
[0.x.31981] 
[0.x.31982] 
[0.x.31983] 
//
[0.x.31984] 
[0.x.31985] 
[0.x.31986] 
[0.x.31987] 
[0.x.31988] 
[0.x.31989] 
[0.x.31990] 
//[2.x.3752] 
//
// 在这里，与[2.x.3753]中一样，我们有一个函数，用于组装多网格预处理程序所需的水平矩阵和界面矩阵。
//
[0.x.31991] 
[0.x.31992] 
[0.x.31993] 
[0.x.31994] 
[0.x.31995] 
[0.x.31996] 
[0.x.31997] 
//
[0.x.31998] 
//
[0.x.31999] 
//
[0.x.32000] 
[0.x.32001] 
[0.x.32002] 
[0.x.32003] 
//
[0.x.32004] 
[0.x.32005] 
//
[0.x.32006] 
//
[0.x.32007] 
//
[0.x.32008] 
//
[0.x.32009] 
//
[0.x.32010] 
[0.x.32011] 
[0.x.32012] 
[0.x.32013] 
[0.x.32014] 
[0.x.32015] 
[0.x.32016] 
[0.x.32017] 
[0.x.32018] 
[0.x.32019] 
[0.x.32020] 
//
[0.x.32021] 
[0.x.32022] 
//
[0.x.32023] 
[0.x.32024] 
[0.x.32025] 
//
// 这个迭代器会覆盖所有的单元格（不仅仅是活动的）。
//
[0.x.32026] 
[0.x.32027] 
[0.x.32028] 
[0.x.32029] 
//
[0.x.32030] 
[0.x.32031] 
[0.x.32032] 
[0.x.32033] 
//
[0.x.32034] 
[0.x.32035] 
[0.x.32036] 
[0.x.32037] 
[0.x.32038] 
[0.x.32039] 
[0.x.32040] 
//
[0.x.32041] 
[0.x.32042] 
[0.x.32043] 
//
[0.x.32044] 
//
[0.x.32045] 
[0.x.32046] 
//
[0.x.32047] 
[0.x.32048] 
[0.x.32049] 
[0.x.32050] 
[0.x.32051] 
[0.x.32052] 
[0.x.32053] 
//
[0.x.32054] 
[0.x.32055] 
[0.x.32056] 
[0.x.32057] 
[0.x.32058] 
[0.x.32059] 
//[2.x.3754] 
//
// 这个函数根据你想使用ILU或GMG作为预处理程序的情况进行不同的设置。 这两种方法共享相同的求解器（FGMRES），但需要初始化不同的预处理器。在这里，我们不仅为整个求解函数计时，还为预处理程序的设置以及求解本身分别计时。
//
[0.x.32060] 
[0.x.32061] 
[0.x.32062] 
[0.x.32063] 
[0.x.32064] 
//
[0.x.32065] 
[0.x.32066] 
[0.x.32067] 
[0.x.32068] 
//
[0.x.32069] 
[0.x.32070] 
//
[0.x.32071] 
[0.x.32072] 
//
[0.x.32073] 
[0.x.32074] 
[0.x.32075] 
[0.x.32076] 
[0.x.32077] 
//
[0.x.32078] 
[0.x.32079] 
[0.x.32080] 
//
// 这里我们必须确保以 "足够好 "的精度求解残差
//
[0.x.32081] 
[0.x.32082] 
[0.x.32083] 
[0.x.32084] 
//
// 这是用来传递我们是否要在预处理程序中解决A的问题。 我们可以把它改为false，看看是否还能收敛，如果能收敛，那么程序的运行速度是快是慢？
//
[0.x.32085] 
//
[0.x.32086] 
//
[0.x.32087] 
[0.x.32088] 
[0.x.32089] 
[0.x.32090] 
//
[0.x.32091] 
[0.x.32092] 
//
[0.x.32093] 
[0.x.32094] 
//
[0.x.32095] 
[0.x.32096] 
//
[0.x.32097] 
[0.x.32098] 
[0.x.32099] 
[0.x.32100] 
[0.x.32101] 
[0.x.32102] 
//
[0.x.32103] 
[0.x.32104] 
//
[0.x.32105] 
[0.x.32106] 
//
[0.x.32107] 
[0.x.32108] 
[0.x.32109] 
[0.x.32110] 
[0.x.32111] 
[0.x.32112] 
[0.x.32113] 
[0.x.32114] 
[0.x.32115] 
//
// 在各级之间转移运算符
//
[0.x.32116] 
[0.x.32117] 
//
// 设置粗略的网格解算器
//
[0.x.32118] 
[0.x.32119] 
[0.x.32120] 
[0.x.32121] 
//
[0.x.32122] 
[0.x.32123] 
[0.x.32124] 
[0.x.32125] 
//
// Multigrid作为CG的预处理程序时，需要是一个对称的运算器，所以平滑器必须是对称的
//
[0.x.32126] 
//
[0.x.32127] 
[0.x.32128] 
[0.x.32129] 
//
// 现在，我们准备设置V型循环算子和多级预处理程序。
//
[0.x.32130] 
[0.x.32131] 
[0.x.32132] 
//
[0.x.32133] 
[0.x.32134] 
//
[0.x.32135] 
[0.x.32136] 
[0.x.32137] 
//
[0.x.32138] 
[0.x.32139] 
[0.x.32140] 
[0.x.32141] 
[0.x.32142] 
[0.x.32143] 
[0.x.32144] 
[0.x.32145] 
[0.x.32146] 
[0.x.32147] 
//
[0.x.32148] 
[0.x.32149] 
//
[0.x.32150] 
[0.x.32151] 
[0.x.32152] 
[0.x.32153] 
[0.x.32154] 
[0.x.32155] 
[0.x.32156] 
//
[0.x.32157] 
//
[0.x.32158] 
[0.x.32159] 
[0.x.32160] 
[0.x.32161] 
[0.x.32162] 
[0.x.32163] 
[0.x.32164] 
[0.x.32165] 
[0.x.32166] 
[0.x.32167] 
//[2.x.3755] 
//
// 这个函数计算出解决方案的L2和H1误差。为此，我们需要确保压力的平均值为零。
//
[0.x.32168] 
[0.x.32169] 
[0.x.32170] 
//
// 计算平均压力[2.x.3756]，然后从每个压力系数中减去它。这将产生一个平均值为零的压力。这里我们利用了压力是分量[2.x.3757]和有限元空间是结点的事实。
//
[0.x.32171] 
[0.x.32172] 
[0.x.32173] 
[0.x.32174] 
[0.x.32175] 
//
[0.x.32176] 
[0.x.32177] 
[0.x.32178] 
//
[0.x.32179] 
[0.x.32180] 
[0.x.32181] 
[0.x.32182] 
[0.x.32183] 
[0.x.32184] 
[0.x.32185] 
[0.x.32186] 
//
[0.x.32187] 
[0.x.32188] 
[0.x.32189] 
[0.x.32190] 
//
[0.x.32191] 
[0.x.32192] 
[0.x.32193] 
[0.x.32194] 
[0.x.32195] 
[0.x.32196] 
[0.x.32197] 
//
[0.x.32198] 
[0.x.32199] 
[0.x.32200] 
[0.x.32201] 
//
[0.x.32202] 
[0.x.32203] 
[0.x.32204] 
[0.x.32205] 
[0.x.32206] 
[0.x.32207] 
[0.x.32208] 
//
[0.x.32209] 
[0.x.32210] 
[0.x.32211] 
[0.x.32212] 
//
[0.x.32213] 
[0.x.32214] 
[0.x.32215] 
[0.x.32216] 
[0.x.32217] 
//[2.x.3758] 
//
// 这个函数生成图形输出，就像在 [2.x.3759] 中所做的那样。
//
[0.x.32218] 
[0.x.32219] 
[0.x.32220] 
[0.x.32221] 
[0.x.32222] 
[0.x.32223] 
//
[0.x.32224] 
[0.x.32225] 
[0.x.32226] 
[0.x.32227] 
[0.x.32228] 
//
[0.x.32229] 
[0.x.32230] 
[0.x.32231] 
[0.x.32232] 
[0.x.32233] 
[0.x.32234] 
[0.x.32235] 
//
[0.x.32236] 
[0.x.32237] 
[0.x.32238] 
[0.x.32239] 
//
// [2.x.3760] 
//
// 斯托克斯类的最后一步是像往常一样，生成初始网格的函数，并按各自的顺序调用其他函数。
//
[0.x.32240] 
[0.x.32241] 
[0.x.32242] 
[0.x.32243] 
[0.x.32244] 
//
[0.x.32245] 
[0.x.32246] 
[0.x.32247] 
[0.x.32248] 
[0.x.32249] 
[0.x.32250] 
//
[0.x.32251] 
[0.x.32252] 
[0.x.32253] 
[0.x.32254] 
//
[0.x.32255] 
[0.x.32256] 
//
[0.x.32257] 
[0.x.32258] 
//
[0.x.32259] 
[0.x.32260] 
//
[0.x.32261] 
[0.x.32262] 
[0.x.32263] 
//
[0.x.32264] 
[0.x.32265] 
//
[0.x.32266] 
[0.x.32267] 
//
[0.x.32268] 
//
[0.x.32269] 
//
[0.x.32270] 
[0.x.32271] 
[0.x.32272] 
//
[0.x.32273] 
[0.x.32274] 
[0.x.32275] 
[0.x.32276] 
[0.x.32277] 
//[2.x.3761] 
[0.x.32278] 
[0.x.32279] 
[0.x.32280] 
[0.x.32281] 
[0.x.32282] 
//
[0.x.32283] 
[0.x.32284] 
//
// SolverType的选项。umfpack fgmres_ilu fgmres_gmg
//
[0.x.32285] 
//
[0.x.32286] 
[0.x.32287] 
[0.x.32288] 
[0.x.32289] 
[0.x.32290] 
[0.x.32291] 
[0.x.32292] 
[0.x.32293] 
[0.x.32294] 
[0.x.32295] 
[0.x.32296] 
[0.x.32297] 
[0.x.32298] 
//
[0.x.32299] 
[0.x.32300] 
[0.x.32301] 
[0.x.32302] 
[0.x.32303] 
[0.x.32304] 
[0.x.32305] 
[0.x.32306] 
[0.x.32307] 
[0.x.32308] 
[0.x.32309] 
[0.x.32310] 
[0.x.32311] 
[0.x.32312] 
//
[0.x.32313] 
[0.x.32314] 
[0.x.32315] 
[0.x.32316] 
[0.x.32317] 
[0.x.32318] 
[0.x.32319] 
[0.x.32320] 
[0.x.32321] 
[0.x.32322] 
[0.x.32323] 
[0.x.32324] 
[0.x.32325] 
[0.x.32326] 
[0.x.32327] 
[0.x.32328] 
[0.x.32329] 
[0.x.32330] 
[0.x.32331] 
//[2.x.3762] 
//
// 像往常一样，我们从包括一些著名的文件开始。
//
[0.x.32332] 
[0.x.32333] 
[0.x.32334] 
[0.x.32335] 
//
[0.x.32336] 
[0.x.32337] 
[0.x.32338] 
[0.x.32339] 
[0.x.32340] 
[0.x.32341] 
[0.x.32342] 
[0.x.32343] 
//
[0.x.32344] 
[0.x.32345] 
[0.x.32346] 
[0.x.32347] 
//
[0.x.32348] 
[0.x.32349] 
[0.x.32350] 
//
[0.x.32351] 
[0.x.32352] 
[0.x.32353] 
//
[0.x.32354] 
[0.x.32355] 
[0.x.32356] 
[0.x.32357] 
//
// 为了在网格之间传输解决方案，包括这个文件。
//
[0.x.32358] 
//
// 这个文件包括UMFPACK：直接求解器。
//
[0.x.32359] 
//
// 还有一个ILU预处理程序。
//
[0.x.32360] 
//
[0.x.32361] 
[0.x.32362] 
//
[0.x.32363] 
[0.x.32364] 
[0.x.32365] 
//[2.x.3763] 
//
// 该类管理介绍中描述的矩阵和向量：特别是，我们为当前的解决方案、当前的牛顿更新和直线搜索更新存储了一个BlockVector。 我们还存储了两个AffineConstraints对象：一个是强制执行Dirichlet边界条件的对象，另一个是将所有边界值设为0的对象。第一个约束解向量，第二个约束更新（也就是说，我们从不更新边界值，所以我们强制相关的更新向量值为零）。
//
[0.x.32366] 
[0.x.32367] 
[0.x.32368] 
[0.x.32369] 
[0.x.32370] 
[0.x.32371] 
//
[0.x.32372] 
[0.x.32373] 
//
[0.x.32374] 
//
[0.x.32375] 
//
[0.x.32376] 
//
[0.x.32377] 
//
[0.x.32378] 
//
[0.x.32379] 
//
[0.x.32380] 
//
[0.x.32381] 
//
[0.x.32382] 
[0.x.32383] 
[0.x.32384] 
[0.x.32385] 
[0.x.32386] 
//
[0.x.32387] 
//
[0.x.32388] 
[0.x.32389] 
[0.x.32390] 
[0.x.32391] 
//
[0.x.32392] 
[0.x.32393] 
[0.x.32394] 
//
[0.x.32395] 
[0.x.32396] 
//
[0.x.32397] 
[0.x.32398] 
[0.x.32399] 
//
[0.x.32400] 
[0.x.32401] 
[0.x.32402] 
[0.x.32403] 
[0.x.32404] 
//[2.x.3764] 
//
// 在这个问题中，我们设定沿空腔上表面的速度为1，其他三面墙的速度为0。右边的函数为零，所以我们在本教程中不需要设置右边的函数。边界函数的分量数为 [2.x.3765] 。我们最终将使用[2.x.3766]来设置边界值，这就要求边界值函数的分量数与解相同，即使没有全部使用。换个说法：为了让这个函数高兴，我们为压力定义了边界值，尽管我们实际上永远不会用到它们。
//
[0.x.32405] 
[0.x.32406] 
[0.x.32407] 
[0.x.32408] 
[0.x.32409] 
[0.x.32410] 
[0.x.32411] 
[0.x.32412] 
[0.x.32413] 
[0.x.32414] 
//
[0.x.32415] 
[0.x.32416] 
[0.x.32417] 
[0.x.32418] 
[0.x.32419] 
[0.x.32420] 
[0.x.32421] 
[0.x.32422] 
//
[0.x.32423] 
[0.x.32424] 
//[2.x.3767] 
//
// 正如介绍中所讨论的，Krylov迭代方法中的预处理器是作为一个矩阵-向量乘积算子实现的。在实践中，舒尔补码预处理器被分解为三个矩阵的乘积（如第一节所述）。第一个因素中的[2.x.3768]涉及到对线性系统[2.x.3769]的求解。在这里，为了简单起见，我们通过一个直接求解器来解决这个系统。第二个因素中涉及的计算是一个简单的矩阵-向量乘法。舒尔补码[2.x.3770]可以被压力质量矩阵很好地近似，其逆值可以通过不精确求解器得到。因为压力质量矩阵是对称和正定的，我们可以用CG来解决相应的线性系统。
//
[0.x.32425] 
[0.x.32426] 
[0.x.32427] 
[0.x.32428] 
[0.x.32429] 
[0.x.32430] 
[0.x.32431] 
[0.x.32432] 
[0.x.32433] 
//
[0.x.32434] 
//
[0.x.32435] 
[0.x.32436] 
[0.x.32437] 
[0.x.32438] 
[0.x.32439] 
[0.x.32440] 
[0.x.32441] 
[0.x.32442] 
//
// 我们可以注意到，左上角的矩阵逆的初始化是在构造函数中完成的。如果是这样，那么预处理程序的每一次应用就不再需要计算矩阵因子了。
//
[0.x.32443] 
[0.x.32444] 
[0.x.32445] 
[0.x.32446] 
[0.x.32447] 
[0.x.32448] 
[0.x.32449] 
[0.x.32450] 
[0.x.32451] 
[0.x.32452] 
[0.x.32453] 
[0.x.32454] 
[0.x.32455] 
[0.x.32456] 
[0.x.32457] 
//
[0.x.32458] 
[0.x.32459] 
[0.x.32460] 
[0.x.32461] 
[0.x.32462] 
[0.x.32463] 
//
[0.x.32464] 
[0.x.32465] 
[0.x.32466] 
//
[0.x.32467] 
[0.x.32468] 
[0.x.32469] 
[0.x.32470] 
[0.x.32471] 
[0.x.32472] 
[0.x.32473] 
//
[0.x.32474] 
[0.x.32475] 
[0.x.32476] 
[0.x.32477] 
[0.x.32478] 
//
[0.x.32479] 
[0.x.32480] 
//[2.x.3771] 
//[2.x.3772] 
//
// 该类的构造函数看起来与 [2.x.3773] 中的构造函数非常相似。唯一的区别是粘度和增强的拉格朗日系数 [2.x.3774] 。
//
[0.x.32481] 
[0.x.32482] 
[0.x.32483] 
[0.x.32484] 
[0.x.32485] 
[0.x.32486] 
[0.x.32487] 
[0.x.32488] 
[0.x.32489] 
//[2.x.3775] 
//
// 这个函数初始化DoFHandler，列举当前网格上的自由度和约束。
//
[0.x.32490] 
[0.x.32491] 
[0.x.32492] 
[0.x.32493] 
[0.x.32494] 
//
// 第一步是将DoFs与给定的网格联系起来。
//
[0.x.32495] 
//
// 我们对组件重新编号，使所有的速度DoF在压力DoF之前，以便能够将解向量分成两个块，在块预处理程序中分别访问。
//
[0.x.32496] 
[0.x.32497] 
[0.x.32498] 
//
[0.x.32499] 
[0.x.32500] 
[0.x.32501] 
[0.x.32502] 
//
// 在牛顿方案中，我们首先将边界条件应用于从初始步骤得到的解。为了确保边界条件在牛顿迭代过程中保持满足，在更新时使用零边界条件 [2.x.3776] 。因此我们设置了两个不同的约束对象。
//
[0.x.32503] 
[0.x.32504] 
[0.x.32505] 
//
[0.x.32506] 
[0.x.32507] 
[0.x.32508] 
[0.x.32509] 
[0.x.32510] 
[0.x.32511] 
[0.x.32512] 
[0.x.32513] 
//
[0.x.32514] 
[0.x.32515] 
//
[0.x.32516] 
[0.x.32517] 
[0.x.32518] 
[0.x.32519] 
[0.x.32520] 
[0.x.32521] 
[0.x.32522] 
[0.x.32523] 
[0.x.32524] 
//
[0.x.32525] 
[0.x.32526] 
[0.x.32527] 
[0.x.32528] 
[0.x.32529] 
//[2.x.3777] 
//
// 在每个网格上，SparsityPattern和线性系统的大小是不同的。这个函数在网格细化后初始化它们。
//
[0.x.32530] 
[0.x.32531] 
[0.x.32532] 
[0.x.32533] 
[0.x.32534] 
[0.x.32535] 
[0.x.32536] 
[0.x.32537] 
//
[0.x.32538] 
//
[0.x.32539] 
[0.x.32540] 
[0.x.32541] 
[0.x.32542] 
//[2.x.3778] 
//
// 这个函数建立了我们目前工作的系统矩阵和右手边。[2.x.3779]参数用于确定我们应用哪一组约束（初始步骤为非零，其他为零）。[2.x.3780]参数分别决定了是组装整个系统还是只组装右手边的向量。
//
[0.x.32543] 
[0.x.32544] 
[0.x.32545] 
[0.x.32546] 
[0.x.32547] 
[0.x.32548] 
//
[0.x.32549] 
//
[0.x.32550] 
//
[0.x.32551] 
[0.x.32552] 
[0.x.32553] 
[0.x.32554] 
//
[0.x.32555] 
[0.x.32556] 
//
[0.x.32557] 
[0.x.32558] 
//
[0.x.32559] 
[0.x.32560] 
//
[0.x.32561] 
//
// 对于线性化系统，我们为当前速度和梯度以及当前压力创建临时存储。在实践中，它们都是通过正交点的形状函数获得的。
//
[0.x.32562] 
[0.x.32563] 
[0.x.32564] 
//
[0.x.32565] 
[0.x.32566] 
[0.x.32567] 
[0.x.32568] 
//
[0.x.32569] 
[0.x.32570] 
[0.x.32571] 
//
[0.x.32572] 
[0.x.32573] 
//
[0.x.32574] 
[0.x.32575] 
//
[0.x.32576] 
[0.x.32577] 
//
[0.x.32578] 
[0.x.32579] 
//
//装配类似于 [2.x.3781] 。一个以gamma为系数的附加项是增强拉格朗日（AL），它是通过grad-div稳定化组装的。 正如我们在介绍中所讨论的，系统矩阵的右下块应该为零。由于压力质量矩阵是在创建预处理程序时使用的，所以我们在这里组装它，然后在最后把它移到一个单独的SparseMatrix中（与[2.x.3782]相同）。
//
[0.x.32580] 
[0.x.32581] 
[0.x.32582] 
[0.x.32583] 
[0.x.32584] 
[0.x.32585] 
[0.x.32586] 
[0.x.32587] 
[0.x.32588] 
//
[0.x.32589] 
[0.x.32590] 
[0.x.32591] 
[0.x.32592] 
[0.x.32593] 
[0.x.32594] 
[0.x.32595] 
[0.x.32596] 
[0.x.32597] 
[0.x.32598] 
[0.x.32599] 
[0.x.32600] 
[0.x.32601] 
[0.x.32602] 
[0.x.32603] 
[0.x.32604] 
[0.x.32605] 
[0.x.32606] 
//
[0.x.32607] 
[0.x.32608] 
[0.x.32609] 
[0.x.32610] 
[0.x.32611] 
[0.x.32612] 
[0.x.32613] 
[0.x.32614] 
[0.x.32615] 
[0.x.32616] 
[0.x.32617] 
[0.x.32618] 
[0.x.32619] 
//
[0.x.32620] 
//
[0.x.32621] 
[0.x.32622] 
//
[0.x.32623] 
[0.x.32624] 
[0.x.32625] 
[0.x.32626] 
[0.x.32627] 
[0.x.32628] 
[0.x.32629] 
[0.x.32630] 
[0.x.32631] 
[0.x.32632] 
[0.x.32633] 
[0.x.32634] 
[0.x.32635] 
[0.x.32636] 
[0.x.32637] 
//
[0.x.32638] 
[0.x.32639] 
//
// 最后我们把压力质量矩阵移到一个单独的矩阵中。
//
[0.x.32640] 
[0.x.32641] 
//
// 注意，将这个压力块设置为零并不等同于不在这个块中装配任何东西，因为这里的操作将（错误地）删除从压力作用力的悬挂节点约束中进来的对角线条目。这意味着，我们的整个系统矩阵将有完全为零的行。幸运的是，FGMRES处理这些行没有任何问题。
//
[0.x.32642] 
[0.x.32643] 
[0.x.32644] 
//
[0.x.32645] 
[0.x.32646] 
[0.x.32647] 
[0.x.32648] 
[0.x.32649] 
//
[0.x.32650] 
[0.x.32651] 
[0.x.32652] 
[0.x.32653] 
[0.x.32654] 
//[2.x.3783] 
//
// 在这个函数中，我们使用FGMRES和程序开始时定义的块状预处理程序来解决线性系统。我们在这一步得到的是解向量。如果这是初始步骤，解向量为我们提供了纳维尔-斯托克斯方程的初始猜测。对于初始步骤，非零约束被应用，以确保边界条件得到满足。在下面的步骤中，我们将求解牛顿更新，所以使用零约束。
//
[0.x.32655] 
[0.x.32656] 
[0.x.32657] 
[0.x.32658] 
[0.x.32659] 
//
[0.x.32660] 
[0.x.32661] 
[0.x.32662] 
//
[0.x.32663] 
[0.x.32664] 
[0.x.32665] 
[0.x.32666] 
//
[0.x.32667] 
[0.x.32668] 
[0.x.32669] 
[0.x.32670] 
[0.x.32671] 
[0.x.32672] 
//
[0.x.32673] 
[0.x.32674] 
//
[0.x.32675] 
[0.x.32676] 
//[2.x.3784] 
//
// 在粗略的网格上找到一个好的初始猜测后，我们希望通过细化网格来减少误差。这里我们做了类似于[2.x.3785]的自适应细化，只是我们只使用了速度上的Kelly估计器。我们还需要使用SolutionTransfer类将当前的解转移到下一个网格。
//
[0.x.32677] 
[0.x.32678] 
[0.x.32679] 
[0.x.32680] 
[0.x.32681] 
[0.x.32682] 
[0.x.32683] 
[0.x.32684] 
[0.x.32685] 
[0.x.32686] 
[0.x.32687] 
[0.x.32688] 
//
[0.x.32689] 
[0.x.32690] 
[0.x.32691] 
[0.x.32692] 
//
[0.x.32693] 
[0.x.32694] 
[0.x.32695] 
[0.x.32696] 
//
// 首先，DoFHandler被设置，约束被生成。然后我们创建一个临时的BlockVector [2.x.3786] ，其大小与新网格上的解决方案一致。
//
[0.x.32697] 
//
[0.x.32698] 
//
// 将解决方案从粗网格转移到细网格，并对新转移的解决方案应用边界值约束。注意，present_solution仍然是对应于旧网格的一个向量。
//
[0.x.32699] 
[0.x.32700] 
//
// 最后设置矩阵和向量，并将present_solution设置为插值后的数据。
//
[0.x.32701] 
[0.x.32702] 
[0.x.32703] 
//[2.x.3787] 
//
// 这个函数实现了牛顿迭代，给定了公差、最大迭代次数和要做的网格细化次数。
//
// 参数[2.x.3788]告诉我们是否需要[2.x.3789]，以及应该装配哪一部分，系统矩阵或右手边的矢量。如果我们做直线搜索，在最后一次迭代中检查残差准则时，右手边已经被组装起来了。因此，我们只需要在当前迭代中装配系统矩阵。最后一个参数[2.x.3790]决定了是否应该产生图形输出。
//
[0.x.32704] 
[0.x.32705] 
[0.x.32706] 
[0.x.32707] 
[0.x.32708] 
[0.x.32709] 
[0.x.32710] 
[0.x.32711] 
[0.x.32712] 
//
[0.x.32713] 
[0.x.32714] 
[0.x.32715] 
[0.x.32716] 
[0.x.32717] 
[0.x.32718] 
[0.x.32719] 
[0.x.32720] 
//
[0.x.32721] 
[0.x.32722] 
[0.x.32723] 
[0.x.32724] 
[0.x.32725] 
[0.x.32726] 
[0.x.32727] 
[0.x.32728] 
[0.x.32729] 
[0.x.32730] 
[0.x.32731] 
[0.x.32732] 
[0.x.32733] 
[0.x.32734] 
[0.x.32735] 
[0.x.32736] 
 
 
 
 
 
 
[0.x.32743] 
[0.x.32744] 
[0.x.32745] 
//
// 为了确保我们的解决方案越来越接近精确的解决方案，我们让解决方案用权重[2.x.3791]更新，使新的残差小于上一步的残差，这是在下面的循环中完成。这与 [2.x.3792] 中使用的线搜索算法相同。
//
[0.x.32746] 
[0.x.32747] 
[0.x.32748] 
[0.x.32749] 
[0.x.32750] 
[0.x.32751] 
[0.x.32752] 
[0.x.32753] 
[0.x.32754] 
[0.x.32755] 
[0.x.32756] 
[0.x.32757] 
[0.x.32758] 
[0.x.32759] 
[0.x.32760] 
[0.x.32761] 
[0.x.32762] 
[0.x.32763] 
[0.x.32764] 
[0.x.32765] 
[0.x.32766] 
//
[0.x.32767] 
[0.x.32768] 
[0.x.32769] 
[0.x.32770] 
//
[0.x.32771] 
[0.x.32772] 
[0.x.32773] 
[0.x.32774] 
//
[0.x.32775] 
[0.x.32776] 
[0.x.32777] 
[0.x.32778] 
[0.x.32779] 
[0.x.32780] 
//[2.x.3793] 
//
// 这个函数将通过使用延续法为我们提供一个初始猜测，正如我们在介绍中讨论的那样。雷诺数被逐级增加[2.x.3794]，直到我们达到目标值。通过实验，斯托克斯的解足以成为雷诺数为1000的NSE的初始猜测，所以我们从这里开始。 为了确保前一个问题的解决方案与下一个问题足够接近，步长必须足够小。
//
[0.x.32781] 
[0.x.32782] 
[0.x.32783] 
[0.x.32784] 
//
[0.x.32785] 
//
[0.x.32786] 
[0.x.32787] 
[0.x.32788] 
[0.x.32789] 
[0.x.32790] 
[0.x.32791] 
[0.x.32792] 
[0.x.32793] 
[0.x.32794] 
[0.x.32795] 
//[2.x.3795] 
//
// 这个函数与[2.x.3796]中的函数相同，只是我们为输出文件选择了一个同时包含雷诺数（即当前环境下的粘度的倒数）的名称。
//
[0.x.32796] 
[0.x.32797] 
[0.x.32798] 
[0.x.32799] 
[0.x.32800] 
[0.x.32801] 
//
[0.x.32802] 
[0.x.32803] 
[0.x.32804] 
[0.x.32805] 
[0.x.32806] 
[0.x.32807] 
[0.x.32808] 
[0.x.32809] 
[0.x.32810] 
[0.x.32811] 
[0.x.32812] 
[0.x.32813] 
//
[0.x.32814] 
[0.x.32815] 
[0.x.32816] 
[0.x.32817] 
//[2.x.3797] 
//
// 在我们的测试案例中，我们不知道分析解。该函数输出沿[2.x.3798]和[2.x.3799]的速度分量，以便与文献中的数据进行比较。
//
[0.x.32818] 
[0.x.32819] 
[0.x.32820] 
[0.x.32821] 
[0.x.32822] 
[0.x.32823] 
//
[0.x.32824] 
[0.x.32825] 
[0.x.32826] 
//
[0.x.32827] 
//
[0.x.32828] 
[0.x.32829] 
[0.x.32830] 
//
[0.x.32831] 
[0.x.32832] 
[0.x.32833] 
//
[0.x.32834] 
[0.x.32835] 
[0.x.32836] 
[0.x.32837] 
[0.x.32838] 
//[2.x.3800] 
//
// 这是本程序的最后一步。在这一部分，我们分别生成网格和运行其他函数。最大细化度可以通过参数来设置。
//
[0.x.32839] 
[0.x.32840] 
[0.x.32841] 
[0.x.32842] 
[0.x.32843] 
//
[0.x.32844] 
//
// 如果粘度小于[2.x.3801]，我们必须首先通过延续法搜索初始猜测。我们应该注意的是，搜索总是在初始网格上进行的，也就是这个程序中的[2.x.3802]网格。之后，我们只需做与粘度大于[2.x.3803]时相同的工作：运行牛顿迭代，细化网格，转移解决方案，并重复。
//
[0.x.32845] 
[0.x.32846] 
[0.x.32847] 
[0.x.32848] 
[0.x.32849] 
[0.x.32850] 
[0.x.32851] 
[0.x.32852] 
[0.x.32853] 
[0.x.32854] 
[0.x.32855] 
[0.x.32856] 
//
// 当粘度大于1/1000时，斯托克斯方程的解作为初始猜测已经足够好。如果是这样，我们就不需要用延续法来搜索初始猜测了。牛顿迭代可以直接开始。
//
[0.x.32857] 
[0.x.32858] 
[0.x.32859] 
[0.x.32860] 
//
[0.x.32861] 
[0.x.32862] 
[0.x.32863] 
[0.x.32864] 
[0.x.32865] 
//
[0.x.32866] 
[0.x.32867] 
[0.x.32868] 
[0.x.32869] 
[0.x.32870] 
[0.x.32871] 
[0.x.32872] 
[0.x.32873] 
[0.x.32874] 
[0.x.32875] 
[0.x.32876] 
[0.x.32877] 
[0.x.32878] 
 
 
 
 
 
 
[0.x.32885] 
[0.x.32886] 
[0.x.32887] 
[0.x.32888] 
[0.x.32889] 
[0.x.32890] 
[0.x.32891] 
[0.x.32892] 
[0.x.32893] 
[0.x.32894] 
[0.x.32895] 
[0.x.32896] 
[0.x.32897] 
[0.x.32898] 
[0.x.32899] 
[0.x.32900] 
[0.x.32901] 
[0.x.32902] 
[0.x.32903] 
[0.x.32904] 
[0.x.32905] 
[0.x.32906] 
[0.x.32907] 
[0.x.32908] 
[0.x.32909] 
[0.x.32910] 
[0.x.32911] 
[0.x.32912] 
[0.x.32913] 
//[2.x.3804] 程序以通常的包含文件开始，所有这些文件你现在应该都见过了。
//
[0.x.32914] 
[0.x.32915] 
[0.x.32916] 
[0.x.32917] 
[0.x.32918] 
[0.x.32919] 
[0.x.32920] 
[0.x.32921] 
[0.x.32922] 
[0.x.32923] 
[0.x.32924] 
[0.x.32925] 
[0.x.32926] 
[0.x.32927] 
[0.x.32928] 
[0.x.32929] 
[0.x.32930] 
[0.x.32931] 
[0.x.32932] 
[0.x.32933] 
//
[0.x.32934] 
[0.x.32935] 
//
// 然后按照惯例将这个程序的所有内容放入一个命名空间，并将deal.II命名空间导入到我们将要工作的命名空间中。
//
[0.x.32936] 
[0.x.32937] 
[0.x.32938] 
//[2.x.3805] 
//
// 然后是主类。它看起来非常像 [2.x.3806] 或 [2.x.3807] 中的相应类，唯一的例外是，矩阵和向量以及其他所有与线性系统相关的元素现在都存储为 [2.x.3808] 类型，而不仅仅是 `double`。
//
[0.x.32939] 
[0.x.32940] 
[0.x.32941] 
[0.x.32942] 
[0.x.32943] 
[0.x.32944] 
//
[0.x.32945] 
[0.x.32946] 
[0.x.32947] 
[0.x.32948] 
[0.x.32949] 
[0.x.32950] 
//
[0.x.32951] 
[0.x.32952] 
[0.x.32953] 
//
[0.x.32954] 
//
[0.x.32955] 
[0.x.32956] 
[0.x.32957] 
//
[0.x.32958] 
[0.x.32959] 
//
[0.x.32960] 
[0.x.32961] 
[0.x.32962] 
//
[0.x.32963] 
[0.x.32964] 
//
// [2.x.3809] 
//
// 在我们继续填写主类的细节之前，让我们定义与问题相对应的方程数据，即初始值，以及一个右手类。我们将把初始条件也用于边界值，我们只是保持边界值不变）。我们使用派生自Function类模板的类来做这件事，这个模板之前已经用过很多次了，所以下面的内容看起来并不令人惊讶。唯一值得注意的是，我们这里有一个复值问题，所以我们必须提供Function类的第二个模板参数（否则会默认为`double`）。此外，`value()`函数的返回类型当然也是复数。
//
// 这些函数精确地返回什么，在介绍部分的最后已经讨论过了。
//
[0.x.32965] 
[0.x.32966] 
[0.x.32967] 
[0.x.32968] 
[0.x.32969] 
[0.x.32970] 
[0.x.32971] 
//
[0.x.32972] 
[0.x.32973] 
[0.x.32974] 
//
[0.x.32975] 
[0.x.32976] 
[0.x.32977] 
[0.x.32978] 
[0.x.32979] 
[0.x.32980] 
//
[0.x.32981] 
[0.x.32982] 
//
[0.x.32983] 
[0.x.32984] 
[0.x.32985] 
[0.x.32986] 
//
[0.x.32987] 
[0.x.32988] 
[0.x.32989] 
//
[0.x.32990] 
[0.x.32991] 
[0.x.32992] 
[0.x.32993] 
[0.x.32994] 
//
[0.x.32995] 
[0.x.32996] 
//
[0.x.32997] 
[0.x.32998] 
//
[0.x.32999] 
[0.x.33000] 
[0.x.33001] 
[0.x.33002] 
[0.x.33003] 
[0.x.33004] 
[0.x.33005] 
[0.x.33006] 
//
[0.x.33007] 
[0.x.33008] 
[0.x.33009] 
[0.x.33010] 
[0.x.33011] 
[0.x.33012] 
//
[0.x.33013] 
[0.x.33014] 
//
// [2.x.3810] 
//
// 我们首先指定了类的构造函数的实现。
//
[0.x.33015] 
[0.x.33016] 
[0.x.33017] 
[0.x.33018] 
[0.x.33019] 
[0.x.33020] 
[0.x.33021] 
[0.x.33022] 
[0.x.33023] 
//[2.x.3812] 
//
// 下一个函数是在程序开始时，也就是在第一个时间步骤之前，设置网格、DoFHandler以及矩阵和向量。如果你已经阅读了至少到[2.x.3813]为止的教程程序，那么前几行是相当标准的。
//
[0.x.33024] 
[0.x.33025] 
[0.x.33026] 
[0.x.33027] 
[0.x.33028] 
//
[0.x.33029] 
[0.x.33030] 
//
[0.x.33031] 
//
[0.x.33032] 
[0.x.33033] 
[0.x.33034] 
//
[0.x.33035] 
[0.x.33036] 
[0.x.33037] 
//
[0.x.33038] 
[0.x.33039] 
//
[0.x.33040] 
[0.x.33041] 
//
[0.x.33042] 
[0.x.33043] 
//
// 接下来，我们组装相关的矩阵。按照我们对斯特朗分裂的空间步骤（即每个时间步骤中三个部分步骤中的第二个步骤）的Crank-Nicolson离散化的写法，我们被引导到线性系统 [2.x.3814] 。换句话说，这里有两个矩阵在起作用--一个用于左手边，一个用于右手边。我们分别建立这些矩阵。我们可以避免建立右手边的矩阵，而只是在每个时间步长中形成矩阵的*作用*[2.x.3815]。这可能更有效，也可能不有效，但是对于这个程序来说，效率并不是最重要的）。)
//
[0.x.33044] 
[0.x.33045] 
[0.x.33046] 
[0.x.33047] 
//
[0.x.33048] 
[0.x.33049] 
[0.x.33050] 
[0.x.33051] 
//
[0.x.33052] 
[0.x.33053] 
//
[0.x.33054] 
[0.x.33055] 
[0.x.33056] 
[0.x.33057] 
//
[0.x.33058] 
[0.x.33059] 
[0.x.33060] 
//
[0.x.33061] 
[0.x.33062] 
[0.x.33063] 
[0.x.33064] 
//
[0.x.33065] 
//
[0.x.33066] 
[0.x.33067] 
//
[0.x.33068] 
[0.x.33069] 
[0.x.33070] 
[0.x.33071] 
[0.x.33072] 
[0.x.33073] 
[0.x.33074] 
//
[0.x.33075] 
[0.x.33076] 
[0.x.33077] 
[0.x.33078] 
[0.x.33079] 
[0.x.33080] 
[0.x.33081] 
[0.x.33082] 
[0.x.33083] 
//
[0.x.33084] 
[0.x.33085] 
[0.x.33086] 
[0.x.33087] 
[0.x.33088] 
[0.x.33089] 
[0.x.33090] 
[0.x.33091] 
[0.x.33092] 
[0.x.33093] 
[0.x.33094] 
[0.x.33095] 
//
[0.x.33096] 
[0.x.33097] 
[0.x.33098] 
[0.x.33099] 
[0.x.33100] 
[0.x.33101] 
[0.x.33102] 
[0.x.33103] 
[0.x.33104] 
//[2.x.3816] 
//
// 在建立了上述所有数据结构后，我们现在可以实现构成斯特朗分裂方案的部分步骤。我们从推进阶段的半步开始，这被用作每个时间步骤的第一和最后部分。
//
// 为此，回顾一下，对于第一个半步，我们需要计算 [2.x.3817] 。这里，[2.x.3818]和[2.x.3819]是空间的函数，分别对应于前一个完整时间步骤的输出和三个部分步骤中第一个步骤的结果。必须为第三个部分步骤计算相应的解决方案，即 [2.x.3820] ，其中 [2.x.3821] 是整个时间步骤的结果，其输入 [2.x.3822] 是斯特朗分割的空间步骤的结果。
//
// 一个重要的认识是，虽然[2.x.3823]可能是一个有限元函数（即，是片状多项式），但对于我们使用指数因子更新相位的 "旋转 "函数来说，不一定是这样的（回顾一下，该函数的振幅在该步骤中保持不变）。换句话说，我们可以在每一个点[2.x.3824]*计算[2.x.3825]，但我们不能在网格上表示它，因为它不是一个片状多项式函数。在一个离散的环境中，我们能做的最好的事情就是计算一个投影或内插。换句话说，我们可以计算[2.x.3826]，其中[2.x.3827]是一个投影或内插算子。如果我们选择插值，情况就特别简单。那么，我们需要计算的就是*在节点点上的右手边的值，并将这些作为自由度向量[2.x.3828]的节点值。这很容易做到，因为在这里使用的拉格朗日有限元的节点点上评估右手边，需要我们只看节点向量的一个（复值）条目。换句话说，我们需要做的是计算[2.x.3829]，其中[2.x.3830]在我们的解向量的所有条目上循环。这就是下面的函数所做的--事实上，它甚至没有为[2.x.3831]和[2.x.3832]使用单独的向量，而只是适当地更新同一个向量。
//
[0.x.33105] 
[0.x.33106] 
[0.x.33107] 
[0.x.33108] 
[0.x.33109] 
[0.x.33110] 
[0.x.33111] 
//
[0.x.33112] 
[0.x.33113] 
[0.x.33114] 
[0.x.33115] 
//
// 下一步是求解每个时间步骤中的线性系统，即我们使用的Strang分割的后半步。记得它的形式是[2.x.3833]，其中[2.x.3834]和[2.x.3835]是我们之前组装的矩阵。
//
// 我们在这里解决这个问题的方法是使用直接求解器。我们首先使用[2.x.3836]函数形成右边的[2.x.3837]，并将结果放入`system_rhs`变量。然后我们调用[2.x.3838]，该函数以矩阵[2.x.3839]和右手边的向量为参数，并在同一向量`system_rhs`中返回解。最后一步是将计算出的解放回`solution`变量中。
//
[0.x.33116] 
[0.x.33117] 
[0.x.33118] 
[0.x.33119] 
//
[0.x.33120] 
[0.x.33121] 
//
[0.x.33122] 
[0.x.33123] 
//
// [2.x.3840] 
//
// 我们应该讨论的最后一个辅助函数和类是那些创建图形输出的函数。对斯特朗分裂的局部和空间部分运行半步和全步的结果是，我们在每个时间步数结束时将`solution`向量[2.x.3841]更新为正确的值。它的条目包含有限元网格节点上的解的复数。
//
// 复数不容易被视觉化。我们可以输出它们的实部和虚部，即字段[2.x.3842]和[2.x.3843]，这正是DataOut类在通过[2.x.3844]附加复数向量，然后调用[2.x.3845]时所做的事情，这确实是我们下面要做的。
//
// 但很多时候，我们对解向量的实部和虚部并不特别感兴趣，而是对解的幅度[2.x.3846]和相位角[2.x.3847]等衍生量感兴趣。在这里这样的量子系统的背景下，幅度本身并不那么有趣，相反，"振幅"，[2.x.3848]才是一个物理属性：它对应于在一个特定的状态场所找到一个粒子的概率密度。将计算出的量放入输出文件以实现可视化的方法--正如在以前的许多教程程序中使用的那样--是使用数据后处理程序和派生类的设施。具体来说，一个复数的振幅和它的相位角都是标量，因此DataPostprocessorScalar类是我们要做的正确工具。
//
// 因此，我们在这里要做的是实现两个类`ComplexAmplitude`和`ComplexPhase`，为DataOut决定生成输出的每个点计算解决方案的振幅[2.x.3849]和相位[2.x.3850]，以便进行可视化。下面有大量的模板代码，这两个类中的第一个唯一有趣的部分是它的`evaluate_vector_field()`函数如何计算`computed_quantities`对象。
//
//（还有一个相当尴尬的事实是，[1.x.108]函数并没有计算人们天真的想象，即[2.x.3851] ，而是返回[2.x.3852]。一个标准函数以这样的方式被错误地命名，这当然是相当令人困惑的......)
//
[0.x.33124] 
[0.x.33125] 
[0.x.33126] 
[0.x.33127] 
[0.x.33128] 
[0.x.33129] 
[0.x.33130] 
//
[0.x.33131] 
[0.x.33132] 
[0.x.33133] 
[0.x.33134] 
//
[0.x.33135] 
[0.x.33136] 
[0.x.33137] 
[0.x.33138] 
//
[0.x.33139] 
[0.x.33140] 
[0.x.33141] 
[0.x.33142] 
[0.x.33143] 
[0.x.33144] 
[0.x.33145] 
[0.x.33146] 
//
[0.x.33147] 
[0.x.33148] 
[0.x.33149] 
[0.x.33150] 
[0.x.33151] 
[0.x.33152] 
//
[0.x.33153] 
[0.x.33154] 
[0.x.33155] 
[0.x.33156] 
[0.x.33157] 
//
// 这些后处理程序类中的第二个是计算每一个点的复值解决方案的相位角。换句话说，如果我们表示 [2.x.3853] ，那么这个类就会计算 [2.x.3854] 。函数 [1.x.109] 为我们做这个，并将角度作为实数返回 [2.x.3855] 和 [2.x.3856] 之间。
//
// 由于我们将在结果部分详细解释的原因，我们实际上没有在产生输出的每个位置输出这个值。相反，我们取相位所有评估点的最大值，然后用这个最大值填充每个评估点的输出字段--实质上，我们将相位角作为一个片状常数字段输出，其中每个单元都有自己的常数值。一旦你读完下面的讨论就会明白其中的原因。
//
[0.x.33158] 
[0.x.33159] 
[0.x.33160] 
[0.x.33161] 
[0.x.33162] 
//
[0.x.33163] 
[0.x.33164] 
[0.x.33165] 
[0.x.33166] 
//
[0.x.33167] 
[0.x.33168] 
[0.x.33169] 
[0.x.33170] 
//
[0.x.33171] 
[0.x.33172] 
[0.x.33173] 
[0.x.33174] 
[0.x.33175] 
[0.x.33176] 
[0.x.33177] 
[0.x.33178] 
//
[0.x.33179] 
[0.x.33180] 
[0.x.33181] 
[0.x.33182] 
[0.x.33183] 
[0.x.33184] 
[0.x.33185] 
//
[0.x.33186] 
[0.x.33187] 
[0.x.33188] 
[0.x.33189] 
[0.x.33190] 
[0.x.33191] 
//
[0.x.33192] 
[0.x.33193] 
[0.x.33194] 
//
[0.x.33195] 
//
// 在这样实现了这些后处理程序后，我们像往常一样创建输出。与其他许多时间相关的教程程序一样，我们给DataOut附加标志，表示时间步数和当前模拟时间。
//
[0.x.33196] 
[0.x.33197] 
[0.x.33198] 
[0.x.33199] 
[0.x.33200] 
//
[0.x.33201] 
//
[0.x.33202] 
[0.x.33203] 
[0.x.33204] 
[0.x.33205] 
[0.x.33206] 
//
[0.x.33207] 
//
[0.x.33208] 
[0.x.33209] 
[0.x.33210] 
[0.x.33211] 
[0.x.33212] 
//
// [2.x.3857] 
//
// 剩下的步骤是我们如何设置这个程序的整体逻辑。这其实是比较简单的。设置数据结构；将初始条件插值到有限元空间；然后迭代所有时间步长，在每个时间步长上执行斯特朗分割法的三个部分。每隔10个时间步长，我们就生成图形输出。这就是了。
//
[0.x.33213] 
[0.x.33214] 
[0.x.33215] 
[0.x.33216] 
[0.x.33217] 
//
[0.x.33218] 
[0.x.33219] 
[0.x.33220] 
//
[0.x.33221] 
[0.x.33222] 
[0.x.33223] 
[0.x.33224] 
//
[0.x.33225] 
[0.x.33226] 
//
[0.x.33227] 
[0.x.33228] 
[0.x.33229] 
//
[0.x.33230] 
[0.x.33231] 
[0.x.33232] 
[0.x.33233] 
[0.x.33234] 
//
// [2.x.3858] 
//
// 其余的又是锅炉板，和以前几乎所有的教程程序完全一样。
//
[0.x.33235] 
[0.x.33236] 
[0.x.33237] 
[0.x.33238] 
[0.x.33239] 
//
[0.x.33240] 
[0.x.33241] 
[0.x.33242] 
[0.x.33243] 
[0.x.33244] 
[0.x.33245] 
[0.x.33246] 
[0.x.33247] 
[0.x.33248] 
[0.x.33249] 
[0.x.33250] 
[0.x.33251] 
[0.x.33252] 
[0.x.33253] 
[0.x.33254] 
[0.x.33255] 
[0.x.33256] 
[0.x.33257] 
[0.x.33258] 
[0.x.33259] 
[0.x.33260] 
[0.x.33261] 
[0.x.33262] 
[0.x.33263] 
[0.x.33264] 
[0.x.33265] 
[0.x.33266] 
[0.x.33267] 
[0.x.33268] 
[0.x.33269] 
[0.x.33270] 
[0.x.33271] 
[0.x.33272] 
[0.x.33273] 
[0.x.33274] 
[0.x.33275] 
[0.x.33276] 
[0.x.33277] 
[0.x.33278] 
[0.x.33279] 
[0.x.33280] 
[0.x.33281] 
[0.x.33282] 
[0.x.33283] 
//
[0.x.33284] 
[0.x.33285] 
[0.x.33286] 
//
// 包含的文件与 [2.x.3859] 中的基本相同，只是用有限元类FE_DGQHermite代替了FE_Q。所有对面积分进行无矩阵计算的功能已经包含在`fe_evaluation.h`中。
//
[0.x.33287] 
[0.x.33288] 
[0.x.33289] 
[0.x.33290] 
//
[0.x.33291] 
[0.x.33292] 
[0.x.33293] 
[0.x.33294] 
[0.x.33295] 
[0.x.33296] 
//
[0.x.33297] 
[0.x.33298] 
//
[0.x.33299] 
[0.x.33300] 
[0.x.33301] 
//
[0.x.33302] 
[0.x.33303] 
[0.x.33304] 
[0.x.33305] 
[0.x.33306] 
[0.x.33307] 
//
[0.x.33308] 
//
[0.x.33309] 
[0.x.33310] 
//
[0.x.33311] 
[0.x.33312] 
//
[0.x.33313] 
[0.x.33314] 
[0.x.33315] 
//
// 和[2.x.3860]一样，为了简单起见，我们在程序顶部将维数和多项式程度收集为常数。与[2.x.3861]不同的是，这次我们选择了一个真正的高阶方法，度数为8，任何不使用和因式分解的实现都会变得非常慢，而使用MatrixFree的实现则提供了与度数为2或3时基本相同的效率。此外，本教程程序中的所有类都是模板化的，因此，通过在`main()`函数中添加适当度数的实例，可以很容易地在运行时从输入文件或命令行参数中选择度数。
//
[0.x.33316] 
[0.x.33317] 
//[2.x.3862] 
//
// 与[2.x.3863]相类似，我们定义了一个分析解，我们试图用离散化重现这个分析解。由于本教程的目的是展示无矩阵方法，我们选择了一个最简单的可能性，即一个余弦函数，其导数对我们来说足够简单，可以通过分析计算。再往下看，我们在这里选择的波数2.4将与[2.x.3864]-方向的域范围即2.5相匹配，这样我们在[2.x.3865]得到一个周期性的解，包括[2.x.3866]或余弦的三个整波转。第一个函数定义了解和它的梯度，分别用于表达Dirichlet和Neumann边界条件的解析解。此外，一个代表解的负拉普拉斯的类被用来表示右手边（强制）函数，我们用它来匹配离散化版本中的给定分析解（制造解）。
//
[0.x.33318] 
[0.x.33319] 
[0.x.33320] 
[0.x.33321] 
[0.x.33322] 
[0.x.33323] 
[0.x.33324] 
[0.x.33325] 
[0.x.33326] 
[0.x.33327] 
[0.x.33328] 
[0.x.33329] 
//
[0.x.33330] 
[0.x.33331] 
[0.x.33332] 
[0.x.33333] 
[0.x.33334] 
[0.x.33335] 
[0.x.33336] 
[0.x.33337] 
[0.x.33338] 
[0.x.33339] 
[0.x.33340] 
[0.x.33341] 
[0.x.33342] 
[0.x.33343] 
[0.x.33344] 
[0.x.33345] 
[0.x.33346] 
//
[0.x.33347] 
[0.x.33348] 
[0.x.33349] 
[0.x.33350] 
[0.x.33351] 
[0.x.33352] 
[0.x.33353] 
[0.x.33354] 
[0.x.33355] 
[0.x.33356] 
[0.x.33357] 
[0.x.33358] 
[0.x.33359] 
[0.x.33360] 
//
// [2.x.3867] 
//
// `LaplaceOperator`类与 [2.x.3868] 中的相应类类似。一个重要的区别是，我们没有从 [2.x.3869] 派生出这个类，因为我们想呈现 [2.x.3870] 的一些额外特性，这些特性在通用类 [2.x.3871] 中是不可用的。我们从Subscriptor类派生出这个类，以便能够在Chebyshev预处理程序中使用该操作符，因为该预处理程序通过SmartPointer存储基础矩阵。
//
// 鉴于我们手工实现了一个完整的矩阵接口，我们需要添加一个`initialize()`函数，一个`m()`函数，一个`vmult()`函数和一个`Tvmult()`函数，这些都是之前由 [2.x.3872] 我们的LaplaceOperator还包含一个成员函数`get_penalty_factor()`，根据 [2.x.3873] 集中选择对称内部惩罚方法中的惩罚参数 。
//
[0.x.33361] 
[0.x.33362] 
[0.x.33363] 
[0.x.33364] 
[0.x.33365] 
//
[0.x.33366] 
//
[0.x.33367] 
//
[0.x.33368] 
//
[0.x.33369] 
//
[0.x.33370] 
[0.x.33371] 
//
[0.x.33372] 
//
[0.x.33373] 
[0.x.33374] 
//
[0.x.33375] 
[0.x.33376] 
//
[0.x.33377] 
[0.x.33378] 
[0.x.33379] 
[0.x.33380] 
//
[0.x.33381] 
[0.x.33382] 
[0.x.33383] 
[0.x.33384] 
[0.x.33385] 
[0.x.33386] 
//
[0.x.33387] 
[0.x.33388] 
[0.x.33389] 
[0.x.33390] 
[0.x.33391] 
//
[0.x.33392] 
[0.x.33393] 
[0.x.33394] 
[0.x.33395] 
[0.x.33396] 
//
[0.x.33397] 
[0.x.33398] 
//
// `%PreconditionBlockJacobi`类定义了我们对这个问题的自定义预处理程序。与基于矩阵对角线的[2.x.3874]不同，我们在这里通过使用介绍中讨论的所谓快速对角线化方法来计算非连续Galerkin方法中对角线块的近似反演。
//
[0.x.33399] 
[0.x.33400] 
[0.x.33401] 
[0.x.33402] 
[0.x.33403] 
//
[0.x.33404] 
[0.x.33405] 
[0.x.33406] 
[0.x.33407] 
//
[0.x.33408] 
//
[0.x.33409] 
[0.x.33410] 
//
[0.x.33411] 
[0.x.33412] 
[0.x.33413] 
[0.x.33414] 
[0.x.33415] 
//
[0.x.33416] 
[0.x.33417] 
[0.x.33418] 
[0.x.33419] 
[0.x.33420] 
[0.x.33421] 
[0.x.33422] 
//
//这个独立的函数在`LaplaceOperator'和`%PreconditionBlockJacobi'类中都被用来调整鬼魂范围。这个函数是必要的，因为`vmult()`函数所提供的一些向量没有用包括正确的鬼魂条目布局的[2.x.3875]来正确初始化，而是来自MGTransferMatrixFree类，该类对无矩阵类的鬼魂选择没有概念。为了避免索引混乱，我们必须在对这些向量进行实际操作之前调整鬼域。由于向量在多网格平滑器和传输类中被保留下来，一个曾经被调整过重影范围的向量在对象的整个生命周期中都会保持这种状态，所以我们可以在函数的开始使用一个快捷方式来查看分布式向量的分区器对象（以共享指针的形式存储）是否与MatrixFree所期望的布局相同，它被存储在一个由[2.x.3876] 访问的数据结构中 ]，其中的0表示从中提取的DoFHandler编号；我们在MatrixFree中只使用一个DoFHandler，所以这里唯一有效的编号是0。
//
[0.x.33423] 
[0.x.33424] 
[0.x.33425] 
[0.x.33426] 
[0.x.33427] 
[0.x.33428] 
[0.x.33429] 
[0.x.33430] 
//
[0.x.33431] 
[0.x.33432] 
[0.x.33433] 
[0.x.33434] 
[0.x.33435] 
[0.x.33436] 
//
// 接下来的五个函数用于清除和初始化`LaplaceOperator`类，返回持有MatrixFree数据容器的共享指针，以及正确初始化向量和运算符大小，与[2.x.3877]或者说[2.x.3878]的内容相同。
[0.x.33437] 
[0.x.33438] 
[0.x.33439] 
[0.x.33440] 
[0.x.33441] 
//
[0.x.33442] 
[0.x.33443] 
[0.x.33444] 
[0.x.33445] 
[0.x.33446] 
[0.x.33447] 
//
[0.x.33448] 
[0.x.33449] 
[0.x.33450] 
[0.x.33451] 
[0.x.33452] 
[0.x.33453] 
//
[0.x.33454] 
[0.x.33455] 
[0.x.33456] 
[0.x.33457] 
[0.x.33458] 
[0.x.33459] 
//
[0.x.33460] 
[0.x.33461] 
[0.x.33462] 
[0.x.33463] 
[0.x.33464] 
[0.x.33465] 
//
// 这个函数在向量`src`上实现了LaplaceOperator的动作，并将结果存储在向量`dst`中。与[2.x.3879]相比，这个调用有四个新特性。
//
// 第一个新特性是上面提到的`adjust_ghost_range_if_necessary`函数，该函数需要使向量符合单元和面函数中FEEvaluation和FEFaceEvaluation所期望的布局。
//
// 第二个新特征是我们没有像[2.x.3880]中那样实现`vmult_add()`函数（通过虚拟函数[2.x.3881]，而是直接实现`vmult()`功能。由于单元和面的积分都将和到目的向量中，我们当然必须在某处将向量归零。对于DG元素，我们有两个选择&ndash；一个是使用[2.x.3882]而不是下面`apply_cell`函数中的[2.x.3883]。这是因为MatrixFree中的循环布局是这样的：单元积分总是在面积分之前接触到一个给定的向量条目。然而，这实际上只适用于完全不连续的基数，其中每个单元都有自己的自由度，不与邻近的结果共享。另一种设置，即这里选择的设置，是让[2.x.3884]来处理向量的归零问题。这可以被认为是在代码的某个地方简单地调用`dst = 0;`。对于像[2.x.3885]这样的支持性向量来说，实现起来就比较麻烦了，因为我们的目标是不要一次性将整个向量清零。在足够小的几千个向量项上进行归零操作的好处是，在[2.x.3886]和[2.x.3887]中再次访问之前，被归零的向量项会保留在缓存中，因为无矩阵运算符的评估真的很快，仅仅归零一个大的向量就会相当于运算符评估时间的25%，我们显然希望避免这种代价。对于[2.x.3888]和连续基数来说，也可以使用这种将向量归零的选项，尽管在[2.x.3889]或[2.x.3890]的教程程序中没有使用它。
//
// 第三个新特征是我们提供了在单元格、内面和边界面进行计算的函数方式。MatrixFree类有一个叫做`loop`的函数，它接收三个函数指针，用于三种情况，允许分开实现不同的东西。正如在[2.x.3891]中所解释的，这些函数指针可以是[2.x.3892]对象或类的成员函数。在这种情况下，我们使用指向成员函数的指针。
//
// 最后的新特征是可以给[2.x.3893]类型的最后两个参数，这个类将面积分的数据访问类型传递给并行向量的MPI数据交换例程[2.x.3895]和[2.x.3896]。其目的是不发送相邻元素的所有自由度，而是将数据量减少到手头计算真正需要的程度。数据交换是一个真正的瓶颈，特别是对于高自由度的DG方法来说，因此一个更严格的交换方式往往是有益的。枚举字段[2.x.3897]可以取值`none`，这意味着根本不做面的积分，这类似于[2.x.3898]的值`values`，意味着只使用面的形状函数值（但不使用导数），而值`gradients`时，除了值之外还访问面的第一导数。值`unspecified`意味着所有的自由度将被交换给位于处理器边界的面，并指定在本地处理器上进行处理。
//
// 为了了解数据是如何被减少的，想想节点元素FE_DGQ的情况，节点点在元素表面，在一个单元的[2.x.3902]个自由度中，只有[2.x.3899]个自由度对[2.x.3901]个空间维度的多项式程度的面的值有贡献。类似的减少也可以用于内部惩罚方法，该方法评估面的值和一导数。当在一维中使用类Hermite基时，最多只有两个基函数对数值和导数有贡献。FE_DGQHermite类实现了这一概念的张量乘积，在介绍中已经讨论过。因此，每个面只需交换[2.x.3903]个自由度，一旦[2.x.3904]个自由度大于4或5个，这显然是一种胜利。请注意，FE_DGQHermite的这种减少的交换在具有弯曲边界的网格上也是有效的，因为导数是在参考元素上取的，而几何体只在内部混合它们。因此，这与试图用连续的Hermite型形状函数获得[2.x.3905]的连续性不同，在这种情况下，非笛卡尔的情况会大大改变情况。显然，在非笛卡尔网格上，导数还包括超出法向导数的形状函数的切向导数，但这些也只需要元素表面的函数值。如果元素不提供任何压缩，循环会自动交换受影响单元的所有条目。
//
[0.x.33466] 
[0.x.33467] 
[0.x.33468] 
[0.x.33469] 
[0.x.33470] 
[0.x.33471] 
[0.x.33472] 
[0.x.33473] 
[0.x.33474] 
[0.x.33475] 
[0.x.33476] 
[0.x.33477] 
[0.x.33478] 
//
//*zero_dst = [2.x.3906] true,
//
 
[0.x.33480] 
[0.x.33481] 
//
// 由于拉普拉斯是对称的，`Tvmult()`（多网格平滑界面需要）操作被简单地转发给`vmult()`的情况。
//
[0.x.33482] 
[0.x.33483] 
[0.x.33484] 
[0.x.33485] 
[0.x.33486] 
[0.x.33487] 
[0.x.33488] 
//
//单元格的操作与[2.x.3907]非常相似。不过我们在这里没有使用系数。第二个区别是，我们用一个单一的函数调用[2.x.3910]代替了[2.x.3908]后面的[2.x.3909]这两个步骤，在内部调用这两个单独方法的序列。同样，[2.x.3911]实现了[2.x.3912]之后的[2.x.3913]的序列。 在这种情况下，这些新函数只是节省了两行代码。然而，我们用它们来与FEFaceEvaluation进行类比，在那里它们更重要，如下所述。
//
[0.x.33489] 
[0.x.33490] 
[0.x.33491] 
[0.x.33492] 
[0.x.33493] 
[0.x.33494] 
[0.x.33495] 
[0.x.33496] 
[0.x.33497] 
[0.x.33498] 
[0.x.33499] 
[0.x.33500] 
[0.x.33501] 
[0.x.33502] 
[0.x.33503] 
[0.x.33504] 
[0.x.33505] 
//
// 面部操作实现了与[2.x.3914]类似的内部惩罚方法的条款，正如介绍中所解释的。我们需要两个评估器对象来完成这个任务，一个用于处理来自内部面的两边之一的单元格的解，另一个用于处理来自另一边的解。面积分的评价器被称为FEFaceEvaluation，并在构造函数的第二个槽中接受一个布尔参数，以指示评价器应属于两边中的哪一边。在FEFaceEvaluation和MatrixFree中，我们称两边中的一边为 "内部"，另一边为 "外部"。`外部'这个名字是指两边的评价器将返回相同的法向量。对于 "内部 "一侧，法向量指向外部，而另一侧则指向内部，并且与该单元的外部法向量相对应。除了新的类名之外，我们再次得到了一系列的项目，与[2.x.3915]中讨论的类似，但在这种情况下是针对内部面的。请注意，MatrixFree的数据结构形成了面的批次，类似于单元积分的单元批次。一批中的所有面涉及不同的单元格编号，但在参考单元格中具有相同的面编号，具有相同的细化配置（无细化或相同的子面）和相同的方向，以保持SIMD操作的简单和高效。
//
// 注意，除了法线方向的逻辑决定外，内部与外部没有任何隐含的意义，这在内部是相当随机的。我们绝对不能依赖分配内部与外部标志的某种模式，因为这个决定是为了MatrixFree设置例程中的访问规则性和统一性而做出的。由于大多数正常的DG方法都是保守的，也就是说，通量在接口的两边看起来都是一样的，所以如果内部/外部标志被调换，法线向量得到相反的符号，那么数学就不会有任何改变。
//
[0.x.33506] 
[0.x.33507] 
[0.x.33508] 
[0.x.33509] 
[0.x.33510] 
[0.x.33511] 
[0.x.33512] 
[0.x.33513] 
[0.x.33514] 
[0.x.33515] 
[0.x.33516] 
[0.x.33517] 
[0.x.33518] 
//
// 在给定的一批面孔上，我们首先更新指向当前面孔的指针，然后访问矢量。如上所述，我们把访问向量和评估结合起来。在面积分的情况下，对于FE_DGQHermite基础的特殊情况，可以减少对向量的数据访问，正如上面解释的数据交换。由于[2.x.3916]个单元自由度中只有[2.x.3917]个单元自由度被非零值或形状函数的导数所乘，这种结构可以被用于评估，大大减少了数据访问。减少数据访问不仅是有益的，因为它减少了飞行中的数据，从而有助于缓存，而且当从单元格索引列表中相距较远的单元格收集数值时，对面的数据访问往往比单元格积分更不规则。
//
[0.x.33519] 
[0.x.33520] 
[0.x.33521] 
[0.x.33522] 
[0.x.33523] 
[0.x.33524] 
[0.x.33525] 
[0.x.33526] 
//
// 接下来的两个语句是计算内部惩罚法的惩罚参数。正如在介绍中所解释的，我们希望有一个像[2.x.3918]这样的长度[2.x.3919]法线到面的缩放比例。对于一般的非笛卡尔网格，这个长度必须由反雅各布系数乘以实坐标的法向量的乘积来计算。从这个 "dim "分量的向量中，我们必须最终挑选出与参考单元的法线方向一致的分量。在MatrixFree中存储的几何数据中，雅各布式中的分量被应用，使得后一个方向总是最后一个分量`dim-1`（这很有利，因为参考单元的导数排序可以与面的方向无关）。这意味着我们可以简单地访问最后一个分量`dim-1`，而不必在`data.get_face_info(face).internal_face_no`和`data.get_face_info(face).exterior_face_no`中查找局部面的编号。最后，我们还必须取这些因素的绝对值，因为法线可能指向正或负的方向。
//
[0.x.33527] 
[0.x.33528] 
[0.x.33529] 
[0.x.33530] 
[0.x.33531] 
[0.x.33532] 
[0.x.33533] 
//
// 在正交点的循环中，我们最终计算了对内部惩罚方案的所有贡献。根据介绍中的公式，测试函数的值被乘以解决方案中的跳跃乘以惩罚参数和实空间中的法向导数的平均值的差值。由于内侧和外侧的两个评估器由于跳跃而得到不同的符号，我们在这里用不同的符号传递结果。测试函数的正态导数会被内侧和外侧的解决方案中的负跳跃所乘。这个术语，被称为邻接一致性术语，根据其与原始一致性术语的关系，在代码中还必须包括[2.x.3920]的系数，由于测试函数槽中的平均数，它得到了二分之一的系数。
//
[0.x.33534] 
[0.x.33535] 
[0.x.33536] 
[0.x.33537] 
[0.x.33538] 
[0.x.33539] 
[0.x.33540] 
[0.x.33541] 
[0.x.33542] 
[0.x.33543] 
//
[0.x.33544] 
[0.x.33545] 
//
[0.x.33546] 
[0.x.33547] 
[0.x.33548] 
//
// 一旦我们完成了正交点的循环，我们就可以对面的积分循环进行和因子化操作，并将结果加到结果向量中，使用`integrate_scatter`函数。`scatter'这个名字反映了使用与`gather_evaluate'相同的模式将矢量数据分布到矢量中的分散位置。像以前一样，整合+写操作的组合允许我们减少数据访问。
//
[0.x.33549] 
[0.x.33550] 
[0.x.33551] 
[0.x.33552] 
[0.x.33553] 
[0.x.33554] 
[0.x.33555] 
[0.x.33556] 
//
// 边界面函数大体上沿用了内部面函数。唯一的区别是，我们没有一个单独的FEFaceEvaluation对象为我们提供外部值 [2.x.3921] ，但我们必须从边界条件和内部值 [2.x.3922] 来定义它们。正如介绍中所解释的，我们在Dirichlet边界上使用[2.x.3923]和[2.x.3924]，在Neumann边界上使用[2.x.3925]和[2.x.3926] 。由于这个操作实现了同质部分，即矩阵-向量乘积，我们必须在这里忽略边界函数[2.x.3927]和[2.x.3928]，并在[2.x.3929]中把它们加到右侧。 ] 注意，由于通过[2.x.3931]将解[2.x.3930]扩展到外部，我们可以保持所有因子[2.x.3932]与内面函数相同，也可参见[2.x.3933]中的讨论。
//
// 在这一点上有一个问题。下面的实现使用一个布尔变量`is_dirichlet`来切换Dirichlet和Neumann情况。然而，我们解决了一个问题，我们还想在一些边界上施加周期性的边界条件，即沿着[2.x.3934]方向的边界。人们可能会问，这里应该如何处理这些条件。答案是MatrixFree会自动将周期性边界视为技术上的边界，即两个相邻单元的解值相遇的内面，必须用适当的数值通量来处理。因此，周期性边界上的所有面将出现在`apply_face()`函数中，而不是这个函数中。
//
[0.x.33557] 
[0.x.33558] 
[0.x.33559] 
[0.x.33560] 
[0.x.33561] 
[0.x.33562] 
[0.x.33563] 
[0.x.33564] 
[0.x.33565] 
[0.x.33566] 
[0.x.33567] 
[0.x.33568] 
[0.x.33569] 
[0.x.33570] 
[0.x.33571] 
//
[0.x.33572] 
[0.x.33573] 
[0.x.33574] 
[0.x.33575] 
[0.x.33576] 
//
[0.x.33577] 
//
[0.x.33578] 
[0.x.33579] 
[0.x.33580] 
[0.x.33581] 
[0.x.33582] 
[0.x.33583] 
[0.x.33584] 
[0.x.33585] 
[0.x.33586] 
[0.x.33587] 
[0.x.33588] 
[0.x.33589] 
[0.x.33590] 
[0.x.33591] 
[0.x.33592] 
[0.x.33593] 
[0.x.33594] 
[0.x.33595] 
[0.x.33596] 
[0.x.33597] 
[0.x.33598] 
[0.x.33599] 
//
// 接下来我们来看看预处理程序的初始化。正如介绍中所解释的，我们想从一维质量和拉普拉斯矩阵的乘积中构造一个（近似的）单元矩阵的逆。我们的首要任务是计算一维矩阵，我们通过首先创建一个一维有限元来实现。在这里，我们没有预见到FE_DGQHermite<1>，而是从DoFHandler获得有限元的名称，用1替换[2.x.3935]参数（2或3）来创建一个一维名称，并通过使用FETools来构造一维元素。
//
[0.x.33600] 
[0.x.33601] 
[0.x.33602] 
[0.x.33603] 
[0.x.33604] 
//
[0.x.33605] 
[0.x.33606] 
[0.x.33607] 
//
// 至于在单位元素上计算一维矩阵，我们简单地写下在矩阵的行和列以及正交点上的典型装配程序会做什么。我们一劳永逸地选择相同的拉普拉斯矩阵，对内部面使用系数0.5（但可能由于网格的原因，在不同方向上的缩放比例不同）。因此，我们在Dirichlet边界（正确的系数应该是导数项为1，惩罚项为2，见[2.x.3936]）或在Neumann边界（系数应该为0）犯了一个小错误。由于我们只在多网格方案中使用这个类作为平滑器，这个错误不会有任何重大影响，只是影响平滑质量。
//
[0.x.33608] 
[0.x.33609] 
[0.x.33610] 
[0.x.33611] 
[0.x.33612] 
[0.x.33613] 
[0.x.33614] 
[0.x.33615] 
[0.x.33616] 
//
[0.x.33617] 
[0.x.33618] 
[0.x.33619] 
[0.x.33620] 
[0.x.33621] 
[0.x.33622] 
[0.x.33623] 
[0.x.33624] 
[0.x.33625] 
[0.x.33626] 
[0.x.33627] 
[0.x.33628] 
[0.x.33629] 
[0.x.33630] 
[0.x.33631] 
[0.x.33632] 
//
// 接下来两个语句组装的左右边界项似乎有一些任意的符号，但这些都是正确的，可以通过查看[2.x.3937]并插入1D情况下的法向量的值-1和1来验证。
//
[0.x.33633] 
[0.x.33634] 
[0.x.33635] 
[0.x.33636] 
[0.x.33637] 
[0.x.33638] 
[0.x.33639] 
//
[0.x.33640] 
[0.x.33641] 
[0.x.33642] 
[0.x.33643] 
[0.x.33644] 
[0.x.33645] 
[0.x.33646] 
//
[0.x.33647] 
[0.x.33648] 
//
// 接下来，我们通过单元格，将缩放后的矩阵传递给TensorProductMatrixSymmetricSum，以实际计算代表逆的广义特征值问题。由于矩阵的近似构造为[2.x.3938]，并且每个元素的权重是恒定的，我们可以在拉普拉斯矩阵上应用所有的权重，并简单地保持质量矩阵不被缩放。在单元格的循环中，我们要利用MatrixFree类提供的几何体压缩，并检查当前的几何体是否与上一批单元格上的几何体相同，在这种情况下就没有什么可做的。一旦调用了`reinit()`，就可以通过[2.x.3939]访问这种压缩。
//
// 一旦我们通过FEEvaluation访问函数访问了反雅各布系数（我们取第4个正交点的，因为它们在笛卡尔单元的所有正交点上都应该是一样的），我们检查它是对角线的，然后提取原始雅各布系数的行列式，即反雅各布系数的行列式，并根据质量矩阵的一维拉普拉斯乘以[2.x.3941]份，设置权重为[2.x.3940] 。
//
[0.x.33649] 
[0.x.33650] 
[0.x.33651] 
[0.x.33652] 
[0.x.33653] 
[0.x.33654] 
//
[0.x.33655] 
[0.x.33656] 
//
[0.x.33657] 
[0.x.33658] 
//
[0.x.33659] 
[0.x.33660] 
[0.x.33661] 
[0.x.33662] 
[0.x.33663] 
[0.x.33664] 
//
[0.x.33665] 
[0.x.33666] 
[0.x.33667] 
[0.x.33668] 
//
[0.x.33669] 
[0.x.33670] 
[0.x.33671] 
[0.x.33672] 
[0.x.33673] 
//
// 一旦我们知道了拉普拉斯矩阵的比例系数，我们就将这个权重应用于未被缩放的DG拉普拉斯矩阵，并将数组发送到TensorProductMatrixSymmetricSum类，以计算介绍中提到的广义特征值问题。
//
[0.x.33674] 
[0.x.33675] 
[0.x.33676] 
[0.x.33677] 
[0.x.33678] 
[0.x.33679] 
[0.x.33680] 
[0.x.33681] 
[0.x.33682] 
[0.x.33683] 
[0.x.33684] 
//
// 在DG背景下，用于近似块状Jacobi预处理的vmult函数非常简单。我们只需要读取当前单元格批次的值，对张量积矩阵阵列中的给定条目进行逆运算，并将结果写回。在这个循环中，我们覆盖了`dst`中的内容，而不是首先将条目设置为零。这对于DG方法来说是合法的，因为每个单元都有独立的自由度。此外，我们手动写出所有单元批的循环，而不是通过[2.x.3942]我们这样做是因为我们知道我们在这里不需要通过MPI网络进行数据交换，因为所有的计算都是在每个处理器上的本地单元上完成的。
//
[0.x.33685] 
[0.x.33686] 
[0.x.33687] 
[0.x.33688] 
[0.x.33689] 
[0.x.33690] 
[0.x.33691] 
//
[0.x.33692] 
[0.x.33693] 
[0.x.33694] 
[0.x.33695] 
[0.x.33696] 
[0.x.33697] 
[0.x.33698] 
[0.x.33699] 
[0.x.33700] 
[0.x.33701] 
[0.x.33702] 
[0.x.33703] 
[0.x.33704] 
//
// LaplaceProblem类的定义与 [2.x.3943] 非常相似。一个区别是我们将元素度作为模板参数添加到类中，这将允许我们通过在`main()`函数中创建不同的实例，更容易在同一个程序中包含多个度。第二个区别是选择了FE_DGQHermite这个元素，它是专门用于这种方程的。
//
[0.x.33705] 
[0.x.33706] 
[0.x.33707] 
[0.x.33708] 
[0.x.33709] 
[0.x.33710] 
//
[0.x.33711] 
[0.x.33712] 
[0.x.33713] 
[0.x.33714] 
[0.x.33715] 
//
[0.x.33716] 
[0.x.33717] 
[0.x.33718] 
[0.x.33719] 
[0.x.33720] 
//
[0.x.33721] 
[0.x.33722] 
//
[0.x.33723] 
//
[0.x.33724] 
[0.x.33725] 
//
[0.x.33726] 
[0.x.33727] 
//
[0.x.33728] 
[0.x.33729] 
//
[0.x.33730] 
[0.x.33731] 
[0.x.33732] 
[0.x.33733] 
//
[0.x.33734] 
[0.x.33735] 
[0.x.33736] 
[0.x.33737] 
[0.x.33738] 
[0.x.33739] 
[0.x.33740] 
[0.x.33741] 
[0.x.33742] 
[0.x.33743] 
[0.x.33744] 
[0.x.33745] 
[0.x.33746] 
[0.x.33747] 
[0.x.33748] 
[0.x.33749] 
[0.x.33750] 
[0.x.33751] 
[0.x.33752] 
[0.x.33753] 
[0.x.33754] 
//
// 设置函数在两个方面与 [2.x.3944] 不同。首先是我们不需要为不连续的Ansatz空间插值任何约束，而只是将一个假的AffineConstraints对象传入[2.x.3945] 第二个变化是因为我们需要告诉MatrixFree同时初始化面的数据结构。我们通过为内部面和边界面分别设置更新标志来做到这一点。在边界面，我们需要函数值、它们的梯度、JxW值（用于积分）、法向量和正交点（用于边界条件的评估），而对于内部面，我们只需要形状函数值、梯度、JxW值和法向量。只要`mapping_update_flags_inner_faces`或`mapping_update_flags_boundary_faces`中的一个与UpdateFlags的默认值`update_default`不同，MatrixFree中的面数据结构总是被建立的。
//
[0.x.33755] 
[0.x.33756] 
[0.x.33757] 
[0.x.33758] 
[0.x.33759] 
//
[0.x.33760] 
[0.x.33761] 
//
[0.x.33762] 
[0.x.33763] 
//
[0.x.33764] 
[0.x.33765] 
//
[0.x.33766] 
[0.x.33767] 
[0.x.33768] 
[0.x.33769] 
//
[0.x.33770] 
[0.x.33771] 
//
[0.x.33772] 
[0.x.33773] 
[0.x.33774] 
[0.x.33775] 
[0.x.33776] 
[0.x.33777] 
[0.x.33778] 
[0.x.33779] 
[0.x.33780] 
[0.x.33781] 
[0.x.33782] 
[0.x.33783] 
[0.x.33784] 
[0.x.33785] 
[0.x.33786] 
[0.x.33787] 
[0.x.33788] 
//
[0.x.33789] 
[0.x.33790] 
//
[0.x.33791] 
[0.x.33792] 
[0.x.33793] 
[0.x.33794] 
//
[0.x.33795] 
[0.x.33796] 
//
[0.x.33797] 
[0.x.33798] 
[0.x.33799] 
[0.x.33800] 
[0.x.33801] 
[0.x.33802] 
[0.x.33803] 
[0.x.33804] 
[0.x.33805] 
[0.x.33806] 
[0.x.33807] 
[0.x.33808] 
[0.x.33809] 
[0.x.33810] 
[0.x.33811] 
[0.x.33812] 
[0.x.33813] 
[0.x.33814] 
[0.x.33815] 
//
[0.x.33816] 
[0.x.33817] 
[0.x.33818] 
[0.x.33819] 
[0.x.33820] 
[0.x.33821] 
//
// 右手边的计算比 [2.x.3946] 中的计算要复杂一些。现在的单元项包括分析解的负拉普拉斯，`RightHandSide'，为此我们需要首先将VectorizedArray字段的Point，即一批点，通过分别评估VectorizedArray中的所有通道，拆成一个点。请记住，通道的数量取决于硬件；对于不提供矢量化的系统（或deal.II没有本征），它可能是1，但在最近的Intel架构的AVX-512上也可能是8或16。
//
[0.x.33822] 
[0.x.33823] 
[0.x.33824] 
[0.x.33825] 
[0.x.33826] 
[0.x.33827] 
[0.x.33828] 
[0.x.33829] 
[0.x.33830] 
[0.x.33831] 
[0.x.33832] 
[0.x.33833] 
[0.x.33834] 
[0.x.33835] 
[0.x.33836] 
[0.x.33837] 
[0.x.33838] 
[0.x.33839] 
[0.x.33840] 
[0.x.33841] 
[0.x.33842] 
[0.x.33843] 
[0.x.33844] 
[0.x.33845] 
[0.x.33846] 
[0.x.33847] 
[0.x.33848] 
[0.x.33849] 
//
// 其次，我们还需要应用Dirichlet和Neumann边界条件。一旦Dirichlet边界上的外部求解值[2.x.3948]和[2.x.3949]以及Neumann边界上的[2.x.3950]和[2.x.3951]被插入并以边界函数[2.x.3952]和[2.x.3953]展开，这个函数就是到函数[2.x.3947]所缺的部分。需要记住的一点是，我们把边界条件移到右手边，所以符号与我们强加在解的部分相反。
//
// 我们可以通过[2.x.3954]部分发出单元格和边界部分，但我们选择手动写出所有面的完整循环，以了解MatrixFree中面的索引布局是如何设置的：内部面和边界面都共享索引范围，所有批次的内部面的数字都比批次的边界单元格低。两种变体的单一索引使我们可以很容易地在两种情况下使用相同的数据结构FEFaceEvaluation，它附着在同一个数据域上，只是位置不同。内层面的批次（其中一个批次是由于将几个面合并成一个面进行矢量化）的数量由[2.x.3955]给出，而边界面的批次数量由[2.x.3956]给出。
[0.x.33850] 
[0.x.33851] 
[0.x.33852] 
[0.x.33853] 
[0.x.33854] 
[0.x.33855] 
//
[0.x.33856] 
[0.x.33857] 
[0.x.33858] 
[0.x.33859] 
[0.x.33860] 
//
[0.x.33861] 
[0.x.33862] 
[0.x.33863] 
[0.x.33864] 
[0.x.33865] 
[0.x.33866] 
[0.x.33867] 
//
[0.x.33868] 
[0.x.33869] 
[0.x.33870] 
[0.x.33871] 
[0.x.33872] 
//
// MatrixFree类让我们查询当前面批的边界_id。请记住，MatrixFree为矢量化设置了批次，使一个批次中的所有面孔都有相同的属性，其中包括它们的`边界_id'。因此，我们可以在这里为当前面的索引`face`查询该id，并在Dirichlet情况下（我们在函数值上添加一些东西）或Neumann情况下（我们在法线导数上添加一些东西）施加。
//
[0.x.33873] 
[0.x.33874] 
[0.x.33875] 
[0.x.33876] 
[0.x.33877] 
[0.x.33878] 
[0.x.33879] 
[0.x.33880] 
[0.x.33881] 
[0.x.33882] 
[0.x.33883] 
[0.x.33884] 
[0.x.33885] 
[0.x.33886] 
[0.x.33887] 
[0.x.33888] 
[0.x.33889] 
[0.x.33890] 
[0.x.33891] 
//
// 由于我们手动运行了单元格的循环，而不是使用[2.x.3957]，我们不能忘记与MPI进行数据交换。
//
// 或者说，对于DG元素来说，我们不需要这样做，因为每个单元都有自己的自由度，单元和边界积分只对本地拥有的单元进行评估。与相邻子域的耦合只通过内表面积分来实现，我们在这里没有做这个。也就是说，在这里调用这个函数并没有什么坏处，所以我们这样做是为了提醒大家在[2.x.3958]里面发生了什么。
[0.x.33892] 
[0.x.33893] 
[0.x.33894] 
[0.x.33895] 
[0.x.33896] 
//
// `solve()`函数几乎逐字复制自 [2.x.3959] 。我们设置了相同的多网格成分，即水平转移、平滑器和粗略的网格求解器。唯一不同的是，我们没有使用拉普拉斯的对角线作为用于平滑的切比雪夫迭代的预处理，而是使用我们新解决的类`%PreconditionBlockJacobi`。不过，机制是一样的。
//
[0.x.33897] 
[0.x.33898] 
[0.x.33899] 
[0.x.33900] 
[0.x.33901] 
[0.x.33902] 
[0.x.33903] 
[0.x.33904] 
[0.x.33905] 
[0.x.33906] 
//
[0.x.33907] 
[0.x.33908] 
[0.x.33909] 
[0.x.33910] 
[0.x.33911] 
[0.x.33912] 
[0.x.33913] 
[0.x.33914] 
[0.x.33915] 
[0.x.33916] 
[0.x.33917] 
[0.x.33918] 
[0.x.33919] 
[0.x.33920] 
[0.x.33921] 
[0.x.33922] 
[0.x.33923] 
[0.x.33924] 
[0.x.33925] 
[0.x.33926] 
[0.x.33927] 
[0.x.33928] 
[0.x.33929] 
[0.x.33930] 
[0.x.33931] 
[0.x.33932] 
[0.x.33933] 
[0.x.33934] 
[0.x.33935] 
//
[0.x.33936] 
[0.x.33937] 
[0.x.33938] 
//
[0.x.33939] 
[0.x.33940] 
//
[0.x.33941] 
[0.x.33942] 
//
[0.x.33943] 
[0.x.33944] 
[0.x.33945] 
[0.x.33946] 
//
[0.x.33947] 
[0.x.33948] 
[0.x.33949] 
[0.x.33950] 
[0.x.33951] 
[0.x.33952] 
//
[0.x.33953] 
[0.x.33954] 
[0.x.33955] 
//
[0.x.33956] 
[0.x.33957] 
[0.x.33958] 
//
// 由于我们已经用分析法解决了一个问题，我们想通过计算数值结果与分析法的L2误差来验证我们实现的正确性。
//
[0.x.33959] 
[0.x.33960] 
[0.x.33961] 
[0.x.33962] 
[0.x.33963] 
[0.x.33964] 
[0.x.33965] 
[0.x.33966] 
[0.x.33967] 
[0.x.33968] 
[0.x.33969] 
[0.x.33970] 
[0.x.33971] 
[0.x.33972] 
[0.x.33973] 
[0.x.33974] 
//
// `run()`函数设置了初始网格，然后以常规方式运行多网格程序。作为一个域，我们选择一个矩形，在[2.x.3960]-方向上有周期性的边界条件，在[2.x.3961]方向上的正面（即索引号为2的面，边界id等于0）有迪里希特条件，在背面以及[2.x.3962]方向上的两个面为三维情况（边界id等于1）有纽曼条件。与[2.x.3964]和[2.x.3965]方向相比，[2.x.3963]方向的域的范围有些不同（考虑到 "解决方案 "的定义，我们希望在这里实现周期性的解决方案）。
//
[0.x.33975] 
[0.x.33976] 
[0.x.33977] 
[0.x.33978] 
[0.x.33979] 
[0.x.33980] 
[0.x.33981] 
[0.x.33982] 
[0.x.33983] 
[0.x.33984] 
[0.x.33985] 
[0.x.33986] 
//
[0.x.33987] 
[0.x.33988] 
[0.x.33989] 
[0.x.33990] 
[0.x.33991] 
[0.x.33992] 
[0.x.33993] 
[0.x.33994] 
[0.x.33995] 
[0.x.33996] 
[0.x.33997] 
[0.x.33998] 
[0.x.33999] 
[0.x.34000] 
[0.x.34001] 
[0.x.34002] 
//
[0.x.34003] 
[0.x.34004] 
[0.x.34005] 
[0.x.34006] 
[0.x.34007] 
[0.x.34008] 
//
[0.x.34009] 
[0.x.34010] 
[0.x.34011] 
[0.x.34012] 
[0.x.34013] 
[0.x.34014] 
[0.x.34015] 
[0.x.34016] 
[0.x.34017] 
[0.x.34018] 
[0.x.34019] 

// `main()`函数中没有任何意外。我们通过`MPI_Init()`类调用`MPI_InitFinalize`，传入文件顶部设置的关于维度和度的两个参数，然后运行拉普拉斯问题。
//
[0.x.34020] 
[0.x.34021] 
[0.x.34022] 
[0.x.34023] 
[0.x.34024] 
//
[0.x.34025] 
//
[0.x.34026] 
[0.x.34027] 
[0.x.34028] 
[0.x.34029] 
[0.x.34030] 
[0.x.34031] 
[0.x.34032] 
[0.x.34033] 
[0.x.34034] 
[0.x.34035] 
[0.x.34036] 
[0.x.34037] 
[0.x.34038] 
[0.x.34039] 
[0.x.34040] 
[0.x.34041] 
[0.x.34042] 
[0.x.34043] 
[0.x.34044] 
[0.x.34045] 
[0.x.34046] 
[0.x.34047] 
[0.x.34048] 
[0.x.34049] 
[0.x.34050] 
[0.x.34051] 
[0.x.34052] 
[0.x.34053] 
//
[0.x.34054] 
[0.x.34055] 
[0.x.34056] 
[0.x.34057] 
[0.x.34058] 
[0.x.34059] 
[0.x.34060] 
[0.x.34061] 
[0.x.34062] 
[0.x.34063] 
[0.x.34064] 
[0.x.34065] 
[0.x.34066] 
[0.x.34067] 
[0.x.34068] 
[0.x.34069] 
//
[0.x.34070] 
[0.x.34071] 
[0.x.34072] 
//[2.x.3966] 
//
// 前面几个文件已经在前面的例子中讲过了，因此不再做进一步的评论。
//
[0.x.34073] 
//
[0.x.34074] 
[0.x.34075] 
//
[0.x.34076] 
//
[0.x.34077] 
[0.x.34078] 
//
[0.x.34079] 
[0.x.34080] 
[0.x.34081] 
[0.x.34082] 
[0.x.34083] 
[0.x.34084] 
//
[0.x.34085] 
[0.x.34086] 
//
[0.x.34087] 
//
// 从下面的include文件中我们将导入H1-conforming有限元形状函数的声明。这个有限元系列被称为 [2.x.3967] ，在之前的所有例子中已经被用来定义通常的双线性或三线性元素，但我们现在将用它来定义双二次元元素。
//
[0.x.34088] 
//
// 我们不会像前面的例子那样从文件中读取网格，而是使用库中的一个函数生成网格。然而，我们将希望在每一步中写出局部细化的网格（只是网格，而不是解决方案），所以我们需要以下的include文件，而不是[2.x.3968] 。
//
[0.x.34089] 
//
// 当使用局部细化网格时，我们会得到所谓的<code>悬空节点</code>。然而，标准的有限元方法假定离散的解空间是连续的，所以我们需要确保悬挂节点上的自由度符合一些约束条件，这样全局解是连续的。我们也要在这个对象中存储边界条件。下面的文件包含一个用来处理这些约束条件的类。
//
[0.x.34090] 
//
// 为了在本地细化我们的网格，我们需要一个来自库的函数，根据我们计算的误差指标来决定哪些单元需要细化或粗化。这个函数被定义在这里。
//
[0.x.34091] 
//
// 最后，我们需要一个简单的方法来实际计算基于某种误差估计的细化指标。虽然一般来说，适应性是非常具体的问题，但以下文件中的误差指标通常会对一大类问题产生相当好的适应网格。
//
[0.x.34092] 
//
// 最后，这和以前的程序一样。
//
[0.x.34093] 
//[2.x.3969] 
//
// 主类又是几乎没有变化的。然而，我们增加了两项内容：我们增加了[2.x.3970]函数，该函数用于自适应地细化网格（而不是之前例子中的全局细化），还有一个变量，它将保存约束条件。
//
[0.x.34094] 
[0.x.34095] 
[0.x.34096] 
[0.x.34097] 
[0.x.34098] 
//
[0.x.34099] 
//
[0.x.34100] 
[0.x.34101] 
[0.x.34102] 
[0.x.34103] 
[0.x.34104] 
[0.x.34105] 
//
[0.x.34106] 
//
[0.x.34107] 
[0.x.34108] 
//
// 这是主类中的新变量。我们需要一个对象，它持有一个约束条件的列表，以保持悬挂节点和边界条件。
//
[0.x.34109] 
//
[0.x.34110] 
[0.x.34111] 
//
[0.x.34112] 
[0.x.34113] 
[0.x.34114] 
//[2.x.3971] 
//
//非恒定系数的实现是逐字复制自 [2.x.3972] 。
//
[0.x.34115] 
[0.x.34116] 
[0.x.34117] 
[0.x.34118] 
[0.x.34119] 
[0.x.34120] 
[0.x.34121] 
[0.x.34122] 
//
// [2.x.3973] 
//[2.x.3974] 
//
// 这个类的构造函数与之前的基本相同，但这一次我们要使用二次元。为此，我们只需用所需的多项式度数（这里是[2.x.3976]）替换构造函数参数（在之前的所有例子中是[2.x.3975]）。
//
[0.x.34123] 
[0.x.34124] 
[0.x.34125] 
[0.x.34126] 
[0.x.34127] 
//
// [2.x.3977] 
//
// 下一个函数设置了所有描述线性有限元问题的变量，如DoFHandler、矩阵和向量。与我们在[2.x.3978]中所做的不同的是，我们现在还必须处理悬挂节点约束。这些约束几乎完全由库来处理，也就是说，你只需要知道它们的存在以及如何获得它们，但你不需要知道它们是如何形成的，也不需要知道对它们到底做了什么。
//
// 在函数的开头，你会发现所有与[2.x.3979]中相同的东西：设置自由度（这次我们有二次元，但从用户代码的角度看与线性--或任何其他程度的情况没有区别），生成稀疏模式，并初始化解和右手向量。请注意，现在每行的稀疏模式将有更多的条目，因为现在每个单元有9个自由度（而不是只有4个），它们可以相互耦合。
//
[0.x.34128] 
[0.x.34129] 
[0.x.34130] 
[0.x.34131] 
//
[0.x.34132] 
[0.x.34133] 
//
// 我们现在可以用悬挂节点的约束来填充AffineConstraints对象。由于我们将在一个循环中调用这个函数，所以我们首先清除上一个系统中的当前约束集，然后计算新的约束。
//
[0.x.34134] 
[0.x.34135] 
//
// 现在我们准备用指标0（整个边界）来插值边界值，并将得到的约束存储在我们的[2.x.3980]对象中。请注意，我们并不像在前面的步骤中那样，在装配后应用边界条件：相反，我们将所有的约束条件放在AffineConstraints对象中的我们的函数空间。我们可以按任何顺序向AffineConstraints对象添加约束：如果两个约束发生冲突，那么约束矩阵要么中止，要么通过Assert宏抛出一个异常。
//
[0.x.34136] 
[0.x.34137] 
[0.x.34138] 
[0.x.34139] 
//
// 在所有约束条件被添加之后，需要对它们进行排序和重新排列，以便更有效地执行一些操作。这种后处理是用[2.x.3981]函数完成的，之后就不能再添加任何约束了。
//
[0.x.34140] 
//
// 现在我们首先建立我们的压缩稀疏模式，就像我们在前面的例子中做的那样。然而，我们并没有立即将其复制到最终的稀疏度模式中。 请注意，我们调用了make_sparsity_pattern的一个变体，它把AffineConstraints对象作为第三个参数。我们通过将参数[2.x.3983]设置为false（换句话说，我们永远不会写入矩阵中对应于受限自由度的条目），让该例程知道我们永远不会写入[2.x.3982]所给的位置。如果我们在装配后对约束进行压缩，我们就必须通过[2.x.3984]来代替，因为这样我们就会先写进这些位置，然后在压缩过程中再将它们设置为零。
//
[0.x.34141] 
[0.x.34142] 
[0.x.34143] 
[0.x.34144] 

//keep_constrained_dofs = [2.x.3985] false）。)
//
// 现在，矩阵的所有非零条目都是已知的（即那些来自定期组装矩阵的条目和那些通过消除约束引入的条目）。我们可以将我们的中间对象复制到稀疏模式中。
//
[0.x.34145] 
//
// 我们现在可以，最后，初始化稀疏矩阵。
//
[0.x.34146] 
[0.x.34147] 
//[2.x.3986] 
//
// 接下来，我们要对矩阵进行组装。然而，为了将每个单元上的本地矩阵和向量复制到全局系统中，我们不再使用手写的循环。相反，我们使用[2.x.3987]，在内部执行这个循环，同时对对应于受限自由度的行和列进行高斯消除。
//
// 构成局部贡献的其余代码保持不变。然而，值得注意的是，在引擎盖下，有几件事与以前不同。首先，变量[2.x.3988]和返回值[2.x.3989]现在各为9，以前是4。引入这样的变量作为缩写是一个很好的策略，可以使代码在不同的元素下工作，而不需要改变太多的代码。其次，[2.x.3990]对象当然也需要做其他事情，因为现在的形状函数是二次的，而不是线性的，在每个坐标变量中。不过，这也是完全由库来处理的事情。
//
[0.x.34148] 
[0.x.34149] 
[0.x.34150] 
[0.x.34151] 
//
[0.x.34152] 
[0.x.34153] 
[0.x.34154] 
[0.x.34155] 
//
[0.x.34156] 
//
[0.x.34157] 
[0.x.34158] 
//
[0.x.34159] 
//
[0.x.34160] 
[0.x.34161] 
[0.x.34162] 
[0.x.34163] 
//
[0.x.34164] 
//
[0.x.34165] 
[0.x.34166] 
[0.x.34167] 
[0.x.34168] 
[0.x.34169] 
[0.x.34170] 
[0.x.34171] 
[0.x.34172] 
[0.x.34173] 
[0.x.34174] 
[0.x.34175] 
[0.x.34176] 
//
[0.x.34177] 
[0.x.34178] 
[0.x.34179] 
[0.x.34180] 
[0.x.34181] 
//
// 最后，将[2.x.3991]和[2.x.3992]中的贡献转移到全局对象中。
//
[0.x.34182] 
[0.x.34183] 
[0.x.34184] 
[0.x.34185] 
//
// 现在我们已经完成了线性系统的组装。约束矩阵处理了应用边界条件的问题，也消除了悬挂的节点约束。受约束的节点仍然在线性系统中（在矩阵的对角线上有一个非零条目，选择的方式是使矩阵具有良好的条件，并且这一行的所有其他条目都被设置为零），但是计算出来的值是无效的（也就是说，[2.x.3993]中的相应条目目前是没有意义的）。我们在[2.x.3994]函数的最后为这些节点计算出正确的值。
//
[0.x.34186] 
//[2.x.3995] 
//
// 我们继续逐步改进。解决线性系统的函数再次使用了SSOR预处理程序，除了我们必须加入悬空节点约束外，其他的都没有改变。如上所述，通过对矩阵的行和列进行特殊处理，从AffineConstraints对象中删除了对应于悬挂节点约束和边界值的自由度。这样一来，这些自由度的值在求解线性系统后就有了错误的、但定义明确的值。然后我们要做的就是利用约束条件给它们分配它们应该有的值。这个过程被称为[2.x.3996]约束，从无约束的节点的值中计算出约束节点的值，只需要一个额外的函数调用，你可以在这个函数的末尾找到。
//
[0.x.34187] 
[0.x.34188] 
[0.x.34189] 
[0.x.34190] 
[0.x.34191] 
//
[0.x.34192] 
[0.x.34193] 
//
[0.x.34194] 
//
[0.x.34195] 
[0.x.34196] 
//[2.x.3997] 
//
// 我们使用一个复杂的误差估计方案来细化网格，而不是全局细化。我们将使用KellyErrorEstimator类，该类实现了拉普拉斯方程的误差估计器；原则上它可以处理可变系数，但我们不会使用这些高级功能，而是使用其最简单的形式，因为我们对定量结果不感兴趣，只对生成局部细化网格的快速方法感兴趣。
//
// 尽管Kelly等人得出的误差估计器最初是为拉普拉斯方程开发的，但我们发现它也很适合于为一类广泛的问题快速生成局部细化网格。这个误差估计器使用了解梯度在单元面上的跳跃（这是一个测量二阶导数的方法），并将其按单元的大小进行缩放。因此，它是对每个单元的解的局部平滑性的测量，因此可以理解，它对双曲运输问题或波浪方程也能产生合理的网格，尽管这些网格与专门针对该问题的方法相比肯定是次优的。因此，这个误差估计器可以理解为测试自适应程序的一种快速方法。
//
// 估算器的工作方式是将描述自由度的[2.x.3998]对象和每个自由度的数值向量作为输入，为三角剖分的每个活动单元计算一个指标值（即每个活动单元一个数值）。为此，它需要两个额外的信息：一个面部正交公式，即[2.x.3999]维物体上的正交公式。我们再次使用3点高斯法则，这个选择与本程序中的双二次方有限元形状函数是一致和合适的。当然，什么是合适的正交规则取决于对误差估计器评估解场的方式的了解。如上所述，梯度的跳跃在每个面上都是集成的，对于本例中使用的二次元元素来说，这将是每个面上的二次元函数。然而，事实上，它是梯度跳动的平方，正如该类文件中所解释的那样，这是一个二次函数，对于它来说，3点高斯公式就足够了，因为它可以精确地整合5阶以下的多项式。)
//
// 其次，该函数需要一个边界指示器的列表，用于那些我们施加了[2.x.4000]类诺伊曼值的边界，以及每个此类边界的函数[2.x.4001]。这些信息由一个从边界指标到描述诺伊曼边界值的函数对象的映射来表示。在本例程序中，我们不使用诺伊曼边界值，所以这个映射是空的，实际上是在函数调用期望得到相应函数参数的地方使用映射的默认构造器构造的。
//
// 输出是一个所有活动单元的值的向量。虽然非常精确地计算一个解的自由度的[1.x.110]可能是有意义的，但通常没有必要特别精确地计算一个单元上的解对应的[1.x.111]。因此，我们通常使用一个浮点数的向量而不是一个双数的向量来表示误差指标。
//
[0.x.34197] 
[0.x.34198] 
[0.x.34199] 
[0.x.34200] 
//
[0.x.34201] 
[0.x.34202] 
[0.x.34203] 
[0.x.34204] 
[0.x.34205] 
//
// 上述函数为[2.x.4002]数组中的每个单元格返回一个错误指标值。现在的细化工作如下：细化那些误差值最高的30%的单元，粗化那些误差值最低的3%的单元。
//
// 人们可以很容易地验证，如果第二个数字为零，这大约会导致在两个空间维度上的每一步的细胞翻倍，因为对于每一个30%的细胞，四个新的将被替换，而其余70%的细胞保持不动。在实践中，通常会产生一些更多的单元，因为不允许一个单元被精炼两次而相邻的单元没有被精炼；在这种情况下，相邻的单元也会被精炼。
//
// 在许多应用中，被粗化的单元格数量将被设置为大于3%的数值。一个非零的值是很有用的，特别是当初始（粗）网格由于某种原因已经相当精细时。在这种情况下，可能有必要在某些区域进行细化，而在另一些区域进行粗化是有用的。在我们这里，初始网格是非常粗的，所以粗化只需要在一些可能发生过度细化的区域。因此，一个小的、非零的值在这里是合适的。
//
// 下面的函数现在接受这些细化指标，并使用上述方法对三角形的一些单元进行细化或粗化标记。它来自一个实现了几种不同算法的类，可以根据单元的误差指标来细化三角形。
//
[0.x.34206] 
[0.x.34207] 
[0.x.34208] 
[0.x.34209] 
//
// 在前一个函数退出后，一些单元被标记为细化，另一些单元被标记为粗化。然而，细化或粗化本身并没有被执行，因为有些情况下，进一步修改这些标志是有用的。在这里，我们不想做任何这样的事情，所以我们可以告诉三角计算执行单元格被标记的动作。
//
[0.x.34210] 
[0.x.34211] 
//[2.x.4003] 
//
// 在每个网格的计算结束后，在我们继续下一个网格细化周期之前，我们要输出这个周期的结果。
//
// 我们已经在[2.x.4004]中看到了如何实现对网格本身的输出。在这里，我们改变一些东西。 [2.x.4005] 
//[2.x.4006] 我们使用两种不同的格式。gnuplot和VTU。[2.x.4007] 
//[2.x.4008] 我们在输出文件名中嵌入了周期号。[2.x.4009] 
//[2.x.4010] 对于gnuplot输出，我们设置了一个[2.x.4011]对象，以提供一些额外的可视化参数，使边缘看起来是弯曲的。这在 [2.x.4012] 中有进一步的详细解释。[2.x.4013] 
//[2.x.4014] 
[0.x.34212] 
[0.x.34213] 
[0.x.34214] 
[0.x.34215] 
[0.x.34216] 
[0.x.34217] 
[0.x.34218] 
[0.x.34219] 
[0.x.34220] 
[0.x.34221] 
[0.x.34222] 
//
[0.x.34223] 
[0.x.34224] 
[0.x.34225] 
[0.x.34226] 
[0.x.34227] 
//
[0.x.34228] 
[0.x.34229] 
[0.x.34230] 
[0.x.34231] 
//[2.x.4015] 
//
// [2.x.4016]之前的最后一个函数又是该类的主要驱动， [2.x.4017] 。它与 [2.x.4018] 的函数类似，只是我们在程序中再次生成一个文件，而不是从磁盘中读取，我们自适应地而不是全局地细化网格，并且我们在本函数中输出最终网格上的解决方案。
//
// 该函数主循环的第一个块是处理网格生成。如果这是该程序的第一个循环，我们现在不是像上一个例子那样从磁盘上的文件中读取网格，而是再次使用库函数来创建它。域还是一个圆，中心在原点，半径为1（这是函数的两个隐藏参数，有默认值）。
//
// 你会注意到粗略的网格比我们在前面的例子中从文件中读出的网格质量要差：单元格的形成不太平均。然而，使用库函数，这个程序在任何空间维度上都可以工作，而以前不是这样的。
//
// 如果我们发现这不是第一个周期，我们要细化网格。与上一个例子程序中采用的全局细化不同，我们现在使用上述的自适应程序。
//
// 循环的其余部分看起来和以前一样。
//
[0.x.34232] 
[0.x.34233] 
[0.x.34234] 
[0.x.34235] 
[0.x.34236] 
[0.x.34237] 
//
[0.x.34238] 
[0.x.34239] 
[0.x.34240] 
[0.x.34241] 
[0.x.34242] 
[0.x.34243] 
[0.x.34244] 
//
[0.x.34245] 
[0.x.34246] 
//
[0.x.34247] 
//
[0.x.34248] 
[0.x.34249] 
//
[0.x.34250] 
[0.x.34251] 
[0.x.34252] 
[0.x.34253] 
[0.x.34254] 
//[2.x.4019] 
//
// 主函数的功能与之前的例子相比没有改变，但我们采取了额外的谨慎措施。有时，会出现一些问题（比如写输出文件时磁盘空间不足，试图分配向量或矩阵时内存不足，或者由于某种原因我们无法从文件中读取或写入文件），在这些情况下，库会抛出异常。由于这些是运行时的问题，而不是可以一劳永逸的编程错误，这种异常在优化模式下不会被关闭，与我们用来测试编程错误的[2.x.4020]宏相反。如果没有被捕获，这些异常会传播到[2.x.4021]函数的调用树上，如果它们在那里也没有被捕获，程序就会被中止。在很多情况下，比如内存或磁盘空间不足，我们什么也做不了，但我们至少可以打印一些文字，试图解释程序失败的原因。下面显示了一种方法。以这种方式编写任何较大的程序当然是有用的，你可以通过或多或少地复制这个函数来做到这一点，但[2.x.4022]块除外，它实际上编码了本应用程序所特有的功能。
//
[0.x.34255] 
[0.x.34256] 
//
// 这个函数布局的总体思路如下：让我们试着像以前那样运行程序......
//
[0.x.34257] 
[0.x.34258] 
[0.x.34259] 
[0.x.34260] 
[0.x.34261] 
//
// ......如果这应该是失败的，尽量收集尽可能多的信息。具体来说，如果被抛出的异常是一个从C++标准类派生出来的对象 [2.x.4023] 成员函数，以获得一个描述异常被抛出原因的字符串。
//
// deal.II的异常类都是从标准类派生出来的，特别是[2.x.4024]函数将返回与使用[2.x.4025]宏抛出的异常所产生的字符串大致相同。在前面的例子中，你已经看到了这种异常的输出，然后你知道它包含了异常发生的文件和行号，以及其他一些信息。这也是下面的语句会打印的内容。
//
// 除此以外，除了用错误代码退出程序（这就是[2.x.4026]的作用），我们能做的并不多。
//
[0.x.34262] 
[0.x.34263] 
[0.x.34264] 
[0.x.34265] 
[0.x.34266] 
[0.x.34267] 
[0.x.34268] 
[0.x.34269] 
[0.x.34270] 
[0.x.34271] 
[0.x.34272] 
//
[0.x.34273] 
[0.x.34274] 
//
// 如果在某处抛出的异常不是从标准[2.x.4027]类派生出来的对象，那么我们根本无法做任何事情。那么我们就简单地打印一个错误信息并退出。
//
[0.x.34275] 
[0.x.34276] 
[0.x.34277] 
[0.x.34278] 
[0.x.34279] 
[0.x.34280] 
[0.x.34281] 
[0.x.34282] 
[0.x.34283] 
[0.x.34284] 
[0.x.34285] 
[0.x.34286] 
//
// 如果我们走到这一步，就没有任何异常传播到主函数上（可能有异常，但它们在程序或库的某个地方被捕获）。因此，程序按预期执行，我们可以无误返回。
//
[0.x.34287] 
[0.x.34288] 
[0.x.34289] 
[0.x.34290] 
[0.x.34291] 
[0.x.34292] 
[0.x.34293] 
[0.x.34294] 
[0.x.34295] 
[0.x.34296] 
[0.x.34297] 
[0.x.34298] 
[0.x.34299] 
[0.x.34300] 
[0.x.34301] 
[0.x.34302] 
[0.x.34303] 
[0.x.34304] 
[0.x.34305] 
[0.x.34306] 
//[2.x.4028] 其中大部分已经在其他地方介绍过了，我们只对新的部分进行评论。
//
[0.x.34307] 
[0.x.34308] 
[0.x.34309] 
//
// 参数接受器类是本教程程序的第一个新颖之处：一般来说，参数文件是用来在运行时引导程序的执行。虽然即使是简单的方法也能节省编译时间，因为同一个可执行文件可以用不同的参数设置来运行，但要同时处理数百个参数，同时保持不同程序之间的兼容性，会变得很困难。这就是ParameterAcceptor类证明有用的地方。
//
// 该类用于定义一个公共接口，供那些希望使用一个全局ParameterHandler来处理参数的类使用。该类提供了一个静态的ParameterHandler成员，即[2.x.4029]，并实现了 "命令设计模式"（例如，见E. Gamma, R. Helm, R. Johnson, J. Vlissides, 设计模式。Elements of Reusable Object-Oriented Software, Addison-Wesley Professional, 1994. https:goo.gl/NYByc）。)
//
// ParameterAcceptor提供了一个全局订阅机制。每当一个从ParameterAcceptor派生出来的类的对象被构造出来时，一个指向该派生型对象的指针就会被注册，同时在参数文件中还有一个部分条目。这种注册表在调用单一函数[2.x.4030]时被遍历，该函数反过来确保所有存储在全局注册表中的类都声明它们将使用的参数，在声明了这些参数后，它读取`file.prm`的内容来解析实际参数。
//
// 如果你为你想在代码中使用的每个参数调用方法[2.x.4031]，你就不需要做其他事情了。如果你使用的是一个已经存在的类，它提供了`declare_parameters`和`parse_parameters`这两个函数，你仍然可以使用ParameterAcceptor，方法是将现有的类封装成ParameterAcceptorProxy类。
//
// 在这个例子中，我们将同时使用这两种策略，为deal.II类使用ParameterAcceptorProxy，并直接从ParameterAcceptor派生出我们自己的参数类。
//
[0.x.34310] 
//
[0.x.34311] 
[0.x.34312] 
[0.x.34313] 
//
// 另一个新的包含文件是包含[2.x.4032]类的文件。deal.II的结构和许多现代数值库一样，是按照有向无环图（DAG）组织的。DAG是一个具有拓扑顺序的有向图：每个节点在结构上代表一个对象，并通过一条（或多条）有向边与非根节点相连，从父节点到子节点。这种结构最重要的例子是Triangulation及其[2.x.4033]结构。从Triangulation（主节点），我们可以访问每个单元（三角形的子节点）。从单元本身，我们可以访问该单元的所有顶点。在这个简单的例子中，DAG结构可以表示为三种节点类型（三角结构、单元格迭代器和顶点），由从三角结构到单元格迭代器，以及从单元格迭代器到顶点的定向边连接。这有几个优点，但它本质上造成了 "不对称"，使某些操作变得很快，而它们的逆向操作却很慢：寻找一个单元的顶点的计算成本很低，可以通过简单地遍历DAG来完成，而寻找所有共享一个顶点的单元则需要进行非难事的计算，除非添加一个新的DAG数据结构来表示逆向搜索。
//
// 由于在有限元代码中通常不需要逆向操作，所以在GridTools中实现了这些操作，而没有使用与Triangulation相关的额外数据结构，这将使它们的速度更快。例如，这样的数据结构是一个从三角结构的顶点到所有共享这些顶点的单元的映射，这将减少回答前面问题所需的计算。
//
// 有些方法，例如[2.x.4034]大量使用了这些非标准操作。如果你需要多次调用这些方法，那么将这些数据结构存储在某个地方就变得很方便。 [2.x.4035]正是这样做的，它让你可以访问以前计算过的对象，或者在飞行中计算它们（然后将它们存储在类中供以后使用），并确保每当三角测量被更新时，相关的数据结构也被重新计算。
//
[0.x.34314] 
//
[0.x.34315] 
[0.x.34316] 
[0.x.34317] 
//
// 在这个例子中，我们将使用一个参考域来描述一个嵌入的三角形，通过一个有限元矢量场进行变形。
//
// 接下来的两个包含文件包含了在这些情况下可以使用的两个类的定义。MappingQEulerian允许人们通过一个*位移*场来描述一个域，基于FESystem[FE_Q(p)^spacedim]有限元空间。第二种是比较通用的，允许你使用任意的矢量有限元空间，只要它们能提供*连续*的
//对你的领域的描述。在这种情况下，这种描述是通过实际的*变形*场，而不是*位移*场来完成的。
//
// 使用哪一个取决于用户想如何指定参考域，和/或实际配置。我们将提供这两种选择，并在本教程程序的结果部分做一些实验。
//
[0.x.34318] 
[0.x.34319] 
//
[0.x.34320] 
//
// 被解析的函数类是另一个新条目。它允许人们创建一个Function对象，从参数文件中的一个字符串开始，它被解析成一个对象，你可以在deal.II接受Function的任何地方使用（例如，用于插值、边界条件等）。
//
[0.x.34321] 
//
[0.x.34322] 
[0.x.34323] 
[0.x.34324] 
//
// 这是本教程程序的最后一个新条目。NonMatching命名空间包含了一些方法，这些方法在对非匹配网格或与底层网格不对齐的曲线进行计算时很有用。
//
// 我们将在后面的 "setup_coupling "方法中详细讨论其用途。
//
[0.x.34325] 
//
[0.x.34326] 
[0.x.34327] 
[0.x.34328] 
[0.x.34329] 
[0.x.34330] 
[0.x.34331] 
[0.x.34332] 
[0.x.34333] 
//
[0.x.34334] 
[0.x.34335] 
//
[0.x.34336] 
[0.x.34337] 
[0.x.34338] 
//[2.x.4036] 
//
// 在DistributedLagrangeProblem中，我们需要两个参数来描述域[2.x.4037]（`dim`）和域[2.x.4038]（`spacedim`）的尺寸。
//
// 这些参数将用于初始化一个Triangulation<dim,spacedim>（用于[2.x.4039] ）和一个Triangulation<spacedim,spacedim>（用于[2.x.4040] ）。
//
// 与其他教程程序相比，一个新奇之处在于大量使用了 [2.x.4041] 这些指针的行为与经典指针一样，其优点是可以进行自动的内部管理：一旦unique_ptr超出范围，所包含的对象就会被自动销毁，即使它是在一个容器内或者有一个异常。此外，它不允许有重复的指针，这可以防止所有权问题。我们这样做，是因为我们希望能够 i) 构建问题，ii) 读取参数，iii) 根据参数文件中指定的内容初始化所有对象。
//
// 我们在派生于ParameterAcceptor的内部类`Parameters`中构建我们问题的参数。`DistributedLagrangeProblem`类需要一个对`Parameters`对象的常量引用，因此不可能从DistributedLagrangeProblem类本身修改参数。
//
// 我们可以先初始化参数，然后将参数传递给DistributedLagrangeProblem，假设所有条目都设置为所需的值，但这有两个缺点。
//
//
//
// - 我们不应该对用户如何初始化一个不受我们直接控制的类做出假设。如果用户未能初始化该类，我们应该注意到并抛出一个异常。
//
//
//
// - 当我们构造参数时，并不是所有需要从参数文件中读取参数的对象都可以使用；对于复杂的程序，有多种物理现象，或者我们在一些外部类中重复使用现有的代码，往往是这种情况。我们通过将一些 "复杂 "的对象，如ParsedFunction对象，保留在`DistributedLagrangeProblem`内而不是`Parameters`内来模拟这种情况。
//
// 这里我们假设在构建时，构建我们问题的类还不能使用。解析参数文件是确保我们有所有的成分来建立我们的类，我们的设计是，如果解析失败，或者没有被执行，运行就会被中止。
//
[0.x.34339] 
[0.x.34340] 
[0.x.34341] 
[0.x.34342] 
//
// `Parameters`类是由ParameterAcceptor派生的。这使得我们可以在其构造函数中使用[2.x.4042]方法。
//
// 这个函数的成员都是非常量的，但是`DistributedLagrangeProblem`类需要一个对`Parameters`对象的常量引用：这确保参数不会从`DistributedLagrangeProblem`类中被修改。
//
[0.x.34343] 
[0.x.34344] 
[0.x.34345] 
[0.x.34346] 
//
// 现在描述的参数都可以通过参数文件在外部设置：如果运行可执行文件时没有参数文件，程序将创建一个 "参数.prm "文件，并在这里定义默认值，然后中止，让用户有机会修改参数.prm文件。
//
// 嵌入网格的初始细化，对应于域[2.x.4043] 。
//
[0.x.34347] 
//
// 嵌入网格[2.x.4044]和嵌入网格[2.x.4045]之间的交互是通过[2.x.4046]的计算来处理的，这涉及到[2.x.4047]的所有单元与[2.x.4048]的部分重叠：这些单元的更高细化可能提高我们计算的质量。出于这个原因，我们定义了`delta_refinement'：如果它大于零，那么我们将空间网格中包含嵌入网格顶点的每个单元及其邻居标记出来，执行细化，并重复这个过程`delta_refinement'的次数。
//
[0.x.34348] 
//
// 开始细化嵌入网格，对应于域 [2.x.4049] 。
//
[0.x.34349] 
//
// 边界id列表，我们在其中施加同质Dirichlet边界条件。在其余的边界id上（如果有的话），我们施加同质的诺伊曼边界条件。作为一个默认问题，我们在[2.x.4050]上设置了零迪里希特边界条件。
[0.x.34350] 
//
// 嵌入空间的有限元素程度。 [2.x.4051] 
[0.x.34351] 
//
// 嵌入空间的有限元素度。 [2.x.4052] 
[0.x.34352] 
//
// 用于描述嵌入域变形的空间的有限元度
//
[0.x.34353] 
//
// 用于积分耦合的正交公式的阶数
//
[0.x.34354] 
//
// 如果设置为 "true"，则嵌入式配置函数被解释为位移函数。
//
[0.x.34355] 
//
// 在输出中使用的粗略程度
//
[0.x.34356] 
//
// 用来记录我们是否被初始化的一个标志。
//
[0.x.34357] 
[0.x.34358] 
//
[0.x.34359] 
//
// 分布式拉格朗日问题的入口点
//
[0.x.34360] 
//
[0.x.34361] 
//
// 包含实际参数的对象
//
[0.x.34362] 
//
// 下面的函数与其他所有的教程程序相似，不同的是，我们现在需要为两个不同系列的对象设置东西，即与*嵌入*网格有关的对象，以及与*嵌入*有关的对象。
//
[0.x.34363] 
//
[0.x.34364] 
//
[0.x.34365] 
//
// 这里唯一的非常规函数是`setup_coupling()`方法，用于生成耦合矩阵的稀疏性模式 [2.x.4053] 。
//
[0.x.34366] 
//
[0.x.34367] 
//
[0.x.34368] 
//
[0.x.34369] 
//
// 首先我们收集所有与嵌入空间几何学有关的对象
//
[0.x.34370] 
[0.x.34371] 
[0.x.34372] 
[0.x.34373] 
[0.x.34374] 
//
// 然后是与嵌入网格有关的，与拉格朗日乘数`lambda`有关的DoFHandler
//
[0.x.34375] 
[0.x.34376] 
[0.x.34377] 
//
// 最后，需要对嵌入的三角形进行*变形的所有内容
//
[0.x.34378] 
[0.x.34379] 
[0.x.34380] 
//
// ParameterAcceptorProxy类是一个 "透明 "的包装器，它同时来自ParameterAcceptor和作为其模板参数传递的类型。在构造时，参数被分成两部分：第一个参数是一个[2.x.4054]，转发给ParameterAcceptor类，并包含应该用于该类的部分名称，而所有其余的参数都转发给模板类型的构造器，在本例中，转发给[2.x.4055]构造器。
//
// 这个类允许你结合ParameterAcceptor注册机制使用现有的类，只要这些类有`declare_parameters()`和`parse_parameters()`成员。
//
// 这里就是这种情况，使得利用[2.x.4056]类变得相当容易：而不是要求用户在代码中为RHS、边界函数等创建新的Function对象。在这里，我们允许用户使用deal.II接口到muParser（http:muparser.beltoforion.de），在这里，函数的指定不是在编译时完成的，而是在运行时完成的，使用一个字符串被解析成一个实际的Function对象。
//
// 在这种情况下，`embedded_configuration_function`是一个向量值的Function，根据`parameters.use_displacement`的布尔值，可以被解释为*变形*或*位移*。分量的数量将在后面的结构中指定。
//
[0.x.34381] 
[0.x.34382] 
//
[0.x.34383] 
//
// 我们做同样的事情来指定函数的值 [2.x.4057] ，这就是我们希望我们的解决方案在嵌入空间中的值。在这种情况下，该函数是一个标量函数。
//
[0.x.34384] 
[0.x.34385] 
//
// 与我们对[2.x.4058]类所做的类似，我们对ReductionControl类重复同样的做法，允许我们为我们以后使用的Schur补码迭代求解器指定所有可能的停止标准。
//
[0.x.34386] 
//
// 接下来我们收集所有我们需要的SparsityPattern, SparseMatrix, 和Vector对象
//
[0.x.34387] 
[0.x.34388] 
//
[0.x.34389] 
[0.x.34390] 
//
[0.x.34391] 
//
[0.x.34392] 
[0.x.34393] 
//
[0.x.34394] 
[0.x.34395] 
[0.x.34396] 
//
// TimerOutput类用来提供一些关于我们程序性能的统计数据。
//
[0.x.34397] 
[0.x.34398] 
//[2.x.4059] 
//
// 在构造时，我们也初始化ParameterAcceptor类，在解析参数文件时，我们希望问题使用的部分名称。
//
// 参数文件可以被组织成section/subsection/etc.：这样做的好处是，当共享同一section/subsection/etc.时，定义的对象可以共享参数。ParameterAcceptor允许使用Unix约定的路径来指定部分名称。如果部分名称以斜线（"/"）开头，那么该部分将被解释为*绝对路径*，ParameterAcceptor为路径中的每个目录输入一个小节，使用它遇到的最后一个名称作为当前类的着陆小节。
//
// 例如，如果你使用`ParameterAcceptor("/first/second/third/My Class")`构建你的类，参数将被组织成如下样子。
//
// [1.x.112]

// 在内部，存储在ParameterAcceptor中的*当前路径现在被认为是"/first/second/third/"，也就是说，当你指定一个绝对路径时，ParameterAcceptor将*当前的部分改为当前路径，即改为直到*最后一个"/"的部分名称的路径。
//
// 你现在可以使用相对路径（例如：`ParameterAcceptor("My Other Class")`）而不是绝对路径（例如：`ParameterAcceptor("/first/second/third/My Other Class")`）来构造从ParameterAcceptor派生的另一个类，获得。[1.x.113]
//
// 如果部分名称*以斜线结尾，那么后续的类将把它解释为完整的路径：例如，与上面类似，如果我们有两个类，一个用`ParameterAcceptor("/first/second/third/My Class/")`初始化，另一个用`ParameterAcceptor("My Other Class")`，那么得到的参数文件将看起来像。
//
// [1.x.114]
//
// 我们将利用这一点，使我们的`Parameters`成为所有后续构建的类的*父类。由于大多数其他的类都是`DistributedLagrangeProblem`的成员，这就允许，例如，为两个不同的维度构造两个`DistributedLagrangeProblem`，而不会在这两个问题的参数上产生冲突。
//
[0.x.34399] 
[0.x.34400] 
[0.x.34401] 
[0.x.34402] 
[0.x.34403] 
[0.x.34404] 
//
// [2.x.4060]函数做了几件事。
//
//
//
// - 在构造时向ParameterAcceptor输入指定的分段
//
//
//
// - 调用[2.x.4061]函数
//
//
//
// - 调用你可能附加到[2.x.4062]的任何信号。
//
//
//
// --离开分节
//
// 反过来，[2.x.4063] 。
//
//
//
// - 在参数处理程序中为给定的变量声明一个条目。
//
//
//
// - 取得该变量的当前值
//
//
//
// - 将其转换为一个字符串，作为参数文件的默认值使用
//
//
//
// - 在[2.x.4064]中附加一个*动作，当文件被解析时，或者当一个条目被设置时，它会更新传递给`add_parameter()`的变量的值，将其设置为输入文件中指定的值（当然，是在输入文件被解析并将文本表示转换为变量的类型后）。
//
[0.x.34405] 
//
[0.x.34406] 
[0.x.34407] 
//
[0.x.34408] 
[0.x.34409] 
//
[0.x.34410] 
[0.x.34411] 
//
[0.x.34412] 
//
[0.x.34413] 
[0.x.34414] 
//
 
[0.x.34416] 
//
[0.x.34417] 
[0.x.34418] 
//
[0.x.34419] 
//
[0.x.34420] 
//
// 一旦参数文件被解析，那么参数就可以使用了。将内部变量`initialized`设置为true。
//
[0.x.34421] 
[0.x.34422] 
//
// 构造函数是非常标准的，除了前面解释的`ParameterAcceptorProxy`对象之外。
//
[0.x.34423] 
[0.x.34424] 
[0.x.34425] 
[0.x.34426] 
[0.x.34427] 
[0.x.34428] 
[0.x.34429] 
[0.x.34430] 
[0.x.34431] 
//
// 下面是一个为使用ParameterAcceptorProxy构建的ParameterAcceptor类设置默认值的方法。
//
// 在这种情况下，我们将嵌入式网格的默认变形设置为半径为[2.x.4065]、中心为[2.x.4066]的圆，我们将embedded_value_function的默认值设置为常数，并为SolverControl对象指定一些合理的值。
//
// 嵌入[2.x.4067]是最基本的：从[2.x.4068]的定义可以看出，如果[2.x.4069]，矩阵[2.x.4070]的某些行将是零。这将是一个问题，因为舒尔补码法要求[2.x.4071]具有全列秩。
//
[0.x.34432] 
[0.x.34433] 
[0.x.34434] 
//
[0.x.34435] 
[0.x.34436] 
[0.x.34437] 
//
[0.x.34438] 
[0.x.34439] 
//
[0.x.34440] 
[0.x.34441] 
[0.x.34442] 
[0.x.34443] 
[0.x.34444] 
[0.x.34445] 
//[2.x.4072] 

//函数[2.x.4073]是用来设置有限元空间的。注意[2.x.4074]是如何用来创建包裹在[2.x.4075]对象里面的对象的。
//
[0.x.34446] 
[0.x.34447] 
[0.x.34448] 
[0.x.34449] 
//
// 初始化 [2.x.4076] : 构建三角形，并将其包装成一个 [2.x.4077] 对象
//
[0.x.34450] 
//
// 接下来，我们使用[2.x.4078]实际创建三角形，最后一个参数设置为true：这激活了着色（即为边界的不同部分分配不同的边界指标），我们用它来分配Dirichlet和Neumann条件。
//
[0.x.34451] 
//
// 一旦我们构建了一个三角形，我们就根据参数文件中的规格对其进行全局细化，并用它构建一个[2.x.4079]。
//
[0.x.34452] 
[0.x.34453] 
[0.x.34454] 
//
// 对嵌入式网格也是这样做的。由于嵌入式网格是变形的，我们首先需要设置变形映射。我们在下面几行中这样做。
//
[0.x.34455] 
[0.x.34456] 
[0.x.34457] 
//
[0.x.34458] 
[0.x.34459] 
[0.x.34460] 
[0.x.34461] 
//
[0.x.34462] 
[0.x.34463] 
//
[0.x.34464] 
[0.x.34465] 
//
// 一旦我们为变形定义了一个有限维度的空间，我们就对参数文件中定义的 "嵌入_配置_函数 "进行插值。
//
[0.x.34466] 
[0.x.34467] 
[0.x.34468] 
//
// 现在我们可以根据用户在参数文件中指定的内容来解释它：作为位移，在这种情况下，我们构建一个映射，将我们的配置有限元空间的每个支持点的位置在相应的配置矢量上*移开指定的数量，或者作为赦免位置。
//
// 在第一种情况下，MappingQEulerian类提供其服务，而在第二种情况下，我们将使用MappingFEField类。它们实际上是非常相似的。MappingQEulerian只适用于FE_Q有限元空间系统，其中位移矢量存储在FESystem的第一个`spacedim`分量中，并且在构造时作为参数给出的度数必须与第一个`spacedim`分量的度数一致。
//
// MappingFEField类稍显一般，因为它允许你在构造近似值时选择任意的FiniteElement类型。当然，根据你选择的FiniteElement的类型，一些选择可能（也可能没有）意义。MappingFEField实现了纯粹的等参量概念，例如，可以通过与FE_Bernstein有限元类结合，在deal.II中实现等参量分析代码。在这个例子中，我们将考虑到一个配置将是一个 "位移"，而另一个将是一个绝对的 "变形 "场，从而将这两者互换使用。
//
[0.x.34469] 
[0.x.34470] 
[0.x.34471] 
[0.x.34472] 
[0.x.34473] 
[0.x.34474] 
[0.x.34475] 
[0.x.34476] 
[0.x.34477] 
[0.x.34478] 
//
[0.x.34479] 
//
// 在本教程中，我们不仅对[2.x.4080]进行全局细化，还允许根据[2.x.4081]的位置进行局部细化，根据`parameters.delta_refinement`的值，我们用来决定对[2.x.4082]进行多少轮局部细化，对应于[2.x.4083] 的位置。
//
// 有了这个映射，现在就可以通过调用方法[2.x.4084]来查询与`embedded_dh`相关的所有支持点的位置了。
//
// 这个方法有两个变种。一种是不接受Mapping，另一种是接受Mapping。如果你使用第二种类型，就像我们在这种情况下所做的那样，支持点是通过指定的映射来计算的，它可以对它们进行相应操作。
//
// 这正是`embedded_mapping`的作用。
//
[0.x.34480] 
[0.x.34481] 
[0.x.34482] 
[0.x.34483] 
[0.x.34484] 
//
// 一旦我们有了嵌入有限元空间的支持点，我们就想确定嵌入空间的哪些单元包含哪些支持点，以便在有必要的地方，也就是嵌入网格的地方，获得完善嵌入网格的机会。这可以手动完成，在每个支持点上循环，然后为嵌入空间的每个单元调用方法[2.x.4085]，直到我们找到一个返回单位参考单元中的点，或者可以用更智能的方式完成。
//
// [2.x.4086]是一个可能的选择，它以更便宜的方式执行上述任务，首先确定嵌入三角的最接近目标点的顶点，然后只对那些共享找到的顶点的单元格调用[2.x.4087]。
//
// 事实上，在GridTools命名空间中，有一些算法利用[2.x.4088]对象，可能还有KDTree对象来尽可能地加快这些操作。
//
// 利用最大速度的最简单方法是调用一个专门的方法，[2.x.4089]，该方法将在第一个点的搜索过程中存储大量有用的信息和数据结构，然后在随后的点中重复使用所有这些信息。
//
// [2.x.4090]返回一个元组，其中第一个元素是一个包含输入点的单元格向量，在这里是support_points。对于细化来说，这是我们唯一需要的信息，而这正是现在所发生的。
//
// 然而，当我们需要组装一个耦合矩阵时，我们还需要每个点的参考位置来评估嵌入空间的基础函数。由[2.x.4091]返回的元组的其他元素允许你重建，对于每个点，什么单元包含它，以及什么是给定点的参考单元的位置。由于这些信息最好被分组到单元格中，那么这就是算法返回的内容：一个元组，包含所有单元格中至少有一个点的向量，以及所有参考点的列表和它们在原始向量中的相应索引。
//
// 在下面的循环中，我们将忽略所有返回的对象，除了第一个，确定所有单元格至少包含一个嵌入空间的支持点。这允许一个简单的自适应细化策略：细化这些单元和它们的邻居。
//
// 注意，我们需要做一些理智的检查，在这个意义上，我们希望有一个嵌入网格，它在嵌入网格周围被很好地细化，但其中两个连续的支持点要么位于同一个单元，要么位于邻近的嵌入单元。
//
// 这只有在我们确保嵌入网格的最小单元尺寸仍然大于嵌入网格的最大单元尺寸时才有可能。由于用户可以修改细化水平，以及他们希望在嵌入网格周围进行的局部细化的数量，我们要确保所得到的网格满足我们的要求，如果不是这样，我们就用一个例外来放弃。
//
[0.x.34485] 
[0.x.34486] 
[0.x.34487] 
[0.x.34488] 
[0.x.34489] 
[0.x.34490] 
[0.x.34491] 
[0.x.34492] 
[0.x.34493] 
[0.x.34494] 
[0.x.34495] 
[0.x.34496] 
[0.x.34497] 
[0.x.34498] 
[0.x.34499] 
//
// 为了构造一个良好的耦合插值算子[2.x.4092]，对嵌入域和被嵌入域之间的网格的相对尺寸有一些限制。耦合算子[2.x.4093]和空间[2.x.4094]和[2.x.4095]必须满足一个inf-sup条件，以使问题有一个解决方案。事实证明，只要空间[2.x.4097]和[2.x.4098]之间相互兼容（例如，只要它们被选为引言中所述的空间），非匹配[2.x.4096]投影就满足这种inf-sup条件。
//
// 然而，*离散*的inf-sup条件也必须成立。这里没有出现复杂的情况，但事实证明，当非匹配网格的局部直径相距太远时，离散的inf-sup常数会恶化。特别是，事实证明，如果你选择一个相对于嵌入网格*细的嵌入网格，inf-sup常数的恶化程度要比你让嵌入网格更细的情况下大得多。
//
// 为了避免问题，在本教程中，如果用户选择的参数使嵌入网格的最大直径大于嵌入网格的最小直径，我们将抛出一个异常。
//
// 这个选择保证了嵌入网格的几乎每一个单元都不超过嵌入网格的两个单元，只有一些罕见的例外，这些例外在结果的inf-sup方面可以忽略不计。
//
[0.x.34500] 
[0.x.34501] 
[0.x.34502] 
[0.x.34503] 
//
[0.x.34504] 
[0.x.34505] 
[0.x.34506] 
[0.x.34507] 
[0.x.34508] 
[0.x.34509] 
[0.x.34510] 
//
[0.x.34511] 
[0.x.34512] 
[0.x.34513] 
[0.x.34514] 
[0.x.34515] 
[0.x.34516] 
[0.x.34517] 
//[2.x.4099]已经被完善，我们现在可以设置它的DoF了
//
[0.x.34518] 
[0.x.34519] 
//
// 我们现在设置[2.x.4100]和[2.x.4101]的DoF：因为它们基本上是独立的（除了[2.x.4102]的网格在[2.x.4103]周围更加精细），这个过程是标准的。
//
[0.x.34520] 
[0.x.34521] 
[0.x.34522] 
[0.x.34523] 
[0.x.34524] 
[0.x.34525] 
[0.x.34526] 
//
[0.x.34527] 
[0.x.34528] 
[0.x.34529] 
[0.x.34530] 
[0.x.34531] 
[0.x.34532] 
[0.x.34533] 
//
// 根据定义，刚度矩阵只涉及[2.x.4104]的DoF。
//
[0.x.34534] 
[0.x.34535] 
[0.x.34536] 
[0.x.34537] 
[0.x.34538] 
[0.x.34539] 
//
[0.x.34540] 
[0.x.34541] 
//
[0.x.34542] 
[0.x.34543] 
[0.x.34544] 
[0.x.34545] 
[0.x.34546] 
[0.x.34547] 
[0.x.34548] 
//
// 根据定义，我们要解决的系统的rhs只涉及一个零向量和[2.x.4105]，它只用[2.x.4106]的DoF计算。
//
[0.x.34549] 
[0.x.34550] 
[0.x.34551] 

[0.x.34552] 
[0.x.34553] 
//
// 创建耦合稀疏模式是一个复杂的操作，但可以使用[2.x.4107]轻松完成，它需要两个DoFHandler对象、耦合的正交点、一个DynamicSparsityPattern（然后需要像往常一样复制到稀疏模式中）、嵌入和嵌入三角形的组件掩码（我们留空）以及嵌入和嵌入三角形的映射关系。
//
[0.x.34554] 
[0.x.34555] 
[0.x.34556] 
[0.x.34557] 
//
[0.x.34558] 
//
[0.x.34559] 
//
[0.x.34560] 
[0.x.34561] 
[0.x.34562] 
[0.x.34563] 
[0.x.34564] 
[0.x.34565] 
[0.x.34566] 
[0.x.34567] 
[0.x.34568] 
[0.x.34569] 
[0.x.34570] 
[0.x.34571] 
//[2.x.4108] 
//
// 以下是创建矩阵的函数：如前所述，计算刚度矩阵和rhs是一个标准程序。
//
[0.x.34572] 
[0.x.34573] 
[0.x.34574] 
[0.x.34575] 
[0.x.34576] 
//
//嵌入刚度矩阵 [2.x.4109] ，以及右手边 [2.x.4110] 。
//
[0.x.34577] 
[0.x.34578] 
[0.x.34579] 
[0.x.34580] 
[0.x.34581] 
[0.x.34582] 
//
[0.x.34583] 
[0.x.34584] 
[0.x.34585] 
[0.x.34586] 
[0.x.34587] 
[0.x.34588] 
[0.x.34589] 
[0.x.34590] 
[0.x.34591] 
//
// 为了计算耦合矩阵，我们使用[2.x.4111]工具，其工作原理与[2.x.4112]类似。
[0.x.34592] 
[0.x.34593] 
[0.x.34594] 
[0.x.34595] 
[0.x.34596] 
[0.x.34597] 
[0.x.34598] 
[0.x.34599] 
[0.x.34600] 
[0.x.34601] 
//
[0.x.34602] 
[0.x.34603] 
[0.x.34604] 
[0.x.34605] 
[0.x.34606] 
[0.x.34607] 
//[2.x.4113] 
//
// 所有的部分都已经组装好了：我们用舒尔补数法解决这个系统
//
[0.x.34608] 
[0.x.34609] 
[0.x.34610] 
[0.x.34611] 
//
// 从创建反刚度矩阵开始
//
[0.x.34612] 
[0.x.34613] 
//
//初始化运算符，如介绍中所述
//
[0.x.34614] 
[0.x.34615] 
[0.x.34616] 
//
[0.x.34617] 
//
// 使用舒尔补数法
//
[0.x.34618] 
[0.x.34619] 
[0.x.34620] 
//
[0.x.34621] 
//
[0.x.34622] 
//
[0.x.34623] 
[0.x.34624] 
//
// 下面的函数只是在两个独立的文件上生成标准结果输出，每个网格一个。
//
[0.x.34625] 
[0.x.34626] 
[0.x.34627] 
[0.x.34628] 
//
[0.x.34629] 
//
[0.x.34630] 
//
[0.x.34631] 
[0.x.34632] 
[0.x.34633] 
[0.x.34634] 
[0.x.34635] 
//
// 这两个输出例程之间的唯一区别是，在第二种情况下，我们想在当前配置上输出数据，而不是在参考配置上。这可以通过将实际的embedded_mapping传递给[2.x.4114]函数来实现。该映射将负责在实际变形的配置上输出结果。
//
[0.x.34636] 
//
[0.x.34637] 
//
[0.x.34638] 
[0.x.34639] 
[0.x.34640] 
[0.x.34641] 
[0.x.34642] 
[0.x.34643] 
[0.x.34644] 
//
// 与所有其他教程程序类似，`run()`函数只是按照正确的顺序调用所有其他方法。没有什么特别需要注意的，只是在我们实际尝试运行我们的程序之前，我们检查是否完成了解析。
//
[0.x.34645] 
[0.x.34646] 
[0.x.34647] 
[0.x.34648] 
[0.x.34649] 
//
[0.x.34650] 
[0.x.34651] 
[0.x.34652] 
[0.x.34653] 
[0.x.34654] 
[0.x.34655] 
[0.x.34656] 
//
[0.x.34657] 
[0.x.34658] 
[0.x.34659] 
[0.x.34660] 
[0.x.34661] 
[0.x.34662] 
//
[0.x.34663] 
//
// 与其他教程程序中的情况不同，这里我们使用ParameterAcceptor风格的初始化，即首先构建所有对象，然后对静态方法[2.x.4115]发出一次调用，以填充从ParameterAcceptor派生的类的所有参数。
//
// 我们检查用户是否在程序启动时指定了一个要使用的参数文件名。如果是，就尝试读取该参数文件，否则就尝试读取文件 "parameters.prm"。
//
// 如果指定的参数文件（隐式或显式）不存在，[2.x.4116]将为你创建一个，并退出程序。
//
[0.x.34664] 
[0.x.34665] 
//
[0.x.34666] 
[0.x.34667] 
[0.x.34668] 
[0.x.34669] 
[0.x.34670] 
//
[0.x.34671] 
[0.x.34672] 
[0.x.34673] 
[0.x.34674] 
[0.x.34675] 
[0.x.34676] 
[0.x.34677] 
[0.x.34678] 
[0.x.34679] 
[0.x.34680] 
[0.x.34681] 
[0.x.34682] 
[0.x.34683] 
[0.x.34684] 
[0.x.34685] 
[0.x.34686] 
[0.x.34687] 
[0.x.34688] 
[0.x.34689] 
[0.x.34690] 
[0.x.34691] 
[0.x.34692] 
[0.x.34693] 
[0.x.34694] 
[0.x.34695] 
[0.x.34696] 
[0.x.34697] 
[0.x.34698] 
[0.x.34699] 
[0.x.34700] 
[0.x.34701] 
[0.x.34702] 
[0.x.34703] 
[0.x.34704] 
[0.x.34705] 
[0.x.34706] 
[0.x.34707] 
[0.x.34708] 
[0.x.34709] 
[0.x.34710] 
[0.x.34711] 
[0.x.34712] 
[0.x.34713] 
[0.x.34714] 
//
[0.x.34715] 
[0.x.34716] 
//[2.x.4117] 这个程序是基于[2.x.4118] 、[2.x.4119] 和 [2.x.4120] ，所以下面的头文件大部分是熟悉的。我们需要以下文件，其中只有导入FE_DGRaviartThomas类的文件（即`deal.II/fe/fe_dg_vector.h`）是真正的新文件；FE_DGRaviartThomas实现了介绍中讨论的 "破碎 "Raviart-Thomas空间。
//
[0.x.34717] 
[0.x.34718] 
[0.x.34719] 
[0.x.34720] 
[0.x.34721] 
[0.x.34722] 
[0.x.34723] 
[0.x.34724] 
[0.x.34725] 
[0.x.34726] 
[0.x.34727] 
[0.x.34728] 
[0.x.34729] 
[0.x.34730] 
[0.x.34731] 
[0.x.34732] 
[0.x.34733] 
[0.x.34734] 
[0.x.34735] 
[0.x.34736] 
[0.x.34737] 
[0.x.34738] 
[0.x.34739] 
[0.x.34740] 
[0.x.34741] 
[0.x.34742] 
[0.x.34743] 
[0.x.34744] 
//
[0.x.34745] 
[0.x.34746] 
//
// 我们的第一步，像往常一样，是把所有与本教程程序有关的东西放到自己的命名空间中。
//
[0.x.34747] 
[0.x.34748] 
[0.x.34749] 
//[2.x.4121] 
//
// 这是本程序的主类。我们将使用弱加勒金（WG）方法求解内部和面上的数值压力，并计算出压力的[2.x.4122]误差。在后处理步骤中，我们还将计算速度和通量的[2.x.4123] 误差。
//
// 该类的结构与以前的教程程序没有根本的不同，所以除了一个例外，没有必要对细节进行评论。该类有一个成员变量`fe_dgrt`，对应于介绍中提到的 "破碎 "的Raviart-Thomas空间。还有一个与之匹配的`dof_handler_dgrt`，表示从这个元素创建的有限元场的全局枚举，还有一个向量`darcy_velocity`，用于保持这个场的节点值。在求解压力后，我们将使用这三个变量来计算一个后处理的速度场，然后我们可以对其进行误差评估，并将其输出用于可视化。
//
[0.x.34750] 
[0.x.34751] 
[0.x.34752] 
[0.x.34753] 
[0.x.34754] 
[0.x.34755] 
//
[0.x.34756] 
[0.x.34757] 
[0.x.34758] 
[0.x.34759] 
[0.x.34760] 
[0.x.34761] 
[0.x.34762] 
[0.x.34763] 
[0.x.34764] 
//
[0.x.34765] 
//
[0.x.34766] 
[0.x.34767] 
//
[0.x.34768] 
//
[0.x.34769] 
[0.x.34770] 
//
[0.x.34771] 
[0.x.34772] 
//
[0.x.34773] 
[0.x.34774] 
[0.x.34775] 
[0.x.34776] 
//
// [2.x.4124] 
//
// 接下来，我们定义系数矩阵[2.x.4125]（这里是身份矩阵），迪里希特边界条件，右手边[2.x.4126] ，以及与这些选择相对应的[2.x.4127]和[2.x.4128]的精确解，即[2.x.4129] 。
//
[0.x.34777] 
[0.x.34778] 
[0.x.34779] 
[0.x.34780] 
[0.x.34781] 
[0.x.34782] 
[0.x.34783] 
//
[0.x.34784] 
[0.x.34785] 
[0.x.34786] 
//
[0.x.34787] 
[0.x.34788] 
[0.x.34789] 
[0.x.34790] 
[0.x.34791] 
[0.x.34792] 
[0.x.34793] 
[0.x.34794] 
[0.x.34795] 
//
[0.x.34796] 
[0.x.34797] 
[0.x.34798] 
[0.x.34799] 
[0.x.34800] 
[0.x.34801] 
[0.x.34802] 
//
[0.x.34803] 
[0.x.34804] 
[0.x.34805] 
//
[0.x.34806] 
[0.x.34807] 
[0.x.34808] 
[0.x.34809] 
[0.x.34810] 
[0.x.34811] 
//
[0.x.34812] 
[0.x.34813] 
[0.x.34814] 
[0.x.34815] 
[0.x.34816] 
[0.x.34817] 
 
//
[0.x.34819] 
[0.x.34820] 
[0.x.34821] 
[0.x.34822] 
[0.x.34823] 
[0.x.34824] 
[0.x.34825] 
//
// 实现精确压力解决方案的类有一个奇怪的地方，我们把它作为一个有两个分量的向量值来实现。(我们在构造函数中说它有两个分量，在这里我们调用基函数类的构造函数)。在`value()`函数中，我们不测试`component`参数的值，这意味着我们为向量值函数的两个分量返回相同的值。我们这样做是因为我们将本程序中使用的有限元描述为一个包含内部和界面压力的矢量值系统，当我们计算误差时，我们希望使用相同的压力解来测试这两个分量。
//
[0.x.34826] 
[0.x.34827] 
[0.x.34828] 
[0.x.34829] 
[0.x.34830] 
[0.x.34831] 
[0.x.34832] 
//
[0.x.34833] 
[0.x.34834] 
[0.x.34835] 
//
[0.x.34836] 
[0.x.34837] 
[0.x.34838] 
[0.x.34839] 
[0.x.34840] 
[0.x.34841] 
//
[0.x.34842] 
[0.x.34843] 
[0.x.34844] 
[0.x.34845] 
[0.x.34846] 
[0.x.34847] 
[0.x.34848] 
//
[0.x.34849] 
[0.x.34850] 
//
[0.x.34851] 
[0.x.34852] 
[0.x.34853] 
[0.x.34854] 
[0.x.34855] 
[0.x.34856] 
[0.x.34857] 
[0.x.34858] 
[0.x.34859] 
[0.x.34860] 
//
// [2.x.4130] 
//[2.x.4131] 
//
// 在这个构造函数中，我们创建了一个矢量值函数的有限元空间，这里将包括用于内部和界面压力的函数，[2.x.4132] 和 [2.x.4133] 。
//
[0.x.34861] 
[0.x.34862] 
[0.x.34863] 
[0.x.34864] 
[0.x.34865] 
[0.x.34866] 
[0.x.34867] 
//
// [2.x.4134] 
//
// 我们在单位平方域上生成一个网格并对其进行细化。
//
[0.x.34868] 
[0.x.34869] 
[0.x.34870] 
[0.x.34871] 
[0.x.34872] 
//
[0.x.34873] 
[0.x.34874] 
[0.x.34875] 
[0.x.34876] 
[0.x.34877] 
//
// [2.x.4135] 
//
// 在我们创建了上面的网格后，我们分配自由度并调整矩阵和向量的大小。这个函数中唯一值得关注的部分是我们如何插值压力的边界值。由于压力由内部和界面分量组成，我们需要确保我们只插值到矢量值解空间中与界面压力相对应的分量上（因为这些分量是唯一定义在域的边界上的）。我们通过一个只针对界面压力的分量屏蔽对象来做到这一点。
//
[0.x.34878] 
[0.x.34879] 
[0.x.34880] 
[0.x.34881] 
[0.x.34882] 
//
[0.x.34883] 
[0.x.34884] 
//
[0.x.34885] 
[0.x.34886] 
//
[0.x.34887] 
[0.x.34888] 
[0.x.34889] 
[0.x.34890] 
[0.x.34891] 
[0.x.34892] 
[0.x.34893] 
[0.x.34894] 
[0.x.34895] 
[0.x.34896] 
[0.x.34897] 
[0.x.34898] 
//
// 在双线性形式中，在两个相邻单元之间的面上没有积分项，所以我们可以直接使用[2.x.4136]来计算稀疏矩阵。
//
[0.x.34899] 
[0.x.34900] 
[0.x.34901] 
//
[0.x.34902] 
[0.x.34903] 
//
// [2.x.4137] 
//
// 这个函数比较有趣。正如介绍中所详述的，线性系统的装配要求我们评估形状函数的弱梯度，这是Raviart-Thomas空间的一个元素。因此，我们需要定义一个Raviart-Thomas有限元对象，并有FEValues对象在正交点评估它。然后我们需要计算每个单元[2.x.4139]上的矩阵[2.x.4138]，为此我们需要介绍中提到的矩阵[2.x.4140]和[2.x.4141]。
//
// 有一点可能不是很明显，在之前所有的教程程序中，我们总是用DoFHandler的单元格迭代器来调用[2.x.4142]。这样就可以调用诸如[2.x.4143]这样的函数，在单元格的正交点上提取有限元函数的值（用DoF值的矢量表示）。为了使这种操作发挥作用，人们需要知道哪些向量元素对应于给定单元上的自由度--也就是说，正是DoFHandler类所提供的那种信息和操作。
//
// 我们可以为 "破碎的 "Raviart-Thomas空间创建一个DoFHandler对象（使用FE_DGRT类），但是我们在这里真的不想这样做。至少在当前函数中，我们不需要任何与这个破碎空间相关的全局定义的自由度，而只需要引用当前单元上的这种空间的形状函数。因此，我们利用这样一个事实，即人们也可以用单元格迭代器来调用[2.x.4144]的Triangulation对象（而不是DoFHandler对象）。在这种情况下，FEValues当然只能为我们提供只引用单元格的信息，而不是这些单元格上列举的自由度。所以我们不能使用[2.x.4145]，但我们可以使用[2.x.4146]来获取当前单元上正交点的形状函数值。下面我们要利用的就是这种功能。下面给我们提供Raviart-Thomas函数信息的变量是`fe_values_rt`（和相应的`fe_face_values_rt`）对象。
//
// 鉴于上述介绍，下面的声明应该是非常明显的。
//
[0.x.34904] 
[0.x.34905] 
[0.x.34906] 
[0.x.34907] 
[0.x.34908] 
//
[0.x.34909] 
[0.x.34910] 
[0.x.34911] 
[0.x.34912] 
[0.x.34913] 
[0.x.34914] 
[0.x.34915] 
[0.x.34916] 
[0.x.34917] 
//
[0.x.34918] 
[0.x.34919] 
[0.x.34920] 
[0.x.34921] 
[0.x.34922] 
[0.x.34923] 
[0.x.34924] 
[0.x.34925] 
[0.x.34926] 
[0.x.34927] 
[0.x.34928] 
//
[0.x.34929] 
[0.x.34930] 
//
[0.x.34931] 
[0.x.34932] 
//
[0.x.34933] 
//
[0.x.34934] 
[0.x.34935] 
//
[0.x.34936] 
[0.x.34937] 
//
[0.x.34938] 
//
// 接下来，让我们声明介绍中讨论的各种单元格矩阵。
//
[0.x.34939] 
[0.x.34940] 
[0.x.34941] 
[0.x.34942] 
[0.x.34943] 
[0.x.34944] 
//
// 我们需要 [2.x.4147] 来访问形状函数的 [2.x.4148] 和 [2.x.4149] 部分。
//
[0.x.34945] 
[0.x.34946] 
[0.x.34947] 
//
// 这最终让我们在所有单元格上进行循环。在每个单元中，我们将首先计算用于构建局部矩阵的各种单元矩阵--因为它们取决于相关的单元，所以它们需要在每个单元中重新计算。我们还需要Raviart-Thomas空间的形状函数，为此我们需要首先创建一个通往三角化单元的迭代器，我们可以通过从指向DoFHandler的单元中的赋值来获得。
//
[0.x.34948] 
[0.x.34949] 
[0.x.34950] 
//
[0.x.34951] 
[0.x.34952] 
[0.x.34953] 
//
[0.x.34954] 
[0.x.34955] 
[0.x.34956] 
[0.x.34957] 
//
// 我们要计算的第一个单元矩阵是拉维-托马斯空间的质量矩阵。 因此，我们需要循环计算速度FEValues对象的所有正交点。
//
[0.x.34958] 
[0.x.34959] 
[0.x.34960] 
[0.x.34961] 
[0.x.34962] 
[0.x.34963] 
[0.x.34964] 
[0.x.34965] 
[0.x.34966] 
[0.x.34967] 
[0.x.34968] 
[0.x.34969] 
//
// 接下来我们通过使用[2.x.4150]对这个矩阵进行求逆 它将被用来计算后面的系数矩阵[2.x.4151]。值得一提的是，后面的 "cell_matrix_M "实际上包含了*的逆*。
//在这个调用之后的[2.x.4152]的*逆。
//
[0.x.34970] 
//
// 从介绍中，我们知道定义[2.x.4154]的方程的右边[2.x.4153]是面积分和单元积分的区别。在这里，我们对内部的贡献的负值进行了近似。这个矩阵的每个分量都是多项式空间的一个基函数与拉维-托马斯空间的一个基函数的发散之间的乘积的积分。这些基函数是在内部定义的。
//
[0.x.34971] 
[0.x.34972] 
[0.x.34973] 
[0.x.34974] 
[0.x.34975] 
[0.x.34976] 
[0.x.34977] 
[0.x.34978] 
[0.x.34979] 
[0.x.34980] 
//
[0.x.34981] 
[0.x.34982] 
[0.x.34983] 
[0.x.34984] 
//
// 接下来，我们用正交法对面的积分进行近似。每个分量都是多项式空间的基函数与Raviart-Thomas空间的基函数与法向量的点积的积分。所以我们在元素的所有面上循环，得到法向量。
//
[0.x.34985] 
[0.x.34986] 
[0.x.34987] 
[0.x.34988] 
//
[0.x.34989] 
[0.x.34990] 
[0.x.34991] 
//
[0.x.34992] 
[0.x.34993] 
[0.x.34994] 
[0.x.34995] 
[0.x.34996] 
[0.x.34997] 
[0.x.34998] 
[0.x.34999] 
//
[0.x.35000] 
[0.x.35001] 
[0.x.35002] 
[0.x.35003] 
[0.x.35004] 
[0.x.35005] 
//[2.x.4155]是[2.x.4156]的转置与质量矩阵的逆之间的矩阵乘积（该逆存储在[2.x.4157]中）。
[0.x.35006] 
//
// 最后我们可以计算出本地矩阵 [2.x.4158] 。 元素 [2.x.4159] 由 [2.x.4160] 得到。我们在上一步已经计算了系数[2.x.4161]，因此在适当地重新排列循环后得到以下结果。
//
[0.x.35007] 
[0.x.35008] 
[0.x.35009] 
[0.x.35010] 
[0.x.35011] 
[0.x.35012] 
[0.x.35013] 
[0.x.35014] 
[0.x.35015] 
[0.x.35016] 
[0.x.35017] 
//
[0.x.35018] 
[0.x.35019] 
[0.x.35020] 
[0.x.35021] 
[0.x.35022] 
[0.x.35023] 
[0.x.35024] 
[0.x.35025] 
//
// 接下来，我们计算右手边，[2.x.4162] 。
//
[0.x.35026] 
[0.x.35027] 
[0.x.35028] 
[0.x.35029] 
[0.x.35030] 
[0.x.35031] 
[0.x.35032] 
//
// 最后一步是将本地矩阵的组件分配到系统矩阵中，并将单元格右侧的组件转移到系统右侧。
//
[0.x.35033] 
[0.x.35034] 
[0.x.35035] 
[0.x.35036] 
[0.x.35037] 
//
// [2.x.4163] 
//
// 这一步相当琐碎，与之前的许多教程程序相同。
//
[0.x.35038] 
[0.x.35039] 
[0.x.35040] 
[0.x.35041] 
[0.x.35042] 
[0.x.35043] 
[0.x.35044] 
[0.x.35045] 
//[2.x.4164] 
//
// 在这个函数中，根据之前计算的压力解计算出速度场。速度被定义为[2.x.4165]，这需要我们计算许多与系统矩阵组装相同的项。还有一些矩阵[2.x.4166]我们也需要组装（见介绍），但它们实际上只是遵循相同的模式。
//
// 在这里计算与我们在`assemble_system()`函数中已经完成的相同的矩阵，当然是浪费CPU时间的。同样地，我们把那里的一些代码复制到这个函数中，这通常也是一个糟糕的主意。一个更好的实现可能会提供一个函数来封装这些重复的代码。我们也可以考虑使用计算效率和内存效率之间的经典权衡，在装配过程中每个单元只计算一次[2.x.4167]矩阵，把它们存储在边上的某个地方，然后在这里重新使用它们。例如，[2.x.4168]就是这样做的，`assemble_system()`函数需要一个参数来决定是否重新计算本地矩阵，类似的方法--也许是将本地矩阵存储在其他地方--可以适用于当前的程序）。
//
[0.x.35046] 
[0.x.35047] 
[0.x.35048] 
[0.x.35049] 
//
[0.x.35050] 
[0.x.35051] 
//
[0.x.35052] 
[0.x.35053] 
[0.x.35054] 
[0.x.35055] 
//
[0.x.35056] 
[0.x.35057] 
[0.x.35058] 
[0.x.35059] 
[0.x.35060] 
//
[0.x.35061] 
[0.x.35062] 
[0.x.35063] 
[0.x.35064] 
[0.x.35065] 
//
[0.x.35066] 
[0.x.35067] 
[0.x.35068] 
[0.x.35069] 
[0.x.35070] 
[0.x.35071] 
//
[0.x.35072] 
[0.x.35073] 
//
[0.x.35074] 
[0.x.35075] 
//
[0.x.35076] 
//
[0.x.35077] 
[0.x.35078] 
[0.x.35079] 
//
[0.x.35080] 
[0.x.35081] 
[0.x.35082] 
[0.x.35083] 
[0.x.35084] 
//
[0.x.35085] 
[0.x.35086] 
//
[0.x.35087] 
[0.x.35088] 
//
[0.x.35089] 
[0.x.35090] 
[0.x.35091] 
//
// 在介绍中，我们解释了如何计算单元上的数值速度。我们需要每个单元上的压力解值、格拉姆矩阵的系数和[2.x.4169]投影的系数。我们已经计算了全局解，所以我们将从全局解中提取单元解。格拉姆矩阵的系数在我们计算压力的系统矩阵时已经计算过了。我们在这里也要这样做。对于投影的系数，我们做矩阵乘法，即用格拉姆矩阵的倒数乘以[2.x.4170]的矩阵作为组成部分。然后，我们将所有这些系数相乘，称之为β。数值速度是贝塔和拉维尔特-托马斯空间的基础函数的乘积。
//
[0.x.35092] 
[0.x.35093] 
[0.x.35094] 
[0.x.35095] 
[0.x.35096] 
[0.x.35097] 
[0.x.35098] 
//
[0.x.35099] 
[0.x.35100] 
//
// 这个[2.x.4171]的分量是[2.x.4172]的积分。 [2.x.4173]是格拉姆矩阵。
//
[0.x.35101] 
[0.x.35102] 
[0.x.35103] 
[0.x.35104] 
[0.x.35105] 
[0.x.35106] 
[0.x.35107] 
[0.x.35108] 
[0.x.35109] 
[0.x.35110] 
//
[0.x.35111] 
[0.x.35112] 
//
[0.x.35113] 
[0.x.35114] 
[0.x.35115] 
//
// 为了计算介绍中提到的矩阵[2.x.4174]，我们就需要按照介绍中的解释来评估[2.x.4175]。
//
[0.x.35116] 
[0.x.35117] 
//
// 然后，我们还需要再次计算矩阵[2.x.4176]，用于评估弱离散梯度。这与组装系统矩阵时使用的代码完全相同，所以我们只需从那里复制它。
//
[0.x.35118] 
[0.x.35119] 
[0.x.35120] 
[0.x.35121] 
[0.x.35122] 
[0.x.35123] 
[0.x.35124] 
[0.x.35125] 
[0.x.35126] 
[0.x.35127] 
//
[0.x.35128] 
[0.x.35129] 
[0.x.35130] 
[0.x.35131] 
//
[0.x.35132] 
[0.x.35133] 
[0.x.35134] 
[0.x.35135] 
//
[0.x.35136] 
[0.x.35137] 
[0.x.35138] 
//
[0.x.35139] 
[0.x.35140] 
[0.x.35141] 
[0.x.35142] 
[0.x.35143] 
[0.x.35144] 
[0.x.35145] 
[0.x.35146] 
//
[0.x.35147] 
[0.x.35148] 
[0.x.35149] 
[0.x.35150] 
[0.x.35151] 
[0.x.35152] 
[0.x.35153] 
//
// 最后，我们需要提取对应于当前单元的压力未知数。
//
[0.x.35154] 
//
// 我们现在可以计算当地的速度未知数（相对于我们将[2.x.4177]项投影到的Raviart-Thomas空间而言）。
//
[0.x.35155] 
[0.x.35156] 
[0.x.35157] 
[0.x.35158] 
[0.x.35159] 
[0.x.35160] 
//
// 我们计算达西速度。这与cell_velocity相同，但用于绘制Darcy速度图。
//
[0.x.35161] 
[0.x.35162] 
[0.x.35163] 
[0.x.35164] 
[0.x.35165] 
[0.x.35166] 
[0.x.35167] 
[0.x.35168] 
//
// [2.x.4178] 
//
// 这一部分是为了计算压力的[2.x.4179]误差。 我们定义一个向量，用来保存每个单元上的误差规范。接下来，我们使用[2.x.4180]来计算每个单元上的[2.x.4181]准则的误差。然而，我们实际上只关心解向量的内部分量的误差（我们甚至不能评估正交点的界面压力，因为这些都位于单元格的内部），因此必须使用一个权重函数，确保解变量的界面分量被忽略。这是通过使用ComponentSelectFunction来实现的，其参数表明我们要选择哪个分量（零分量，即内部压力）以及总共有多少分量（两个）。
//
[0.x.35169] 
[0.x.35170] 
[0.x.35171] 
[0.x.35172] 
[0.x.35173] 
[0.x.35174] 
[0.x.35175] 
[0.x.35176] 
[0.x.35177] 
[0.x.35178] 
[0.x.35179] 
[0.x.35180] 
//
[0.x.35181] 
[0.x.35182] 
[0.x.35183] 
//
// [2.x.4182] 
//
// 在这个函数中，我们评估每个单元的速度的[2.x.4183]误差，以及面的流量的[2.x.4184]误差。该函数依赖于之前计算过的`compute_postprocessed_velocity()`函数，该函数根据之前计算过的压力解来计算速度场。
//
// 我们将评估每个单元的速度，并计算数值速度和精确速度之间的差异。
//
[0.x.35184] 
[0.x.35185] 
[0.x.35186] 
[0.x.35187] 
[0.x.35188] 
//
[0.x.35189] 
[0.x.35190] 
[0.x.35191] 
[0.x.35192] 
[0.x.35193] 
//
[0.x.35194] 
[0.x.35195] 
[0.x.35196] 
[0.x.35197] 
[0.x.35198] 
[0.x.35199] 
//
[0.x.35200] 
[0.x.35201] 
[0.x.35202] 
//
[0.x.35203] 
[0.x.35204] 
//
[0.x.35205] 
//
[0.x.35206] 
//
[0.x.35207] 
[0.x.35208] 
//
// 在之前计算了后处理的速度之后，我们在这里只需要提取每个单元和面的相应数值，并与精确的数值进行比较。
//
[0.x.35209] 
[0.x.35210] 
[0.x.35211] 
//
// 首先计算后处理的速度场与精确速度场之间的[2.x.4185]误差。
//
[0.x.35212] 
[0.x.35213] 
[0.x.35214] 
[0.x.35215] 
[0.x.35216] 
[0.x.35217] 
[0.x.35218] 
[0.x.35219] 
//
[0.x.35220] 
[0.x.35221] 
[0.x.35222] 
[0.x.35223] 
[0.x.35224] 
//
// 为了重建通量，我们需要单元格和面的大小。由于通量是按面计算的，我们必须在每个单元的所有四个面上进行循环。为了计算面的速度，我们从之前计算的`darcy_velocity`中提取正交点的值。然后，我们计算法线方向的速度平方误差。最后，我们通过对面和单元面积的适当缩放来计算单元上的[2.x.4186]通量误差，并将其加入全局误差。
//
[0.x.35225] 
[0.x.35226] 
[0.x.35227] 
[0.x.35228] 
[0.x.35229] 
[0.x.35230] 
[0.x.35231] 
//
[0.x.35232] 
[0.x.35233] 
[0.x.35234] 
[0.x.35235] 
[0.x.35236] 
[0.x.35237] 
//
[0.x.35238] 
[0.x.35239] 
//
 
[0.x.35241] 
[0.x.35242] 
[0.x.35243] 
[0.x.35244] 
[0.x.35245] 
[0.x.35246] 
[0.x.35247] 
[0.x.35248] 
[0.x.35249] 
//
// 将所有单元和面的误差相加后，我们进行平方根计算，得到速度和流量的[2.x.4187]误差。我们将这些数据输出到屏幕上。
//
[0.x.35250] 
[0.x.35251] 
[0.x.35252] 
//
[0.x.35253] 
[0.x.35254] 
[0.x.35255] 
//[2.x.4188] 
//
// 我们有两组结果要输出：内部解和骨架解。我们使用[2.x.4189]来显示内部结果。骨架结果的图形输出是通过使用DataOutFaces类完成的。
//
// 在这两个输出文件中，内部和面的变量都被存储。对于界面输出，输出文件只是包含了内部压力对面的插值，但是因为没有确定从两个相邻的单元中得到的是哪一个内部压力变量，所以在界面输出文件中最好是忽略内部压力。相反，对于单元格内部输出文件，当然不可能显示任何界面压力[2.x.4190]，因为这些压力只适用于界面，而不是单元格内部。因此，你会看到它们被显示为一个无效的值（比如一个无穷大）。
//
// 对于单元内部的输出，我们还想输出速度变量。这有点棘手，因为它生活在同一个网格上，但使用不同的DoFHandler对象（压力变量生活在`dof_handler`对象上，达西速度生活在`dof_handler_dgrt`对象上）。幸运的是，[2.x.4191]函数有一些变化，允许指定一个矢量对应的DoFHandler，因此我们可以在同一个文件中对两个DoFHandler对象的数据进行可视化。
//
[0.x.35256] 
[0.x.35257] 
[0.x.35258] 
[0.x.35259] 
[0.x.35260] 
//
// 首先将压力解决方案附加到DataOut对象上。
//
[0.x.35261] 
[0.x.35262] 
[0.x.35263] 
//
// 然后对达西速度场做同样的处理，并继续将所有内容写进文件。
//
[0.x.35264] 
[0.x.35265] 
[0.x.35266] 
[0.x.35267] 
[0.x.35268] 
[0.x.35269] 
[0.x.35270] 
[0.x.35271] 
[0.x.35272] 
//
[0.x.35273] 
[0.x.35274] 
[0.x.35275] 
[0.x.35276] 
//
[0.x.35277] 
[0.x.35278] 
[0.x.35279] 
[0.x.35280] 
[0.x.35281] 
[0.x.35282] 
[0.x.35283] 
[0.x.35284] 
[0.x.35285] 
//[2.x.4192] 
//
// 这是主类的最后一个函数。它调用我们类的其他函数。
//
[0.x.35286] 
[0.x.35287] 
[0.x.35288] 
[0.x.35289] 
[0.x.35290] 
[0.x.35291] 
[0.x.35292] 
[0.x.35293] 
[0.x.35294] 
[0.x.35295] 
[0.x.35296] 
[0.x.35297] 
[0.x.35298] 
[0.x.35299] 
//
[0.x.35300] 
//[2.x.4193] 
//
// 这是主函数。我们可以在这里改变维度以在3D中运行。
//
[0.x.35301] 
[0.x.35302] 
[0.x.35303] 
[0.x.35304] 
[0.x.35305] 
[0.x.35306] 
[0.x.35307] 
[0.x.35308] 
[0.x.35309] 
[0.x.35310] 
[0.x.35311] 
[0.x.35312] 
[0.x.35313] 
[0.x.35314] 
[0.x.35315] 
[0.x.35316] 
[0.x.35317] 
[0.x.35318] 
[0.x.35319] 
[0.x.35320] 
[0.x.35321] 
[0.x.35322] 
[0.x.35323] 
[0.x.35324] 
[0.x.35325] 
[0.x.35326] 
[0.x.35327] 
[0.x.35328] 
[0.x.35329] 
[0.x.35330] 
[0.x.35331] 
[0.x.35332] 
//
[0.x.35333] 
[0.x.35334] 
[0.x.35335] 
[0.x.35336] 
[0.x.35337] 
[0.x.35338] 
[0.x.35339] 
[0.x.35340] 
[0.x.35341] 
[0.x.35342] 
[0.x.35343] 
[0.x.35344] 
[0.x.35345] 
[0.x.35346] 
[0.x.35347] 
[0.x.35348] 
//
[0.x.35349] 
[0.x.35350] 
[0.x.35351] 
//[2.x.4194] 
//
// 我们在这个程序中需要的大部分包含文件已经在以前的程序中讨论过了，特别是在 [2.x.4195] .
//
[0.x.35352] 
[0.x.35353] 
//
[0.x.35354] 
[0.x.35355] 
[0.x.35356] 
[0.x.35357] 
//
[0.x.35358] 
[0.x.35359] 
//
[0.x.35360] 
[0.x.35361] 
[0.x.35362] 
//
[0.x.35363] 
[0.x.35364] 
//
[0.x.35365] 
[0.x.35366] 
[0.x.35367] 
[0.x.35368] 
[0.x.35369] 
[0.x.35370] 
//
[0.x.35371] 
[0.x.35372] 
//
[0.x.35373] 
[0.x.35374] 
//
// 下面的标头提供了我们用来表示材料属性的张量类。
//
[0.x.35375] 
//
// 下面的标头对于deal.II的HDF5接口是必要的。
//
[0.x.35376] 
//
// 这个头是我们用来评估模拟结果的函数[2.x.4196]所需要的。
//
[0.x.35377] 
//
// 我们在函数[2.x.4197]中使用的函数[2.x.4198]需要这些头文件。
[0.x.35378] 
[0.x.35379] 
//
[0.x.35380] 
[0.x.35381] 
[0.x.35382] 
//[2.x.4199] 下列类用于存储模拟的参数。
//
// [2.x.4200] 该类用于定义结构左侧的力脉冲。
//
[0.x.35383] 
[0.x.35384] 
[0.x.35385] 
[0.x.35386] 
[0.x.35387] 
//
[0.x.35388] 
[0.x.35389] 
//
[0.x.35390] 
//
// 变量`data`是[2.x.4201]，所有的模拟结果都将被储存在其中。请注意，[2.x.4202]变量 
//[2.x.4203] 
//[2.x.4204]和[2.x.4205]指向HDF5文件的同一个组。当[2.x.4206]被复制时，它将指向HDF5文件的同一组。
//
[0.x.35391] 
//
// 仿真参数作为HDF5属性存储在`data`中。以下属性在jupyter笔记本中定义，作为HDF5属性存储在`data`中，然后由构造函数读取。
//
[0.x.35392] 
[0.x.35393] 
[0.x.35394] 
[0.x.35395] 
[0.x.35396] 
[0.x.35397] 
//
[0.x.35398] 
//
// 在这个特定的模拟中，力只有一个[2.x.4207]分量，[2.x.4208] 。
//
[0.x.35399] 
[0.x.35400] 
//[2.x.4209] 这个类是用来定义完美匹配层（PML）的形状，以吸收向边界传播的波。
//
[0.x.35401] 
[0.x.35402] 
[0.x.35403] 
[0.x.35404] 
[0.x.35405] 
//
[0.x.35406] 
[0.x.35407] 
//
[0.x.35408] 
//[2.x.4210]，所有的模拟结果将被存储在其中。
//
[0.x.35409] 
//
// 和以前一样，以下属性在jupyter笔记本中定义，作为HDF5属性存储在`data`中，然后由构造函数读取。
//
[0.x.35410] 
[0.x.35411] 
[0.x.35412] 
[0.x.35413] 
[0.x.35414] 
[0.x.35415] 
[0.x.35416] 
[0.x.35417] 
[0.x.35418] 
[0.x.35419] 
[0.x.35420] 
//
// [2.x.4211] 这个类是用来定义质量密度的。
//
[0.x.35421] 
[0.x.35422] 
[0.x.35423] 
[0.x.35424] 
[0.x.35425] 
//
[0.x.35426] 
[0.x.35427] 
//
[0.x.35428] 
//[2.x.4212]，所有的模拟结果将被存储在其中。
//
[0.x.35429] 
//
// 和以前一样，以下属性在jupyter笔记本中定义，作为HDF5属性存储在`data`中，然后由构造函数读取。
//
[0.x.35430] 
[0.x.35431] 
[0.x.35432] 
[0.x.35433] 
[0.x.35434] 
[0.x.35435] 
[0.x.35436] 
[0.x.35437] 
[0.x.35438] 
[0.x.35439] 
//
// [2.x.4213] 该类包含所有将在模拟中使用的参数。
//
[0.x.35440] 
[0.x.35441] 
[0.x.35442] 
[0.x.35443] 
[0.x.35444] 
//[2.x.4214]，所有的模拟结果将被存储在其中。
//
[0.x.35445] 
//
// 和以前一样，以下属性在jupyter笔记本中定义，作为HDF5属性存储在`data`中，然后由构造函数读取。
//
[0.x.35446] 
[0.x.35447] 
[0.x.35448] 
[0.x.35449] 
[0.x.35450] 
[0.x.35451] 
[0.x.35452] 
[0.x.35453] 
[0.x.35454] 
[0.x.35455] 
[0.x.35456] 
[0.x.35457] 
[0.x.35458] 
[0.x.35459] 
[0.x.35460] 
[0.x.35461] 
//
[0.x.35462] 
[0.x.35463] 
[0.x.35464] 
//
// [2.x.4215] 质量和刚度矩阵的计算是非常昂贵的。这些矩阵对所有的频率步骤都是一样的。右手边的向量对所有的频率步长也是一样的。我们用这个类来存储这些对象，并在每个频率步骤中重新使用它们。请注意，这里我们不存储集合的质量和刚度矩阵以及右手边，而是存储单个单元的数据。QuadratureCache "类与在 [2.x.4216] 中使用过的 "PointHistory "类非常相似。
//
[0.x.35465] 
[0.x.35466] 
[0.x.35467] 
[0.x.35468] 
[0.x.35469] 
//
[0.x.35470] 
[0.x.35471] 
//
[0.x.35472] 
//
// 我们在变量mass_coefficient和stiffness_coefficient中存储质量和刚度矩阵。我们还存储了右手边和JxW值，这些值对所有的频率步骤都是一样的。
//
[0.x.35473] 
[0.x.35474] 
[0.x.35475] 
[0.x.35476] 
[0.x.35477] 
//
// [2.x.4217] 
//
// 该函数返回材料的刚度张量。为了简单起见，我们认为刚度是各向同性和同质的；只有密度 [2.x.4218] 取决于位置。正如我们之前在 [2.x.4219] 中所表明的，如果刚度是各向同性和均质的，那么刚度系数 [2.x.4220] 可以表示为两个系数 [2.x.4221] 和 [2.x.4222] 的函数。系数张量简化为 [1.x.115] 。
//
[0.x.35478] 
[0.x.35479] 
[0.x.35480] 
[0.x.35481] 
[0.x.35482] 
[0.x.35483] 
[0.x.35484] 
[0.x.35485] 
[0.x.35486] 
[0.x.35487] 
[0.x.35488] 
[0.x.35489] 
[0.x.35490] 
[0.x.35491] 
[0.x.35492] 
//
// [2.x.4223] 
//
// 接下来让我们声明这个程序的主类。它的结构与[2.x.4224]的教程程序非常相似。主要的区别是。
//
// - 扫过的频率值。
//
// - 我们将刚度和质量矩阵保存在`quadrature_cache`中，并在每个频率步骤中使用它们。
//
// - 我们在HDF5文件中存储每个频率步骤的探头测量的能量。
//
[0.x.35493] 
[0.x.35494] 
[0.x.35495] 
[0.x.35496] 
[0.x.35497] 
[0.x.35498] 
//
[0.x.35499] 
[0.x.35500] 
[0.x.35501] 
[0.x.35502] 
[0.x.35503] 
[0.x.35504] 
[0.x.35505] 
[0.x.35506] 
//
// 在每个频率步骤之前都会调用这个，以便为缓存变量设置一个原始状态。
//
[0.x.35507] 
//
// 这个函数在频率向量上循环，并在每个频率步骤上运行模拟。
//
[0.x.35508] 
//
// 参数存储在这个变量中。
//
[0.x.35509] 
//
[0.x.35510] 
//
[0.x.35511] 
//
[0.x.35512] 
//
// 我们将每个单元的质量和刚度矩阵存储在这个向量中。
//
[0.x.35513] 
//
[0.x.35514] 
[0.x.35515] 
//
[0.x.35516] 
[0.x.35517] 
//
[0.x.35518] 
//
[0.x.35519] 
[0.x.35520] 
[0.x.35521] 
//
// 这个向量包含我们要模拟的频率范围。
//
[0.x.35522] 
//
// 这个向量包含了测量探头各点的坐标[2.x.4225]。
//
[0.x.35523] 
//
// HDF5数据集来存储频率和`探头位置`向量。
//
[0.x.35524] 
[0.x.35525] 
//
// HDF5数据集，存储探头测量的能量值。
//
[0.x.35526] 
//
[0.x.35527] 
[0.x.35528] 
[0.x.35529] 
//
// [2.x.4226] 
//[2.x.4227] 
//
// 构造函数使用[2.x.4228] `data`函数从[2.x.4229] 读取所有参数。
//
[0.x.35530] 
[0.x.35531] 
[0.x.35532] 
[0.x.35533] 
[0.x.35534] 
[0.x.35535] 
[0.x.35536] 
[0.x.35537] 
[0.x.35538] 
[0.x.35539] 
[0.x.35540] 
[0.x.35541] 
//
//这个函数定义了力矢量脉冲的空间形状，它采取高斯函数[1.x.116]的形式，其中[2.x.4230]是取力的最大振幅，[2.x.4231]和[2.x.4232]是[2.x.4233]和[2.x.4234]分量的标准偏差。请注意，脉冲已被裁剪为[2.x.4235]和[2.x.4236] 。
//
[0.x.35542] 
[0.x.35543] 
[0.x.35544] 
[0.x.35545] 
[0.x.35546] 
[0.x.35547] 
[0.x.35548] 
[0.x.35549] 
[0.x.35550] 
[0.x.35551] 
[0.x.35552] 
[0.x.35553] 
[0.x.35554] 
[0.x.35555] 
[0.x.35556] 
[0.x.35557] 
[0.x.35558] 
[0.x.35559] 
[0.x.35560] 
[0.x.35561] 
[0.x.35562] 
[0.x.35563] 
[0.x.35564] 
[0.x.35565] 
[0.x.35566] 
//
// [2.x.4237] 
//
// 和以前一样，构造函数使用[2.x.4238]函数从[2.x.4239]`data`中读取所有参数。正如我们所讨论的，在jupyter笔记本中已经定义了PML的二次开机。通过改变参数`pml_coeff_degree`，可以使用线性、立方或其他幂度。参数`pml_x`和`pml_y`可以用来开启和关闭`x`和`y`PML。
//
[0.x.35567] 
[0.x.35568] 
[0.x.35569] 
[0.x.35570] 
[0.x.35571] 
[0.x.35572] 
[0.x.35573] 
[0.x.35574] 
[0.x.35575] 
[0.x.35576] 
[0.x.35577] 
[0.x.35578] 
[0.x.35579] 
[0.x.35580] 
[0.x.35581] 
//
// `x`部分的PML系数的形式为 [2.x.4240] 。
[0.x.35582] 
[0.x.35583] 
[0.x.35584] 
[0.x.35585] 
[0.x.35586] 
[0.x.35587] 
//
[0.x.35588] 
[0.x.35589] 
[0.x.35590] 
[0.x.35591] 
[0.x.35592] 
[0.x.35593] 
[0.x.35594] 
[0.x.35595] 
[0.x.35596] 
[0.x.35597] 
//
[0.x.35598] 
[0.x.35599] 
[0.x.35600] 
[0.x.35601] 
[0.x.35602] 
[0.x.35603] 
[0.x.35604] 
[0.x.35605] 
[0.x.35606] 
[0.x.35607] 
//
[0.x.35608] 
[0.x.35609] 
[0.x.35610] 
//
// [2.x.4241] 
//
// 这个类是用来定义质量密度的。正如我们之前所解释的，一个声学超晶格空腔是由两个[分布式反射器](https:en.wikipedia.org/wiki/Band_gap)、镜子和一个[2.x.4242]空腔组成的，其中[2.x.4243]是声波长。声学DBRs是一种周期性结构，其中一组具有对比性物理特性（声速指数）的双层堆栈被重复[2.x.4244]次。波速的变化是由具有不同密度的层交替产生的。
//
[0.x.35611] 
[0.x.35612] 
[0.x.35613] 
[0.x.35614] 
[0.x.35615] 
[0.x.35616] 
[0.x.35617] 
[0.x.35618] 
[0.x.35619] 
[0.x.35620] 
[0.x.35621] 
[0.x.35622] 
[0.x.35623] 
[0.x.35624] 
//
// 为了提高精度，我们使用[subpixel smoothing]（https:meep.readthedocs.io/en/latest/Subpixel_Smoothing/）。
//
[0.x.35625] 
[0.x.35626] 
[0.x.35627] 
//
[0.x.35628] 
[0.x.35629] 
[0.x.35630] 
[0.x.35631] 
//
// 声速由[1.x.117]定义，其中[2.x.4245]是有效弹性常数，[2.x.4246]是密度。这里我们考虑的是波导宽度远小于波长的情况。在这种情况下，可以证明对于二维的情况[1.x.118]和三维的情况[2.x.4247]等于杨氏模量。[1.x.119]
//
[0.x.35632] 
[0.x.35633] 
[0.x.35634] 
[0.x.35635] 
[0.x.35636] 
[0.x.35637] 
[0.x.35638] 
[0.x.35639] 
[0.x.35640] 
[0.x.35641] 
[0.x.35642] 
[0.x.35643] 
[0.x.35644] 
[0.x.35645] 
[0.x.35646] 
[0.x.35647] 
[0.x.35648] 
[0.x.35649] 
[0.x.35650] 
[0.x.35651] 
[0.x.35652] 
//
//密度[2.x.4248]采取以下形式 <img alt="声学超晶格空腔" src="https:www.dealii.org/images/steps/developer/ [2.x.4249] .04.svg" height="200" //其中棕色代表材料_a，绿色代表材料_b。
//
[0.x.35653] 
[0.x.35654] 
[0.x.35655] 
[0.x.35656] 
[0.x.35657] 
[0.x.35658] 
[0.x.35659] 
[0.x.35660] 
[0.x.35661] 
[0.x.35662] 
[0.x.35663] 
[0.x.35664] 
[0.x.35665] 
[0.x.35666] 
[0.x.35667] 
[0.x.35668] 
[0.x.35669] 
//
// 这里我们定义了[subpixel smoothing](https:meep.readthedocs.io/en/latest/Subpixel_Smoothing/)，它可以提高模拟的精度。
//
[0.x.35670] 
[0.x.35671] 
[0.x.35672] 
[0.x.35673] 
[0.x.35674] 
[0.x.35675] 
[0.x.35676] 
[0.x.35677] 
[0.x.35678] 
[0.x.35679] 
[0.x.35680] 
[0.x.35681] 
[0.x.35682] 
[0.x.35683] 
[0.x.35684] 
[0.x.35685] 
[0.x.35686] 
[0.x.35687] 
//
// 然后是腔体
//
[0.x.35688] 
[0.x.35689] 
[0.x.35690] 
[0.x.35691] 
//
// 材料层_a
//
[0.x.35692] 
[0.x.35693] 
[0.x.35694] 
[0.x.35695] 
[0.x.35696] 
[0.x.35697] 
[0.x.35698] 
[0.x.35699] 
[0.x.35700] 
[0.x.35701] 
[0.x.35702] 
[0.x.35703] 
[0.x.35704] 
//
// material_b层
//
[0.x.35705] 
[0.x.35706] 
[0.x.35707] 
[0.x.35708] 
[0.x.35709] 
[0.x.35710] 
[0.x.35711] 
[0.x.35712] 
[0.x.35713] 
[0.x.35714] 
[0.x.35715] 
[0.x.35716] 
[0.x.35717] 
//
// 最后，默认的是 material_a。
//
[0.x.35718] 
[0.x.35719] 
//
// [2.x.4250] 
//
// 构造函数使用[2.x.4251]函数从[2.x.4252]`data`中读取所有参数。
//
[0.x.35720] 
[0.x.35721] 
[0.x.35722] 
[0.x.35723] 
[0.x.35724] 
[0.x.35725] 
[0.x.35726] 
[0.x.35727] 
[0.x.35728] 
[0.x.35729] 
[0.x.35730] 
[0.x.35731] 
[0.x.35732] 
[0.x.35733] 
[0.x.35734] 
[0.x.35735] 
[0.x.35736] 
[0.x.35737] 
[0.x.35738] 
[0.x.35739] 
[0.x.35740] 
[0.x.35741] 
[0.x.35742] 
[0.x.35743] 
//
// [2.x.4253] 
//
// 我们需要为质量和刚度矩阵以及右手边的矢量保留足够的空间。
//
[0.x.35744] 
[0.x.35745] 
[0.x.35746] 
[0.x.35747] 
[0.x.35748] 
[0.x.35749] 
[0.x.35750] 
//
// [2.x.4254] 
//[2.x.4255] 
//
// 这与 [2.x.4256] 的构造函数非常相似。此外，我们还创建了HDF5数据集`frequency_dataset`，`position_dataset`和`displacement`。注意在创建HDF5数据集时使用了 "模板 "关键字。这是C++的要求，使用`template`关键字是为了将`create_dataset`作为一个依赖的模板名称。
//
[0.x.35751] 
[0.x.35752] 
[0.x.35753] 
[0.x.35754] 
[0.x.35755] 
[0.x.35756] 
[0.x.35757] 
[0.x.35758] 
[0.x.35759] 
[0.x.35760] 
[0.x.35761] 
[0.x.35762] 
[0.x.35763] 
[0.x.35764] 
[0.x.35765] 
[0.x.35766] 
[0.x.35767] 
[0.x.35768] 
[0.x.35769] 
[0.x.35770] 
[0.x.35771] 
[0.x.35772] 
[0.x.35773] 
[0.x.35774] 
[0.x.35775] 
[0.x.35776] 
[0.x.35777] 
[0.x.35778] 
[0.x.35779] 
[0.x.35780] 
[0.x.35781] 
//
// [2.x.4257] 
//
// 这个函数没有什么新内容，与[2.x.4258]的唯一区别是，我们不需要应用边界条件，因为我们使用PML来截断域。
//
[0.x.35782] 
[0.x.35783] 
[0.x.35784] 
[0.x.35785] 
//
[0.x.35786] 
//
[0.x.35787] 
[0.x.35788] 
//
[0.x.35789] 
[0.x.35790] 
[0.x.35791] 
//
[0.x.35792] 
//
[0.x.35793] 
[0.x.35794] 
[0.x.35795] 
//
[0.x.35796] 
//
[0.x.35797] 
//
[0.x.35798] 
[0.x.35799] 
[0.x.35800] 
[0.x.35801] 
[0.x.35802] 
//
[0.x.35803] 
[0.x.35804] 
[0.x.35805] 
[0.x.35806] 
[0.x.35807] 
//
// [2.x.4259] 
//
// 这个函数也与[2.x.4260]非常相似，尽管有明显的区别。我们为每个频率/欧米茄步骤组装系统。在第一步中，我们设置`calculate_quadrature_data = True`，然后我们计算质量和刚度矩阵以及右手边的矢量。在随后的步骤中，我们将使用这些数据来加速计算。
//
[0.x.35808] 
[0.x.35809] 
[0.x.35810] 
[0.x.35811] 
[0.x.35812] 
//
[0.x.35813] 
[0.x.35814] 
[0.x.35815] 
[0.x.35816] 
[0.x.35817] 
[0.x.35818] 
//
[0.x.35819] 
[0.x.35820] 
//
[0.x.35821] 
//
// 这里我们存储右手边的值，rho和PML的值。
//
[0.x.35822] 
[0.x.35823] 
[0.x.35824] 
[0.x.35825] 
//
// 我们计算已经在jupyter笔记本中定义的[2.x.4261]和[2.x.4262]的刚度张量。请注意，与[2.x.4263]相反，刚度在整个领域中是恒定的。
//
[0.x.35826] 
[0.x.35827] 
//
// 我们使用与[2.x.4264]相同的方法处理矢量值问题。
//
[0.x.35828] 
//
[0.x.35829] 
[0.x.35830] 
[0.x.35831] 
[0.x.35832] 
[0.x.35833] 
//
// 只有当我们要计算质量和刚度矩阵时，我们才必须计算右手边的rho和PML的值。否则我们可以跳过这个计算，这样可以大大减少总的计算时间。
//
[0.x.35834] 
[0.x.35835] 
[0.x.35836] 
//
[0.x.35837] 
[0.x.35838] 
[0.x.35839] 
[0.x.35840] 
[0.x.35841] 
[0.x.35842] 
[0.x.35843] 
//
// 我们已经在 [2.x.4265] 中做了这个工作。获得一个指向当前单元本地正交缓存数据的指针，作为防御措施，确保这个指针在全局数组的范围内。
//
[0.x.35844] 
[0.x.35845] 
[0.x.35846] 
[0.x.35847] 
[0.x.35848] 
[0.x.35849] 
[0.x.35850] 
[0.x.35851] 
//
// quadrature_data变量用于存储质量和刚度矩阵、右手边向量和`JxW`的值。
//
[0.x.35852] 
[0.x.35853] 
//
// 下面我们声明力向量和PML的参数 [2.x.4266] 和 [2.x.4267] 。
//
[0.x.35854] 
[0.x.35855] 
[0.x.35856] 
//
// 下面的块只在第一个频率步骤中计算。
//
[0.x.35857] 
[0.x.35858] 
//
// 存储`JxW`的值。
//
[0.x.35859] 
//
[0.x.35860] 
[0.x.35861] 
//
// 将向量转换为张量，并计算出xi
//
[0.x.35862] 
[0.x.35863] 
[0.x.35864] 
[0.x.35865] 
//
// 这里我们计算[2.x.4268]和[2.x.4269]张量。
//
[0.x.35866] 
[0.x.35867] 
[0.x.35868] 
[0.x.35869] 
[0.x.35870] 
[0.x.35871] 
[0.x.35872] 
[0.x.35873] 
[0.x.35874] 
[0.x.35875] 
[0.x.35876] 
[0.x.35877] 
[0.x.35878] 
[0.x.35879] 
//
[0.x.35880] 
[0.x.35881] 
[0.x.35882] 
[0.x.35883] 
[0.x.35884] 
[0.x.35885] 
//
[0.x.35886] 
[0.x.35887] 
[0.x.35888] 
[0.x.35889] 
[0.x.35890] 
[0.x.35891] 
//
// 计算质量矩阵的值。
//
[0.x.35892] 
[0.x.35893] 
//
//在刚度张量的[2.x.4270]指数上循环。
//
[0.x.35894] 
[0.x.35895] 
[0.x.35896] 
[0.x.35897] 
[0.x.35898] 
[0.x.35899] 
//
// 这里我们计算刚度矩阵。                          注意，由于PML的存在，刚度矩阵不是对称的。我们使用梯度函数（见[文档](https:www.dealii.org/current/doxygen/deal.II/group__vector__valued.html)），它是一个 [2.x.4271] 。                          矩阵[2.x.4272]由条目[1.x.120]组成 注意指数[2.x.4273]和[2.x.4274]的位置以及我们在本教程中使用的符号。 [2.x.4275] . 由于刚度张量不是对称的，所以很容易出错。
//
[0.x.35900] 
[0.x.35901] 
[0.x.35902] 
[0.x.35903] 
[0.x.35904] 
//
// 我们将刚度矩阵的值保存在quadrature_data中。
//
[0.x.35905] 
[0.x.35906] 
[0.x.35907] 
//
// 和正交数据中的右手边的值。
//
 
[0.x.35909] 
[0.x.35910] 
[0.x.35911] 
//
// 我们再次循环单元的自由度来计算系统矩阵。这些循环非常快，因为我们已经计算了刚度和质量矩阵，只有[2.x.4276]的值发生了变化。
//
[0.x.35912] 
[0.x.35913] 
[0.x.35914] 
[0.x.35915] 
[0.x.35916] 
[0.x.35917] 
[0.x.35918] 
[0.x.35919] 
[0.x.35920] 
[0.x.35921] 
[0.x.35922] 
[0.x.35923] 
[0.x.35924] 
[0.x.35925] 
[0.x.35926] 
[0.x.35927] 
[0.x.35928] 
[0.x.35929] 
[0.x.35930] 
[0.x.35931] 
//
[0.x.35932] 
[0.x.35933] 
[0.x.35934] 
//[2.x.4277] 
//
// 这比 [2.x.4278] 更加简单。我们使用并行的直接求解器MUMPS，它比迭代求解器需要更少的选项。缺点是它不能很好地扩展。用迭代求解器来解决Helmholtz方程并不简单。移位拉普拉斯多网格法是一种众所周知的预处理该系统的方法，但这超出了本教程的范围。
//
[0.x.35935] 
[0.x.35936] 
[0.x.35937] 
[0.x.35938] 
[0.x.35939] 
[0.x.35940] 
//
[0.x.35941] 
[0.x.35942] 
[0.x.35943] 
//
[0.x.35944] 
[0.x.35945] 
[0.x.35946] 
[0.x.35947] 
[0.x.35948] 
//[2.x.4279] 
//
// 我们用这个函数来计算位置向量的值。
//
[0.x.35949] 
[0.x.35950] 
[0.x.35951] 
[0.x.35952] 
[0.x.35953] 
[0.x.35954] 
[0.x.35955] 
//
// 由于运算符+和
//
// -被重载来减去两个点，所以必须做如下操作。`Point_b<dim> + (-Point_a<dim>)`。
//
[0.x.35956] 
[0.x.35957] 
[0.x.35958] 
[0.x.35959] 
[0.x.35960] 
[0.x.35961] 
[0.x.35962] 
[0.x.35963] 
[0.x.35964] 
[0.x.35965] 
[0.x.35966] 
[0.x.35967] 
//[2.x.4280] 
//
// 该函数在HDF5文件中存储探头测量的能量。
//
[0.x.35968] 
[0.x.35969] 
[0.x.35970] 
[0.x.35971] 
[0.x.35972] 
//
// 我们存储[2.x.4281]方向的位移；[2.x.4282]方向的位移可以忽略不计。
//
[0.x.35973] 
//
// 向量坐标包含HDF5文件中位于本地所有单元中的探测点的坐标。向量displacement_data包含这些点的位移值。
//
[0.x.35974] 
[0.x.35975] 
//
[0.x.35976] 
[0.x.35977] 
[0.x.35978] 
[0.x.35979] 
[0.x.35980] 
//
[0.x.35981] 
[0.x.35982] 
[0.x.35983] 
[0.x.35984] 
[0.x.35985] 
[0.x.35986] 
[0.x.35987] 
[0.x.35988] 
[0.x.35989] 
[0.x.35990] 
[0.x.35991] 
[0.x.35992] 
[0.x.35993] 
[0.x.35994] 
[0.x.35995] 
[0.x.35996] 
[0.x.35997] 
[0.x.35998] 
[0.x.35999] 
[0.x.36000] 
[0.x.36001] 
[0.x.36002] 
//
// 然后，我们可以在`displacement_data`中存储探头各点的位移值。
//
[0.x.36003] 
[0.x.36004] 
[0.x.36005] 
[0.x.36006] 
[0.x.36007] 
[0.x.36008] 
[0.x.36009] 
[0.x.36010] 
[0.x.36011] 
[0.x.36012] 
[0.x.36013] 
//
// 我们在HDF5文件中写入位移数据。调用[2.x.4283]是MPI集体的，这意味着所有进程都要参与。
//
[0.x.36014] 
[0.x.36015] 
[0.x.36016] 
[0.x.36017] 
//
// 因此，即使进程没有数据可写，它也必须参与集体调用。为此我们可以使用 [2.x.4284] 注意，我们必须指定数据类型，在这种情况下 [2.x.4285] 。
[0.x.36018] 
[0.x.36019] 
[0.x.36020] 
[0.x.36021] 
//
// 如果输入文件中的变量`save_vtu_files`等于`True`，那么所有数据将被保存为vtu。写入`vtu'文件的过程已经在 [2.x.4286] 中描述。
//
[0.x.36022] 
[0.x.36023] 
[0.x.36024] 
[0.x.36025] 
[0.x.36026] 
[0.x.36027] 
//
[0.x.36028] 
[0.x.36029] 
[0.x.36030] 
[0.x.36031] 
[0.x.36032] 
[0.x.36033] 
[0.x.36034] 
[0.x.36035] 
[0.x.36036] 
//
[0.x.36037] 
[0.x.36038] 
[0.x.36039] 
[0.x.36040] 
[0.x.36041] 
//
[0.x.36042] 
[0.x.36043] 
[0.x.36044] 
[0.x.36045] 
[0.x.36046] 
[0.x.36047] 
[0.x.36048] 
[0.x.36049] 
[0.x.36050] 
[0.x.36051] 
[0.x.36052] 
[0.x.36053] 
[0.x.36054] 
[0.x.36055] 
//
// 在我们不感兴趣的单元格上，将各自的值设置为一个假值，以确保如果我们的假设有什么错误，我们会通过查看图形输出发现。
//
[0.x.36056] 
[0.x.36057] 
[0.x.36058] 
[0.x.36059] 
[0.x.36060] 
[0.x.36061] 
[0.x.36062] 
[0.x.36063] 
[0.x.36064] 
[0.x.36065] 
//
[0.x.36066] 
[0.x.36067] 
[0.x.36068] 
[0.x.36069] 
[0.x.36070] 
[0.x.36071] 
[0.x.36072] 
[0.x.36073] 
//
[0.x.36074] 
//
[0.x.36075] 
[0.x.36076] 
[0.x.36077] 
[0.x.36078] 
[0.x.36079] 
[0.x.36080] 
[0.x.36081] 
[0.x.36082] 
[0.x.36083] 
[0.x.36084] 
//
// [2.x.4287] 
//
// 该函数写入尚未写入的数据集。
//
[0.x.36085] 
[0.x.36086] 
[0.x.36087] 
//
// 向量`频率`和`位置`对所有进程都是一样的。因此任何一个进程都可以写入相应的`数据集'。因为调用[2.x.4288]是MPI集体的，其余进程将不得不调用[2.x.4289] 。
[0.x.36088] 
[0.x.36089] 
[0.x.36090] 
[0.x.36091] 
[0.x.36092] 
[0.x.36093] 
[0.x.36094] 
[0.x.36095] 
[0.x.36096] 
[0.x.36097] 
[0.x.36098] 
//
// [2.x.4290] 
//
// 我们在计算开始时使用这个函数来设置缓存变量的初始值。这个函数在 [2.x.4291] 中已经描述过。与 [2.x.4292] 的函数没有区别。
//
[0.x.36099] 
[0.x.36100] 
[0.x.36101] 
[0.x.36102] 
//
[0.x.36103] 
[0.x.36104] 
[0.x.36105] 
[0.x.36106] 
//
[0.x.36107] 
[0.x.36108] 
[0.x.36109] 
[0.x.36110] 
[0.x.36111] 
[0.x.36112] 
[0.x.36113] 
[0.x.36114] 
[0.x.36115] 
[0.x.36116] 
[0.x.36117] 
[0.x.36118] 
//
// [2.x.4293] 
//
// 为了清楚起见，我们将[2.x.4294]的函数`run`分为函数`run`和`frequency_sweep`。在函数`frequency_sweep`中，我们把迭代放在频率向量上。
//
[0.x.36119] 
[0.x.36120] 
[0.x.36121] 
[0.x.36122] 
[0.x.36123] 
[0.x.36124] 
[0.x.36125] 
[0.x.36126] 
[0.x.36127] 
[0.x.36128] 
//
[0.x.36129] 
[0.x.36130] 
[0.x.36131] 
[0.x.36132] 
[0.x.36133] 
[0.x.36134] 
[0.x.36135] 
[0.x.36136] 
//
[0.x.36137] 
[0.x.36138] 
//
// 只写一次模拟参数
//
[0.x.36139] 
[0.x.36140] 
[0.x.36141] 
[0.x.36142] 
[0.x.36143] 
//
// 我们计算出这个特定步骤的频率和欧米茄值。
//
[0.x.36144] 
[0.x.36145] 
[0.x.36146] 
[0.x.36147] 
[0.x.36148] 
[0.x.36149] 
[0.x.36150] 
//
// 在第一个频率步骤中，我们计算出质量和刚度矩阵以及右手边的数据。在随后的频率步骤中，我们将使用这些值。这大大改善了计算时间。
//
[0.x.36151] 
[0.x.36152] 
[0.x.36153] 
//
[0.x.36154] 
[0.x.36155] 
//
[0.x.36156] 
[0.x.36157] 
[0.x.36158] 
[0.x.36159] 
[0.x.36160] 
//
// [2.x.4295] 
//
// 这个函数与 [2.x.4296] 中的函数非常相似。
//
[0.x.36161] 
[0.x.36162] 
[0.x.36163] 
[0.x.36164] 
[0.x.36165] 
[0.x.36166] 
[0.x.36167] 
[0.x.36168] 
//
[0.x.36169] 
[0.x.36170] 
[0.x.36171] 
[0.x.36172] 
[0.x.36173] 
[0.x.36174] 
[0.x.36175] 
[0.x.36176] 
[0.x.36177] 
[0.x.36178] 
[0.x.36179] 
[0.x.36180] 
[0.x.36181] 
[0.x.36182] 
[0.x.36183] 
[0.x.36184] 
[0.x.36185] 
[0.x.36186] 
[0.x.36187] 
[0.x.36188] 
[0.x.36189] 
[0.x.36190] 
[0.x.36191] 
[0.x.36192] 
[0.x.36193] 
[0.x.36194] 
[0.x.36195] 
//
[0.x.36196] 
//
[0.x.36197] 
//
[0.x.36198] 
//
[0.x.36199] 
//
[0.x.36200] 
[0.x.36201] 
[0.x.36202] 
//
// [2.x.4297] 
//
// 主函数与 [2.x.4298] 中的函数非常相似。
//
[0.x.36203] 
[0.x.36204] 
[0.x.36205] 
[0.x.36206] 
[0.x.36207] 
[0.x.36208] 
//
[0.x.36209] 
//
[0.x.36210] 
[0.x.36211] 
[0.x.36212] 
[0.x.36213] 
//
// 每个模拟（位移和校准）都存储在一个单独的HDF5组中。
//
[0.x.36214] 
[0.x.36215] 
[0.x.36216] 
[0.x.36217] 
//
// 对于这两个组名中的每一个，我们现在创建组并将属性放入这些组。具体来说，这些是。
//
// - 波导的尺寸（在[2.x.4299]和[2.x.4300]方向）。
//
// - 探头的位置（在[2.x.4301]和[2.x.4302]方向）。
//
// - 探针中的点的数量
//
// - 全局细化水平
//
// - 腔体谐振频率
//
// - 镜像对的数量
//
镜子的数量 // - 材料特性
//
// - 力的参数
//
// - PML参数
//
// - 频率参数
//
[0.x.36218] 
//
[0.x.36219] 
[0.x.36220] 
[0.x.36221] 
[0.x.36222] 
[0.x.36223] 
[0.x.36224] 
[0.x.36225] 
[0.x.36226] 
[0.x.36227] 
//
[0.x.36228] 
[0.x.36229] 
[0.x.36230] 
//
[0.x.36231] 
[0.x.36232] 
[0.x.36233] 
[0.x.36234] 
//
[0.x.36235] 
[0.x.36236] 
[0.x.36237] 
[0.x.36238] 
[0.x.36239] 
[0.x.36240] 
[0.x.36241] 
[0.x.36242] 
[0.x.36243] 
[0.x.36244] 
//
[0.x.36245] 
[0.x.36246] 
[0.x.36247] 
[0.x.36248] 
[0.x.36249] 
[0.x.36250] 
[0.x.36251] 
//
[0.x.36252] 
[0.x.36253] 
[0.x.36254] 
[0.x.36255] 
[0.x.36256] 
[0.x.36257] 
//
[0.x.36258] 
[0.x.36259] 
[0.x.36260] 
[0.x.36261] 
[0.x.36262] 
[0.x.36263] 
[0.x.36264] 
[0.x.36265] 
[0.x.36266] 
[0.x.36267] 
[0.x.36268] 
//
[0.x.36269] 
[0.x.36270] 
[0.x.36271] 
[0.x.36272] 
[0.x.36273] 
[0.x.36274] 
//
[0.x.36275] 
[0.x.36276] 
//
[0.x.36277] 
//
// 位移模拟。参数从位移HDF5组中读取，结果保存在同一HDF5组中。
//
[0.x.36278] 
[0.x.36279] 
//
[0.x.36280] 
[0.x.36281] 
[0.x.36282] 
//
[0.x.36283] 
//
// 校准模拟。参数从校准HDF5组中读取，结果保存在同一HDF5组中。
//
[0.x.36284] 
[0.x.36285] 
//
[0.x.36286] 
[0.x.36287] 
[0.x.36288] 
[0.x.36289] 
[0.x.36290] 
[0.x.36291] 
[0.x.36292] 
[0.x.36293] 
[0.x.36294] 
[0.x.36295] 
[0.x.36296] 
[0.x.36297] 
[0.x.36298] 
[0.x.36299] 
[0.x.36300] 
//
[0.x.36301] 
[0.x.36302] 
[0.x.36303] 
[0.x.36304] 
[0.x.36305] 
[0.x.36306] 
[0.x.36307] 
[0.x.36308] 
[0.x.36309] 
[0.x.36310] 
[0.x.36311] 
[0.x.36312] 
[0.x.36313] 
[0.x.36314] 
//
[0.x.36315] 
[0.x.36316] 
[0.x.36317] 
[0.x.36318] 
[0.x.36319] 
[0.x.36320] 
[0.x.36321] 
[0.x.36322] 
[0.x.36323] 
[0.x.36324] 
[0.x.36325] 
[0.x.36326] 
[0.x.36327] 
[0.x.36328] 
[0.x.36329] 
[0.x.36330] 
[0.x.36331] 
[0.x.36332] 
[0.x.36333] 
[0.x.36334] 
//[2.x.4303] 
//
// 标准deal.II需要的典型文件。
//
[0.x.36335] 
[0.x.36336] 
[0.x.36337] 
[0.x.36338] 
[0.x.36339] 
//
[0.x.36340] 
[0.x.36341] 
[0.x.36342] 
[0.x.36343] 
[0.x.36344] 
[0.x.36345] 
[0.x.36346] 
[0.x.36347] 
//
[0.x.36348] 
[0.x.36349] 
[0.x.36350] 
[0.x.36351] 
[0.x.36352] 
//
[0.x.36353] 
[0.x.36354] 
[0.x.36355] 
//
[0.x.36356] 
[0.x.36357] 
[0.x.36358] 
//
[0.x.36359] 
[0.x.36360] 
[0.x.36361] 
//
// 包括所有相关的多层次文件。
//
[0.x.36362] 
[0.x.36363] 
[0.x.36364] 
[0.x.36365] 
[0.x.36366] 
[0.x.36367] 
[0.x.36368] 
//
// C++:
//
[0.x.36369] 
[0.x.36370] 
[0.x.36371] 
[0.x.36372] 
//
// 我们将使用[2.x.4304]功能来组装矩阵。
//
[0.x.36373] 
//[2.x.4305] 
//
// 像往常一样，我们将把所有与这个程序有关的东西放到一个自己的命名空间中。
//
// 由于我们将使用MeshWorker框架，第一步是定义以下由[2.x.4306]使用的assemble_cell()函数所需要的结构 `ScratchData`包含一个FEValues对象，这是组装一个单元的局部贡献所需要的，而`CopyData`包含一个单元的局部贡献的输出和复制到全局系统的必要信息。它们的目的在WorkStream类的文档中也有解释）。
//
[0.x.36374] 
[0.x.36375] 
[0.x.36376] 
//
[0.x.36377] 
[0.x.36378] 
[0.x.36379] 
[0.x.36380] 
[0.x.36381] 
[0.x.36382] 
[0.x.36383] 
[0.x.36384] 
[0.x.36385] 
[0.x.36386] 
//
[0.x.36387] 
[0.x.36388] 
[0.x.36389] 
[0.x.36390] 
[0.x.36391] 
[0.x.36392] 
//
[0.x.36393] 
[0.x.36394] 
//
[0.x.36395] 
[0.x.36396] 
[0.x.36397] 
//
[0.x.36398] 
[0.x.36399] 
//
[0.x.36400] 
[0.x.36401] 
[0.x.36402] 
[0.x.36403] 
//
// [2.x.4307] 
//
// 第二步是定义处理要从输入文件中读取的运行时参数的类。
//
// 我们将使用ParameterHandler在运行时传入参数。结构`Settings`解析并存储整个程序要查询的参数。
//
[0.x.36404] 
[0.x.36405] 
[0.x.36406] 
[0.x.36407] 
[0.x.36408] 
[0.x.36409] 
[0.x.36410] 
[0.x.36411] 
[0.x.36412] 
//
[0.x.36413] 
//
[0.x.36414] 
[0.x.36415] 
[0.x.36416] 
[0.x.36417] 
[0.x.36418] 
[0.x.36419] 
[0.x.36420] 
[0.x.36421] 
//
[0.x.36422] 
[0.x.36423] 
//
// *首先声明参数...  [2.x.4308] 
[0.x.36424] 
//
[0.x.36425] 
[0.x.36426] 
[0.x.36427] 
[0.x.36428] 
//
[0.x.36429] 
[0.x.36430] 
[0.x.36431] 
[0.x.36432] 
[0.x.36433] 
[0.x.36434] 
[0.x.36435] 
[0.x.36436] 
[0.x.36437] 
[0.x.36438] 
[0.x.36439] 
[0.x.36440] 
[0.x.36441] 
[0.x.36442] 
[0.x.36443] 
[0.x.36444] 
[0.x.36445] 
[0.x.36446] 
[0.x.36447] 
[0.x.36448] 
[0.x.36449] 
[0.x.36450] 
[0.x.36451] 
[0.x.36452] 
[0.x.36453] 
//
// /* ...然后尝试从输入文件中读取它们的值。 [2.x.4309] 
[0.x.36454] 
[0.x.36455] 
[0.x.36456] 
[0.x.36457] 
[0.x.36458] 
[0.x.36459] 
//
[0.x.36460] 
//
[0.x.36461] 
[0.x.36462] 
[0.x.36463] 
[0.x.36464] 
//
[0.x.36465] 
[0.x.36466] 
[0.x.36467] 
[0.x.36468] 
[0.x.36469] 
[0.x.36470] 
[0.x.36471] 
[0.x.36472] 
[0.x.36473] 
[0.x.36474] 
[0.x.36475] 
[0.x.36476] 
[0.x.36477] 
//
[0.x.36478] 
[0.x.36479] 
[0.x.36480] 
//[2.x.4310] 
//
// 遍历单元和自由度的顺序将对乘法的收敛速度起作用。在这里，我们定义了一些函数，这些函数返回单元格的特定顺序，供块平滑器使用。
//
// 对于每种类型的单元格排序，我们定义了一个用于活动网格的函数和一个用于水平网格的函数（即用于多网格层次结构中的某一层的单元格）。虽然求解系统所需的唯一重新排序是在水平网格上进行的，但为了可视化的目的，我们在output_results()中包含了主动网格的重新排序。
//
// 对于两个下游排序函数，我们首先创建一个包含所有相关单元的数组，然后使用一个 "比较器 "对象在下游方向进行排序。然后，函数的输出是一个简单的数组，包含了刚刚计算出来的单元格的索引。
//
[0.x.36481] 
[0.x.36482] 
[0.x.36483] 
[0.x.36484] 
[0.x.36485] 
[0.x.36486] 
[0.x.36487] 
[0.x.36488] 
[0.x.36489] 
[0.x.36490] 
//
[0.x.36491] 
[0.x.36492] 
[0.x.36493] 
[0.x.36494] 
//
[0.x.36495] 
[0.x.36496] 
//
[0.x.36497] 
[0.x.36498] 
//
[0.x.36499] 
[0.x.36500] 
//
[0.x.36501] 
[0.x.36502] 
[0.x.36503] 
[0.x.36504] 
[0.x.36505] 
[0.x.36506] 
[0.x.36507] 
[0.x.36508] 
[0.x.36509] 
//
[0.x.36510] 
[0.x.36511] 
[0.x.36512] 
[0.x.36513] 
//
[0.x.36514] 
[0.x.36515] 
//
[0.x.36516] 
[0.x.36517] 
//
[0.x.36518] 
[0.x.36519] 
//
// 产生随机排序的函数在精神上是相似的，它们首先将所有单元的信息放入一个数组。但是，它们不是对它们进行排序，而是利用C++提供的生成随机数的设施对元素进行随机洗牌。这样做的方式是在数组的所有元素上进行迭代，为之前的另一个元素抽取一个随机数，然后交换这些元素。其结果是对数组中的元素进行随机洗牌。
//
[0.x.36520] 
[0.x.36521] 
[0.x.36522] 
[0.x.36523] 
[0.x.36524] 
[0.x.36525] 
[0.x.36526] 
[0.x.36527] 
[0.x.36528] 
//
[0.x.36529] 
[0.x.36530] 
[0.x.36531] 
[0.x.36532] 
//
[0.x.36533] 
[0.x.36534] 
//
[0.x.36535] 
[0.x.36536] 
[0.x.36537] 
[0.x.36538] 
[0.x.36539] 
[0.x.36540] 
[0.x.36541] 
[0.x.36542] 
//
[0.x.36543] 
[0.x.36544] 
[0.x.36545] 
[0.x.36546] 
//
[0.x.36547] 
[0.x.36548] 
//[2.x.4311] 
//
// 本教程中所解决的问题是对[1.x.121]第118页上的例3.1.3的修改。主要的区别是我们在域的中心增加了一个洞，其边界条件为零的Dirichlet。
//
// 为了获得完整的描述，我们需要首先实现零右手边的类（当然，我们可以直接使用[2.x.4312] 。
[0.x.36549] 
[0.x.36550] 
[0.x.36551] 
[0.x.36552] 
[0.x.36553] 
[0.x.36554] 
//
[0.x.36555] 
[0.x.36556] 
[0.x.36557] 
[0.x.36558] 
//
[0.x.36559] 
[0.x.36560] 
[0.x.36561] 
[0.x.36562] 
[0.x.36563] 
[0.x.36564] 
//
[0.x.36565] 
[0.x.36566] 
//
[0.x.36567] 
[0.x.36568] 
[0.x.36569] 
[0.x.36570] 
[0.x.36571] 
[0.x.36572] 
[0.x.36573] 
//
[0.x.36574] 
[0.x.36575] 
[0.x.36576] 
//
// 我们也有迪里希特的边界条件。在外部正方形边界的连接部分，我们将数值设置为1，其他地方（包括内部圆形边界）的数值设置为0。
//
[0.x.36577] 
[0.x.36578] 
[0.x.36579] 
[0.x.36580] 
[0.x.36581] 
[0.x.36582] 
//
[0.x.36583] 
[0.x.36584] 
[0.x.36585] 
[0.x.36586] 
//
[0.x.36587] 
[0.x.36588] 
[0.x.36589] 
[0.x.36590] 
[0.x.36591] 
[0.x.36592] 
//
// 如果 [2.x.4313] ，或如果 [2.x.4314] 和 [2.x.4315] ，则将边界设为 1。
//
[0.x.36593] 
[0.x.36594] 
[0.x.36595] 
[0.x.36596] 
[0.x.36597] 
[0.x.36598] 
[0.x.36599] 
[0.x.36600] 
[0.x.36601] 
[0.x.36602] 
//
[0.x.36603] 
[0.x.36604] 
[0.x.36605] 
[0.x.36606] 
[0.x.36607] 
[0.x.36608] 
[0.x.36609] 
//
[0.x.36610] 
[0.x.36611] 
[0.x.36612] 
//
// [2.x.4316] 
//
// 流水线扩散方法有一个稳定常数，我们需要能够计算出来。这个参数的计算方式的选择取自于[1.x.122]。
//
[0.x.36613] 
[0.x.36614] 
[0.x.36615] 
[0.x.36616] 
[0.x.36617] 
[0.x.36618] 
[0.x.36619] 
[0.x.36620] 
[0.x.36621] 
//
[0.x.36622] 
[0.x.36623] 
//[2.x.4317] 
//
// 这是程序的主类，看起来应该与 [2.x.4318] 非常相似。主要的区别是，由于我们是在运行时定义我们的多网格平滑器，我们选择定义一个函数`create_smoother()`和一个类对象`mg_smoother`，这是一个 [2.x.4319] 派生于MGSmoother的平滑器。请注意，对于从RelaxationBlock派生的平滑器，我们必须为每个级别包括一个`smoother_data`对象。这将包含关于单元格排序和单元格矩阵倒置方法的信息。
//
[0.x.36624] 
[0.x.36625] 
[0.x.36626] 
[0.x.36627] 
[0.x.36628] 
[0.x.36629] 
//
[0.x.36630] 
[0.x.36631] 
//
[0.x.36632] 
[0.x.36633] 
[0.x.36634] 
[0.x.36635] 
[0.x.36636] 
//
[0.x.36637] 
//
[0.x.36638] 
[0.x.36639] 
[0.x.36640] 
//
[0.x.36641] 
[0.x.36642] 
//
[0.x.36643] 
[0.x.36644] 
//
[0.x.36645] 
//
[0.x.36646] 
[0.x.36647] 
//
[0.x.36648] 
[0.x.36649] 
//
[0.x.36650] 
[0.x.36651] 
//
[0.x.36652] 
[0.x.36653] 
[0.x.36654] 
//
[0.x.36655] 
[0.x.36656] 
[0.x.36657] 
//
[0.x.36658] 
//
[0.x.36659] 
[0.x.36660] 
[0.x.36661] 
[0.x.36662] 
//
[0.x.36663] 
//
[0.x.36664] 
//
[0.x.36665] 
[0.x.36666] 
//
[0.x.36667] 
[0.x.36668] 
[0.x.36669] 
[0.x.36670] 
[0.x.36671] 
[0.x.36672] 
[0.x.36673] 
[0.x.36674] 
[0.x.36675] 
[0.x.36676] 
[0.x.36677] 
[0.x.36678] 
[0.x.36679] 
[0.x.36680] 
//[2.x.4320] 
//
// 在这里，我们首先为活动和多网格级别的网格设置DoFHandler、AffineConstraints和SparsityPattern对象。
//
// 我们可以用DoFRenumbering类对活动DoF进行重新编号，但是平滑器只作用于多网格层，因此，这对计算并不重要。相反，我们将对每个多网格层的DoFs进行重新编号。
//
[0.x.36681] 
[0.x.36682] 
[0.x.36683] 
[0.x.36684] 
//
[0.x.36685] 
//
[0.x.36686] 
[0.x.36687] 
//
[0.x.36688] 
[0.x.36689] 
//
[0.x.36690] 
[0.x.36691] 
[0.x.36692] 
[0.x.36693] 
[0.x.36694] 
//
[0.x.36695] 
[0.x.36696] 
[0.x.36697] 
[0.x.36698] 
//
//keep_constrained_dofs = [2.x.4321] false）。)
//
[0.x.36699] 
[0.x.36700] 
//
[0.x.36701] 
//
// 在列举了全局自由度以及（上面最后一行）水平自由度之后，让我们对水平自由度进行重新编号，以获得一个更好的平滑器，正如介绍中所解释的。 如果需要的话，下面的第一个区块会对下游或上游方向的每个层次的自由度进行重新编号。这只对点平滑器（SOR和Jacobi）有必要，因为块平滑器是在单元上操作的（见`create_smoother()`）。然后，下面的块也实现了随机编号。
//
[0.x.36702] 
[0.x.36703] 
[0.x.36704] 
[0.x.36705] 
[0.x.36706] 
[0.x.36707] 
[0.x.36708] 
[0.x.36709] 
[0.x.36710] 
[0.x.36711] 
[0.x.36712] 
[0.x.36713] 
[0.x.36714] 
//
[0.x.36715] 
[0.x.36716] 
[0.x.36717] 
[0.x.36718] 
//
//dof_wise_renumbering = [2.x.4322] true）。)
//
[0.x.36719] 
[0.x.36720] 
[0.x.36721] 
[0.x.36722] 
[0.x.36723] 
[0.x.36724] 
[0.x.36725] 
[0.x.36726] 
[0.x.36727] 
[0.x.36728] 
//
// 该函数的其余部分只是设置了数据结构。下面代码的最后几行与其他GMG教程不同，因为它同时设置了接口输入和输出矩阵。我们需要这样做，因为我们的问题是非对称性的。
//
[0.x.36729] 
[0.x.36730] 
//
[0.x.36731] 
//
[0.x.36732] 
[0.x.36733] 
[0.x.36734] 
[0.x.36735] 
[0.x.36736] 
[0.x.36737] 
[0.x.36738] 
[0.x.36739] 
//
[0.x.36740] 
[0.x.36741] 
[0.x.36742] 
[0.x.36743] 
[0.x.36744] 
[0.x.36745] 
[0.x.36746] 
[0.x.36747] 
[0.x.36748] 
[0.x.36749] 
[0.x.36750] 
[0.x.36751] 
[0.x.36752] 
[0.x.36753] 
[0.x.36754] 
[0.x.36755] 
[0.x.36756] 
//
[0.x.36757] 
[0.x.36758] 
[0.x.36759] 
[0.x.36760] 
[0.x.36761] 
//[2.x.4323] 
//
// 这里我们定义了每个单元上的线性系统的装配，以便被下面的Mesh_loop()函数使用。这个函数为活动单元或水平单元（不管它的第一个参数是什么）装配单元矩阵，并且只有在调用活动单元时才装配右手边。
//
[0.x.36762] 
[0.x.36763] 
[0.x.36764] 
[0.x.36765] 
[0.x.36766] 
[0.x.36767] 
[0.x.36768] 
//
[0.x.36769] 
[0.x.36770] 
[0.x.36771] 
[0.x.36772] 
//
[0.x.36773] 
[0.x.36774] 
//
[0.x.36775] 
[0.x.36776] 
//
[0.x.36777] 
[0.x.36778] 
//
[0.x.36779] 
//
[0.x.36780] 
[0.x.36781] 
//
[0.x.36782] 
[0.x.36783] 
//
// 如果我们使用流线扩散，我们必须把它的贡献加到单元格矩阵和单元格的右手边。如果我们不使用流线扩散，设置[2.x.4324]就可以否定这个贡献，我们就可以使用标准的Galerkin有限元组合。
//
[0.x.36784] 
[0.x.36785] 
[0.x.36786] 
[0.x.36787] 
[0.x.36788] 
[0.x.36789] 
//
[0.x.36790] 
[0.x.36791] 
[0.x.36792] 
[0.x.36793] 
[0.x.36794] 
//
// 本地矩阵的组装有两个部分。首先是Galerkin贡献。
//
[0.x.36795] 
[0.x.36796] 
[0.x.36797] 
[0.x.36798] 
[0.x.36799] 
[0.x.36800] 
[0.x.36801] 
[0.x.36802] 
[0.x.36803] 
//
//然后是流线扩散贡献。
//
[0.x.36804] 
[0.x.36805] 
[0.x.36806] 
[0.x.36807] 
[0.x.36808] 
[0.x.36809] 
[0.x.36810] 
[0.x.36811] 
[0.x.36812] 
[0.x.36813] 
[0.x.36814] 
[0.x.36815] 
[0.x.36816] 
[0.x.36817] 
//
// 同样的情况也适用于右手边。首先是Galerkin贡献。
//
[0.x.36818] 
[0.x.36819] 
[0.x.36820] 
//
// 然后是流线扩散贡献。
//
[0.x.36821] 
[0.x.36822] 
[0.x.36823] 
[0.x.36824] 
[0.x.36825] 
[0.x.36826] 
//[2.x.4325] 
//
// 这里我们采用[2.x.4326]来翻阅单元格，为我们组装system_matrix、system_rhs和所有mg_matrices。
//
[0.x.36827] 
[0.x.36828] 
[0.x.36829] 
[0.x.36830] 
[0.x.36831] 
[0.x.36832] 
[0.x.36833] 
[0.x.36834] 
[0.x.36835] 
//
[0.x.36836] 
[0.x.36837] 
[0.x.36838] 
[0.x.36839] 
[0.x.36840] 
[0.x.36841] 
[0.x.36842] 
//
[0.x.36843] 
[0.x.36844] 
[0.x.36845] 
[0.x.36846] 
[0.x.36847] 
[0.x.36848] 
[0.x.36849] 
//
// 与活动层的约束不同，我们选择在这个函数的本地为每个多网格层创建约束对象，因为它们在程序的其他地方从来不需要。
//
[0.x.36850] 
[0.x.36851] 
[0.x.36852] 
[0.x.36853] 
[0.x.36854] 
[0.x.36855] 
[0.x.36856] 
[0.x.36857] 
[0.x.36858] 
[0.x.36859] 
[0.x.36860] 
[0.x.36861] 
[0.x.36862] 
[0.x.36863] 
[0.x.36864] 
//
[0.x.36865] 
[0.x.36866] 
[0.x.36867] 
[0.x.36868] 
[0.x.36869] 
[0.x.36870] 
//
[0.x.36871] 
[0.x.36872] 
[0.x.36873] 
[0.x.36874] 
[0.x.36875] 
//
// 如果[2.x.4327]是一个`interface_out` dof对，那么[2.x.4328]就是一个`interface_in` dof对。注意：对于 "interface_in"，我们加载接口条目的转置，即，dof对[2.x.4329]的条目被存储在 "interface_in(i,j)"。这是对对称情况的优化，允许在solve()中设置边缘矩阵时只使用一个矩阵。然而，在这里，由于我们的问题是非对称的，我们必须同时存储`interface_in`和`interface_out`矩阵。
//
[0.x.36876] 
[0.x.36877] 
[0.x.36878] 
[0.x.36879] 
[0.x.36880] 
[0.x.36881] 
[0.x.36882] 
[0.x.36883] 
[0.x.36884] 
[0.x.36885] 
[0.x.36886] 
[0.x.36887] 
[0.x.36888] 
[0.x.36889] 
[0.x.36890] 
[0.x.36891] 
[0.x.36892] 
//
[0.x.36893] 
[0.x.36894] 
[0.x.36895] 
[0.x.36896] 
[0.x.36897] 
[0.x.36898] 
[0.x.36899] 
[0.x.36900] 
//[2.x.4330] 
//
// 接下来，我们根据`.prm`文件中的设置来设置平滑器。两个重要的选项是多网格v周期每一级的平滑前和平滑后步骤的数量以及松弛参数。
//
// 由于乘法往往比加法更强大，所以需要较少的平滑步骤来实现收敛，与网格大小无关。块平滑器比点平滑器也是如此。这反映在下面对每种平滑器的平滑步数的选择上。
//
// 点平滑器的松弛参数是在试验和错误的基础上选择的，它反映了在我们细化网格时保持GMRES求解的迭代次数不变（或尽可能接近）的必要值。在`.prm`文件中给 "Jacobi "和 "SOR "的两个值是针对1度和3度有限元的。如果用户想改成其他度数，他们可能需要调整这些数字。对于块平滑器，这个参数有一个更直接的解释，即对于二维的加法，一个DoF可以有多达4个单元的重复贡献，因此我们必须将这些方法放松0.25来补偿。对于乘法来说，这不是一个问题，因为每个单元的逆向应用都会给其所有的DoF带来新的信息。
//
// 最后，如上所述，点平滑器只对DoF进行操作，而块平滑器对单元进行操作，因此只有块平滑器需要被赋予有关单元排序的信息。点平滑器的DoF排序已经在`setup_system()`中得到了处理。
//
[0.x.36901] 
[0.x.36902] 
[0.x.36903] 
[0.x.36904] 
[0.x.36905] 
[0.x.36906] 
//
[0.x.36907] 
[0.x.36908] 
[0.x.36909] 
[0.x.36910] 
[0.x.36911] 
[0.x.36912] 
[0.x.36913] 
[0.x.36914] 
[0.x.36915] 
[0.x.36916] 
[0.x.36917] 
[0.x.36918] 
[0.x.36919] 
[0.x.36920] 
[0.x.36921] 
[0.x.36922] 
[0.x.36923] 
[0.x.36924] 
[0.x.36925] 
[0.x.36926] 
[0.x.36927] 
[0.x.36928] 
[0.x.36929] 
[0.x.36930] 
[0.x.36931] 
[0.x.36932] 
[0.x.36933] 
//
[0.x.36934] 
[0.x.36935] 
[0.x.36936] 
[0.x.36937] 
[0.x.36938] 
//
[0.x.36939] 
[0.x.36940] 
[0.x.36941] 
//
[0.x.36942] 
[0.x.36943] 
[0.x.36944] 
[0.x.36945] 
[0.x.36946] 
[0.x.36947] 
[0.x.36948] 
[0.x.36949] 
[0.x.36950] 
//
[0.x.36951] 
[0.x.36952] 
[0.x.36953] 
[0.x.36954] 
[0.x.36955] 
[0.x.36956] 
//
[0.x.36957] 
[0.x.36958] 
[0.x.36959] 
[0.x.36960] 
//
[0.x.36961] 
[0.x.36962] 
//
[0.x.36963] 
[0.x.36964] 
[0.x.36965] 
[0.x.36966] 
//
[0.x.36967] 
[0.x.36968] 
[0.x.36969] 
//
[0.x.36970] 
[0.x.36971] 
[0.x.36972] 
[0.x.36973] 
[0.x.36974] 
[0.x.36975] 
[0.x.36976] 
[0.x.36977] 
[0.x.36978] 
[0.x.36979] 
[0.x.36980] 
[0.x.36981] 
[0.x.36982] 
[0.x.36983] 
[0.x.36984] 
[0.x.36985] 
[0.x.36986] 
[0.x.36987] 
[0.x.36988] 
[0.x.36989] 
[0.x.36990] 
[0.x.36991] 
[0.x.36992] 
[0.x.36993] 
[0.x.36994] 
[0.x.36995] 
//[2.x.4331] 
//
// 在解决这个系统之前，我们必须首先设置多网格预处理程序。这需要设置各级之间的转换、粗略矩阵求解器和平滑器。这个设置几乎与[2.x.4332]相同，主要区别在于上面定义的各种平滑器，以及由于我们的问题是非对称的，我们需要不同的界面边缘矩阵。实际上，在本教程中，这些接口矩阵是空的，因为我们只使用全局细化，因此没有细化边。然而，我们在这里仍然包括了这两个矩阵，因为如果我们简单地切换到自适应细化方法，程序仍然可以正常运行）。)
//
// 最后要注意的是，由于我们的问题是非对称的，我们必须使用适当的Krylov子空间方法。我们在这里选择使用GMRES，因为它能保证在每次迭代中减少残差。GMRES的主要缺点是，每次迭代，存储的临时向量的数量都会增加一个，而且还需要计算与之前存储的所有向量的标量积。这是很昂贵的。通过使用重启的GMRES方法可以放松这一要求，该方法对我们在任何时候需要存储的向量数量设置了上限（这里我们在50个临时向量后重启，即48次迭代）。这样做的缺点是我们失去了在整个迭代过程中收集的信息，因此我们可以看到收敛速度较慢。因此，在哪里重启是一个平衡内存消耗、CPU工作量和收敛速度的问题。然而，本教程的目标是通过使用强大的GMG预处理程序来实现非常低的迭代次数，所以我们选择了重启长度，使下面显示的所有结果在重启发生之前就能收敛，因此我们有一个标准的GMRES方法。如果用户有兴趣，deal.II中提供的另一种合适的方法是BiCGStab。
//
[0.x.36996] 
[0.x.36997] 
[0.x.36998] 
[0.x.36999] 
[0.x.37000] 
[0.x.37001] 
[0.x.37002] 
//
[0.x.37003] 
[0.x.37004] 
[0.x.37005] 
//
[0.x.37006] 
[0.x.37007] 
[0.x.37008] 
[0.x.37009] 
//
[0.x.37010] 
//
[0.x.37011] 
[0.x.37012] 
[0.x.37013] 
//
[0.x.37014] 
[0.x.37015] 
[0.x.37016] 
//
[0.x.37017] 
[0.x.37018] 
[0.x.37019] 
//
[0.x.37020] 
[0.x.37021] 
[0.x.37022] 
[0.x.37023] 
//
[0.x.37024] 
[0.x.37025] 
[0.x.37026] 
[0.x.37027] 
//
[0.x.37028] 
[0.x.37029] 
[0.x.37030] 
//
[0.x.37031] 
//
[0.x.37032] 
[0.x.37033] 
//[2.x.4333] 
//
// 最后一个感兴趣的函数会生成图形输出。这里我们以.vtu格式输出解决方案和单元格排序。
//
// 在函数的顶部，我们为每个单元生成一个索引，以显示平滑器所使用的排序。请注意，我们只对活动单元而不是平滑器实际使用的层级做这个处理。对于点平滑器，我们对DoFs而不是单元进行重新编号，所以这只是对现实中发生的情况的一种近似。最后，这个随机排序不是我们实际使用的随机排序（见`create_smoother()`）。
//
// 然后，单元格的（整数）排序被复制到一个（浮点）矢量中，用于图形输出。
//
[0.x.37034] 
[0.x.37035] 
[0.x.37036] 
[0.x.37037] 
[0.x.37038] 
[0.x.37039] 
[0.x.37040] 
[0.x.37041] 
[0.x.37042] 
[0.x.37043] 
[0.x.37044] 
[0.x.37045] 
[0.x.37046] 
//
[0.x.37047] 
[0.x.37048] 
[0.x.37049] 
[0.x.37050] 
[0.x.37051] 
//
[0.x.37052] 
[0.x.37053] 
[0.x.37054] 
//
[0.x.37055] 
[0.x.37056] 
[0.x.37057] 
[0.x.37058] 
[0.x.37059] 
//
[0.x.37060] 
[0.x.37061] 
[0.x.37062] 
[0.x.37063] 
//
[0.x.37064] 
[0.x.37065] 
[0.x.37066] 
//
// 考虑到以前的教程程序，该函数的其余部分就很简单了。
//
[0.x.37067] 
[0.x.37068] 
[0.x.37069] 
[0.x.37070] 
[0.x.37071] 
//
[0.x.37072] 
[0.x.37073] 
[0.x.37074] 
[0.x.37075] 
[0.x.37076] 
//[2.x.4334] 
//
// 和大多数教程一样，这个函数创建/细化网格并调用上面定义的各种函数来设置、装配、求解和输出结果。
//
// 在第0个循环中，我们在正方形[2.x.4335]上生成网格，半径为3/10个单位的孔以原点为中心。对于`manifold_id`等于1的对象（即与洞相邻的面），我们指定了一个球形流形。
//
[0.x.37077] 
[0.x.37078] 
[0.x.37079] 
[0.x.37080] 
[0.x.37081] 
[0.x.37082] 
[0.x.37083] 
//
[0.x.37084] 
[0.x.37085] 
[0.x.37086] 
[0.x.37087] 
[0.x.37088] 
//
[0.x.37089] 
[0.x.37090] 
[0.x.37091] 
//
[0.x.37092] 
//
[0.x.37093] 
//
[0.x.37094] 
[0.x.37095] 
[0.x.37096] 
[0.x.37097] 
[0.x.37098] 
//
[0.x.37099] 
//
[0.x.37100] 
//
[0.x.37101] 
[0.x.37102] 
//
[0.x.37103] 
[0.x.37104] 
[0.x.37105] 
[0.x.37106] 
//[2.x.4336] 
//
// 最后，主函数和大多数教程一样。唯一有趣的一点是，我们要求用户传递一个`.prm`文件作为唯一的命令行参数。如果没有给出参数文件，程序将在屏幕上输出一个带有所有默认值的样本参数文件的内容，然后用户可以复制并粘贴到自己的`.prm`文件中。
//
[0.x.37107] 
[0.x.37108] 
[0.x.37109] 
[0.x.37110] 
[0.x.37111] 
[0.x.37112] 
//
[0.x.37113] 
[0.x.37114] 
[0.x.37115] 
[0.x.37116] 
[0.x.37117] 
[0.x.37118] 
[0.x.37119] 
[0.x.37120] 
[0.x.37121] 
[0.x.37122] 
[0.x.37123] 
[0.x.37124] 
[0.x.37125] 
[0.x.37126] 
[0.x.37127] 
[0.x.37128] 
[0.x.37129] 
[0.x.37130] 
[0.x.37131] 
[0.x.37132] 
[0.x.37133] 
[0.x.37134] 
[0.x.37135] 
[0.x.37136] 
[0.x.37137] 
[0.x.37138] 
[0.x.37139] 
[0.x.37140] 
//
[0.x.37141] 
[0.x.37142] 
[0.x.37143] 
[0.x.37144] 
[0.x.37145] 
[0.x.37146] 
[0.x.37147] 
[0.x.37148] 
[0.x.37149] 
[0.x.37150] 
[0.x.37151] 
[0.x.37152] 
[0.x.37153] 
[0.x.37154] 
[0.x.37155] 
[0.x.37156] 
//
[0.x.37157] 
[0.x.37158] 
//[2.x.4337] 
//
// 本教程的包含文件与 [2.x.4338] 中的基本相同。重要的是，我们将使用的TransfiniteInterpolationManifold类是由`deal.II/grid/manifold_lib.h`提供。
//
[0.x.37159] 
//
[0.x.37160] 
[0.x.37161] 
[0.x.37162] 
[0.x.37163] 
[0.x.37164] 
//
[0.x.37165] 
[0.x.37166] 
[0.x.37167] 
[0.x.37168] 
//
[0.x.37169] 
[0.x.37170] 
[0.x.37171] 
//
[0.x.37172] 
[0.x.37173] 
//
[0.x.37174] 
[0.x.37175] 
[0.x.37176] 
//
[0.x.37177] 
//
// 唯一的新include文件是MappingQCache类的文件。
//
[0.x.37178] 
//
[0.x.37179] 
[0.x.37180] 
[0.x.37181] 
//[2.x.4339] 
//
// 在这个教程程序中，我们要解决泊松方程，其系数沿半径为0.5的球体跳跃，并使用一个恒定的右手边值[2.x.4340] 。（这个设置与[2.x.4341]和[2.x.4342]相似，但系数和右手边的具体数值不同）。由于系数的跳跃，分析解必须有一个结点，即系数从一个值切换到另一个值。为了保持简单，我们选择了一个在所有分量中都是二次的分析解，即在半径为0.5的球中为[2.x.4343]，在域的外部为[2.x.4344]。这个分析解在内球的系数为0.5，外球的系数为5的情况下与右手边兼容。它也是沿着半径为0.5的圆连续的。
//
[0.x.37182] 
[0.x.37183] 
[0.x.37184] 
[0.x.37185] 
[0.x.37186] 
[0.x.37187] 
[0.x.37188] 
[0.x.37189] 
[0.x.37190] 
[0.x.37191] 
[0.x.37192] 
[0.x.37193] 
//
[0.x.37194] 
[0.x.37195] 
[0.x.37196] 
[0.x.37197] 
[0.x.37198] 
[0.x.37199] 
[0.x.37200] 
[0.x.37201] 
[0.x.37202] 
[0.x.37203] 
//
[0.x.37204] 
[0.x.37205] 
[0.x.37206] 
[0.x.37207] 
[0.x.37208] 
[0.x.37209] 
[0.x.37210] 
[0.x.37211] 
//
// [2.x.4345] 
//
// 泊松问题的实现与我们在 [2.x.4346] 教程中使用的非常相似。两个主要的区别是，我们向程序中的各个步骤传递了一个映射对象，以便在两种映射表示法之间进行切换，正如介绍中所解释的那样，还有一个`计时器'对象（TimerOutput类型），将用于测量各种情况下的运行时间。(映射对象的概念在[2.x.4347]和[2.x.4348]中首次提出，如果你想查一下这些类的用途的话)。
//
[0.x.37212] 
[0.x.37213] 
[0.x.37214] 
[0.x.37215] 
[0.x.37216] 
[0.x.37217] 
//
[0.x.37218] 
[0.x.37219] 
[0.x.37220] 
[0.x.37221] 
[0.x.37222] 
[0.x.37223] 
//
[0.x.37224] 
[0.x.37225] 
[0.x.37226] 
//
[0.x.37227] 
[0.x.37228] 
[0.x.37229] 
[0.x.37230] 
[0.x.37231] 
//
[0.x.37232] 
[0.x.37233] 
//
// 在构造函数中，我们设置了定时器对象来记录墙的时间，但在正常执行过程中是安静的。我们将在[2.x.4349]函数中查询它的计时细节。此外，我们为正在使用的有限元选择了一个相对较高的多项式三度。
//
[0.x.37234] 
[0.x.37235] 
[0.x.37236] 
[0.x.37237] 
[0.x.37238] 
[0.x.37239] 
//
// [2.x.4350] 
//
// 接下来的函数介绍了TransfiniteInterpolationManifold的典型用法。第一步是创建所需的网格，这可以通过GridGenerator的两个网格的组合来完成。内球网格是很简单的。我们以原点为中心运行[2.x.4351]，半径为0.5（第三个函数参数）。第二个网格更有趣，构建方法如下。我们希望有一个在内部是球形的，但在外表面是平的网格。此外，内球的网格拓扑结构应该与外球的网格兼容，即它们的顶点重合，这样才能使两个网格合并起来。从[2.x.4352]出来的网格满足了内侧的要求，如果它是用[2.x.4353]的粗大单元创建的（在3D中我们将使用6个粗大单元）&ndash；这与球的边界面的单元数量相同。对于外表面，我们利用这样一个事实：没有流形附着的壳表面的6个面将退化为立方体的表面。我们仍然缺少的是外壳边界的半径。由于我们想要一个范围为[2.x.4354]的立方体，而6单元壳将其8个外顶点放在8条对角线上，我们必须将点[2.x.4355]转化为半径。显然，在[2.x.4357]维度上，半径必须是[2.x.4356]，也就是说，对于我们要考虑的三维情况，半径是[2.x.4358]。
//
// 这样，我们就有了一个计划。在创建了球的内部三角形和外壳的三角形之后，我们将这两个网格合并，但是将GridGenerator中的函数可能从产生的三角形中设置的所有流形移除，以确保我们对流形有充分的控制。特别是，我们希望在细化过程中在边界上添加的额外点能够遵循平坦的流形描述。为了开始添加更合适的流形ID的过程，我们给所有的网格实体（单元、面、线）分配流形ID 0，这些实体以后将与TransfiniteInterpolationManifold相关联。然后，我们必须识别沿着半径为0.5的球体的面和线，并给它们标记一个不同的流形ID，以便随后给这些面和线分配一个SphericalManifold。由于我们在调用[2.x.4359]后丢弃了所有预先存在的流形，我们手动检查了网格的单元格和所有的面。如果四个顶点的半径都是0.5，我们就在球体上找到了一个面，或者像我们在程序中写的那样，有 [2.x.4360] 。注意，我们调用`cell->face(f)->set_all_manifold_ids(1)`来设置面和周围线上的流形id。此外，我们希望通过一个材料ID来区分球内和球外的单元，以便于可视化，对应于介绍中的图片。
//
[0.x.37240] 
[0.x.37241] 
[0.x.37242] 
[0.x.37243] 
[0.x.37244] 
//
[0.x.37245] 
[0.x.37246] 
[0.x.37247] 
//
[0.x.37248] 
//
[0.x.37249] 
[0.x.37250] 
//
[0.x.37251] 
[0.x.37252] 
[0.x.37253] 
[0.x.37254] 
[0.x.37255] 
[0.x.37256] 
[0.x.37257] 
[0.x.37258] 
[0.x.37259] 
[0.x.37260] 
[0.x.37261] 
[0.x.37262] 
[0.x.37263] 
[0.x.37264] 
[0.x.37265] 
[0.x.37266] 
[0.x.37267] 
[0.x.37268] 
//
// 有了所有单元格、面和线的适当标记，我们可以将流形对象附加到这些数字上。流形ID为1的实体将得到一个球形流形，而流形ID为0的其他实体将被分配到TransfiniteInterpolationManifold。正如介绍中提到的，我们必须通过调用[2.x.4361]显式初始化当前网格的流形，以获取粗略的网格单元和连接到这些单元边界的流形。我们还注意到，我们在这个函数中本地创建的流形对象是允许超出范围的（就像它们在函数范围结束时那样），因为Triangulation对象在内部复制它们。
//
// 在连接了所有的流形之后，我们最后将去细化网格几次，以创建一个足够大的测试案例。
//
[0.x.37269] 
//
[0.x.37270] 
[0.x.37271] 
[0.x.37272] 
//
[0.x.37273] 
[0.x.37274] 
//
// [2.x.4362] 
//
// 下面的函数在其他教程中是众所周知的，它枚举了自由度，创建了一个约束对象并为线性系统设置了一个稀疏矩阵。唯一值得一提的是，该函数接收了一个映射对象的引用，然后我们将其传递给[2.x.4363]函数，以确保我们的边界值在用于装配的高阶网格上被评估。在本例中，这并不重要，因为外表面是平的，但对于弯曲的外单元，这将导致边界值的更精确的近似。
//
[0.x.37275] 
[0.x.37276] 
[0.x.37277] 
[0.x.37278] 
[0.x.37279] 
[0.x.37280] 
[0.x.37281] 
[0.x.37282] 
//
[0.x.37283] 
[0.x.37284] 
//
[0.x.37285] 
//
[0.x.37286] 
[0.x.37287] 
[0.x.37288] 
//
[0.x.37289] 
[0.x.37290] 
//
[0.x.37291] 
[0.x.37292] 
//
[0.x.37293] 
[0.x.37294] 
//
[0.x.37295] 
[0.x.37296] 
[0.x.37297] 
//[2.x.4364] 
//
// 组装线性系统的函数在前面的教程程序中也是众所周知的。有一点需要注意的是，我们将正交点的数量设置为多项式的度数加2，而不是像其他大多数教程中的度数加1。这是因为我们期望有一些额外的精度，因为映射也涉及到比解的多项式多一度的程度。
//
// 汇编中唯一有点不寻常的代码是我们计算单元格矩阵的方式。我们没有使用正交点索引、行和矩阵列的三个嵌套循环，而是首先收集形状函数的导数，乘以系数和积分因子`JxW`的乘积的平方根，放在一个单独的矩阵`partial_matrix`中。为了计算单元矩阵，我们在 "partial_matrix.mTmult(cell_matrix, partial_matrix); "一行中执行 "cell_matrix = partial_matrix * transpose(partial_matrix)"。为了理解这一点，我们要知道矩阵与矩阵的乘法是对`partial_matrix`的各列进行求和。如果我们用[2.x.4365]表示系数，临时矩阵的条目是[2.x.4366]。如果我们将该矩阵的第[1.x.123]行与第[1.x.124]列相乘，我们计算出一个涉及[2.x.4367]的嵌套和，这正是拉普拉斯方程的双线性形式所需的条款。
//
// 选择这种有点不寻常的方案的原因是由于计算三维中相对较高的多项式程度的单元矩阵所涉及的繁重工作。由于我们想在这个教程程序中强调映射的成本，我们最好以优化的方式进行装配，以便不追逐已经被社区解决的瓶颈。矩阵-矩阵乘法是HPC背景下最好的优化内核之一，[2.x.4368]函数将调用到那些优化的BLAS函数。如果用户在配置deal.II时提供了一个好的BLAS库（如OpenBLAS或英特尔的MKL），那么单元矩阵的计算将执行到接近处理器的峰值算术性能。顺便提一下，尽管有优化的矩阵-矩阵乘法，但目前的策略在复杂性方面是次优的，因为要做的工作与[2.x.4369]度[2.x.4370]的运算成正比（这也适用于用FEValues的通常评估）。我们可以通过利用形状函数的张量乘积结构，用[2.x.4371]的操作来计算单元格矩阵，就像交易二中的无矩阵框架那样。我们参考[2.x.4372]和张量积感知评估器FEEvaluation的文档，以了解如何实现更有效的单元矩阵计算的细节。
//
[0.x.37298] 
[0.x.37299] 
[0.x.37300] 
[0.x.37301] 
//
[0.x.37302] 
[0.x.37303] 
[0.x.37304] 
[0.x.37305] 
[0.x.37306] 
[0.x.37307] 
//
[0.x.37308] 
[0.x.37309] 
//
[0.x.37310] 
[0.x.37311] 
[0.x.37312] 
[0.x.37313] 
//
[0.x.37314] 
[0.x.37315] 
[0.x.37316] 
[0.x.37317] 
//
[0.x.37318] 
[0.x.37319] 
[0.x.37320] 
[0.x.37321] 
[0.x.37322] 
[0.x.37323] 
[0.x.37324] 
[0.x.37325] 
[0.x.37326] 
[0.x.37327] 
[0.x.37328] 
[0.x.37329] 
[0.x.37330] 
[0.x.37331] 
[0.x.37332] 
[0.x.37333] 
//
[0.x.37334] 
//
[0.x.37335] 
[0.x.37336] 
[0.x.37337] 
[0.x.37338] 
[0.x.37339] 
//
// [2.x.4373] 
//
// 对于线性系统的求解，我们选择一个简单的雅可比条件共轭梯度求解器，类似于早期教程中的设置。
//
[0.x.37340] 
[0.x.37341] 
[0.x.37342] 
[0.x.37343] 
//
[0.x.37344] 
[0.x.37345] 
//
[0.x.37346] 
[0.x.37347] 
//
[0.x.37348] 
[0.x.37349] 
//
[0.x.37350] 
[0.x.37351] 
[0.x.37352] 
//
// [2.x.4374] 
//
// 在下一个函数中，我们对解决方案做了各种后处理步骤，所有这些步骤都以这种或那种方式涉及映射。
//
// 我们做的第一个操作是把解决方案以及材料ID写到VTU文件中。这与其他许多教程程序中的做法类似。这个教程程序中提出的新内容是，我们要确保写到文件中用于可视化的数据实际上是deal.II内部使用的数据的忠实代表。这是因为大多数可视化数据格式只用顶点坐标表示单元，但没有办法表示deal.II中使用高阶映射时的曲线边界--换句话说，你在可视化工具中看到的东西实际上不是你正在计算的东西。顺带一提，在使用高阶形状函数时也是如此。大多数可视化工具只呈现双线性/三线性的表示。这在[2.x.4375]中有详细的讨论。
//
// 所以我们需要确保高阶表示被写入文件中。我们需要考虑两个特别的话题。首先，我们通过[2.x.4376]告诉DataOut对象，我们打算把元素的细分解释为高阶拉格朗日多项式，而不是双线性补丁的集合。最近的可视化程序，如ParaView 5.5版或更新的程序，然后可以呈现高阶解决方案（更多细节见[1.x.125]）。其次，我们需要确保映射被传递给[2.x.4377]方法。最后，DataOut类默认只打印[1.x.126]单元的曲面，所以我们需要确保通过映射将内部单元也打印成曲面。
//
[0.x.37353] 
[0.x.37354] 
[0.x.37355] 
[0.x.37356] 
[0.x.37357] 
//
[0.x.37358] 
//
[0.x.37359] 
[0.x.37360] 
[0.x.37361] 
//
[0.x.37362] 
[0.x.37363] 
//
[0.x.37364] 
[0.x.37365] 
[0.x.37366] 
[0.x.37367] 
//
[0.x.37368] 
[0.x.37369] 
[0.x.37370] 
//
[0.x.37371] 
[0.x.37372] 
[0.x.37373] 
[0.x.37374] 
[0.x.37375] 
//
[0.x.37376] 
[0.x.37377] 
//
// 后处理函数的下一个操作是对照分析解计算[2.x.4378]和[2.x.4379]误差。由于分析解是一个二次多项式，我们期望在这一点上得到一个非常准确的结果。如果我们是在一个具有平面面的简单网格上求解，并且系数的跳动与单元间的面对齐，那么我们会期望数值结果与分析解相吻合，直至舍去精度。然而，由于我们使用的是跟随球体的变形单元，这些单元只能由4度的多项式跟踪（比有限元的度数多一个），我们会发现在[2.x.4380]附近有一个误差。我们可以通过增加多项式的度数或细化网格来获得更多的精度。
//
[0.x.37378] 
[0.x.37379] 
//
[0.x.37380] 
//
[0.x.37381] 
[0.x.37382] 
[0.x.37383] 
[0.x.37384] 
[0.x.37385] 
[0.x.37386] 
[0.x.37387] 
[0.x.37388] 
[0.x.37389] 
//
[0.x.37390] 
[0.x.37391] 
[0.x.37392] 
[0.x.37393] 
[0.x.37394] 
[0.x.37395] 
[0.x.37396] 
[0.x.37397] 
[0.x.37398] 
[0.x.37399] 
//
// 我们在这里做的最后一个后处理操作是用KellyErrorEstimator计算出一个误差估计。我们使用了与[2.x.4381]教程程序中完全相同的设置，只是我们还交出了映射，以确保误差是沿着曲线元素评估的，与程序的其余部分一致。然而，我们并没有真正使用这里的结果来驱动网格适应步骤（会沿着球体细化材料界面周围的网格），因为这里的重点是这个操作的成本。
//
[0.x.37400] 
[0.x.37401] 
//
[0.x.37402] 
[0.x.37403] 
[0.x.37404] 
[0.x.37405] 
[0.x.37406] 
[0.x.37407] 
[0.x.37408] 
[0.x.37409] 
[0.x.37410] 
[0.x.37411] 
[0.x.37412] 
[0.x.37413] 
//
// [2.x.4382] 
//
// 最后，我们定义了`run()`函数，控制我们如何执行这个程序（由main()函数以常规方式调用）。我们首先调用`create_grid()`函数，用适当的流形设置我们的几何体。然后我们运行两个求解器链的实例，从方程的设置开始，组装线性系统，用一个简单的迭代求解器求解，以及上面讨论的后处理。这两个实例在使用映射的方式上有所不同。第一个使用传统的MappingQGeneric映射对象，我们将其初始化为比有限元多一级的程度；毕竟，我们期望几何表示是瓶颈，因为分析解只是二次多项式。实际上，事情在相当程度上是相互关联的，因为实坐标中多项式的评估涉及到高阶多项式的映射，而高阶多项式代表一些光滑的有理函数。因此，高阶多项式还是有回报的，所以进一步增加映射的度数是没有意义的)。一旦第一遍完成，我们就让定时器打印出各个阶段的计算时间的摘要。
//
[0.x.37414] 
[0.x.37415] 
[0.x.37416] 
[0.x.37417] 
//
[0.x.37418] 
[0.x.37419] 
[0.x.37420] 
[0.x.37421] 
[0.x.37422] 
//
[0.x.37423] 
[0.x.37424] 
[0.x.37425] 
[0.x.37426] 
[0.x.37427] 
//
[0.x.37428] 
[0.x.37429] 
[0.x.37430] 
//
// 对于第二个实例，我们转而设置了MappingQCache类。它的使用非常简单。在构建好它之后（考虑到我们希望它在其他情况下显示正确的度数功能，所以用度数），我们通过[2.x.4383]函数填充缓存。在这个阶段，我们为缓存指定我们想要使用的映射（很明显，与之前的MappingQGeneric相同，以便重复相同的计算），然后再次运行相同的函数，现在交出修改后的映射。最后，我们再次打印重置后的累计壁挂时间，看看这些时间与原来的设置相比如何。
//
[0.x.37431] 
[0.x.37432] 
[0.x.37433] 
[0.x.37434] 
[0.x.37435] 
//
[0.x.37436] 
[0.x.37437] 
[0.x.37438] 
[0.x.37439] 
[0.x.37440] 
[0.x.37441] 
[0.x.37442] 
//
[0.x.37443] 
[0.x.37444] 
[0.x.37445] 
[0.x.37446] 
//
[0.x.37447] 
[0.x.37448] 
[0.x.37449] 
[0.x.37450] 
//
[0.x.37451] 
[0.x.37452] 
[0.x.37453] 
[0.x.37454] 
[0.x.37455] 
[0.x.37456] 
[0.x.37457] 
[0.x.37458] 
[0.x.37459] 
[0.x.37460] 
[0.x.37461] 
[0.x.37462] 
[0.x.37463] 
[0.x.37464] 
[0.x.37465] 
[0.x.37466] 
[0.x.37467] 
[0.x.37468] 
[0.x.37469] 
[0.x.37470] 
[0.x.37471] 
[0.x.37472] 
[0.x.37473] 
//
// 首先我们包括本教程所需的deal.II库的典型头文件。
//
[0.x.37474] 
[0.x.37475] 
[0.x.37476] 
[0.x.37477] 
//
[0.x.37478] 
[0.x.37479] 
[0.x.37480] 
//
[0.x.37481] 
[0.x.37482] 
//
[0.x.37483] 
[0.x.37484] 
[0.x.37485] 
[0.x.37486] 
[0.x.37487] 
[0.x.37488] 
//
[0.x.37489] 
[0.x.37490] 
[0.x.37491] 
[0.x.37492] 
//
[0.x.37493] 
[0.x.37494] 
//
// 特别是，我们需要包括无矩阵框架的头文件。
//
[0.x.37495] 
[0.x.37496] 
[0.x.37497] 
[0.x.37498] 
//
// 由于我们要使用几何多网格预处理程序，所以我们还需要多级头文件。
//
[0.x.37499] 
[0.x.37500] 
[0.x.37501] 
[0.x.37502] 
[0.x.37503] 
[0.x.37504] 
[0.x.37505] 
//
// 最后是一些常用的C++头文件，用于输入和输出。
//
[0.x.37506] 
[0.x.37507] 
//
[0.x.37508] 
[0.x.37509] 
[0.x.37510] 
//
// [2.x.4384] 
//
// 在开始时，我们定义了雅各布系数的无矩阵算子。作为指导，我们遵循教程 [2.x.4385] 和 [2.x.4386] ，其中广泛记录了 [2.x.4387] 类的精确接口。
//
// 由于我们希望将雅各布（Jacobian）作为系统矩阵使用，并将其传递给线性求解器以及多级预处理类，我们从[2.x.4389]类派生出[2.x.4388]类，这样我们就有了正确的接口。我们需要从基类中覆盖的两个函数是[2.x.4390]和[2.x.4391]函数。为了允许用浮动精度进行预处理，我们将数字类型定义为模板参数。
//
// 正如在介绍中提到的，我们需要在最后一个牛顿步骤[2.x.4393]中评估雅各布[2.x.4392]，以便计算牛顿更新[2.x.4394]。为了获得最后一个牛顿步骤[2.x.4395]的信息，我们的做法与[2.x.4396]基本相同，在使用无矩阵算子之前，我们将一个系数函数的值存储在一个表中[2.x.4397]。我们在这里实现的不是一个函数 [2.x.4398] ，而是一个函数 [2.x.4399] 。
//
// 作为[2.x.4400]的额外私有成员函数，我们实现了[2.x.4401]和[2.x.4402]函数。第一个是矩阵-向量应用的实际工作函数，我们在[2.x.4404]函数中将其传递给[2.x.4403]。后面一个是计算对角线的工作函数，我们把它传递给[2.x.4405]函数。
//
// 为了提高源代码的可读性，我们进一步为FEEvaluation对象定义了一个别名。
//
[0.x.37511] 
[0.x.37512] 
[0.x.37513] 
[0.x.37514] 
[0.x.37515] 
[0.x.37516] 
[0.x.37517] 
//
[0.x.37518] 
[0.x.37519] 
//
[0.x.37520] 
//
[0.x.37521] 
//
[0.x.37522] 
[0.x.37523] 
//
[0.x.37524] 
//
[0.x.37525] 
[0.x.37526] 
[0.x.37527] 
[0.x.37528] 
//
[0.x.37529] 
[0.x.37530] 
[0.x.37531] 
[0.x.37532] 
[0.x.37533] 
//
[0.x.37534] 
//
[0.x.37535] 
[0.x.37536] 
//
// [2.x.4406]的构造函数只是调用基类[2.x.4407]的构造函数，而基类本身就是派生于Subscriptor类。
//
[0.x.37537] 
[0.x.37538] 
[0.x.37539] 
[0.x.37540] 
[0.x.37541] 
//
// [2.x.4408]函数重置了保存非线性值的表格，并调用基类的[2.x.4409]函数。
//
[0.x.37542] 
[0.x.37543] 
[0.x.37544] 
[0.x.37545] 
[0.x.37546] 
[0.x.37547] 
[0.x.37548] 
//
// [2.x.4410] 
//
// 下面的 [2.x.4411] 函数是基于 [2.x.4413] 的 [2.x.4412] 函数。然而，它并不评估一个函数对象，而是评估一个代表有限元函数的向量，即雅各布系数所需的最后一个牛顿步骤。因此，我们设置了一个FEEvaluation对象，用[2.x.4414]和[2.x.4415]函数评估正交点的有限元函数。我们将有限元函数的评估值直接存储在[2.x.4416]表中。
//
//这样做会很好，在[2.x.4417]函数中我们可以使用存储在表中的值来应用矩阵-向量乘积。然而，我们也可以在这个阶段优化雅各布系数的实现。我们可以直接评估非线性函数[2.x.4418]并将这些值存储在表中。这就跳过了在每次调用[2.x.4419]函数时对非线性的所有评估。
//
[0.x.37549] 
[0.x.37550] 
[0.x.37551] 
[0.x.37552] 
[0.x.37553] 
[0.x.37554] 
//
[0.x.37555] 
//
[0.x.37556] 
[0.x.37557] 
[0.x.37558] 
[0.x.37559] 
[0.x.37560] 
//
[0.x.37561] 
[0.x.37562] 
[0.x.37563] 
[0.x.37564] 
[0.x.37565] 
[0.x.37566] 
//
// [2.x.4420] 
//
// 现在在 [2.x.4421] 函数中，实际上实现了系统矩阵的单元格动作，我们可以使用存储在表 [2.x.4422] 中的最后一个牛顿步骤的信息。这个函数的其余部分与 [2.x.4423] 中的基本相同。我们设置 FEEvaluation 对象，收集并评估输入向量的值和梯度 [2.x.4424] ，根据雅各布的形式提交值和梯度，最后调用 [2.x.4425] 进行单元积分，将局部贡献分配到全局向量 [2.x.4426] 。
//
[0.x.37567] 
[0.x.37568] 
[0.x.37569] 
[0.x.37570] 
[0.x.37571] 
[0.x.37572] 
[0.x.37573] 
[0.x.37574] 
//
[0.x.37575] 
[0.x.37576] 
[0.x.37577] 
[0.x.37578] 
[0.x.37579] 
//
[0.x.37580] 
//
[0.x.37581] 
[0.x.37582] 
[0.x.37583] 
//
[0.x.37584] 
[0.x.37585] 
[0.x.37586] 
[0.x.37587] 
[0.x.37588] 
//
[0.x.37589] 
[0.x.37590] 
[0.x.37591] 
[0.x.37592] 
[0.x.37593] 
//
// 接下来我们使用[2.x.4427]对所有单元进行实际循环，计算单元对矩阵-向量积的贡献。
//
[0.x.37594] 
[0.x.37595] 
[0.x.37596] 
[0.x.37597] 
[0.x.37598] 
[0.x.37599] 
[0.x.37600] 
//
// [2.x.4428] 
//
// 用于计算对角线的内部工作函数 [2.x.4429] 与上述工作函数 [2.x.4430] 类似。然而，作为主要区别，我们不从输入向量中读取数值，也不将任何局部结果分配给输出向量。相反，唯一的输入参数是使用的FEEvaluation对象。
//
[0.x.37601] 
[0.x.37602] 
[0.x.37603] 
[0.x.37604] 
[0.x.37605] 
[0.x.37606] 
[0.x.37607] 
//
[0.x.37608] 
//
[0.x.37609] 
//
[0.x.37610] 
[0.x.37611] 
[0.x.37612] 
[0.x.37613] 
[0.x.37614] 
//
[0.x.37615] 
[0.x.37616] 
//
// 最后我们覆盖 [2.x.4431] 的基类的 [2.x.4432] 的函数。虽然这个函数的名字表明只是计算对角线，但这个函数的作用更大。因为我们实际上只需要矩阵对角线元素的逆值，用于多网格预处理器的切比雪夫平滑器，我们计算对角线并存储逆值元素。因此我们首先初始化[2.x.4433] 。然后我们通过将工作函数[2.x.4434]传递给[2.x.4435]函数来计算对角线。最后，我们在对角线上循环，用手反转这些元素。注意，在这个循环过程中，我们捕捉受限的DOF，并手动将其设置为1。
//
[0.x.37617] 
[0.x.37618] 
[0.x.37619] 
[0.x.37620] 
[0.x.37621] 
[0.x.37622] 
[0.x.37623] 
[0.x.37624] 
//
[0.x.37625] 
[0.x.37626] 
[0.x.37627] 
[0.x.37628] 
//
[0.x.37629] 
[0.x.37630] 
[0.x.37631] 
[0.x.37632] 
[0.x.37633] 
[0.x.37634] 
[0.x.37635] 
//
// [2.x.4436] 
//
// 在实现了无矩阵运算符之后，我们现在可以为[1.x.127]定义求解器类。这个类是基于之前所有教程程序的共同结构，特别是它是基于[2.x.4437]，解决的也是一个非线性问题。由于我们使用的是无矩阵框架，所以我们不再需要assemble_system函数，相反，在每次调用[2.x.4438]函数时都会重建矩阵的信息。然而，对于牛顿方案的应用，我们需要组装线性化问题的右手边并计算残差。因此，我们实现了一个额外的函数[2.x.4439]，后来我们在[2.x.4440]函数中调用了它。最后，这里典型的[2.x.4441]函数实现了牛顿方法，而线性化系统的解是在[2.x.4442]函数中计算的。由于MatrixFree框架将拉格朗日有限元方法的多项式程度作为一个模板参数来处理，我们也将其作为问题求解器类的模板参数来声明。
//
[0.x.37636] 
[0.x.37637] 
[0.x.37638] 
[0.x.37639] 
[0.x.37640] 
//
[0.x.37641] 
//
[0.x.37642] 
[0.x.37643] 
//
[0.x.37644] 
//
[0.x.37645] 
[0.x.37646] 
[0.x.37647] 
//
[0.x.37648] 
[0.x.37649] 
[0.x.37650] 
[0.x.37651] 
[0.x.37652] 
//
[0.x.37653] 
//
[0.x.37654] 
//
[0.x.37655] 
//
[0.x.37656] 
//
[0.x.37657] 
//
[0.x.37658] 
//
// 对于并行计算，我们定义了一个 [2.x.4443] 由于计算域在二维是一个圆，在三维是一个球，我们除了为边界单元分配SphericalManifold外，还为内部单元的映射分配了一个TransfiniteInterpolationManifold对象，它负责处理内部单元的映射。在这个例子中，我们使用了一个等参数的有限元方法，因此使用了MappingQGeneric类。注意，我们也可以创建一个MappingQ类的实例，并在构造函数调用中设置[2.x.4444]标志为[2.x.4445] 。关于MappingQ和MappingQGeneric连接的进一步细节，你可以阅读这些类的详细描述。
//
[0.x.37659] 
[0.x.37660] 
//
// 像往常一样，我们接着定义拉格朗日有限元FE_Q和一个DoFHandler。
//
[0.x.37661] 
[0.x.37662] 
//
// 对于线性化的离散系统，我们定义一个AffineConstraints对象和[2.x.4446] ，在本例中它被表示为一个无矩阵算子。
//
[0.x.37663] 
[0.x.37664] 
[0.x.37665] 
//
// 多级对象也是基于雅各布系数的无矩阵算子。由于我们需要用最后一个牛顿步骤来评估雅各布，所以我们也需要用最后一个牛顿步骤来评估预处理器的水平算子。因此，除了[2.x.4447]之外，我们还需要一个MGLevelObject来存储每一级的插值解向量。与[2.x.4448]一样，我们对预处理程序使用浮点精度。此外，我们将MGTransferMatrixFree对象定义为一个类变量，因为我们只需要在三角形变化时设置一次，然后可以在每个牛顿步骤中再次使用它。
//
[0.x.37666] 
[0.x.37667] 
[0.x.37668] 
[0.x.37669] 
[0.x.37670] 
//
// 当然，我们还需要持有 [2.x.4449] , [2.x.4450] 的向量。这样，我们就可以一直将上一个牛顿步存储在解的向量中，只需添加更新就可以得到下一个牛顿步。
//
[0.x.37671] 
[0.x.37672] 
[0.x.37673] 
//
// 最后我们有一个变量，用来表示线性求解器的迭代次数。
//
[0.x.37674] 
//
// 对于与MPI并行运行的程序中的输出，我们使用ConditionalOStream类来避免不同MPI等级对同一数据的多次输出。
//
[0.x.37675] 
//
// 最后，对于时间测量，我们使用一个TimerOutput对象，它在程序结束后将每个函数的耗时CPU和墙体时间打印在一个格式良好的表格中。
//
[0.x.37676] 
[0.x.37677] 
//
// [2.x.4451]的构造函数初始化了类的变量。特别是，我们为[2.x.4452]设置了多级支持，将映射度设为有限元度，初始化ConditionalOStream，并告诉TimerOutput，我们只想在需求时看到墙体时间。
//
[0.x.37678] 
[0.x.37679] 
[0.x.37680] 
[0.x.37681] 
[0.x.37682] 
[0.x.37683] 
[0.x.37684] 
[0.x.37685] 
[0.x.37686] 
[0.x.37687] 
[0.x.37688] 
[0.x.37689] 
[0.x.37690] 
[0.x.37691] 
[0.x.37692] 
//
// [2.x.4453] 
//
// 作为计算域，我们使用[2.x.4454] -维的单位球。我们按照TransfiniteInterpolationManifold类的说明，也为边界指定了一个SphericalManifold。最后，我们将初始网格细化为3
//
// - [2.x.4455]次全局。
//
[0.x.37693] 
[0.x.37694] 
[0.x.37695] 
[0.x.37696] 
//
[0.x.37697] 
[0.x.37698] 
//
[0.x.37699] 
//
 
[0.x.37701] 
//
[0.x.37702] 
//
[0.x.37703] 
[0.x.37704] 
//
[0.x.37705] 
[0.x.37706] 
//
// [2.x.4456] 
//
// [2.x.4457]函数与 [2.x.4458] 中的函数基本相同。唯一的区别显然是时间测量只有一个[2.x.4459]，而不是单独测量每个部分，更重要的是对前一个牛顿步骤的内插解向量的MGLevelObject的初始化。另一个重要的变化是MGTransferMatrixFree对象的设置，我们可以在每个牛顿步骤中重复使用它，因为[2.x.4460]不会被改变。
//
// 注意我们如何在[2.x.4461]和多网格预处理程序中两次使用同一个MatrixFree对象。
//
[0.x.37707] 
[0.x.37708] 
[0.x.37709] 
[0.x.37710] 
//
[0.x.37711] 
[0.x.37712] 
//
[0.x.37713] 
[0.x.37714] 
//
[0.x.37715] 
[0.x.37716] 
//
[0.x.37717] 
[0.x.37718] 
[0.x.37719] 
[0.x.37720] 
[0.x.37721] 
[0.x.37722] 
[0.x.37723] 
[0.x.37724] 
//
[0.x.37725] 
[0.x.37726] 
[0.x.37727] 
[0.x.37728] 
[0.x.37729] 
[0.x.37730] 
[0.x.37731] 
[0.x.37732] 
[0.x.37733] 
[0.x.37734] 
[0.x.37735] 
[0.x.37736] 
[0.x.37737] 
//
[0.x.37738] 
[0.x.37739] 
//
[0.x.37740] 
[0.x.37741] 
[0.x.37742] 
//
[0.x.37743] 
[0.x.37744] 
[0.x.37745] 
//
[0.x.37746] 
[0.x.37747] 
[0.x.37748] 
[0.x.37749] 
[0.x.37750] 
//
[0.x.37751] 
[0.x.37752] 
//
[0.x.37753] 
[0.x.37754] 
[0.x.37755] 
[0.x.37756] 
[0.x.37757] 
[0.x.37758] 
//
[0.x.37759] 
[0.x.37760] 
[0.x.37761] 
[0.x.37762] 
[0.x.37763] 
//
[0.x.37764] 
[0.x.37765] 
[0.x.37766] 
[0.x.37767] 
[0.x.37768] 
[0.x.37769] 
[0.x.37770] 
[0.x.37771] 
[0.x.37772] 
[0.x.37773] 
[0.x.37774] 
[0.x.37775] 
[0.x.37776] 
//
[0.x.37777] 
[0.x.37778] 
[0.x.37779] 
[0.x.37780] 
[0.x.37781] 
[0.x.37782] 
//
// [2.x.4462] 
//
// 接下来我们实现一个函数，该函数对给定的输入向量评估非线性离散残差（ [2.x.4463] ）。这个函数随后被用于组装线性化系统的右手边，随后用于计算下一个牛顿步骤的残差，以检查我们是否已经达到了误差容忍度。由于这个函数不应该影响任何类别的变量，我们把它定义为一个常数函数。在内部，我们通过FEEvaluation类和类似于[2.x.4464]的[2.x.4465]来利用快速有限元评估。
//
// 首先我们创建一个指向MatrixFree对象的指针，它被存储在 [2.x.4466] 中。然后，我们将用于残差的单元评估的工作函数 [2.x.4467] 以及输入和输出向量传递给 [2.x.4468] 此外，我们在循环中启用输出向量的清零，这比之前单独调用<code>dst = 0.0</code>更有效率。
//
// 注意，使用这种方法，我们不必关心MPI相关的数据交换，因为所有的记账工作都是由 [2.x.4469] 完成的。
[0.x.37783] 
[0.x.37784] 
[0.x.37785] 
[0.x.37786] 
[0.x.37787] 
[0.x.37788] 
//
[0.x.37789] 
[0.x.37790] 
[0.x.37791] 
//
// [2.x.4470] 
//
// 这是用于评估残差的内部工作函数。本质上它与 [2.x.4472] 的 [2.x.4471] 函数具有相同的结构，在给定的单元格集合 [2.x.4474] 上对输入向量 [2.x.4473] 进行残差评估。与上述[2.x.4475]函数不同的是，我们将[2.x.4476]函数分成[2.x.4477]和[2.x.4478]，因为输入向量可能有受限的DOF。
//
[0.x.37792] 
[0.x.37793] 
[0.x.37794] 
[0.x.37795] 
[0.x.37796] 
[0.x.37797] 
[0.x.37798] 
[0.x.37799] 
//
[0.x.37800] 
[0.x.37801] 
[0.x.37802] 
//
[0.x.37803] 
[0.x.37804] 
//
[0.x.37805] 
[0.x.37806] 
[0.x.37807] 
[0.x.37808] 
[0.x.37809] 
//
[0.x.37810] 
[0.x.37811] 
[0.x.37812] 
[0.x.37813] 
[0.x.37814] 
//
// [2.x.4479] 
//
// 使用上述函数[2.x.4480]来评估非线性残差，组装线性化系统的右手边现在变得非常容易。我们只需调用[2.x.4481]函数并将结果乘以减一。
//
// 经验表明，使用FEEvaluation类要比使用FEValues和co的经典实现快得多。
//
[0.x.37815] 
[0.x.37816] 
[0.x.37817] 
[0.x.37818] 
//
[0.x.37819] 
//
[0.x.37820] 
[0.x.37821] 
//
// [2.x.4482] 
//
// 根据[2.x.4483]，下面的函数在[2.x.4484]函数的帮助下计算出解的非线性残差的规范。如果我们使用牛顿方法的自适应版本，牛顿步长[2.x.4486]就变得很重要。例如，我们将计算不同步长的残差并比较残差。然而，对于我们的问题，使用[2.x.4487]的完整牛顿步长是我们能做的最好的。如果我们没有好的初始值，牛顿方法的自适应版本就变得有趣了。请注意，在理论上，牛顿方法是以二次方顺序收敛的，但只有当我们有一个合适的初始值时才会收敛。对于不合适的初始值，牛顿方法甚至在二次方程下也会发散。一个常见的方法是使用阻尼版本[2.x.4488]，直到牛顿步骤足够好，可以进行完整的牛顿步骤。这在 [2.x.4489] 中也有讨论。
//
[0.x.37822] 
[0.x.37823] 
[0.x.37824] 
[0.x.37825] 
//
[0.x.37826] 
[0.x.37827] 
//
[0.x.37828] 
[0.x.37829] 
//
[0.x.37830] 
[0.x.37831] 
[0.x.37832] 
[0.x.37833] 
[0.x.37834] 
//
[0.x.37835] 
//
[0.x.37836] 
[0.x.37837] 
//
// [2.x.4490] 
//
// 为了计算每个牛顿步骤中的牛顿更新，我们用CG算法和一个几何多网格预处理程序来解决线性系统。为此，我们首先像在 [2.x.4491] 中那样，用切比雪夫平滑器设置PreconditionMG对象。
//
[0.x.37838] 
[0.x.37839] 
[0.x.37840] 
[0.x.37841] 
//
// 我们记得，雅各布系数取决于存储在解决方案向量中的最后一个牛顿步骤。所以我们更新牛顿步骤的鬼魂值，并将其传递给[2.x.4492]来存储信息。
//
[0.x.37842] 
//
[0.x.37843] 
//
// 接下来我们还要将最后一个牛顿步骤传递给多级运算符。因此，我们需要将牛顿步骤插值到三角形的所有层面。这是用[2.x.4493]来完成的。
[0.x.37844] 
//
// 现在我们可以设置预处理程序了。我们定义平滑器并将牛顿步的内插向量传递给多级运算器。
//
[0.x.37845] 
[0.x.37846] 
[0.x.37847] 
[0.x.37848] 
[0.x.37849] 
[0.x.37850] 
[0.x.37851] 
[0.x.37852] 
[0.x.37853] 
[0.x.37854] 
[0.x.37855] 
[0.x.37856] 
[0.x.37857] 
[0.x.37858] 
[0.x.37859] 
[0.x.37860] 
[0.x.37861] 
[0.x.37862] 
[0.x.37863] 
[0.x.37864] 
[0.x.37865] 
[0.x.37866] 
[0.x.37867] 
//
[0.x.37868] 
[0.x.37869] 
//
[0.x.37870] 
[0.x.37871] 
[0.x.37872] 
[0.x.37873] 
//
[0.x.37874] 
[0.x.37875] 
[0.x.37876] 
//
[0.x.37877] 
[0.x.37878] 
//
[0.x.37879] 
[0.x.37880] 
[0.x.37881] 
[0.x.37882] 
[0.x.37883] 
[0.x.37884] 
[0.x.37885] 
[0.x.37886] 
[0.x.37887] 
[0.x.37888] 
//
[0.x.37889] 
[0.x.37890] 
[0.x.37891] 
//
[0.x.37892] 
[0.x.37893] 
[0.x.37894] 
[0.x.37895] 
//
// 最后我们设置了SolverControl和SolverCG来解决当前牛顿更新的线性化问题。实现SolverCG或SolverGMRES的一个重要事实是，持有线性系统解决方案的向量（这里是[2.x.4494] ）可以用来传递一个起始值。为了使迭代求解器总是以零向量开始，我们在调用[2.x.4496]之前明确地重置了[2.x.4495]，然后我们分配了存储在[2.x.4497]中的Dirichlet边界条件，并为以后的输出存储了迭代的步数。
//
[0.x.37896] 
[0.x.37897] 
//
[0.x.37898] 
//
[0.x.37899] 
//
[0.x.37900] 
//
[0.x.37901] 
//
// 然后，为了记账，我们将幽灵值清零。
//
[0.x.37902] 
[0.x.37903] 
//
// [2.x.4498] 
//
// 现在我们实现非线性问题的实际牛顿求解器。
//
[0.x.37904] 
[0.x.37905] 
[0.x.37906] 
[0.x.37907] 
//
// 我们定义了牛顿步骤的最大数量和收敛标准的公差。通常情况下，如果有好的起始值，牛顿方法在三到六步内就能收敛，所以最大的十步应该是完全足够的。作为公差，我们使用[2.x.4499]作为残差的规范，[2.x.4500]作为牛顿更新的规范。这似乎有点过头了，但我们将看到，对于我们的例子，我们将在几步之后达到这些公差。
//
[0.x.37908] 
[0.x.37909] 
[0.x.37910] 
//
[0.x.37911] 
[0.x.37912] 
//
// 现在我们开始实际的牛顿迭代。
//
[0.x.37913] 
[0.x.37914] 
//
// 我们将线性化问题的右侧集合起来，计算牛顿更新。
//
[0.x.37915] 
[0.x.37916] 
//
// 然后，我们计算误差，即牛顿更新的规范和残差。注意，在这一点上，我们可以通过改变compute_residual函数的输入参数[2.x.4501]来加入牛顿方法的步长控制。然而，在这里我们只是使用[2.x.4502]等于1来进行普通的牛顿迭代。
//
[0.x.37917] 
[0.x.37918] 
//
// 接下来我们通过将牛顿更新添加到当前的牛顿步骤中来推进牛顿步骤。
//
[0.x.37919] 
//
// 一个简短的输出将告知我们当前的牛顿步数。
//
[0.x.37920] 
[0.x.37921] 
[0.x.37922] 
//
// 在每个牛顿步骤之后，我们检查收敛标准。如果其中至少有一个得到满足，我们就完成了，并结束循环。如果我们在牛顿迭代的最大数量之后还没有找到一个满意的解决方案，我们就会通知用户这个缺点。
//
[0.x.37923] 
[0.x.37924] 
[0.x.37925] 
//
[0.x.37926] 
[0.x.37927] 
[0.x.37928] 
//
[0.x.37929] 
[0.x.37930] 
[0.x.37931] 
[0.x.37932] 
[0.x.37933] 
[0.x.37934] 
[0.x.37935] 
//
[0.x.37936] 
[0.x.37937] 
[0.x.37938] 
[0.x.37939] 
//
// [2.x.4503] 
//
// 解的H1-seminorm的计算可以用与[2.x.4504]相同的方法进行。我们更新幽灵值并使用函数 [2.x.4505] 最后我们收集所有MPI行列的所有计算，并返回规范。
//
[0.x.37940] 
[0.x.37941] 
[0.x.37942] 
[0.x.37943] 
//
[0.x.37944] 
//
[0.x.37945] 
[0.x.37946] 
[0.x.37947] 
[0.x.37948] 
[0.x.37949] 
[0.x.37950] 
[0.x.37951] 
//
[0.x.37952] 
//
[0.x.37953] 
[0.x.37954] 
[0.x.37955] 
[0.x.37956] 
//
// [2.x.4506] 
//
// 我们通过调用 [2.x.4507] 函数，以与 [2.x.4508] 中相同的方式，一次性生成 vtu 格式的图形输出文件和 pvtu 主文件。此外，与 [2.x.4509] 一样，我们查询每个单元的 [2.x.4510] 并将三角形在MPI行列中的分布写进输出文件。最后，我们通过调用[2.x.4511]生成解决方案的补丁。然而，由于我们的计算域有一个弯曲的边界，我们另外传递[2.x.4512]和有限元度作为细分的数量。但这仍然不足以正确表示解决方案，例如在ParaView中，因为我们将TransfiniteInterpolationManifold附在内部单元上，这导致内部的单元是弯曲的。因此，我们将[2.x.4513]选项作为第三个参数，这样，内部单元也会使用相应的流形描述来构建补丁。
//
// 注意，我们可以用标志[2.x.4514]来处理高阶元素，但是由于对ParaView以前版本的兼容性有限，而且VisIt也不支持，所以我们把这个选项留给未来的版本。
//
[0.x.37957] 
[0.x.37958] 
[0.x.37959] 
[0.x.37960] 
[0.x.37961] 
[0.x.37962] 
//
[0.x.37963] 
//
[0.x.37964] 
[0.x.37965] 
[0.x.37966] 
//
[0.x.37967] 
[0.x.37968] 
[0.x.37969] 
[0.x.37970] 
[0.x.37971] 
[0.x.37972] 
//
[0.x.37973] 
[0.x.37974] 
[0.x.37975] 
//
[0.x.37976] 
[0.x.37977] 
[0.x.37978] 
[0.x.37979] 
[0.x.37980] 
//
[0.x.37981] 
[0.x.37982] 
//
// [2.x.4515] 
//
// [1.x.128]的求解器类的最后一个缺失的函数是运行函数。在开始的时候，我们打印关于系统规格和我们使用的有限元空间的信息。该问题在一个连续细化的网格上被多次求解。
//
[0.x.37983] 
[0.x.37984] 
[0.x.37985] 
[0.x.37986] 
[0.x.37987] 
[0.x.37988] 
[0.x.37989] 
[0.x.37990] 
//
[0.x.37991] 
[0.x.37992] 
[0.x.37993] 
[0.x.37994] 
[0.x.37995] 
[0.x.37996] 
[0.x.37997] 
[0.x.37998] 
[0.x.37999] 
[0.x.38000] 
[0.x.38001] 
//
[0.x.38002] 
[0.x.38003] 
[0.x.38004] 
//
[0.x.38005] 
[0.x.38006] 
[0.x.38007] 
//
[0.x.38008] 
[0.x.38009] 
//
[0.x.38010] 
[0.x.38011] 
[0.x.38012] 
[0.x.38013] 
[0.x.38014] 
//
// 实际解决问题的第一项任务是生成或完善三角图。
//
[0.x.38015] 
[0.x.38016] 
[0.x.38017] 
[0.x.38018] 
[0.x.38019] 
[0.x.38020] 
[0.x.38021] 
[0.x.38022] 
//
// 现在我们建立了系统并解决这个问题。这些步骤都伴随着时间测量和文本输出。
//
[0.x.38023] 
//
[0.x.38024] 
[0.x.38025] 
//
[0.x.38026] 
[0.x.38027] 
[0.x.38028] 
[0.x.38029] 
[0.x.38030] 
//
[0.x.38031] 
[0.x.38032] 
[0.x.38033] 
//
[0.x.38034] 
[0.x.38035] 
[0.x.38036] 
[0.x.38037] 
//
// 在问题被解决后，我们计算出解决方案的法线，并生成图形输出文件。
//
[0.x.38038] 
[0.x.38039] 
[0.x.38040] 
//
[0.x.38041] 
[0.x.38042] 
//
// 最后在每个周期后，我们打印计时信息。
//
[0.x.38043] 
[0.x.38044] 
[0.x.38045] 
[0.x.38046] 
[0.x.38047] 
//
// [2.x.4516] 
//
// 作为使用MPI并行运行的典型程序，我们设置了MPI框架，并通过限制线程数为1来禁用共享内存并行化。最后，为了运行[1.x.129]的求解器，我们创建一个[2.x.4517]类的对象并调用运行函数。例如，我们用四阶拉格朗日有限元在二维和三维中各解决一次问题。
//
[0.x.38048] 
[0.x.38049] 
[0.x.38050] 
[0.x.38051] 
[0.x.38052] 
//
[0.x.38053] 
//
[0.x.38054] 
[0.x.38055] 
[0.x.38056] 
[0.x.38057] 
//
[0.x.38058] 
[0.x.38059] 
[0.x.38060] 
[0.x.38061] 
[0.x.38062] 
[0.x.38063] 
[0.x.38064] 
[0.x.38065] 
[0.x.38066] 
[0.x.38067] 
[0.x.38068] 
[0.x.38069] 
[0.x.38070] 
[0.x.38071] 
[0.x.38072] 
[0.x.38073] 
[0.x.38074] 
[0.x.38075] 
[0.x.38076] 
[0.x.38077] 
[0.x.38078] 
[0.x.38079] 
[0.x.38080] 
[0.x.38081] 
[0.x.38082] 
[0.x.38083] 
[0.x.38084] 
[0.x.38085] 
[0.x.38086] 
[0.x.38087] 
//
[0.x.38088] 
[0.x.38089] 
[0.x.38090] 
[0.x.38091] 
[0.x.38092] 
[0.x.38093] 
[0.x.38094] 
[0.x.38095] 
[0.x.38096] 
[0.x.38097] 
[0.x.38098] 
[0.x.38099] 
[0.x.38100] 
[0.x.38101] 
[0.x.38102] 
[0.x.38103] 
//
[0.x.38104] 
[0.x.38105] 
[0.x.38106] 
//
// 包含文件与之前的无矩阵教程程序[2.x.4518]、[2.x.4519]和[2.x.4520]相似。
[0.x.38107] 
[0.x.38108] 
[0.x.38109] 
[0.x.38110] 
[0.x.38111] 
[0.x.38112] 
[0.x.38113] 
//
[0.x.38114] 
//
[0.x.38115] 
//
[0.x.38116] 
[0.x.38117] 
//
[0.x.38118] 
[0.x.38119] 
//
[0.x.38120] 
[0.x.38121] 
//
[0.x.38122] 
[0.x.38123] 
//
[0.x.38124] 
//
[0.x.38125] 
[0.x.38126] 
[0.x.38127] 
//
// 下面的文件包括CellwiseInverseMassMatrix数据结构，我们将在质量矩阵反演中使用它，这是本教程程序中唯一的新包含文件。
//
[0.x.38128] 
//
[0.x.38129] 
[0.x.38130] 
[0.x.38131] 
//
// 与其他无矩阵教程程序类似，我们在文件的顶部收集所有控制程序执行的参数。除了我们想要运行的维度和多项式程度，我们还指定了我们想要用于欧拉方程中非线性项的高斯正交公式的点数。此外，我们指定了随时间变化的问题的时间间隔，并实现了两个不同的测试案例。第一个是二维的分析解，而第二个是介绍中描述的围绕圆柱体的通道流。根据测试案例，我们还改变了运行模拟的最终时间，以及一个变量`output_tick`，它指定了我们要在哪个时间间隔内写入输出（假设tick大于时间步长）。
//
[0.x.38132] 
[0.x.38133] 
[0.x.38134] 
[0.x.38135] 
[0.x.38136] 
//
[0.x.38137] 
//
[0.x.38138] 
[0.x.38139] 
[0.x.38140] 
//
// 接下来是时间积分器的一些细节，即用公式[2.x.4521]来衡量时间步长的库朗数，以及选择一些低存储量的Runge--Kutta方法。我们指定Runge--Kutta方案每级的Courant数，因为这对不同级数的方案给出了一个更实际的数值成本表达。
//
[0.x.38141] 
[0.x.38142] 
[0.x.38143] 
[0.x.38144] 
[0.x.38145] 
[0.x.38146] 
[0.x.38147] 
[0.x.38148] 
[0.x.38149] 
//
// 最终，我们选择了空间离散化的一个细节，即单元间面的数值通量（黎曼求解器）。在这个程序中，我们实现了Lax--Friedrichs通量和Harten--Lax--van Leer(HLL)通量的一个改进版本。
//
[0.x.38150] 
[0.x.38151] 
[0.x.38152] 
[0.x.38153] 
[0.x.38154] 
[0.x.38155] 
//
// [2.x.4522] 
//
// 我们现在定义了一个带有测试情况0的精确解的类和一个带有测试情况1的通道背景流场的类。鉴于欧拉方程是一个在[2.x.4524]维度上有[2.x.4523]个方程的问题，我们需要告诉函数基类正确的分量数量。
//
[0.x.38156] 
[0.x.38157] 
[0.x.38158] 
[0.x.38159] 
[0.x.38160] 
[0.x.38161] 
[0.x.38162] 
//
[0.x.38163] 
[0.x.38164] 
[0.x.38165] 
//
// 就实际实现的函数而言，分析性测试案例是一个等熵涡旋案例（例如参见Hesthaven和Warburton的书，第209页第6.6节中的例6.1），它满足欧拉方程，右侧的力项为零。考虑到这个定义，我们返回密度、动量或能量，这取决于所要求的成分。请注意，密度的原始定义涉及一些表达式的[2.x.4525]-次方。由于[2.x.4526]在某些系统上的实现相当慢，我们用对数和指数（以2为底）来代替它，这在数学上是等价的，但通常优化得更好。与[2.x.4527]相比，对于非常小的数字，这个公式可能会在最后一位数字上失去准确性，但我们还是很高兴，因为小数字映射为接近1的数据。
//
// 对于通道测试案例，我们简单地选择密度为1，[2.x.4528]方向的速度为0.4，其他方向的速度为0，以及对应于背景速度场测量的1.3声速的能量，根据关系[2.x.4529]计算得出。
//
[0.x.38166] 
[0.x.38167] 
[0.x.38168] 
[0.x.38169] 
[0.x.38170] 
//
[0.x.38171] 
[0.x.38172] 
[0.x.38173] 
[0.x.38174] 
[0.x.38175] 
[0.x.38176] 
//
[0.x.38177] 
[0.x.38178] 
[0.x.38179] 
[0.x.38180] 
[0.x.38181] 
[0.x.38182] 
[0.x.38183] 
[0.x.38184] 
[0.x.38185] 
[0.x.38186] 
[0.x.38187] 
//
[0.x.38188] 
[0.x.38189] 
[0.x.38190] 
[0.x.38191] 
[0.x.38192] 
[0.x.38193] 
[0.x.38194] 
[0.x.38195] 
[0.x.38196] 
[0.x.38197] 
[0.x.38198] 
[0.x.38199] 
[0.x.38200] 
[0.x.38201] 
//
[0.x.38202] 
[0.x.38203] 
[0.x.38204] 
[0.x.38205] 
[0.x.38206] 
[0.x.38207] 
[0.x.38208] 
[0.x.38209] 
[0.x.38210] 
[0.x.38211] 
[0.x.38212] 
//
[0.x.38213] 
[0.x.38214] 
[0.x.38215] 
[0.x.38216] 
[0.x.38217] 
//
// [2.x.4530] 
//
// 接下来的几行实现了一些低存储量的Runge--Kutta方法的变体。这些方法有特定的布彻表，系数为[2.x.4531]和[2.x.4532]，如介绍中所示。如同Runge--Kutta方法的惯例，我们可以从这些系数中推导出时间步骤[2.x.4533]。这种方案的主要优点是每个阶段只需要两个向量，即解的累积部分[2.x.4534]（在最后一个阶段后的新时间[2.x.4536]保持解[2.x.4535]），在各阶段被评估的更新向量[2.x.4537]，加上一个向量[2.x.4538]来保持算子评估。这样的Runge--Kutta设置减少了内存存储和内存访问。由于内存带宽通常是现代硬件上的性能限制因素，当微分算子的评估得到很好的优化时，性能可以比标准的时间积分器得到改善。考虑到传统的Runge--Kutta方案可能允许稍大的时间步长，因为更多的自由参数可以获得更好的稳定性，这一点也是真实的。
//
// 在本教程中，我们集中讨论Kennedy, Carpenter和Lewis(2000)文章中定义的低存储方案的几个变体，以及Tselios和Simos(2007)描述的一个变体。还有一大系列的其他方案，可以通过额外的系数集或稍微不同的更新公式来解决。
//
// 我们为这四种积分器定义了一个单一的类，用上述的枚举来区分。对每个方案，我们再将[2.x.4539]和[2.x.4540]的向量填充到类中的给定变量。
//
[0.x.38218] 
[0.x.38219] 
[0.x.38220] 
[0.x.38221] 
[0.x.38222] 
[0.x.38223] 
//
// 首先是Kennedy等人（2000）提出的三阶方案。虽然它的稳定区域比其他方案小得多，但它只涉及三个阶段，所以在每个阶段的工作方面很有竞争力。
//
[0.x.38224] 
[0.x.38225] 
[0.x.38226] 
[0.x.38227] 
[0.x.38228] 
[0.x.38229] 
[0.x.38230] 
//
// 下一个方案是四阶的五级方案，同样在Kennedy等人（2000）的论文中定义。
//
[0.x.38231] 
[0.x.38232] 
[0.x.38233] 
[0.x.38234] 
[0.x.38235] 
//
// 下面这个七级和四阶的方案已经明确地推导出用于声学问题。它在四阶方案中兼顾了虚特征值的精度，并结合了一个大的稳定区域。由于DG方案在最高频率之间是耗散的，这不一定转化为每级可能的最高时间步长。在本教程方案的背景下，数值通量在耗散中起着至关重要的作用，因此也是最大的稳定时间步长。对于修改后的Lax--Friedrichs通量，如果只考虑稳定性，该方案在每级步长方面与`stage_5_order_4`方案相似，但对于HLL通量来说，效率稍低。
//
[0.x.38236] 
[0.x.38237] 
[0.x.38238] 
[0.x.38239] 
[0.x.38240] 
//
// 这里包括的最后一个方案是Kennedy等人（2000）的五阶九级方案。它是这里使用的方案中最精确的，但是较高的精度牺牲了一些稳定性，所以每级的归一化步长比四阶方案要小。
//
[0.x.38241] 
[0.x.38242] 
[0.x.38243] 
[0.x.38244] 
[0.x.38245] 
//
[0.x.38246] 
[0.x.38247] 
[0.x.38248] 
[0.x.38249] 
[0.x.38250] 
[0.x.38251] 
[0.x.38252] 
[0.x.38253] 
//
[0.x.38254] 
[0.x.38255] 
[0.x.38256] 
[0.x.38257] 
//
// 时间积分器的主要功能是通过阶段，评估算子，为下一次评估准备 [2.x.4541] 矢量，并更新解决方案矢量 [2.x.4542] 。我们把工作交给所涉及的`pde_operator`，以便能够把Runge--Kutta设置的矢量操作与微分算子的评估合并起来，以获得更好的性能，所以我们在这里所做的就是委托矢量和系数。
//
// 我们单独调用第一阶段的算子，因为我们需要稍微修改一下那里的参数。我们从旧的解决方案[2.x.4543]而不是[2.x.4544]向量中评估解决方案，所以第一个参数是`solution`。我们在这里让阶段向量[2.x.4545]也持有评估的临时结果，因为它在其他情况下不会被使用。对于所有后续阶段，我们使用向量`vec_ki`作为第二个向量参数来存储运算符的求值结果。最后，当我们到了最后一个阶段，我们必须跳过对向量[2.x.4546]的计算，因为没有系数[2.x.4547]可用（也不会用到）。
//
[0.x.38258] 
[0.x.38259] 
[0.x.38260] 
[0.x.38261] 
[0.x.38262] 
[0.x.38263] 
[0.x.38264] 
[0.x.38265] 
[0.x.38266] 
//
[0.x.38267] 
[0.x.38268] 
[0.x.38269] 
[0.x.38270] 
[0.x.38271] 
[0.x.38272] 
[0.x.38273] 
//
[0.x.38274] 
[0.x.38275] 
[0.x.38276] 
[0.x.38277] 
[0.x.38278] 
[0.x.38279] 
[0.x.38280] 
[0.x.38281] 
[0.x.38282] 
[0.x.38283] 
[0.x.38284] 
[0.x.38285] 
[0.x.38286] 
[0.x.38287] 
//
[0.x.38288] 
[0.x.38289] 
[0.x.38290] 
[0.x.38291] 
[0.x.38292] 
//
// [2.x.4548] 
//
// 在下面的函数中，我们实现了与欧拉方程有关的各种特定问题的运算。每个函数都作用于我们在解向量中持有的守恒变量向量[2.x.4549]，并计算各种派生量。
//
// 首先是速度的计算，我们从动量变量[2.x.4550]除以[2.x.4551]得出。这里需要注意的是，我们用关键字`DEAL_II_ALWAYS_INLINE`来装饰所有这些函数。这是一个特殊的宏，映射到一个编译器专用的关键字，告诉编译器永远不要为这些函数创建一个函数调用，而是将实现[1.x.130]移到它们被调用的地方。这对性能至关重要，因为我们对其中一些函数的调用达到了几百万甚至几十亿次。例如，我们既使用速度来计算通量，也使用速度来计算压力，而这两个地方都要在每个单元的每个正交点进行评估。确保这些函数是内联的，不仅可以确保处理器不必执行跳转指令进入函数（以及相应的返回跳转），而且编译器可以在调用函数的地方之后的代码中重新使用一个函数的上下文的中间信息。(我们注意到，编译器通常很善于自己找出哪些函数要内联。这里有一个地方，编译器可能是自己想出来的，也可能不是，但我们可以肯定的是，内联是一种胜利。)
//
// 我们应用的另一个技巧是为反密度设置一个单独的变量 [2.x.4552] 。这使得编译器只对通量进行一次除法，尽管除法在多个地方使用。由于除法的费用大约是乘法或加法的10到20倍，避免多余的除法对性能至关重要。我们注意到，由于四舍五入的影响，在浮点运算中，先取反数，后与之相乘并不等同于除法，所以编译器不允许用标准的优化标志来交换一种方式。然而，以正确的方式编写代码也不是特别困难。
//
// 总而言之，所选择的总是内联和仔细定义昂贵的算术运算的策略使我们能够写出紧凑的代码，而不需要将所有的中间结果传递出去，尽管要确保代码映射到优秀的机器码。
//
[0.x.38293] 
[0.x.38294] 
[0.x.38295] 
[0.x.38296] 
[0.x.38297] 
[0.x.38298] 
//
[0.x.38299] 
[0.x.38300] 
[0.x.38301] 
//
[0.x.38302] 
[0.x.38303] 
//
// 下一个函数从保守变量的矢量中计算压力，使用公式 [2.x.4553] 。如上所述，我们使用来自`euler_velocity()`函数的速度。注意，我们需要在这里指定第一个模板参数`dim`，因为编译器无法从张量的参数中推导出它，而第二个参数（数字类型）可以自动推导出来。
//
[0.x.38304] 
[0.x.38305] 
[0.x.38306] 
[0.x.38307] 
[0.x.38308] 
[0.x.38309] 
[0.x.38310] 
//
[0.x.38311] 
[0.x.38312] 
[0.x.38313] 
//
[0.x.38314] 
[0.x.38315] 
//
// 这里是欧拉通量函数的定义，也就是实际方程的定义。考虑到速度和压力（编译器的优化将确保只做一次），考虑到介绍中所说的方程，这是直截了当的。
//
[0.x.38316] 
[0.x.38317] 
[0.x.38318] 
[0.x.38319] 
[0.x.38320] 
[0.x.38321] 
[0.x.38322] 
[0.x.38323] 
//
[0.x.38324] 
[0.x.38325] 
[0.x.38326] 
[0.x.38327] 
[0.x.38328] 
[0.x.38329] 
[0.x.38330] 
[0.x.38331] 
[0.x.38332] 
[0.x.38333] 
//
[0.x.38334] 
[0.x.38335] 
//
// 接下来的这个函数是一个简化数值通量实现的助手，它实现了一个张量的张量（具有大小为`dim + 2`的非标准外维，所以deal.II的张量类提供的标准重载在此不适用）与另一个相同内维的张量的作用，即一个矩阵-向量积。
//
[0.x.38336] 
[0.x.38337] 
[0.x.38338] 
[0.x.38339] 
[0.x.38340] 
[0.x.38341] 
[0.x.38342] 
[0.x.38343] 
[0.x.38344] 
[0.x.38345] 
[0.x.38346] 
//
// 这个函数实现了数值通量（黎曼求解器）。它从一个界面的两边获得状态，并获得法向量，从解的一边 [2.x.4554] 向解 [2.x.4555] 的方向。在依赖片断恒定数据的有限体积方法中，数值通量是核心成分，因为它是唯一输入物理信息的地方。在DG方法中，由于元素内部的多项式和那里使用的物理通量，数值通量就不那么核心了。由于在连续解的极限中，两边的数值一致的高阶插值，数值通量可以被看作是对两边解的跳跃的控制，以弱化连续性。必须认识到，在存在冲击的情况下，仅靠数值通量是无法稳定高阶DG方法的，因此任何DG方法都必须与进一步的冲击捕捉技术相结合，以处理这些情况。在本教程中，我们将重点讨论欧拉方程在没有强不连续的亚声速体系中的波状解，我们的基本方案已经足够了。
//
// 尽管如此，数值通量对整个方案的数值耗散起着决定性作用，并影响到显式Runge-Kutta方法的可接受的时间步长。我们考虑两种选择，一种是改良的Lax-Friedrichs方案，另一种是广泛使用的Harten-Lax-van Leer（HLL）通量。对于这两种方案，我们首先需要得到界面两边的速度和压力，并评估物理欧拉通量。
//
// 对于局部Lax--Friedrichs通量，其定义是[2.x.4556] ，其中因子[2.x.4557]给出了最大波速，[2.x.4558]是音速。在这里，考虑到通量对解的影响很小，为了计算效率的原因，我们选择了该表达式的两个修改。对于上述因子[2.x.4559]的定义，我们需要取四个平方根，两个用于两个速度规范，两个用于两侧的声速。因此，第一个修改是宁可使用[2.x.4560]作为最大速度的估计（如介绍中所示，它与实际最大速度最多相差2倍）。这使我们能够从最大速度中提取平方根，并且只需进行一次平方根计算就可以了。第二个修改是进一步放宽参数[2.x.4561]--它越小，耗散系数就越小（与[2.x.4562]的跳跃相乘，最终可能导致耗散变小或变大）。这使得我们可以用更大的时间步长将频谱纳入显式Runge--Kutta积分器的稳定区域。然而，我们不能使耗散太小，因为否则假想的特征值会越来越大。最后，目前的保守公式在[2.x.4563]的极限中不是能量稳定的，因为它不是偏斜对称的，在这种情况下需要额外的措施，如分裂形式的DG方案。
//
// 对于HLL通量，我们遵循文献中的公式，通过一个参数[2.x.4564]引入Lax--Friedrichs的两个状态的额外加权。它是由欧拉方程的物理传输方向得出的，以当前的速度方向和声速为准。对于速度，我们在此选择一个简单的算术平均数，这对危险情况和材料参数的适度跳跃是足够的。
//
// 由于数值通量在弱形式下是与法向量相乘的，因此我们对方程中的所有项都用法向量来乘以结果。在这些乘法中，上面定义的 "操作符*"可以实现类似于数学定义的紧凑符号。
//
// 在这个函数和下面的函数中，我们使用变量后缀`_m`和`_p`来表示从[2.x.4565]和[2.x.4566]得出的量，即在观察相邻单元时相对于当前单元的 "这里 "和 "那里 "的数值。
//
[0.x.38347] 
[0.x.38348] 
[0.x.38349] 
[0.x.38350] 
[0.x.38351] 
[0.x.38352] 
[0.x.38353] 
[0.x.38354] 
[0.x.38355] 
//
[0.x.38356] 
[0.x.38357] 
//
[0.x.38358] 
[0.x.38359] 
//
[0.x.38360] 
[0.x.38361] 
[0.x.38362] 
[0.x.38363] 
[0.x.38364] 
[0.x.38365] 
[0.x.38366] 
[0.x.38367] 
[0.x.38368] 
//
[0.x.38369] 
[0.x.38370] 
[0.x.38371] 
//
[0.x.38372] 
[0.x.38373] 
[0.x.38374] 
[0.x.38375] 
[0.x.38376] 
[0.x.38377] 
[0.x.38378] 
[0.x.38379] 
[0.x.38380] 
[0.x.38381] 
[0.x.38382] 
[0.x.38383] 
//
[0.x.38384] 
[0.x.38385] 
[0.x.38386] 
[0.x.38387] 
//
[0.x.38388] 
[0.x.38389] 
[0.x.38390] 
[0.x.38391] 
[0.x.38392] 
[0.x.38393] 
[0.x.38394] 
//
// 这个函数和下一个函数是辅助函数，提供紧凑的评估调用，因为多个点通过VectorizedArray参数被分批放在一起（详见[2.x.4567]教程）。这个函数用于亚音速外流边界条件，我们需要将能量分量设置为一个规定值。下一个函数请求所有分量上的解，用于流入边界，其中解的所有分量都被设置。
//
[0.x.38395] 
[0.x.38396] 
[0.x.38397] 
[0.x.38398] 
[0.x.38399] 
[0.x.38400] 
[0.x.38401] 
[0.x.38402] 
[0.x.38403] 
[0.x.38404] 
[0.x.38405] 
[0.x.38406] 
[0.x.38407] 
[0.x.38408] 
[0.x.38409] 
[0.x.38410] 
//
[0.x.38411] 
[0.x.38412] 
[0.x.38413] 
[0.x.38414] 
[0.x.38415] 
[0.x.38416] 
[0.x.38417] 
[0.x.38418] 
[0.x.38419] 
[0.x.38420] 
[0.x.38421] 
[0.x.38422] 
[0.x.38423] 
[0.x.38424] 
[0.x.38425] 
[0.x.38426] 
[0.x.38427] 
//
// [2.x.4568] 
//
// 这个类实现了欧拉问题的评估器，类似于 [2.x.4569] 或 [2.x.4570] 的 `LaplaceOperator` 类。由于本算子是非线性的，不需要矩阵接口（交给预处理程序），我们跳过了无矩阵算子中的各种`vmult`函数，只实现了`apply`函数以及`apply`与上述低存储Runge-Kutta时间积分器所需的矢量更新的组合（称为`perform_stage`）。此外，我们还增加了三个涉及无矩阵例程的额外函数，即一个是根据元素中的速度和声速计算时间步长的估计值（与实际时间步长的Courant数相结合），一个是解的投影（专门针对DG情况的[2.x.4571]），还有一个是计算与可能的分析解或与某些背景状态的规范的误差。
//
// 该课的其余部分与其他无矩阵教程相似。正如介绍中所讨论的，我们提供了几个函数，允许用户在由[2.x.4572]变量标记的领域边界的不同部分传递各种形式的边界条件，以及可能的体力。
//
[0.x.38428] 
[0.x.38429] 
[0.x.38430] 
[0.x.38431] 
[0.x.38432] 
//
[0.x.38433] 
//
[0.x.38434] 
[0.x.38435] 
//
[0.x.38436] 
[0.x.38437] 
//
[0.x.38438] 
[0.x.38439] 
[0.x.38440] 
//
[0.x.38441] 
//
[0.x.38442] 
//
[0.x.38443] 
[0.x.38444] 
[0.x.38445] 
//
[0.x.38446] 
[0.x.38447] 
[0.x.38448] 
[0.x.38449] 
[0.x.38450] 
[0.x.38451] 
[0.x.38452] 
[0.x.38453] 
//
[0.x.38454] 
[0.x.38455] 
//
[0.x.38456] 
[0.x.38457] 
[0.x.38458] 
//
[0.x.38459] 
[0.x.38460] 
//
[0.x.38461] 
[0.x.38462] 
//
[0.x.38463] 
[0.x.38464] 
//
[0.x.38465] 
//
[0.x.38466] 
[0.x.38467] 
[0.x.38468] 
[0.x.38469] 
[0.x.38470] 
[0.x.38471] 
//
[0.x.38472] 
[0.x.38473] 
[0.x.38474] 
[0.x.38475] 
[0.x.38476] 
//
[0.x.38477] 
[0.x.38478] 
[0.x.38479] 
[0.x.38480] 
[0.x.38481] 
//
[0.x.38482] 
[0.x.38483] 
[0.x.38484] 
[0.x.38485] 
[0.x.38486] 
//
[0.x.38487] 
[0.x.38488] 
[0.x.38489] 
[0.x.38490] 
[0.x.38491] 
[0.x.38492] 
//
[0.x.38493] 
[0.x.38494] 
[0.x.38495] 
[0.x.38496] 
//
// 对于欧拉算子的初始化，我们设置了类中包含的MatrixFree变量。这可以通过给定一个描述可能的弯曲边界的映射以及一个描述自由度的DoFHandler对象来完成。由于我们在这个教程程序中使用的是不连续的Galerkin离散化，没有对解场施加强烈的约束，所以我们不需要传入AffineConstraints对象，而是使用一个假的来构造。关于正交，我们要选择两种不同的方式来计算基础积分。第一种是灵活的，基于模板参数`n_points_1d`（将被分配到本文件顶部指定的`n_q_points_1d`值）。更精确的积分是必要的，以避免由于欧拉算子中的可变系数而产生的混叠问题。第二个不太精确的正交公式是一个基于`fe_degree+1`的严密公式，需要用于反质量矩阵。虽然该公式只在仿生元素形状上提供了精确的反，而在变形元素上则没有，但它可以通过张量积技术快速反转质量矩阵，这对于确保整体的最佳计算效率是必要的。
//
[0.x.38497] 
[0.x.38498] 
[0.x.38499] 
[0.x.38500] 
[0.x.38501] 
[0.x.38502] 
[0.x.38503] 
[0.x.38504] 
[0.x.38505] 
[0.x.38506] 
//
[0.x.38507] 
[0.x.38508] 
[0.x.38509] 
[0.x.38510] 
[0.x.38511] 
[0.x.38512] 
[0.x.38513] 
[0.x.38514] 
[0.x.38515] 
[0.x.38516] 
[0.x.38517] 
[0.x.38518] 
//
[0.x.38519] 
[0.x.38520] 
[0.x.38521] 
//
[0.x.38522] 
[0.x.38523] 
[0.x.38524] 
[0.x.38525] 
[0.x.38526] 
[0.x.38527] 
//
// 随后的四个成员函数是必须从外部调用的，以指定各种类型的边界。对于一个流入的边界，我们必须以密度 [2.x.4573] 、动量 [2.x.4574] 和能量 [2.x.4575] 来指定所有成分。考虑到这些信息，我们将函数与各自的边界ID一起存储在这个类的地图成员变量中。同样，我们对亚音速外流边界（我们也要求一个函数，用来检索能量）和壁面（无穿透）边界进行处理，在壁面上我们施加零法线速度（不需要函数，所以我们只要求边界ID）。对于目前的DG代码来说，边界条件只作为弱形式的一部分被应用（在时间积分期间），设置边界条件的调用可以出现在对这个类的`reinit()`调用之前或之后。这与连续有限元代码不同，在连续有限元代码中，边界条件决定了被送入MatrixFree初始化的AffineConstraints对象的内容，因此需要在无矩阵数据结构的初始化之前设置。
//
// 在四个函数中的每一个中添加的检查是用来确保边界条件在边界的各个部分是相互排斥的，也就是说，用户不会意外地将一个边界既指定为流入边界，又指定为亚声速流出边界。
//
[0.x.38528] 
[0.x.38529] 
[0.x.38530] 
[0.x.38531] 
[0.x.38532] 
[0.x.38533] 
[0.x.38534] 
[0.x.38535] 
 
 
 
 
 
[0.x.38541] 
//
[0.x.38542] 
[0.x.38543] 
//
[0.x.38544] 
[0.x.38545] 
[0.x.38546] 
[0.x.38547] 
[0.x.38548] 
[0.x.38549] 
[0.x.38550] 
[0.x.38551] 
[0.x.38552] 
[0.x.38553] 
[0.x.38554] 
[0.x.38555] 
[0.x.38556] 
[0.x.38557] 
//
[0.x.38558] 
[0.x.38559] 
//
[0.x.38560] 
[0.x.38561] 
[0.x.38562] 
[0.x.38563] 
[0.x.38564] 
[0.x.38565] 
[0.x.38566] 
[0.x.38567] 
[0.x.38568] 
[0.x.38569] 
[0.x.38570] 
[0.x.38571] 
//
[0.x.38572] 
[0.x.38573] 
//
[0.x.38574] 
[0.x.38575] 
[0.x.38576] 
[0.x.38577] 
[0.x.38578] 
//
[0.x.38579] 
[0.x.38580] 
//
// [2.x.4576] 
//
// 现在我们开始研究欧拉问题的局部评估器。评估器相对简单，遵循 [2.x.4577] 、 [2.x.4578] 或 [2.x.4579] 中提出的内容。第一个显著的区别是，我们使用的是具有非标准正交点数量的FEE评估。以前我们总是将正交点的数量设置为等于多项式度数加1（确保在仿生元素形状上的精确积分），现在我们将正交点的数量设置为一个单独的变量（例如多项式度数加多项式度数的二分之一或三分之一），以更准确地处理非线性项。由于评估器通过模板参数输入了适当的循环长度，并在变量[2.x.4580]中保留了整个单元格的正交点数量，所以我们现在自动操作更精确的公式，而无需进一步修改。
//
// 第二个区别是由于我们现在评估的是一个多分量系统，而不是之前考虑的标量系统。无矩阵框架提供了几种方法来处理多成分的情况。这里显示的变体是利用一个嵌入了多个分量的FEEvaluation对象，由第四个模板参数`dim + 2`指定欧拉系统中的分量。因此，[2.x.4581]的返回类型不再是一个标量（这将返回一个VectorizedArray类型，收集几个元素的数据），而是一个`dim+2`组件的张量。该功能与标量的情况类似；它由一个基类的模板专业化处理，称为FEEvaluationAccess。另一个变体是使用几个FEEvaluation对象，一个标量对象用于密度，一个带`dim`分量的矢量值对象用于动量，另一个标量评价器用于能量。为了确保这些分量指向解决方案的正确部分，FEEvaluation的构造函数在所需的MatrixFree字段之后需要三个可选的整数参数，即多DoFHandler系统的DoFHandler编号（默认取第一个），如果有多个Quadrature对象，则取正交点的编号（见下文），以及作为第三个参数的矢量系统中的分量。由于我们有一个单一的矢量来表示所有的分量，我们将使用第三个参数，并将其设置为`0`表示密度，`1`表示矢量值的动量，`dim+1`表示能量槽。然后FEEvaluation在[2.x.4582]和[2.x.4583]或更紧凑的[2.x.4584]和[2.x.4585]调用中挑选适当的解矢量子范围。
//
// 当涉及到身体力向量的评估时，为了效率，我们区分了两种情况。如果我们有一个常数函数（源自[2.x.4586]），我们可以在正交点的循环外预先计算出数值，并简单地在所有地方使用该数值。对于一个更通用的函数，我们反而需要调用我们上面提供的`evaluate_function()`方法；这个路径更昂贵，因为我们需要访问与正交点数据有关的内存。
//
// 其余部分沿用其他教程的程序。由于我们已经在单独的`euler_flux()`函数中实现了欧拉方程的所有物理学，我们在这里所要做的就是给定在正交点评估的当前解，由`phi.get_value(q)`返回，并告诉FEEvaluation对象，通过形状函数的梯度（这是一个外部`dim+2`分量的张量，每个张量持有一个`dim`分量的[2.x.4587 ] 欧拉通量的分量）。) 最后值得一提的是，在我们得到一个外部函数的情况下，我们通过测试函数`phi.submit_value()`的值来排队测试数据的顺序。我们必须在调用`phi.get_value(q)'之后进行，因为`get_value()'（读取解决方案）和`submit_value()'（排队等待测试函数的乘法和正交点的求和）访问同一个底层数据域。这里很容易实现没有临时变量`w_q`，因为值和梯度之间没有混合。对于更复杂的设置，必须首先复制出例如正交点的值和梯度，然后通过[2.x.4588]和[2.x.4589]再次排列结果。
//
// 作为最后的说明，我们提到我们没有使用这个函数的第一个MatrixFree参数，这是一个来自[2.x.4590]的回调，接口规定了现在的参数列表，但是由于我们在一个成员函数中，MatrixFree对象已经可以作为`data`变量，我们坚持使用，以避免混淆。
//
[0.x.38581] 
[0.x.38582] 
[0.x.38583] 
[0.x.38584] 
[0.x.38585] 
[0.x.38586] 
[0.x.38587] 
[0.x.38588] 
//
[0.x.38589] 
[0.x.38590] 
[0.x.38591] 
//
[0.x.38592] 
[0.x.38593] 
[0.x.38594] 
//
[0.x.38595] 
[0.x.38596] 
[0.x.38597] 
[0.x.38598] 
//
[0.x.38599] 
[0.x.38600] 
[0.x.38601] 
[0.x.38602] 
[0.x.38603] 
[0.x.38604] 
[0.x.38605] 
[0.x.38606] 
[0.x.38607] 
[0.x.38608] 
//
[0.x.38609] 
[0.x.38610] 
[0.x.38611] 
[0.x.38612] 
[0.x.38613] 
//
[0.x.38614] 
[0.x.38615] 
[0.x.38616] 
//
[0.x.38617] 
[0.x.38618] 
[0.x.38619] 
[0.x.38620] 
[0.x.38621] 
[0.x.38622] 
[0.x.38623] 
//
// 下一个函数涉及到内部面的积分计算，在这里我们需要与面相邻的两个单元的评估器。我们将变量`phi_m`与解分量[2.x.4591]相关联，将变量`phi_p`与解分量[2.x.4592]相关联。我们在FEFaceEvaluation的构造函数中通过第二个参数来区分两边，`true`表示内侧，`false`表示外侧，内侧和外侧表示相对于法向量的方向。
//
// 注意调用[2.x.4593]和[2.x.4594]结合了对向量的访问和因式分解部分。这种合并操作不仅节省了一行代码，而且还包含了一个重要的优化。鉴于我们在Gauss-Lobatto正交公式的点上使用拉格朗日多项式的节点基础，在每个面上只有[2.x.4595]的基础函数评估为非零。因此，评估器只访问了向量中的必要数据，而跳过了乘以零的部分。如果我们首先读取向量，我们就需要从向量中加载所有的数据，因为孤立的调用不知道后续操作中需要哪些数据。如果随后的[2.x.4597]调用要求数值和导数，确实需要每个分量的所有[2.x.4598]向量条目，因为所有基函数的法向导数都是非零的。
//
// 评价器的参数以及程序与单元评价相似。由于非线性项的存在，我们再次使用更精确的（过度）积分方案，指定为列表中第三个模板参数。在正交点上，我们再去找我们的自由函数来计算数值通量。它从两边（即[2.x.4599]和[2.x.4600]）接收在正交点评估的解决方案，以及到减去一边的法向量。正如上面所解释的，数值通量已经乘以来自减法侧的法向量了。我们需要转换符号，因为在引言中得出的弱形式中，边界项带有一个减号。然后，通量被排队在减号和加号上进行测试，由于加号上的法向量与减号上的法向量正好相反，所以要调换符号。
//
[0.x.38624] 
[0.x.38625] 
[0.x.38626] 
[0.x.38627] 
[0.x.38628] 
[0.x.38629] 
[0.x.38630] 
[0.x.38631] 
[0.x.38632] 
[0.x.38633] 
[0.x.38634] 
//
[0.x.38635] 
[0.x.38636] 
[0.x.38637] 
[0.x.38638] 
//
[0.x.38639] 
[0.x.38640] 
//
[0.x.38641] 
[0.x.38642] 
[0.x.38643] 
[0.x.38644] 
[0.x.38645] 
[0.x.38646] 
[0.x.38647] 
[0.x.38648] 
[0.x.38649] 
//
[0.x.38650] 
[0.x.38651] 
[0.x.38652] 
[0.x.38653] 
//
// 对于位于边界的面，我们需要施加适当的边界条件。在这个教程程序中，我们实现了上述的四种情况。第五种情况，即超音速流出条件，将在下面的 "结果 "部分讨论）。不连续的Galerkin方法对边界条件的施加不是作为约束条件，而只是弱化。因此，各种条件是通过找到一个适当的[1.x.131]量[2.x.4601]来施加的，然后将其交给也用于内部面的数值通量函数。实质上，我们在域外 "假装 "一个状态，如果那是现实，PDE的解将满足我们想要的边界条件。
//
// 对于墙的边界，我们需要对动量变量施加一个无正态通量的条件，而对于密度和能量，我们使用的是诺伊曼条件 [2.x.4602] 和 [2.x.4603] 。为了实现无正态通量条件，我们将外部数值设定为内部数值，并减去墙面法线方向，即法线矢量方向上的速度的2倍。
//
// 对于流入边界，我们简单地将给定的Dirichlet数据[2.x.4604]作为边界值。另一种方法是使用[2.x.4605] ，即所谓的镜像原理。
//
// 强加外流本质上是一个诺伊曼条件，即设定 [2.x.4606] 。对于亚声速流出的情况，我们仍然需要强加一个能量值，我们从各自的函数中得出这个值。对于[1.x.132]的情况，即在Neumann部分有动量通入域的情况，需要一个特殊的步骤。根据文献（这一事实可以通过适当的能量论证得出），我们必须切换到流入部分的通量的另一个变体，见Gravemeier, Comerford, Yoshihara, Ismail, Wall, "A novel formulation for Neumann inflow conditions in biomechanics", Int. J. Numer. Meth. 生物医学。Eng., vol. 28 (2012). 这里，动量项需要再次添加，这相当于去除动量变量上的通量贡献。我们在后处理步骤中这样做，而且只适用于我们都处于外流边界且法向量与动量（或等同于速度）之间的点积为负的情况。由于我们在SIMD矢量化中一次处理多个正交点的数据，这里需要明确地在SIMD数组的条目上循环。
//
// 在下面的实现中，我们在正交点的层面上检查各种类型的边界。当然，我们也可以将决定权移出正交点循环，将整个面孔视为同类，这就避免了在正交点的内循环中进行一些地图/集合的查找。然而，效率的损失并不明显，所以我们在这里选择了更简单的代码。还要注意的是，最后的 "else "子句会捕捉到这样的情况，即边界的某些部分没有通过[2.x.4607]分配任何边界条件。
[0.x.38654] 
[0.x.38655] 
[0.x.38656] 
[0.x.38657] 
[0.x.38658] 
[0.x.38659] 
[0.x.38660] 
[0.x.38661] 
//
[0.x.38662] 
[0.x.38663] 
[0.x.38664] 
[0.x.38665] 
//
[0.x.38666] 
[0.x.38667] 
[0.x.38668] 
[0.x.38669] 
//
[0.x.38670] 
[0.x.38671] 
[0.x.38672] 
//
[0.x.38673] 
//
[0.x.38674] 
[0.x.38675] 
[0.x.38676] 
[0.x.38677] 
[0.x.38678] 
[0.x.38679] 
[0.x.38680] 
[0.x.38681] 
[0.x.38682] 
[0.x.38683] 
[0.x.38684] 
[0.x.38685] 
[0.x.38686] 
[0.x.38687] 
[0.x.38688] 
[0.x.38689] 
[0.x.38690] 
[0.x.38691] 
[0.x.38692] 
[0.x.38693] 
[0.x.38694] 
[0.x.38695] 
[0.x.38696] 
[0.x.38697] 
[0.x.38698] 
[0.x.38699] 
[0.x.38700] 
[0.x.38701] 
[0.x.38702] 
//
[0.x.38703] 
//
[0.x.38704] 
[0.x.38705] 
[0.x.38706] 
[0.x.38707] 
[0.x.38708] 
[0.x.38709] 
[0.x.38710] 
//
[0.x.38711] 
[0.x.38712] 
//
[0.x.38713] 
[0.x.38714] 
[0.x.38715] 
//
// 下一个函数实现了质量矩阵的逆运算。在介绍中已经广泛讨论了算法和原理，所以我们在这里只讨论[2.x.4608]类的技术问题。它所做的操作与质量矩阵的正向评估类似，只是使用了不同的插值矩阵，代表逆[2.x.4609]因子。这些代表了从指定的基础（在这种情况下，高斯--洛巴托正交公式点中的拉格朗日基础）到高斯正交公式点中的拉格朗日基础的改变。在后者的基础上，我们可以应用点的逆向`JxW`因子，即正交权重乘以从参考坐标到实坐标的映射的雅各布系数。一旦完成了这一操作，基数将再次变回节点高斯-洛巴托基数。所有这些操作都由下面的 "apply() "函数完成。我们需要提供的是要操作的局部场（我们通过一个FEEvaluation对象从全局向量中提取），并将结果写回质量矩阵操作的目标向量。
//
// 需要注意的一点是，我们在FEEvaluation的构造函数中添加了两个整数参数（可选），第一个是0（在多DoFHandler系统中选择DoFHandler；在这里，我们只有一个），第二个是1，用于进行正交公式选择。由于我们将正交公式0用于非线性项的过度积分，我们使用公式1与默认的[2.x.4610]（或变量名称中的`fe_degree+1`）点用于质量矩阵。这导致了对质量矩阵的平方贡献，并确保了精确的积分，正如介绍中所解释的。
//
[0.x.38716] 
[0.x.38717] 
[0.x.38718] 
[0.x.38719] 
[0.x.38720] 
[0.x.38721] 
[0.x.38722] 
[0.x.38723] 
[0.x.38724] 
[0.x.38725] 
//
[0.x.38726] 
[0.x.38727] 
[0.x.38728] 
[0.x.38729] 
//
[0.x.38730] 
//
[0.x.38731] 
[0.x.38732] 
[0.x.38733] 
//
// [2.x.4611] 
//
// 我们现在来到实现欧拉算子整体评估的函数，即[2.x.4612] ，调用上面介绍的局部评估器。这些步骤在前面的代码中应该是清楚的。需要注意的一点是，我们需要调整与边界各部分相关的函数中的时间，以便在边界数据与时间相关的情况下与方程一致。然后，我们调用[2.x.4613]来执行单元和面的积分，包括在`src`向量中进行必要的ghost数据交换。该函数的第七个参数，"true"，指定我们要在开始向其累积积分之前，将 "dst "向量作为循环的一部分归零。这个变体比在循环之前明确调用`dst = 0.;`要好，因为归零操作是在矢量的子范围内完成的，其部分是由附近的积分写入的。这加强了数据的定位，并允许缓存，节省了向量数据到主内存的一次往返，提高了性能。循环的最后两个参数决定了哪些数据被交换：由于我们只访问一个面的形状函数的值，这是典型的一阶双曲问题，并且由于我们有一个节点基础，节点位于参考元素表面，我们只需要交换这些部分。这又节省了宝贵的内存带宽。
//
// 一旦应用了空间算子[2.x.4614]，我们需要进行第二轮操作，应用反质量矩阵。这里，我们调用[2.x.4615]，因为只有单元格积分出现。单元循环比全循环更便宜，因为只访问与本地拥有的单元相关的自由度，这只是DG离散化的本地拥有的自由度。因此，这里不需要鬼魂交换。
//
// 在所有这些函数的周围，我们设置了定时器范围来记录计算时间，以统计各部分的贡献。
//
[0.x.38734] 
[0.x.38735] 
[0.x.38736] 
[0.x.38737] 
[0.x.38738] 
[0.x.38739] 
[0.x.38740] 
[0.x.38741] 
//
[0.x.38742] 
[0.x.38743] 
[0.x.38744] 
[0.x.38745] 
//
[0.x.38746] 
[0.x.38747] 
[0.x.38748] 
[0.x.38749] 
[0.x.38750] 
[0.x.38751] 
[0.x.38752] 
[0.x.38753] 
[0.x.38754] 
[0.x.38755] 
//
[0.x.38756] 
[0.x.38757] 
//
[0.x.38758] 
[0.x.38759] 
[0.x.38760] 
[0.x.38761] 
[0.x.38762] 
[0.x.38763] 
//
// 让我们转到做Runge--Kutta更新的整个阶段的函数。它调用[2.x.4616]，然后对向量进行一些更新，即`next_ri = solution + factor_ai * k_i`和`solution += factor_solution * k_i`。与其通过向量接口执行这些步骤，我们在这里提出了一个替代策略，在基于缓存的架构上速度更快。由于向量所消耗的内存往往比缓存所能容纳的要大得多，因此数据必须有效地来自缓慢的RAM内存。这种情况可以通过循环融合来改善，即在一次扫描中对`next_ki`和`solution`进行更新。在这种情况下，我们将读取两个向量`rhs`和`solution`并写入`next_ki`和`solution`，而在基线情况下，至少有4次读取和两次写入。在这里，我们更进一步，当质量矩阵反转在向量的某一部分完成后，立即执行循环。 [2.x.4617]提供了一种机制，在单元格的循环第一次接触到一个向量条目之前，附加一个[2.x.4618]（我们在这里没有使用，但用于例如向量的归零），以及在循环最后接触到一个条目之后，调用第二个[2.x.4619]。回调的形式是给定向量上的一个范围（就MPI宇宙中的本地索引编号而言），可以由`local_element()`函数来处理。
//
// 对于这个第二个回调，我们创建一个lambda，在一个范围内工作，并在这个范围内写入相应的更新。理想情况下，我们会在本地循环之前添加`DEAL_II_OPENMP_SIMD_PRAGMA`，以建议编译器对这个循环进行SIMD并行化（这意味着在实践中我们要确保在循环内部使用的指针的索引范围之间没有重叠，也称为别名）。事实证明，在写这篇文章的时候，GCC 7.2无法编译lambda函数中的OpenMP pragma，所以我们在下面注释了这个pragma。如果你的编译器比较新，你应该可以再次取消注释这些行。
//
// 注意，当我们不需要更新`next_ri`向量时，我们为最后的Runge--Kutta阶段选择不同的代码路径。这个策略带来了相当大的速度提升。在40核机器上，默认矢量更新时，逆质量矩阵和矢量更新需要60%以上的计算时间，而在更优化的变体中，这一比例约为35%。换句话说，这是一个大约三分之一的速度提升。
//
[0.x.38764] 
[0.x.38765] 
[0.x.38766] 
[0.x.38767] 
[0.x.38768] 
[0.x.38769] 
[0.x.38770] 
[0.x.38771] 
[0.x.38772] 
[0.x.38773] 
[0.x.38774] 
[0.x.38775] 
//
[0.x.38776] 
[0.x.38777] 
[0.x.38778] 
[0.x.38779] 
//
[0.x.38780] 
[0.x.38781] 
[0.x.38782] 
[0.x.38783] 
[0.x.38784] 
[0.x.38785] 
[0.x.38786] 
[0.x.38787] 
[0.x.38788] 
[0.x.38789] 
//
[0.x.38790] 
[0.x.38791] 
[0.x.38792] 
[0.x.38793] 
[0.x.38794] 
[0.x.38795] 
[0.x.38796] 
[0.x.38797] 
[0.x.38798] 
[0.x.38799] 
[0.x.38800] 
[0.x.38801] 
[0.x.38802] 
//
// /* DEAL_II_OPENMP_SIMD_PRAGMA [2.x.4620] 
[0.x.38803] 
[0.x.38804] 
[0.x.38805] 
[0.x.38806] 
[0.x.38807] 
[0.x.38808] 
[0.x.38809] 
[0.x.38810] 
[0.x.38811] 
//
// /* DEAL_II_OPENMP_SIMD_PRAGMA [2.x.4621] 。
[0.x.38812] 
[0.x.38813] 
[0.x.38814] 
[0.x.38815] 
[0.x.38816] 
[0.x.38817] 
[0.x.38818] 
[0.x.38819] 
[0.x.38820] 
[0.x.38821] 
[0.x.38822] 
//
// 在讨论了将解提前一个时间步长的函数的实现后，现在让我们来看看实现其他辅助性操作的函数。具体来说，这些是计算投影、评估误差和计算单元上信息传输速度的函数。
//
// 这些函数中的第一个基本上等同于[2.x.4622]，只是速度快得多，因为它是专门针对DG元素的，不需要设置和解决线性系统，因为每个元素都有独立的基函数。我们在这里展示代码的原因，除了这个非关键操作的小幅提速之外，还因为它显示了[2.x.4623]提供的额外功能。
//
// 投影操作的工作原理如下。如果我们用[2.x.4624]表示在正交点评估的形状函数矩阵，那么在单元格[2.x.4625]上的投影是一个形式为[2.x.4626]的操作，其中[2.x.4627]是包含雅各布系数乘以正交权重（JxW）的对角矩阵，[2.x.4628]是单元格的质量矩阵，[2.x.4629]是要投影到正交点的领域评估。实际上，矩阵[2.x.4630]通过张量积有额外的结构，如介绍中所解释的）。这个系统现在可以等效地写成[2.x.4631] 。现在，项[2.x.4632]和[2.x.4633]相抵消，导致最后的表达式[2.x.4634] 。这个操作由[2.x.4635]实现。这个名字来自于这个投影只是乘以[2.x.4636]，一个从高斯正交点的节点基到给定的有限元基的基数变化。请注意，我们调用[2.x.4637]将结果写入矢量，覆盖之前的内容，而不是像典型的积分任务那样累积结果--我们可以这样做，因为对于不连续的Galerkin离散，每个矢量条目都只有一个单元的贡献。
//
[0.x.38823] 
[0.x.38824] 
[0.x.38825] 
[0.x.38826] 
[0.x.38827] 
[0.x.38828] 
[0.x.38829] 
[0.x.38830] 
[0.x.38831] 
[0.x.38832] 
[0.x.38833] 
[0.x.38834] 
[0.x.38835] 
[0.x.38836] 
[0.x.38837] 
[0.x.38838] 
[0.x.38839] 
[0.x.38840] 
[0.x.38841] 
[0.x.38842] 
[0.x.38843] 
[0.x.38844] 
//
// 下一个函数再次重复了同样由deal.II库提供的功能，即[2.x.4638]我们在这里展示了明确的代码，以强调跨几个单元的矢量化是如何工作的，以及如何通过该接口累积结果。回顾一下，每个[1.x.133]的矢量化数组持有来自不同单元的数据。通过对当前MPI进程所拥有的所有单元批的循环，我们就可以填充一个结果的VectorizedArray；为了得到一个全局的总和，我们需要进一步去对SIMD阵列中的条目进行求和。然而，这样的程序并不稳定，因为SIMD数组事实上可能并不持有其所有通道的有效数据。当本地拥有的单元的数量不是SIMD宽度的倍数时，就会发生这种情况。为了避免无效数据，我们必须在访问数据时明确地跳过那些无效的通道。虽然人们可以想象，我们可以通过简单地将空车道设置为零（从而不对总和做出贡献）来使其工作，但情况比这更复杂。如果我们要从动量中计算出一个速度呢？那么，我们就需要除以密度，而密度是零--结果就会是NaN，并污染结果。当我们在单元格批次中循环时，使用函数[2.x.4639]给我们提供有效数据的通道数，累积有效SIMD范围内的结果，就可以避免这种陷阱。它在大多数单元上等于[2.x.4640]，但如果单元数与SIMD宽度相比有余数，则在最后一个单元批上可能会更少。
//
[0.x.38845] 
[0.x.38846] 
[0.x.38847] 
[0.x.38848] 
[0.x.38849] 
[0.x.38850] 
[0.x.38851] 
[0.x.38852] 
//
[0.x.38853] 
[0.x.38854] 
[0.x.38855] 
[0.x.38856] 
[0.x.38857] 
[0.x.38858] 
[0.x.38859] 
[0.x.38860] 
[0.x.38861] 
[0.x.38862] 
[0.x.38863] 
//
[0.x.38864] 
[0.x.38865] 
[0.x.38866] 
[0.x.38867] 
[0.x.38868] 
[0.x.38869] 
[0.x.38870] 
[0.x.38871] 
[0.x.38872] 
[0.x.38873] 
//
[0.x.38874] 
//
[0.x.38875] 
[0.x.38876] 
[0.x.38877] 
//
[0.x.38878] 
[0.x.38879] 
//
// EulerOperator类的最后一个函数是用来估计传输速度的，由网格大小缩放，这与设置显式时间积分器的时间步长有关。在欧拉方程中，有两种传输速度，即对流速度[2.x.4641]和相对于以速度[2.x.4643]运动的介质而言，声波的传播速度[2.x.4642] 。
//
// 在时间步长的公式中，我们感兴趣的不是这些绝对速度，而是信息穿过一个单元所需的时间量。对于与介质一起传输的信息，[2.x.4644]是由网格大小缩放的，所以最大速度的估计可以通过计算[2.x.4645] 得到，其中[2.x.4646]是实域到参考域的转换的雅各布。请注意，[2.x.4647]返回的是反转和转置的雅各布，代表从实数到参考坐标的度量项，所以我们不需要再次转置。我们在下面的代码中把这个极限存储在变量`convective_limit`中。
//
// 声音的传播是各向同性的，所以我们需要考虑到任何方向的网格尺寸。然后，适当的网格大小比例由[2.x.4648]的最小奇异值给出，或者，等同于[2.x.4649]的最大奇异值。请注意，当忽略弯曲的单元时，可以用单元顶点之间的最小距离来近似这个量。为了得到Jacobian的最大奇异值，一般的策略是使用一些LAPACK函数。由于我们在这里需要的只是一个估计值，所以我们可以避免将一个向量数组的张量分解成几个矩阵的麻烦，并在没有向量的情况下进入一个（昂贵的）特征值函数，而是使用应用于[2.x.4650]的幂方法进行几次迭代（在下面的代码中为五次）。这种方法的收敛速度取决于最大特征值与次大特征值的比率以及初始猜测，即所有1的矢量。这可能表明，我们在接近立方体形状的单元上得到缓慢的收敛，在这种情况下，所有的长度几乎都是一样的。然而，这种缓慢的收敛意味着结果将位于两个最大的奇异值之间，而这两个奇异值无论如何都是接近最大值的。在所有其他情况下，收敛将是快速的。因此，我们可以只在这里硬编码5次迭代，并确信结果是好的。
//
[0.x.38880] 
[0.x.38881] 
[0.x.38882] 
[0.x.38883] 
[0.x.38884] 
[0.x.38885] 
[0.x.38886] 
//
[0.x.38887] 
[0.x.38888] 
[0.x.38889] 
[0.x.38890] 
[0.x.38891] 
[0.x.38892] 
[0.x.38893] 
[0.x.38894] 
[0.x.38895] 
[0.x.38896] 
//
[0.x.38897] 
[0.x.38898] 
[0.x.38899] 
[0.x.38900] 
[0.x.38901] 
[0.x.38902] 
//
[0.x.38903] 
[0.x.38904] 
//
[0.x.38905] 
[0.x.38906] 
[0.x.38907] 
[0.x.38908] 
[0.x.38909] 
[0.x.38910] 
[0.x.38911] 
[0.x.38912] 
[0.x.38913] 
[0.x.38914] 
[0.x.38915] 
[0.x.38916] 
[0.x.38917] 
[0.x.38918] 
[0.x.38919] 
[0.x.38920] 
[0.x.38921] 
[0.x.38922] 
[0.x.38923] 
[0.x.38924] 
//
// 与前面的函数类似，我们必须确保只在一个单元格批次的有效单元格上积累速度。
//
 
[0.x.38926] 
[0.x.38927] 
[0.x.38928] 
[0.x.38929] 
//
[0.x.38930] 
//
[0.x.38931] 
[0.x.38932] 
//
// [2.x.4651] 
//
// 该类将EulerOperator类与时间积分器和通常的全局数据结构（如FiniteElement和DoFHandler）相结合，以实际运行Euler问题的模拟。
//
// 成员变量是一个三角形、一个有限元、一个映射（用于创建高阶曲面，见[2.x.4652]），以及一个描述自由度的DoFHandler。此外，我们还保留了上面描述的EulerOperator的实例，它将完成所有积分方面的繁重工作，以及一些时间积分的参数，如当前时间或时间步长。
//
// 此外，我们使用一个PostProcessor实例来向输出文件写入一些额外的信息，这与 [2.x.4653] 中的做法类似。DataPostprocessor类的接口很直观，要求我们提供关于需要评估的信息（通常只有解决方案的值，除了Schlieren图，我们只在二维中启用它是有意义的），以及被评估的东西的名称。请注意，也可以通过可视化程序（如ParaView）中的计算器工具来提取大部分信息，但在写输出时就已经做了，这要方便得多。
//
[0.x.38933] 
[0.x.38934] 
[0.x.38935] 
[0.x.38936] 
[0.x.38937] 
//
[0.x.38938] 
//
[0.x.38939] 
[0.x.38940] 
//
[0.x.38941] 
//
[0.x.38942] 
//
[0.x.38943] 
//
[0.x.38944] 
[0.x.38945] 
[0.x.38946] 
[0.x.38947] 
[0.x.38948] 
//
[0.x.38949] 
[0.x.38950] 
[0.x.38951] 
//
[0.x.38952] 
//
[0.x.38953] 
//
[0.x.38954] 
//
[0.x.38955] 
[0.x.38956] 
[0.x.38957] 
[0.x.38958] 
//
[0.x.38959] 
[0.x.38960] 
[0.x.38961] 
//
[0.x.38962] 
//
[0.x.38963] 
[0.x.38964] 
[0.x.38965] 
//
[0.x.38966] 
//
[0.x.38967] 
[0.x.38968] 
[0.x.38969] 
[0.x.38970] 
//
[0.x.38971] 
[0.x.38972] 
[0.x.38973] 
[0.x.38974] 
//
// 对于字段变量的主要评估，我们首先检查数组的长度是否等于预期值（长度`2*dim+4`或`2*dim+5`来自我们在下面get_names()函数中指定的名字的大小）。然后我们在所有的评估点上循环，填充相应的信息。首先，我们填写密度[2.x.4654]、动量[2.x.4655]和能量[2.x.4656]的原始解变量，然后我们计算得出速度[2.x.4657]、压力[2.x.4658]、声速[2.x.4659]，以及显示[2.x.4660]的Schlieren图，如果它被启用。参见[2.x.4661]中另一个创建Schlieren图的例子）。
//
[0.x.38975] 
[0.x.38976] 
[0.x.38977] 
[0.x.38978] 
[0.x.38979] 
[0.x.38980] 
//
[0.x.38981] 
[0.x.38982] 
[0.x.38983] 
//
[0.x.38984] 
[0.x.38985] 
[0.x.38986] 
[0.x.38987] 
[0.x.38988] 
[0.x.38989] 
//
[0.x.38990] 
[0.x.38991] 
[0.x.38992] 
[0.x.38993] 
[0.x.38994] 
//
[0.x.38995] 
[0.x.38996] 
[0.x.38997] 
//
[0.x.38998] 
[0.x.38999] 
[0.x.39000] 
[0.x.39001] 
//
[0.x.39002] 
[0.x.39003] 
[0.x.39004] 
[0.x.39005] 
[0.x.39006] 
//
[0.x.39007] 
[0.x.39008] 
[0.x.39009] 
[0.x.39010] 
[0.x.39011] 
[0.x.39012] 
[0.x.39013] 
[0.x.39014] 
//
[0.x.39015] 
[0.x.39016] 
//
[0.x.39017] 
[0.x.39018] 
//
// 对于量的解释，我们有标量密度、能量、压力、声速和Schlieren图，以及动量和速度的向量。
//
[0.x.39019] 
[0.x.39020] 
[0.x.39021] 
[0.x.39022] 
[0.x.39023] 
[0.x.39024] 
[0.x.39025] 
[0.x.39026] 
[0.x.39027] 
[0.x.39028] 
[0.x.39029] 
//
[0.x.39030] 
[0.x.39031] 
[0.x.39032] 
//
[0.x.39033] 
[0.x.39034] 
//
// 关于必要的更新标志，我们只需要所有数量的值，但Schlieren图除外，它是基于密度梯度的。
//
[0.x.39035] 
[0.x.39036] 
[0.x.39037] 
[0.x.39038] 
[0.x.39039] 
[0.x.39040] 
[0.x.39041] 
[0.x.39042] 
//
// 这个类的构造函数并不令人惊讶。我们设置了一个基于 "MPI_COMM_WORLD "通信器的平行三角形，一个具有 "dim+2 "分量的密度、动量和能量的矢量有限元，一个与底层有限元相同程度的高阶映射，并将时间和时间步长初始化为零。
//
[0.x.39043] 
[0.x.39044] 
[0.x.39045] 
[0.x.39046] 
[0.x.39047] 
[0.x.39048] 
[0.x.39049] 
[0.x.39050] 
[0.x.39051] 
[0.x.39052] 
[0.x.39053] 
[0.x.39054] 
[0.x.39055] 
[0.x.39056] 
//
// 作为一个网格，本教程程序实现了两种选择，取决于全局变量`testcase`。对于分析型变量（`testcase==0`），域是[2.x.4662]，域的四周都有迪里希特边界条件（流入）。对于 "testcase==1"，我们将域设置为矩形箱中的圆柱体，源自Sch&auml;fer和Turek（1996）对不可压缩的粘性流动的圆柱体的流动测试案例。在这里，我们有更多种类的边界。通道左侧的流入部分是给定的流入类型，为此我们选择了一个恒定的流入轮廓，而我们在右侧设置了一个亚声速的流出。对于圆柱体周围的边界（边界id等于2）以及通道壁（边界id等于3），我们使用壁的边界类型，即无正态流。此外，对于三维圆柱体，我们还在垂直方向上增加了一个重力。有了基础网格（包括由[2.x.4663]设置的流形），我们就可以执行指定数量的全局细化，从DoFHandler创建未知的编号，并将DoFHandler和Mapping对象交给EulerOperator的初始化。
//
[0.x.39057] 
[0.x.39058] 
[0.x.39059] 
[0.x.39060] 
[0.x.39061] 
[0.x.39062] 
[0.x.39063] 
[0.x.39064] 
[0.x.39065] 
[0.x.39066] 
//
[0.x.39067] 
[0.x.39068] 
[0.x.39069] 
[0.x.39070] 
//
[0.x.39071] 
[0.x.39072] 
[0.x.39073] 
[0.x.39074] 
//
[0.x.39075] 
[0.x.39076] 
//
[0.x.39077] 
[0.x.39078] 
//
[0.x.39079] 
[0.x.39080] 
[0.x.39081] 
[0.x.39082] 
//
[0.x.39083] 
[0.x.39084] 
[0.x.39085] 
[0.x.39086] 
//
[0.x.39087] 
[0.x.39088] 
//
[0.x.39089] 
[0.x.39090] 
[0.x.39091] 
[0.x.39092] 
//
[0.x.39093] 
[0.x.39094] 
//
[0.x.39095] 
[0.x.39096] 
[0.x.39097] 
//
[0.x.39098] 
//
[0.x.39099] 
//
[0.x.39100] 
[0.x.39101] 
//
// 在下文中，我们输出一些关于问题的统计数据。因为我们经常会出现相当多的单元格或自由度，所以我们希望用逗号来分隔每一组的三位数来打印它们。这可以通过 "locales "来实现，尽管这种工作方式不是特别直观。 [2.x.4664]对此有稍微详细的解释。
//
[0.x.39102] 
[0.x.39103] 
[0.x.39104] 
[0.x.39105] 
[0.x.39106] 
[0.x.39107] 
[0.x.39108] 
[0.x.39109] 
[0.x.39110] 
//
// 对于输出，我们首先让欧拉算子计算出数值结果的误差。更确切地说，对于分析解的情况，我们计算与分析结果的误差，而对于第二个测试情况，我们计算与密度和能量恒定的背景场以及[2.x.4665]方向的恒定速度的偏差。
//
// 下一步是创建输出。这与[2.x.4666]中的做法类似：我们让上面定义的后处理器控制大部分的输出，除了我们直接写的原始场。对于分析解的测试案例，我们还对分析解进行了另一次投影，并打印出该场和数值解之间的差异。一旦我们定义了所有要写的量，我们就建立输出的补丁。与[2.x.4667]类似，我们通过设置适当的标志来创建一个高阶VTK输出，这使我们能够可视化高多项式度的场。最后，我们调用[2.x.4668]函数，将结果写入给定的文件名。这个函数使用了特殊的MPI并行写设施，与其他大多数教程程序中使用的标准库的[2.x.4669]变体相比，它通常对并行文件系统更加优化。`write_vtu_in_parallel()`函数的一个特别好的特点是，它可以将所有MPI行列的输出合并到一个文件中，使得没有必要有一个所有此类文件的中央记录（即 "pvtu "文件）。
//
// 对于并行程序来说，看一下单元在处理器之间的划分往往是有启发的。为此，我们可以向[2.x.4670]传递一个数字向量，其中包含与当前处理器拥有的活动单元一样多的条目；然后这些数字应该是拥有这些单元的处理器的等级。例如，这样一个向量可以从[2.x.4671]中获得。另一方面，在每个MPI进程中，DataOut将只读取那些对应于本地拥有的单元的条目，这些条目当然都有相同的值：即当前进程的等级。矢量的其余条目中的内容实际上并不重要，因此我们可以用一个廉价的技巧逃脱。我们只是把我们给[2.x.4672]的向量的所有*值都填上当前MPI进程的等级。关键是在每个进程中，只有对应于本地拥有的单元格的条目会被读取，而忽略其他条目中的（错误）值。事实上，每个进程提交的向量中的条目子集是正确的，这就足够了。
//
[0.x.39111] 
[0.x.39112] 
[0.x.39113] 
[0.x.39114] 
[0.x.39115] 
[0.x.39116] 
//
[0.x.39117] 
[0.x.39118] 
[0.x.39119] 
[0.x.39120] 
[0.x.39121] 
[0.x.39122] 
//
[0.x.39123] 
[0.x.39124] 
//
[0.x.39125] 
[0.x.39126] 
//
[0.x.39127] 
[0.x.39128] 
[0.x.39129] 
//
[0.x.39130] 
[0.x.39131] 
[0.x.39132] 
[0.x.39133] 
[0.x.39134] 
[0.x.39135] 
[0.x.39136] 
//
[0.x.39137] 
[0.x.39138] 
[0.x.39139] 
[0.x.39140] 
[0.x.39141] 
[0.x.39142] 
[0.x.39143] 
[0.x.39144] 
[0.x.39145] 
//
[0.x.39146] 
[0.x.39147] 
[0.x.39148] 
//
[0.x.39149] 
[0.x.39150] 
[0.x.39151] 
[0.x.39152] 
[0.x.39153] 
[0.x.39154] 
[0.x.39155] 
[0.x.39156] 
[0.x.39157] 
[0.x.39158] 
[0.x.39159] 
//
[0.x.39160] 
[0.x.39161] 
[0.x.39162] 
[0.x.39163] 
[0.x.39164] 
[0.x.39165] 
[0.x.39166] 
[0.x.39167] 
[0.x.39168] 
//
[0.x.39169] 
[0.x.39170] 
[0.x.39171] 
[0.x.39172] 
[0.x.39173] 
//
[0.x.39174] 
[0.x.39175] 
[0.x.39176] 
//
[0.x.39177] 
[0.x.39178] 
[0.x.39179] 
//
[0.x.39180] 
[0.x.39181] 
[0.x.39182] 
[0.x.39183] 
[0.x.39184] 
//
// [2.x.4673]函数将所有的部分组合起来。它首先调用创建网格和设置数据结构的函数，然后初始化时间积分器和低存储积分器的两个临时向量。我们称这些向量为`rk_register_1`和`rk_register_2`，并使用第一个向量表示[2.x.4674]，第二个向量表示[2.x.4675]，在介绍中概述的Runge--Kutta方案的公式。在我们开始时间循环之前，我们通过[2.x.4676]函数计算时间步长。为了便于比较，我们将那里得到的结果与最小网格尺寸进行比较，并将它们打印到屏幕上。对于像本教程程序中接近于统一的声速和速度，预测的有效网格尺寸将是接近的，但如果缩放比例不同，它们可能会有变化。
//
[0.x.39185] 
[0.x.39186] 
[0.x.39187] 
[0.x.39188] 
[0.x.39189] 
[0.x.39190] 
//
[0.x.39191] 
[0.x.39192] 
[0.x.39193] 
[0.x.39194] 
[0.x.39195] 
[0.x.39196] 
[0.x.39197] 
[0.x.39198] 
[0.x.39199] 
//
[0.x.39200] 
//
[0.x.39201] 
//
[0.x.39202] 
[0.x.39203] 
[0.x.39204] 
[0.x.39205] 
//
[0.x.39206] 
//
[0.x.39207] 
[0.x.39208] 
[0.x.39209] 
[0.x.39210] 
[0.x.39211] 
[0.x.39212] 
[0.x.39213] 
//
[0.x.39214] 
[0.x.39215] 
[0.x.39216] 
[0.x.39217] 
[0.x.39218] 
[0.x.39219] 
[0.x.39220] 
[0.x.39221] 
//
[0.x.39222] 
//
// 现在我们准备开始时间循环，我们一直运行到时间达到预期的结束时间。每隔5个时间步长，我们就计算一个新的时间步长估计值--由于解决方案是非线性的，在模拟过程中调整这个值是最有效的。如果Courant数选择得过于激进，模拟通常会在时间步数为NaN时爆炸，所以在这里很容易发现。有一点需要注意的是，由于不同的时间步长选择的相互作用，四舍五入的误差可能会传播到前几位数，从而导致略有不同的解决方案。为了降低这种敏感性，通常的做法是将时间步长四舍五入或截断到几位数，例如在这种情况下是3。如果当前时间接近规定的输出 "刻度 "值（如0.02），我们也会写出输出。在时间循环结束后，我们通过打印一些统计数据来总结计算，这主要由[2.x.4677]函数完成。
//
[0.x.39223] 
//
[0.x.39224] 
[0.x.39225] 
[0.x.39226] 
[0.x.39227] 
[0.x.39228] 
[0.x.39229] 
[0.x.39230] 
[0.x.39231] 
//
[0.x.39232] 
[0.x.39233] 
[0.x.39234] 
[0.x.39235] 
[0.x.39236] 
[0.x.39237] 
[0.x.39238] 
[0.x.39239] 
[0.x.39240] 
//
[0.x.39241] 
//
[0.x.39242] 
[0.x.39243] 
[0.x.39244] 
[0.x.39245] 
[0.x.39246] 
[0.x.39247] 
//
[0.x.39248] 
[0.x.39249] 
[0.x.39250] 
//
[0.x.39251] 
//
// main()函数并不令人惊讶，它遵循了以前所有MPI程序中的做法。当我们运行一个MPI程序时，我们需要调用`MPI_Init()`和`MPI_Finalize()`，我们通过[2.x.4678]数据结构来完成。请注意，我们只用MPI来运行程序，并将线程数设置为1。
//
[0.x.39252] 
[0.x.39253] 
[0.x.39254] 
[0.x.39255] 
//
[0.x.39256] 
//
[0.x.39257] 
[0.x.39258] 
[0.x.39259] 
//
[0.x.39260] 
[0.x.39261] 
[0.x.39262] 
[0.x.39263] 
[0.x.39264] 
[0.x.39265] 
[0.x.39266] 
[0.x.39267] 
[0.x.39268] 
[0.x.39269] 
[0.x.39270] 
[0.x.39271] 
[0.x.39272] 
[0.x.39273] 
//
[0.x.39274] 
[0.x.39275] 
[0.x.39276] 
[0.x.39277] 
[0.x.39278] 
[0.x.39279] 
[0.x.39280] 
[0.x.39281] 
[0.x.39282] 
[0.x.39283] 
[0.x.39284] 
[0.x.39285] 
[0.x.39286] 
[0.x.39287] 
//
[0.x.39288] 
[0.x.39289] 
[0.x.39290] 
[0.x.39291] 
[0.x.39292] 
[0.x.39293] 
[0.x.39294] 
[0.x.39295] 
[0.x.39296] 
[0.x.39297] 
[0.x.39298] 
[0.x.39299] 
[0.x.39300] 
[0.x.39301] 
[0.x.39302] 
[0.x.39303] 
//
[0.x.39304] 
[0.x.39305] 
[0.x.39306] 
//[2.x.4679] 
[0.x.39307] 
[0.x.39308] 
[0.x.39309] 
[0.x.39310] 
[0.x.39311] 
[0.x.39312] 
//
[0.x.39313] 
[0.x.39314] 
[0.x.39315] 
//
[0.x.39316] 
[0.x.39317] 
//
[0.x.39318] 
[0.x.39319] 
[0.x.39320] 
//
[0.x.39321] 
[0.x.39322] 
//
[0.x.39323] 
[0.x.39324] 
//
[0.x.39325] 
[0.x.39326] 
//
// 从下面的include文件中，我们导入了ParticleHandler类，该类允许你管理漂浮在[2.x.4680]类型的粒子集合（代表具有一些附加属性（例如，一个id）的点集合的对象）。 Particles命名空间中的方法和类允许人们轻松实现Particle-In-Cell方法和分布式三角形上的粒子追踪。
//
[0.x.39327] 
//
// 我们导入粒子发生器，使我们能够插入粒子。在本步骤中，粒子是通过非匹配的超壳三角形全局插入的。
//
[0.x.39328] 
//
// 由于粒子没有形成三角形，它们有自己特定的DataOut类，这将使我们能够把它们写成常用的并行vtu格式（或其他任何数量的文件格式）。
//
[0.x.39329] 
//
[0.x.39330] 
[0.x.39331] 
//
[0.x.39332] 
[0.x.39333] 
[0.x.39334] 
//[2.x.4682] 
//
// 与[2.x.4683]中的做法类似，我们建立了一个持有我们问题的所有参数的类，并从ParameterAcceptor类中派生出来以简化参数文件的管理和创建。
//
// ParameterAcceptor范式要求所有的参数都可以被ParameterAcceptor方法写入。为了避免出现很难追踪的bug（比如写成`if (time = 0)`而不是`if(time == 0)`），我们在一个外部类中声明所有的参数，该类在实际的`ParticleTracking`类之前被初始化，并将其作为`const`引用传递给主类。
//
// 该类的构造函数负责该类的成员与ParameterHandler中的相应条目之间的连接。由于使用了[2.x.4684]方法，这种连接是微不足道的，但要求这个类的所有成员都是可写的。
//
[0.x.39335] 
[0.x.39336] 
[0.x.39337] 
[0.x.39338] 
//
// 该类主要由成员变量组成，描述了粒子跟踪模拟及其离散化的细节。下面的参数是关于输出应该写到哪里，速度的空间离散化（默认是[2.x.4685]），时间步长和输出频率（在我们再次生成图形输出之前应该经过多少时间步长）。
//
[0.x.39339] 
//
[0.x.39340] 
[0.x.39341] 
[0.x.39342] 
[0.x.39343] 
[0.x.39344] 
//
// 我们允许每个网格独立地被细化。在本教程中，流体网格上没有解决物理问题，其速度是通过分析计算得出的。
//
[0.x.39345] 
[0.x.39346] 
[0.x.39347] 

// 还有一个任务就是声明我们在输入文件中可以接受哪些运行时参数。由于我们的参数数量非常有限，所有的参数都在同一章节中声明。
//
[0.x.39348] 
[0.x.39349] 
[0.x.39350] 
[0.x.39351] 
[0.x.39352] 
//
[0.x.39353] 
[0.x.39354] 
[0.x.39355] 
[0.x.39356] 
[0.x.39357] 
//
[0.x.39358] 
[0.x.39359] 
[0.x.39360] 
[0.x.39361] 
[0.x.39362] 
//
[0.x.39363] 
//
[0.x.39364] 
//
[0.x.39365] 
[0.x.39366] 
[0.x.39367] 
[0.x.39368] 
[0.x.39369] 
//
[0.x.39370] 
[0.x.39371] 
[0.x.39372] 
[0.x.39373] 
[0.x.39374] 
//
[0.x.39375] 
[0.x.39376] 
[0.x.39377] 
[0.x.39378] 
[0.x.39379] 
[0.x.39380] 
[0.x.39381] 
//
// [2.x.4686] 
//
// 速度曲线是作为一个函数对象提供的。这个函数在例子中是硬编码的。
//
[0.x.39382] 
[0.x.39383] 
[0.x.39384] 
[0.x.39385] 
[0.x.39386] 
[0.x.39387] 
[0.x.39388] 
//
[0.x.39389] 
[0.x.39390] 
[0.x.39391] 
//
// Rayleigh-Kothe顶点的速度曲线是随时间变化的。因此，必须从函数对象中收集模拟的当前时间（t）。
//
[0.x.39392] 
[0.x.39393] 
[0.x.39394] 
[0.x.39395] 
[0.x.39396] 
[0.x.39397] 
//
[0.x.39398] 
[0.x.39399] 
[0.x.39400] 
//
[0.x.39401] 
[0.x.39402] 
[0.x.39403] 
[0.x.39404] 
[0.x.39405] 
[0.x.39406] 
[0.x.39407] 
//
// [2.x.4687] 
//
// 我们现在准备介绍我们的教程程序的主类。
//
[0.x.39408] 
[0.x.39409] 
[0.x.39410] 
[0.x.39411] 
[0.x.39412] 
[0.x.39413] 
[0.x.39414] 
//
[0.x.39415] 
//
// 这个函数负责在背景网格之上初始生成粒子。
//
[0.x.39416] 
//
// 当速度曲线被内插到粒子的位置时，必须首先使用自由度来存储。因此，和其他并行情况一样（例如[2.x.4688]），我们在背景网格上初始化自由度。
//
[0.x.39417] 
//
// 在其中一个测试案例中，该函数被映射到背景网格上，并使用有限元插值来计算粒子位置的速度。这个函数计算三角形的支持点处的函数值。
//
[0.x.39418] 
//
// 下面两个函数分别负责对速度场在粒子位置插值或分析计算的情况下进行显式欧拉时间积分的步骤。
//
[0.x.39419] 
[0.x.39420] 
//
// `cell_weight()`函数向三角计算表明在这个单元上预计会发生多少计算工作，因此需要对域进行划分，以使每个MPI等级得到大致相等的工作量（可能不是相等的单元数量）。虽然该函数是从外部调用的，但它与该类内部的相应信号相连，因此它可以是 "私有 "的。
//
[0.x.39421] 
[0.x.39422] 
[0.x.39423] 
[0.x.39424] 
[0.x.39425] 
//
// 以下两个函数分别负责输出粒子的模拟结果和背景网格上的速度曲线。
//
[0.x.39426] 
[0.x.39427] 
//
// 该类的私有成员与其他并行deal.II例子相似。参数被存储为`const`成员。值得注意的是，我们保留了`Vortex`类的成员，因为它的时间必须随着模拟的进行而被修改。
//
[0.x.39428] 
//
[0.x.39429] 
[0.x.39430] 
[0.x.39431] 
//
[0.x.39432] 
[0.x.39433] 
[0.x.39434] 
[0.x.39435] 
//
[0.x.39436] 
//
[0.x.39437] 
//
[0.x.39438] 
[0.x.39439] 
//
// [2.x.4689] 
//[2.x.4690] 
//
// 构造函数和析构函数是相当微不足道的。它们与 [2.x.4691] 中的做法非常相似。我们将我们要工作的处理器设置为所有可用的机器（`MPI_COMM_WORLD`），并初始化 [2.x.4692] 变量，只允许处理器0输出任何东西到标准输出。
//
[0.x.39440] 
[0.x.39441] 
[0.x.39442] 
[0.x.39443] 
[0.x.39444] 
[0.x.39445] 
[0.x.39446] 
[0.x.39447] 
[0.x.39448] 
[0.x.39449] 
//
[0.x.39450] 
//
// [2.x.4693] 
//
// 这个函数是让我们动态平衡本例中计算负载的关键部分。该函数为每个单元赋予一个权重，代表该单元的计算工作。在这里，大部分的工作预计会发生在粒子上，因此这个函数的返回值（代表 "这个单元的工作"）是根据当前单元中的粒子数量来计算。该函数与三角形内部的cell_weight()信号相连，每一个单元将被调用一次，每当三角形在等级之间重新划分领域时（该连接是在该类的generate_particles()函数中创建的）。
//
[0.x.39451] 
[0.x.39452] 
[0.x.39453] 
[0.x.39454] 
[0.x.39455] 
[0.x.39456] 
[0.x.39457] 
//
// 我们不给我们不拥有的细胞分配任何权重（即人工或幽灵细胞）。
//
[0.x.39458] 
[0.x.39459] 
//
// 这决定了粒子工作与细胞工作相比有多重要（默认情况下每个细胞的权重为1000）。我们将每个粒子的权重设置得更高，以表明在这个例子中，粒子的负载是唯一对分配单元很重要的。这个数字的最佳值取决于应用，可以从0（廉价的粒子操作，昂贵的单元操作）到远远大于1000（昂贵的粒子操作，廉价的单元操作，像本例中假定的那样）。
//
[0.x.39460] 
//
// 这个例子没有使用自适应细化，因此每个单元都应该有`CELL_PERSIST`的状态。然而这个函数也可以用来在细化过程中分配负载，因此我们也考虑细化或粗化的单元。
//
[0.x.39461] 
[0.x.39462] 
[0.x.39463] 
[0.x.39464] 
[0.x.39465] 
[0.x.39466] 
[0.x.39467] 
[0.x.39468] 
[0.x.39469] 
[0.x.39470] 
//
[0.x.39471] 
[0.x.39472] 
[0.x.39473] 
[0.x.39474] 
//
[0.x.39475] 
[0.x.39476] 
//
[0.x.39477] 
[0.x.39478] 
[0.x.39479] 
//
// [2.x.4694] 
//
// 这个函数生成示踪粒子和这些粒子演化的背景三角图。
//
[0.x.39480] 
[0.x.39481] 
[0.x.39482] 
//
// 我们创建一个超立方体三角形，并对其进行全局细化。这个三角形覆盖了粒子的全部运动轨迹。
//
[0.x.39483] 
[0.x.39484] 
//
// 为了在重新划分三角形时考虑粒子，该算法需要知道三件事。
//
// 1.给每个单元分配多少权重（里面有多少粒子）；2.在运送数据之前如何包装粒子；3.在重新分区之后如何拆开粒子。
//
// 我们将正确的函数附加到信号里面 [2.x.4695] 这些信号将在每次调用repartition()函数时被调用。这些连接只需要创建一次，所以我们不妨在这个类的构造函数中设置它们，但为了这个例子，我们要把粒子相关的指令分组。
//
[0.x.39485] 
[0.x.39486] 
[0.x.39487] 
[0.x.39488] 
[0.x.39489] 
[0.x.39490] 
//
[0.x.39491] 
[0.x.39492] 
//
[0.x.39493] 
[0.x.39494] 
//
// 这将初始化粒子所处的背景三角，以及粒子的属性数量。
//
[0.x.39495] 
//
// 我们创建了一个粒子三角图，这个三角图只用来生成将用于插入粒子的点。这个三角形是一个偏离模拟域中心的超壳。这将被用来生成一个充满粒子的圆盘，这将使我们能够很容易地监测由于涡流而产生的运动。
//
[0.x.39496] 
[0.x.39497] 
[0.x.39498] 
[0.x.39499] 
[0.x.39500] 
//
[0.x.39501] 
[0.x.39502] 
//
[0.x.39503] 
[0.x.39504] 
//
[0.x.39505] 
[0.x.39506] 
[0.x.39507] 
//
// 我们为粒子发生器生成必要的边界盒。这些边界框是快速识别插入的粒子位于哪个进程的子域中，以及哪个单元拥有它的必要条件。
//
[0.x.39508] 
[0.x.39509] 
[0.x.39510] 
[0.x.39511] 
//
// 我们生成一个空的属性向量。一旦粒子生成，我们将把这些属性赋予它们。
//
[0.x.39512] 
[0.x.39513] 
[0.x.39514] 
//
// 我们在单点正交的位置生成粒子。因此，在每个单元的中心点将生成一个粒子。
//
[0.x.39515] 
[0.x.39516] 
[0.x.39517] 
[0.x.39518] 
[0.x.39519] 
[0.x.39520] 
//
[0.x.39521] 
[0.x.39522] 
[0.x.39523] 
//
// [2.x.4696] 
//
// 这个函数设置了用于速度插值的背景自由度，并分配了存储整个速度场解决方案的场向量。
//
[0.x.39524] 
[0.x.39525] 
[0.x.39526] 
[0.x.39527] 
[0.x.39528] 
[0.x.39529] 
[0.x.39530] 
//
[0.x.39531] 
[0.x.39532] 
[0.x.39533] 
[0.x.39534] 
//
// 这个函数负责将涡流速度场插值到场矢量上。这可以通过使用[2.x.4697]函数相当容易地实现。
//
[0.x.39535] 
[0.x.39536] 
[0.x.39537] 
[0.x.39538] 
[0.x.39539] 
[0.x.39540] 
[0.x.39541] 
//
// [2.x.4698] 
//
// 我们使用分析定义的速度场来整合粒子的轨迹。这展示了粒子的一个相对微不足道的用法。
//
[0.x.39542] 
[0.x.39543] 
[0.x.39544] 
[0.x.39545] 
[0.x.39546] 
[0.x.39547] 
//
// 使用粒子迭代器在域中的所有粒子上进行循环操作
//
[0.x.39548] 
[0.x.39549] 
//
// 我们使用粒子的当前位置来计算它们的速度。
//
[0.x.39550] 
[0.x.39551] 
//
// 这就更新了粒子的位置，并将旧的位置设定为等于粒子的新位置。
//
[0.x.39552] 
[0.x.39553] 
//
[0.x.39554] 
//
// 我们在粒子属性中存储处理器ID（标量）和粒子速度（矢量）。在这个例子中，这样做纯粹是为了可视化的目的。
//
[0.x.39555] 
[0.x.39556] 
[0.x.39557] 
[0.x.39558] 
[0.x.39559] 
[0.x.39560] 
//
// 与前面的函数不同，在这个函数中，我们通过将自由度处的速度场值插值到粒子的位置来积分粒子的轨迹。
//
[0.x.39561] 
[0.x.39562] 
[0.x.39563] 
[0.x.39564] 
//
// 我们在所有的本地粒子上循环。虽然这可以直接通过循环所有的单元格来实现，但这将迫使我们循环许多不包含粒子的单元格。相反，我们在所有的粒子上循环，但是，我们得到粒子所在的单元格的引用，然后在该单元格中循环所有的粒子。这使我们能够从 "velocity_field "向量中收集一次速度值，并将其用于该单元中的所有粒子。
//
[0.x.39565] 
[0.x.39566] 
[0.x.39567] 
[0.x.39568] 
[0.x.39569] 
[0.x.39570] 
[0.x.39571] 
//
[0.x.39572] 
//
// 接下来，通过评估粒子位置的有限元解来计算粒子位置的速度。这基本上是第19步中粒子平流功能的优化版本，但我们不是为每个单元创建正交对象和FEValues对象，而是用手进行评估，这在一定程度上更有效率，而且只对本教程有意义，因为粒子工作是整个程序的主要成本。
//
[0.x.39573] 
[0.x.39574] 
[0.x.39575] 
[0.x.39576] 
[0.x.39577] 
[0.x.39578] 
[0.x.39579] 
[0.x.39580] 
[0.x.39581] 
//
[0.x.39582] 
[0.x.39583] 
[0.x.39584] 
[0.x.39585] 
//
[0.x.39586] 
[0.x.39587] 
[0.x.39588] 
[0.x.39589] 
//
// 同样，我们在粒子属性中存储了粒子速度和处理器ID，以便于可视化。
//
[0.x.39590] 
[0.x.39591] 
[0.x.39592] 
//
[0.x.39593] 
[0.x.39594] 
//
[0.x.39595] 
[0.x.39596] 
[0.x.39597] 
[0.x.39598] 
//
// [2.x.4699] 
//
// 接下来的两个函数负责将粒子和背景网格用pvtu记录写入vtu中。这可以确保在并行启动仿真时，仿真结果可以被可视化。
//
[0.x.39599] 
[0.x.39600] 
[0.x.39601] 
[0.x.39602] 
//
[0.x.39603] 
[0.x.39604] 
//
[0.x.39605] 
[0.x.39606] 
[0.x.39607] 
[0.x.39608] 
[0.x.39609] 
//
[0.x.39610] 
[0.x.39611] 
[0.x.39612] 
[0.x.39613] 
[0.x.39614] 
[0.x.39615] 
[0.x.39616] 
//
[0.x.39617] 
[0.x.39618] 
//
[0.x.39619] 
[0.x.39620] 
[0.x.39621] 
//
[0.x.39622] 
[0.x.39623] 
[0.x.39624] 
[0.x.39625] 
[0.x.39626] 
[0.x.39627] 
[0.x.39628] 
//
[0.x.39629] 
//
// 将解决方案的数据附加到data_out对象上
//
[0.x.39630] 
[0.x.39631] 
[0.x.39632] 
[0.x.39633] 
[0.x.39634] 
[0.x.39635] 
[0.x.39636] 
[0.x.39637] 
[0.x.39638] 
//
[0.x.39639] 
//
[0.x.39640] 
[0.x.39641] 
//
[0.x.39642] 
[0.x.39643] 
//
[0.x.39644] 
[0.x.39645] 
[0.x.39646] 
//
// [2.x.4700] 这个函数协调了整个模拟过程。它与其他时间相关的教程程序非常相似--以[2.x.4701]或[2.x.4702]为例。注意，我们使用DiscreteTime类来监控时间、时间步长和[2.x.4703]号。这个函数相对来说是比较简单的。
//
[0.x.39647] 
[0.x.39648] 
[0.x.39649] 
[0.x.39650] 
//
[0.x.39651] 
//
[0.x.39652] 
[0.x.39653] 
[0.x.39654] 
//
// 我们通过在分析法和插值法的情况下进行时间步长为0的显式欧拉迭代来设置粒子的初始属性。
//
[0.x.39655] 
[0.x.39656] 
[0.x.39657] 
[0.x.39658] 
[0.x.39659] 
[0.x.39660] 
[0.x.39661] 
[0.x.39662] 
//
[0.x.39663] 
[0.x.39664] 
[0.x.39665] 
//
// 粒子通过循环的方式随时间推移而平移。
//
[0.x.39666] 
[0.x.39667] 
[0.x.39668] 
[0.x.39669] 
//
[0.x.39670] 
[0.x.39671] 
[0.x.39672] 
[0.x.39673] 
[0.x.39674] 
[0.x.39675] 
//
[0.x.39676] 
[0.x.39677] 
[0.x.39678] 
[0.x.39679] 
[0.x.39680] 
[0.x.39681] 
[0.x.39682] 
//
// 在粒子被移动之后，有必要确定它们现在所在的单元。这可以通过调用[2.x.4704]来实现。
[0.x.39683] 
//
[0.x.39684] 
[0.x.39685] 
[0.x.39686] 
[0.x.39687] 
[0.x.39688] 
[0.x.39689] 
[0.x.39690] 
[0.x.39691] 
//
[0.x.39692] 
//
// [2.x.4705] 
//
// 代码的其余部分，即`main()`函数，是标准的。我们注意到，我们用分析速度和插值速度运行粒子跟踪，并产生两种结果
//
[0.x.39693] 
[0.x.39694] 
[0.x.39695] 
[0.x.39696] 
[0.x.39697] 
//
[0.x.39698] 
[0.x.39699] 
[0.x.39700] 
//
[0.x.39701] 
[0.x.39702] 
[0.x.39703] 
[0.x.39704] 
[0.x.39705] 
//
[0.x.39706] 
[0.x.39707] 
[0.x.39708] 
[0.x.39709] 
[0.x.39710] 
[0.x.39711] 
[0.x.39712] 
[0.x.39713] 
[0.x.39714] 
[0.x.39715] 
[0.x.39716] 
[0.x.39717] 
[0.x.39718] 
[0.x.39719] 
[0.x.39720] 
[0.x.39721] 
[0.x.39722] 
[0.x.39723] 
[0.x.39724] 
[0.x.39725] 
[0.x.39726] 
[0.x.39727] 
//
[0.x.39728] 
[0.x.39729] 
[0.x.39730] 
[0.x.39731] 
[0.x.39732] 
[0.x.39733] 
[0.x.39734] 
[0.x.39735] 
[0.x.39736] 
[0.x.39737] 
[0.x.39738] 
[0.x.39739] 
[0.x.39740] 
[0.x.39741] 
//
[0.x.39742] 
[0.x.39743] 
[0.x.39744] 
[0.x.39745] 
[0.x.39746] 
[0.x.39747] 
[0.x.39748] 
[0.x.39749] 
[0.x.39750] 
[0.x.39751] 
[0.x.39752] 
[0.x.39753] 
[0.x.39754] 
[0.x.39755] 
[0.x.39756] 
[0.x.39757] 
//
[0.x.39758] 
[0.x.39759] 
[0.x.39760] 
[0.x.39761] 
[0.x.39762] 
[0.x.39763] 
[0.x.39764] 
[0.x.39765] 
[0.x.39766] 
[0.x.39767] 
[0.x.39768] 
[0.x.39769] 
[0.x.39770] 
//[2.x.4706] 
//
// 包含文件的集合是相当标准的。最耐人寻味的部分是，我们将完全依靠deal.II数据结构进行MPI并行化，特别是通过[2.x.4707]和[2.x.4708]包含的[2.x.4709]和[2.x.4710] 。我们将使用非分布式的 [2.x.4711] ( [2.x.4712] ) 来存储 [2.x.4713] 、 [2.x.4714] 和 [2.x.4715] 矩阵的本地部分，而不是 Trilinos 或 PETSc 特定的矩阵类。
//
[0.x.39771] 
[0.x.39772] 
[0.x.39773] 
[0.x.39774] 
[0.x.39775] 
[0.x.39776] 
[0.x.39777] 
//
[0.x.39778] 
//
[0.x.39779] 
[0.x.39780] 
[0.x.39781] 
//
[0.x.39782] 
[0.x.39783] 
[0.x.39784] 
[0.x.39785] 
[0.x.39786] 
//
[0.x.39787] 
[0.x.39788] 
//
[0.x.39789] 
[0.x.39790] 
[0.x.39791] 
[0.x.39792] 
[0.x.39793] 
//
[0.x.39794] 
//
[0.x.39795] 
[0.x.39796] 
//
// 除了上述deal.II的具体内容外，我们还包括四个提升头文件。前两个是二进制文件，我们将用它来实现检查点和重启机制。
//
[0.x.39797] 
[0.x.39798] 
//
// 最后两个头文件是用来在整数间隔上创建自定义迭代器范围。
//
[0.x.39799] 
[0.x.39800] 
//
//用于 [2.x.4716] 。
//[2.x.4717] 
//[2.x.4718] 
//[2.x.4719]和[2.x.4720] 。
[0.x.39801] 
[0.x.39802] 
[0.x.39803] 
//[2.x.4721] 
//
// 我们开始实际的实现，先声明所有的类及其数据结构和方法。与之前的例子步骤相比，我们使用了更精细的概念、数据结构和参数封装到各个类中。因此，一个单一的类通常围绕着一个单一的数据结构（如[2.x.4722]类中的Triangulation），或者一个单一的方法（如[2.x.4724]类的[2.x.4723]函数）。我们通常声明参数变量和从头开始的数据对象为`private'，而使其他类使用的方法和数据结构为`public'。
//
// [2.x.4725] 一个更简洁的方法是通过[1.x.134]来保护对所有数据结构的访问。为了简洁起见，我们不采用这种方法。
//
// 我们还注意到，绝大多数的类都是从ParameterAcceptor派生的。这有利于将所有的全局参数归入一个（全局）ParameterHandler。关于从ParameterAcceptor继承作为全局订阅机制的更多解释可以在 [2.x.4726] 中找到。
//
[0.x.39804] 
[0.x.39805] 
[0.x.39806] 
//
// 我们首先定义一些[2.x.4727]常量，用于整个教程步骤。这使得我们可以用一个助记符（如[2.x.4728] ）而不是一个数值来指代边界类型。
//
[0.x.39807] 
[0.x.39808] 
[0.x.39809] 
[0.x.39810] 
[0.x.39811] 
[0.x.39812] 
//[2.x.4729] 
//
// [2.x.4730]类包含所有关于问题的网格（三角形）和离散化（映射、有限元、正交）的数据结构。如前所述，我们使用ParameterAcceptor类来自动填充特定问题的参数，如几何信息（[2.x.4731] 等）或来自参数文件的细化水平（[2.x.4732] ）。这就要求我们把数据结构的初始化分成两个函数。我们在构造函数中初始化所有不依赖参数的东西，并将网格的创建推迟到[2.x.4733]方法中，一旦所有参数通过[2.x.4734]读入，就可以调用该方法。
[0.x.39813] 
[0.x.39814] 
[0.x.39815] 
[0.x.39816] 
[0.x.39817] 
[0.x.39818] 
[0.x.39819] 
//
[0.x.39820] 
//
[0.x.39821] 
//
[0.x.39822] 
//
[0.x.39823] 
[0.x.39824] 
[0.x.39825] 
[0.x.39826] 
//
[0.x.39827] 
[0.x.39828] 
//
[0.x.39829] 
[0.x.39830] 
[0.x.39831] 
[0.x.39832] 
//
[0.x.39833] 
[0.x.39834] 
//[2.x.4735] 
//
// [2.x.4736]类包含了离散化中几乎所有不随时间演变的组件，特别是DoFHandler、SparsityPattern、边界图、块状质量矩阵、[2.x.4737]和[2.x.4738]矩阵。这里，术语[1.x.135]指的是[2.x.4739]的所有类成员都有明确定义的值，与当前时间步长无关。这意味着它们可以提前初始化（在[1.x.136]），并且不意味着在任何后来的时间步长中被修改。例如，稀疏模式不应该随着时间的推进而改变（我们在空间上不做任何形式的适应性）。同样地，包络质量矩阵的条目也不应该随着时间的推进而被修改。
//
// 我们还计算并存储一个[2.x.4740]，它包含一个从边界自由度的[2.x.4741]类型的全局索引到一个由法向量、边界ID和与自由度相关的位置组成的元组的映射。我们必须在这个类中计算和存储这些几何信息，因为我们在后面的代数循环中无法获得几何（或基于单元）的信息。
//
// 尽管这个类目前没有任何可以从参数文件中读入的参数，但我们还是从ParameterAcceptor派生出来，并遵循与Discretization类相同的习惯，提供一个[2.x.4743] )方法。
//
[0.x.39835] 
[0.x.39836] 
[0.x.39837] 
[0.x.39838] 
[0.x.39839] 
[0.x.39840] 
[0.x.39841] 
//
[0.x.39842] 
[0.x.39843] 
[0.x.39844] 
[0.x.39845] 
//
[0.x.39846] 
[0.x.39847] 
//
[0.x.39848] 
//
[0.x.39849] 
//
[0.x.39850] 
[0.x.39851] 
//
[0.x.39852] 
//
[0.x.39853] 
//
[0.x.39854] 
[0.x.39855] 
[0.x.39856] 
[0.x.39857] 
//
[0.x.39858] 
[0.x.39859] 
[0.x.39860] 
//
[0.x.39861] 
[0.x.39862] 
//[2.x.4744] 
//
// 该类的成员函数是欧拉方程特有的实用函数和数据结构。
//
// - 类型别名[2.x.4745]用于状态[2.x.4746] 。
//
// - 类型别名 [2.x.4747] 用来表示通量 [2.x.4748] 。
//
// - [2.x.4749]函数从状态向量[2.x.4751]中提取[2.x.4750]并存储在一个[2.x.4752]中。
//
// - [2.x.4753]函数从给定的状态向量[2.x.4755]中计算[2.x.4754] 。
//
// 类成员 [2.x.4756] , [2.x.4757] 的目的从它们的名字中就可以看出。我们还提供了一个函数 [2.x.4758] ，用于计算上面提到的波速估计， [2.x.4759] ，用于计算 [2.x.4760] 矩阵。
//
// [2.x.4761] [2.x.4762]宏扩展为一个（编译器特定的）pragma，确保这个类中定义的相应函数总是内联的，也就是说，每次调用该函数时，函数体都被放在原位，而不会产生调用（和代码转接）。这比[2.x.4763]关键字要强，后者或多或少是对编译器的一个（温和的）建议，即程序员认为内联函数是有益的。 [2.x.4764]只应在很少的情况下谨慎使用，比如在这种情况下，我们实际上知道（由于基准测试）内联有关的函数可以提高性能。
//
// 最后，我们注意到这是本教程步骤中唯一一个与特定的 "物理学 "或 "双曲守恒定律"（本例中为欧拉方程）相关的类。所有其他的类主要是 "离散化 "类，与所求解的特定物理学无关。
//
[0.x.39863] 
[0.x.39864] 
[0.x.39865] 
[0.x.39866] 
[0.x.39867] 
//
[0.x.39868] 
[0.x.39869] 
//
[0.x.39870] 
//
[0.x.39871] 
//
[0.x.39872] 
[0.x.39873] 
//
[0.x.39874] 
[0.x.39875] 
//
[0.x.39876] 
//
[0.x.39877] 
[0.x.39878] 
//
[0.x.39879] 
//
[0.x.39880] 
[0.x.39881] 
[0.x.39882] 
[0.x.39883] 
[0.x.39884] 
//[2.x.4765] 
//
// [2.x.4766]类的唯一公共数据属性是一个[2.x.4767]。
//[2.x.4768]，用于计算给定的点和时间的初始状态。这个函数用于填充初始流场，以及在每个时间步长中明确设置迪里切特边界条件（在流入边界）。
//
// 在这个例子的步骤中，我们简单地实现了一个均匀的流场，其方向和一维原始状态（密度、速度、压力）从参数文件中读取。
//
// 最好是一次性初始化这个类：初始化/设置参数并定义依赖于这些默认参数的类成员。然而，由于我们不知道参数的实际值，这在一般情况下是毫无意义和不安全的（我们希望有机制来检查输入参数的一致性）。我们没有定义另一个[2.x.4769]方法在调用[2.x.4770]后被调用（手动），而是为类成员[2.x.4771]提供了一个 "实现"，当调用[2.x.4772]时，每个继承自ParameterAceptor的类都会自动调用。
//
[0.x.39885] 
[0.x.39886] 
[0.x.39887] 
[0.x.39888] 
[0.x.39889] 
//
[0.x.39890] 
//
[0.x.39891] 
//
[0.x.39892] 
//
// 我们声明一个私有的回调函数，它将与[2.x.4773]信号相连接。
//
[0.x.39893] 
//
[0.x.39894] 
[0.x.39895] 
[0.x.39896] 
//[2.x.4774] 
//
// 有了[2.x.4775]类在手，我们现在可以实现上面讨论中介绍的显式时间步进方案。[2.x.4776]类的主要方法是<code>make_one_step(vector_type &U, double t)</code>，它接受对状态向量[2.x.4777]的引用（作为输入参数）计算更新的解决方案，将其存储在向量[2.x.4778]中，并返回选择的[2.x.4779]大小[2.x.4780] 。
//
// 另一个重要的方法是 [2.x.4781] ，主要是为临时向量 [2.x.4782] 分别设置适当的分区和稀疏模式。
//
[0.x.39897] 
[0.x.39898] 
[0.x.39899] 
[0.x.39900] 
[0.x.39901] 
[0.x.39902] 
//
[0.x.39903] 
[0.x.39904] 
//
[0.x.39905] 
[0.x.39906] 
//
[0.x.39907] 
[0.x.39908] 
[0.x.39909] 
[0.x.39910] 
[0.x.39911] 
//
[0.x.39912] 
//
[0.x.39913] 
//
[0.x.39914] 
[0.x.39915] 
[0.x.39916] 
//
[0.x.39917] 
[0.x.39918] 
//
[0.x.39919] 
//
[0.x.39920] 
//
[0.x.39921] 
[0.x.39922] 
//[2.x.4783] 
//
// 在其核心中，Schlieren类实现了类成员 [2.x.4784] 。这个类成员的主要目的是计算一个辅助的有限元场[2.x.4785] ，它在每个节点上由[1.x.137]定义，其中[2.x.4786]原则上可以是任何标量。但在实践中，密度是一个自然的候选量，即[2.x.4787] 。[1.x.138]后处理是一种标准的方法，用于增强可视化的对比度，其灵感来自实际的实验X射线和可视化的阴影技术。(参见 [2.x.4788] 另一个例子，我们创建了一个Schlieren图。)
//
[0.x.39923] 
[0.x.39924] 
[0.x.39925] 
[0.x.39926] 
[0.x.39927] 
[0.x.39928] 
//
[0.x.39929] 
//
[0.x.39930] 
[0.x.39931] 
//
[0.x.39932] 
[0.x.39933] 
[0.x.39934] 
[0.x.39935] 
[0.x.39936] 
//
[0.x.39937] 
//
[0.x.39938] 
//
[0.x.39939] 
//
[0.x.39940] 
[0.x.39941] 
[0.x.39942] 
//
[0.x.39943] 
//
[0.x.39944] 
//
[0.x.39945] 
[0.x.39946] 
[0.x.39947] 
//[2.x.4789] 
//
// 现在，剩下的就是把[2.x.4790] , 和 [2.x.4791] 类中实现的方法连在一起。我们在一个单独的类[2.x.4792]中做到这一点，该类包含每个类的一个对象，并在ParameterAcceptor类的帮助下再次读入一些参数。
//
[0.x.39948] 
[0.x.39949] 
[0.x.39950] 
[0.x.39951] 
[0.x.39952] 
//
[0.x.39953] 
//
[0.x.39954] 
//
[0.x.39955] 
[0.x.39956] 
//
[0.x.39957] 
[0.x.39958] 
[0.x.39959] 
[0.x.39960] 
[0.x.39961] 
//
[0.x.39962] 
[0.x.39963] 
[0.x.39964] 
//
[0.x.39965] 
//
[0.x.39966] 
[0.x.39967] 
[0.x.39968] 
//
[0.x.39969] 
//
[0.x.39970] 
//
[0.x.39971] 
[0.x.39972] 
[0.x.39973] 
[0.x.39974] 
[0.x.39975] 
//
[0.x.39976] 
//
[0.x.39977] 
[0.x.39978] 
//[2.x.4793] 
//[2.x.4794] 
//
// 手头的第一个主要任务是典型的网格生成、数据结构的设置和装配这三者。在这个例子的步骤中，一个值得注意的创新是使用ParameterAcceptor类，我们用它来填充参数值：我们首先初始化ParameterAcceptor类，用一个字符串[2.x.4795]表示参数文件中的正确分节，调用它的构造器。然后，在构造函数中，每个参数值都被初始化为一个合理的默认值，并通过调用[2.x.4796]向ParameterAcceptor类注册。
[0.x.39979] 
[0.x.39980] 
[0.x.39981] 
[0.x.39982] 
[0.x.39983] 
[0.x.39984] 
[0.x.39985] 
[0.x.39986] 
[0.x.39987] 
[0.x.39988] 
[0.x.39989] 
[0.x.39990] 
[0.x.39991] 
[0.x.39992] 
[0.x.39993] 
//
[0.x.39994] 
[0.x.39995] 
//
[0.x.39996] 
[0.x.39997] 
[0.x.39998] 
[0.x.39999] 
//
[0.x.40000] 
[0.x.40001] 
[0.x.40002] 
[0.x.40003] 
//
[0.x.40004] 
[0.x.40005] 
[0.x.40006] 
[0.x.40007] 
[0.x.40008] 
//
// 注意在前面的构造函数中，我们只把MPI通信器传给了[2.x.4797]，但我们仍然没有初始化底层几何体/网格。如前所述，我们必须将这项任务推迟到[2.x.4798]函数，在[2.x.4799]函数用从参数文件中读取的最终值填充所有参数变量后，再调用该函数。
//
// [2.x.4800]函数是最后一个必须实现的类成员。它创建了实际的三角结构，这是一个基准配置，由一个带有盘状障碍物的通道组成，见 [2.x.4801] 。我们通过修改[2.x.4802]生成的网格来构建几何体。我们参考[2.x.4803]、[2.x.4804]和[2.x.4805]来了解如何创建高级网格。我们首先创建4个临时的（非分布式的）粗略三角形，用[2.x.4806]函数将其缝合起来。我们在[2.x.4807]处将圆盘居中，直径为[2.x.4808] 。通道的左下角有坐标（ [2.x.4809] ），右上角有（ [2.x.4810] , [2.x.4811] ）。
//
[0.x.40009] 
[0.x.40010] 
[0.x.40011] 
[0.x.40012] 
//
[0.x.40013] 
//
[0.x.40014] 
//
[0.x.40015] 
[0.x.40016] 
//
[0.x.40017] 
[0.x.40018] 
[0.x.40019] 
[0.x.40020] 
[0.x.40021] 
//
[0.x.40022] 
[0.x.40023] 
[0.x.40024] 
[0.x.40025] 
[0.x.40026] 
//
[0.x.40027] 
[0.x.40028] 
[0.x.40029] 
[0.x.40030] 
[0.x.40031] 
//
[0.x.40032] 
[0.x.40033] 
[0.x.40034] 
[0.x.40035] 
[0.x.40036] 
//
[0.x.40037] 
[0.x.40038] 
[0.x.40039] 
[0.x.40040] 
[0.x.40041] 
//
[0.x.40042] 
[0.x.40043] 
[0.x.40044] 
[0.x.40045] 
[0.x.40046] 
//
[0.x.40047] 
//
// 我们必须修复目前位于[2.x.4812]的左边缘。
//[2.x.4813]，必须移到[2.x.4814]。
//[2.x.4815] . 作为最后一步，边界必须被着色，右边是[2.x.4816]，[2.x.4817]是上、下外边界和障碍物。
//
[0.x.40048] 
[0.x.40049] 
[0.x.40050] 
[0.x.40051] 
[0.x.40052] 
[0.x.40053] 
[0.x.40054] 
[0.x.40055] 
//
[0.x.40056] 
[0.x.40057] 
[0.x.40058] 
[0.x.40059] 
[0.x.40060] 
//
[0.x.40061] 
[0.x.40062] 
[0.x.40063] 
//
[0.x.40064] 
[0.x.40065] 
[0.x.40066] 
[0.x.40067] 
[0.x.40068] 
[0.x.40069] 
[0.x.40070] 
[0.x.40071] 
[0.x.40072] 
//
[0.x.40073] 
[0.x.40074] 
//[2.x.4818] 

// 在[2.x.4819]的构造函数中，除了在初始化列表中初始化相应的类成员外，没有做太多的工作。
//
[0.x.40075] 
[0.x.40076] 
[0.x.40077] 
[0.x.40078] 
[0.x.40079] 
[0.x.40080] 
[0.x.40081] 
[0.x.40082] 
[0.x.40083] 
[0.x.40084] 
[0.x.40085] 
//
// 现在我们可以初始化DoFHandler，为本地拥有的和本地相关的DOF提取IndexSet对象，并初始化一个[2.x.4820]对象，这是分布式向量需要的。
//
[0.x.40086] 
[0.x.40087] 
[0.x.40088] 
[0.x.40089] 
[0.x.40090] 
//
[0.x.40091] 
[0.x.40092] 
[0.x.40093] 
//
[0.x.40094] 
//
[0.x.40095] 
[0.x.40096] 
//
[0.x.40097] 
[0.x.40098] 
//
[0.x.40099] 
[0.x.40100] 
[0.x.40101] 
[0.x.40102] 
[0.x.40103] 
//[2.x.4821] 
//
// 我们现在可以为我们的矩阵创建稀疏模式了。有相当多的特殊性需要详细解释。我们避免使用分布式矩阵类（例如由Trilinos或PETSc提供的），而是依靠deal.II自己的SparseMatrix对象来存储所有矩阵的局部部分。这一设计决定的动机是：(a)我们实际上从未进行过矩阵-向量乘法，(b)我们总是可以在一个给定的MPI等级上专门组装矩阵的局部部分。相反，我们将计算非线性更新，同时迭代连通性模版的（局部）部分；这是deal.II自己的SparsityPattern专门为之优化的任务。
//
// 不过，这种设计考虑有一个注意事项。让deal.II SparseMatrix类变得快速的是SparsityPattern中使用的[1.x.139]（见[2.x.4822] ）。不幸的是，这与全局分布式索引范围不相称，因为具有CSR的稀疏模式不能在索引范围内包含 "洞"。deal.II提供的分布式矩阵通过将全局索引范围转化为连续的局部索引范围来避免这一点。但这正是我们在迭代模版时想要避免的索引操作类型，因为它产生了可衡量的开销。
//
// [2.x.4823]类已经实现了从全局索引范围到连续的局部（每个MPI等级）索引范围的转换：我们不需要重新发明轮子。我们只需要使用这种转换能力（一次，而且只有一次），以便为连续的索引范围创建一个 "本地 "稀疏模式 [2.x.4824] 。
//[2.x.4825] 
//[2.x.4826] . 这种能力可以通过[2.x.4827]函数来调用。一旦使用本地索引创建了稀疏模式，剩下要做的就是确保（在实现我们的scatter和gather辅助函数时）我们总是通过调用[2.x.4828]来访问分布式向量的元素，这样我们就完全避免了索引转换，并完全使用本地索引进行操作。
//
[0.x.40104] 
[0.x.40105] 
[0.x.40106] 
[0.x.40107] 
//
// 我们必须手工创建 "本地 "稀疏模式。因此，我们在所有本地拥有的和重影的单元上循环（见 [2.x.4829] GlossArtificialCell），并提取与单元DOF相关的（全局） [2.x.4830] ，并使用 [2.x.4831] 重新编号。
//
// 在本地拥有的DOF的情况下，这种重新编号包括应用一个移位（即我们减去一个偏移量），这样，现在它们将成为整数区间[2.x.4833]中的一个数字。
//[2.x.4834] 
//[2.x.4835] . 然而，在重影道次的情况下（即不是本地拥有的），情况就完全不同了，因为与重影道次相关的全局指数（一般来说）不会是一个连续的整数集。
//
[0.x.40108] 
//
[0.x.40109] 
[0.x.40110] 
[0.x.40111] 
//
[0.x.40112] 
[0.x.40113] 
[0.x.40114] 
[0.x.40115] 
//
// /我们将单元格上的全局dof指数集转换为
//
[0.x.40116] 
[0.x.40117] 
[0.x.40118] 
[0.x.40119] 
[0.x.40120] 
[0.x.40121] 
[0.x.40122] 
[0.x.40123] 
//
// /*为每个dof简单地添加一个与所有其他 "本地 "的联接。
//
[0.x.40124] 
[0.x.40125] 
[0.x.40126] 
[0.x.40127] 
//
[0.x.40128] 
//
[0.x.40129] 
[0.x.40130] 
[0.x.40131] 
[0.x.40132] 
[0.x.40133] 
[0.x.40134] 
[0.x.40135] 
[0.x.40136] 
//
// DoFHandler和SparseMatrix对象的设置到此结束。接下来，我们要组装各种矩阵。我们在一个匿名命名空间中定义了一些辅助函数和数据结构。
//
[0.x.40137] 
[0.x.40138] 
//[2.x.4836]类，将用于使用WorkStream组装离线数据矩阵。它作为一个容器：它只是一个结构，WorkStream在其中存储本地单元的贡献。请注意，它还包含一个类成员[2.x.4837]，用于存储计算边界法线所需的局部贡献。
//
[0.x.40139] 
[0.x.40140] 
[0.x.40141] 
[0.x.40142] 
[0.x.40143] 
[0.x.40144] 
[0.x.40145] 
[0.x.40146] 
[0.x.40147] 
//
// 接下来我们介绍一些辅助函数，它们都是关于读写矩阵和向量条目的。它们的主要动机是提供稍微有效的代码和[1.x.140]的代码，否则就有些乏味了。
//
// 我们介绍的第一个函数 [2.x.4838] ，将用于读取SparsityPattern迭代器 [2.x.4839] 指向的条目所存储的值。该函数绕过了SparseMatrix接口中的一个小缺陷。SparsityPattern关注的是以CRS格式存储的稀疏矩阵的所有索引操作。因此，迭代器已经知道存储在SparseMatrix对象中的低级向量中相应矩阵条目的全局索引。由于SparseMatrix中缺乏直接用SparsityPattern迭代器访问该元素的接口，不幸的是我们必须创建一个临时的SparseMatrix迭代器。我们只需将其隐藏在[2.x.4840]函数中。
//
[0.x.40148] 
[0.x.40149] 
[0.x.40150] 
[0.x.40151] 
[0.x.40152] 
[0.x.40153] 
[0.x.40154] 
[0.x.40155] 
//
// [2.x.4841]帮助器是[2.x.4842]的逆运算：给定一个迭代器和一个值，它在矩阵中设置迭代器所指向的条目。
//
[0.x.40156] 
[0.x.40157] 
[0.x.40158] 
[0.x.40159] 
[0.x.40160] 
[0.x.40161] 
[0.x.40162] 
[0.x.40163] 
[0.x.40164] 
[0.x.40165] 
//[2.x.4843] : 我们注意到[2.x.4844] 。如果[2.x.4845]，那么[2.x.4846] 。这基本上意味着我们需要每个空间维度的一个矩阵来存储[2.x.4847]向量。对于矩阵[2.x.4848]也有类似的观察。[2.x.4849]的目的是检索这些条目并将其存储到[2.x.4850]中，以方便我们使用。
//
[0.x.40166] 
[0.x.40167] 
[0.x.40168] 
[0.x.40169] 
[0.x.40170] 
[0.x.40171] 
[0.x.40172] 
[0.x.40173] 
[0.x.40174] 
[0.x.40175] 
//[2.x.4851]（第一个接口）：这个第一个函数签名，有三个输入参数，将被用来检索矩阵的各个组成部分[2.x.4852]。[2.x.4853]和[2.x.4854]的功能非常相同，但它们的背景不同：函数[2.x.4855]不依赖迭代器（实际上知道指向的值），而是依赖条目的索引[2.x.4856]，以便检索其实际值。我们应该期望 [2.x.4857] 比 [2.x.4858] 稍微昂贵一些。[2.x.4859]的使用将限于计算代数粘度[2.x.4860]的任务，在特殊情况下，当[2.x.4861]和[2.x.4862]都位于边界时。
//
// [2.x.4863] 读者应该知道，访问一个矩阵的任意[2.x.4864]条目（例如Trilinos或PETSc矩阵）一般来说是昂贵得不可接受的。在这里，我们可能要注意复杂度：我们希望这个操作有恒定的复杂度，这就是目前使用deal.II矩阵的实现的情况。
//
[0.x.40176] 
[0.x.40177] 
[0.x.40178] 
[0.x.40179] 
[0.x.40180] 
[0.x.40181] 
[0.x.40182] 
[0.x.40183] 
[0.x.40184] 
[0.x.40185] 
[0.x.40186] 
//[2.x.4865]（第二个接口）：这个有两个输入参数的第二个函数签名将被用来收集节点[2.x.4866]的状态，并作为[2.x.4867]返回，以方便我们使用。
//
[0.x.40187] 
[0.x.40188] 
[0.x.40189] 
[0.x.40190] 
[0.x.40191] 
[0.x.40192] 
[0.x.40193] 
[0.x.40194] 
[0.x.40195] 
[0.x.40196] 
//[2.x.4868] ：这个函数有三个输入参数，第一个是指一个 "全局对象"（比如一个本地拥有的或本地相关的矢量），第二个参数可以是一个[2.x.4869] ，最后一个参数代表全局对象的索引。这个函数主要用于将更新的节点值（存储为[2.x.4870]）写入全局对象中。
//
[0.x.40197] 
[0.x.40198] 
[0.x.40199] 
[0.x.40200] 
[0.x.40201] 
[0.x.40202] 
[0.x.40203] 
[0.x.40204] 
[0.x.40205] 
[0.x.40206] 
[0.x.40207] 
[0.x.40208] 
//
// 我们现在可以将储存在[2.x.4871]中的所有矩阵集合起来：质量分录[2.x.4872]，矢量值矩阵[2.x.4873]和[2.x.4874]，以及边界法线[2.x.4875] 。
//
// 为了利用线程并行化，我们使用了[2.x.4876]"多处理器的并行计算 "中详述的WorkStream方法来访问共享内存。按照惯例，这需要定义 
//
// - 抓取数据（即进行计算所需的输入信息）：在这种情况下，它是 [2.x.4877] 。
//
// - 工作者：在我们的例子中，这是一个[2.x.4878]函数，它实际上是从抓取数据中计算出本地（即当前单元）贡献。
//
// - 拷贝数据：一个包含所有本地装配贡献的结构，在这里是 [2.x.4879] 。
//
// - 一个拷贝数据的程序：在这种情况下，它是[2.x.4880]，负责将这些局部贡献实际复制到全局对象（矩阵和/或矢量）中。
//
// 下面的大部分行是用来定义工作者 [2.x.4881] 和复制数据例程 [2.x.4882] 的。关于WorkStream框架没有太多可说的，因为绝大多数的想法在 [2.x.4883] 、 [2.x.4884] 和 [2.x.4885] 等文件中都有合理的记载。
//
// 最后，假设[2.x.4886]是边界上的一个支持点，（节点）法线定义为。
//
// [1.x.141]
//
// 我们将首先计算这个表达式的分子，并将其存储在 [2.x.4887] 中。我们将在一个后置循环中对这些向量进行归一化处理。
//
[0.x.40209] 
[0.x.40210] 
[0.x.40211] 
[0.x.40212] 
[0.x.40213] 
[0.x.40214] 
[0.x.40215] 
[0.x.40216] 
[0.x.40217] 
//
[0.x.40218] 
[0.x.40219] 
[0.x.40220] 
//
// 下面是WorkStream所需的从动数据的初始化过程
//
[0.x.40221] 
[0.x.40222] 
[0.x.40223] 
[0.x.40224] 
[0.x.40225] 
[0.x.40226] 
[0.x.40227] 
[0.x.40228] 
//
[0.x.40229] 
[0.x.40230] 
[0.x.40231] 
[0.x.40232] 
//
[0.x.40233] 
[0.x.40234] 
[0.x.40235] 
[0.x.40236] 
[0.x.40237] 
[0.x.40238] 
[0.x.40239] 
//
[0.x.40240] 
[0.x.40241] 
[0.x.40242] 
[0.x.40243] 
//
[0.x.40244] 
//
[0.x.40245] 
[0.x.40246] 
//
[0.x.40247] 
[0.x.40248] 
[0.x.40249] 
[0.x.40250] 
[0.x.40251] 
[0.x.40252] 
//
// 我们以通常的方式计算凑合质量矩阵项[2.x.4888]和向量[2.x.4889]的局部贡献。
//
[0.x.40253] 
[0.x.40254] 
[0.x.40255] 
//
[0.x.40256] 
[0.x.40257] 
[0.x.40258] 
[0.x.40259] 
[0.x.40260] 
//
[0.x.40261] 
//
[0.x.40262] 
[0.x.40263] 
[0.x.40264] 
[0.x.40265] 
[0.x.40266] 
//
[0.x.40267] 
[0.x.40268] 
[0.x.40269] 
//
// 现在我们要计算边界法线。请注意，除非该元素在域的边界上有面，否则下面的循环不会有什么作用。
//
[0.x.40270] 
[0.x.40271] 
[0.x.40272] 
[0.x.40273] 
//
[0.x.40274] 
[0.x.40275] 
//
[0.x.40276] 
//
[0.x.40277] 
[0.x.40278] 
//
[0.x.40279] 
[0.x.40280] 
[0.x.40281] 
[0.x.40282] 
//
// 注意，"normal "只代表形状函数phi_j支持下的一个面的贡献。所以我们不能在这里对这个局部贡献进行归一化处理，我们必须 "原封不动 "地接受它，存储它并将它传递给复制数据例程。正确的归一化需要在节点上增加一个循环。这在下面的复制函数中完成。
//
[0.x.40283] 
[0.x.40284] 
[0.x.40285] 
[0.x.40286] 
[0.x.40287] 
[0.x.40288] 
[0.x.40289] 
//
[0.x.40290] 
//
[0.x.40291] 
[0.x.40292] 
[0.x.40293] 
[0.x.40294] 
[0.x.40295] 
[0.x.40296] 
[0.x.40297] 
[0.x.40298] 
//
[0.x.40299] 
[0.x.40300] 
[0.x.40301] 
[0.x.40302] 
[0.x.40303] 
[0.x.40304] 
[0.x.40305] 
//
// 最后，我们根据WorkStream的要求，提供一个copy_local_to_global函数
//
[0.x.40306] 
[0.x.40307] 
[0.x.40308] 
//
[0.x.40309] 
[0.x.40310] 
[0.x.40311] 
[0.x.40312] 
[0.x.40313] 
[0.x.40314] 
[0.x.40315] 
[0.x.40316] 
[0.x.40317] 
//
[0.x.40318] 
[0.x.40319] 
//
[0.x.40320] 
[0.x.40321] 
[0.x.40322] 
[0.x.40323] 
[0.x.40324] 
[0.x.40325] 
//
[0.x.40326] 
[0.x.40327] 
[0.x.40328] 
[0.x.40329] 
[0.x.40330] 
[0.x.40331] 
[0.x.40332] 
//
// 此时我们已经完成了[2.x.4890]和[2.x.4891]的计算，但到目前为止，矩阵[2.x.4892]只包含矩阵[2.x.4893]的一个副本。这不是我们真正想要的：我们必须对其条目进行标准化处理。此外，我们还没有填充矩阵[2.x.4894]的条目，存储在映射[2.x.4895]中的向量没有被归一化。
//
// 原则上，这只是离线数据，过度优化它们的计算并没有什么意义，因为它们的成本会在我们将要使用的许多时间步骤中得到摊销。然而，计算/存储矩阵[2.x.4896]的条目是说明线程并行节点循环的最佳方式。
//
// 我们要访问网格/稀疏图中的每个节点[2.x.4897]。
//
// - 对于每一个这样的节点，我们要访问每一个[2.x.4898]，以便[2.x.4899] 。
//
// 从代数的角度来看，这相当于：访问矩阵中的每一行，并对这些行中的每一行在列上执行循环。节点循环是本教程步骤的一个核心主题（见介绍中的伪代码），会反复出现。这就是为什么现在是介绍它们的恰当时机。
//
// 我们有线程并行化能力[2.x.4900]，在某种程度上比WorkStream框架更通用。特别是，[2.x.4901]可以用于我们的节点循环。这个功能需要四个输入参数，我们详细解释一下（针对我们的线程并行节点循环的具体案例）。
//
// - 迭代器 [2.x.4902] 指向一个行索引。
//
// - 迭代器[2.x.4903]指向一个数字上更高的行索引。
//
// - 函数[2.x.4904]和[2.x.4905]在前面两个子弹中定义的end和begin迭代器所跨越的范围内定义了一个子范围）对这个子范围内的每个迭代器应用一个操作。我们也可以把[2.x.4906]称为 "工作者"。
//
// - Grainsize：每个线程处理的最小迭代器（在本例中代表行）的数量。我们决定最小为4096行。
//
// 一个小的注意事项是，提供给[2.x.4909]的迭代器[2.x.4907]和[2.x.4908]必须是随机访问的迭代器：在内部，[2.x.4910]将把[2.x.4911]和[2.x.4912]迭代器定义的范围分成子范围（我们希望能够以恒定的复杂性读取这些子范围的任何条目）。为了提供这样的迭代器，我们求助于[2.x.4913]。
//
// 下面这段代码的大部分是用来定义 "工作者"[2.x.4914]：即在子范围的每一行应用的操作。给定一个固定的[2.x.4915]，我们要访问这一行的每一列/每一个条目。为了执行这样的列-循环，我们使用标准库中的[1.x.142]，其中。
//
// - [2.x.4916]给我们一个迭代器，从该行的第一列开始。
//
// - [2.x.4917]是一个指向该行最后一列的迭代器。
//
// - [2.x.4918]所要求的最后一个参数是应用于该行的每个非零条目（本例中为lambda表达式）的操作。
//
// 我们注意到，[2.x.4919]将对不相交的行集（子行）进行操作，我们的目标是写入这些行中。由于我们要进行的操作的简单性质（法线的计算和存储，以及条目[2.x.4920]的规范化），线程在试图写同一个条目时不会发生冲突（我们不需要一个调度器）。
//
[0.x.40333] 
[0.x.40334] 
[0.x.40335] 
//
[0.x.40336] 
[0.x.40337] 
//
[0.x.40338] 
[0.x.40339] 
[0.x.40340] 
[0.x.40341] 
[0.x.40342] 
[0.x.40343] 
//
// 第一个列循环：我们计算并存储矩阵norm_matrix的条目，并将归一化的条目写入矩阵nij_matrix中。
//
[0.x.40344] 
[0.x.40345] 
[0.x.40346] 
[0.x.40347] 
[0.x.40348] 
[0.x.40349] 
//
[0.x.40350] 
[0.x.40351] 
[0.x.40352] 
[0.x.40353] 
[0.x.40354] 
[0.x.40355] 
//
[0.x.40356] 
[0.x.40357] 
[0.x.40358] 
[0.x.40359] 
//
// 最后，我们对存储在 [2.x.4921] 中的向量进行规范化。这个操作没有被线程并行化，因为它既不能说明任何重要的概念，也不能带来任何明显的速度提升。
//
[0.x.40360] 
[0.x.40361] 
[0.x.40362] 
[0.x.40363] 
[0.x.40364] 
[0.x.40365] 
[0.x.40366] 
//
// 在这一点上，我们已经很好地完成了与离线数据有关的事情。
//
// [2.x.4922] 
//
// 在这一节中，我们描述了[2.x.4923]类的成员的实现。这里的大部分代码都是针对具有理想气体定律的可压缩欧拉方程的。如果我们想把[2.x.4924]重新用于不同的守恒定律（例如：浅水方程），那么这个类的大部分实现就必须改变。但是其他大部分的类（尤其是那些定义循环结构的类）将保持不变。
//
// 我们首先实现一些小的成员函数来计算[2.x.4925]、[2.x.4926]和系统的通量[2.x.4927]。这些函数中的每一个的功能都可以从它们的名字中不难看出。
//
[0.x.40367] 
[0.x.40368] 
[0.x.40369] 
[0.x.40370] 
[0.x.40371] 
[0.x.40372] 
[0.x.40373] 
[0.x.40374] 
//
[0.x.40375] 
[0.x.40376] 
[0.x.40377] 
[0.x.40378] 
[0.x.40379] 
[0.x.40380] 
[0.x.40381] 
[0.x.40382] 
[0.x.40383] 
//
[0.x.40384] 
[0.x.40385] 
[0.x.40386] 
[0.x.40387] 
[0.x.40388] 
[0.x.40389] 
//
[0.x.40390] 
[0.x.40391] 
[0.x.40392] 
[0.x.40393] 
[0.x.40394] 
[0.x.40395] 
//
[0.x.40396] 
[0.x.40397] 
//
[0.x.40398] 
[0.x.40399] 
[0.x.40400] 
[0.x.40401] 
[0.x.40402] 
[0.x.40403] 
[0.x.40404] 
[0.x.40405] 
//
[0.x.40406] 
//
[0.x.40407] 
[0.x.40408] 
[0.x.40409] 
[0.x.40410] 
[0.x.40411] 
[0.x.40412] 
[0.x.40413] 
//
[0.x.40414] 
[0.x.40415] 
//
// 现在我们讨论 [2.x.4928] 的计算。黎曼问题的最大波速的尖锐上界的分析和推导是一个非常技术性的工作，我们不能在本教程中对其进行高级讨论。在这部分文档中，我们将仅限于简述我们实现函数的主要功能，并指出具体的学术参考文献，以帮助（感兴趣的）读者追溯这些想法的来源（和适当的数学证明）。
//
// 一般来说，要获得最大波速的尖锐保证上界需要解决一个相当昂贵的标量非线性问题。这通常是通过一个迭代求解器来完成的。为了简化本例中的表述，我们决定不包括这样的迭代方案。相反，我们将只是使用一个初始猜测作为最大波速的上限猜测。更确切地说，[2.x.4929]的方程（2.11）（3.7）、（3.8）和（4.3）足以定义最大波速的保证上限。这个估计值通过调用函数 [2.x.4930] 来返回。在其核心部分，这样一个上界的构造使用了所谓的中间压力的二赖式近似 [2.x.4931] ，例如，见公式（4.46），在 [2.x.4932] 第128页。
//
// 由[2.x.4933]返回的估计值保证是一个上界，它在一般情况下是相当尖锐的，而且对我们的目的来说总体上是足够的。然而，对于一些特定的情况（特别是当其中一个状态接近真空条件时），这样的估计会过于悲观。这就是为什么我们使用第二个估计来避免这种退化，它将通过调用函数 [2.x.4934] 来调用。这里最重要的函数是 [2.x.4935] ，它取的是 [2.x.4936] 和 [2.x.4937] 所返回的估计值之间的最小值。
//
// 我们再次开始定义几个辅助函数。
//
// 第一个函数接收一个状态[2.x.4938]和一个单位向量[2.x.4939]，并按照单位向量的方向计算[1.x.143]一维状态。
//
[0.x.40416] 
[0.x.40417] 
[0.x.40418] 
[0.x.40419] 
[0.x.40420] 
[0.x.40421] 
[0.x.40422] 
[0.x.40423] 
[0.x.40424] 
//
// 为此，我们必须将动量改为[2.x.4940]，并且必须从总能量中减去垂直部分的动能。
//
[0.x.40425] 
[0.x.40426] 
//
[0.x.40427] 
[0.x.40428] 
//
// 我们以[1.x.144]变量而不是守恒量来返回一维状态。返回数组包括密度 [2.x.4941] 、速度 [2.x.4942] 、压力 [2.x.4943] 和局部声速 [2.x.4944] 。
//
[0.x.40429] 
[0.x.40430] 
[0.x.40431] 
[0.x.40432] 
[0.x.40433] 
//
// 在这一点上，我们还定义了两个小函数，用来返回一个双数的正负部分。
//
[0.x.40434] 
[0.x.40435] 
[0.x.40436] 
[0.x.40437] 
//
[0.x.40438] 
[0.x.40439] 
[0.x.40440] 
[0.x.40441] 
//
// 接下来，我们需要两个本地文数，它们是以原始状态[2.x.4945]和给定压力[2.x.4946]为条件定义的。
//[2.x.4947] 公式（3.7）。[1.x.145] 这里，[2.x.4948] 表示给定参数的正数部分。
//
[0.x.40442] 
[0.x.40443] 
[0.x.40444] 
[0.x.40445] 
//
// 执行Guermond-Popov-2016 [2.x.4949] 中的公式（3.7）。
[0.x.40446] 
[0.x.40447] 
[0.x.40448] 
[0.x.40449] 
//
[0.x.40450] 
[0.x.40451] 
[0.x.40452] 
[0.x.40453] 
//
// Analougously [2.x.4950] 方程（3.8）。[1.x.146]
//
[0.x.40454] 
[0.x.40455] 
[0.x.40456] 
//
// 执行Guermond-Popov-2016 [2.x.4951] 中的公式（3.8）。
[0.x.40457] 
[0.x.40458] 
[0.x.40459] 
[0.x.40460] 
//
[0.x.40461] 
[0.x.40462] 
[0.x.40463] 
[0.x.40464] 
//
// 剩下的就是计算从左和右原始状态计算出来的[2.x.4952]和[2.x.4953]的最大值（ [2.x.4954] 公式（2.11）），其中[2.x.4955]由[2.x.4956] 公式（4.3）给出。
//
[0.x.40465] 
[0.x.40466] 
[0.x.40467] 
[0.x.40468] 
[0.x.40469] 
[0.x.40470] 
[0.x.40471] 
[0.x.40472] 
[0.x.40473] 
[0.x.40474] 
[0.x.40475] 
//
[0.x.40476] 
//
[0.x.40477] 
[0.x.40478] 
//
// /Guermond-Popov-2016[2.x.4957]中的公式（4.3）。
[0.x.40479] 
[0.x.40480] 
//
[0.x.40481] 
[0.x.40482] 
//
// /Guermond-Popov-2016中的公式（2.11） [2.x.4958] 。
[0.x.40483] 
[0.x.40484] 
//
// 我们计算出最大波速的第二个上界，一般来说，它不像二重化估计那样尖锐。但在接近真空的条件下，当二赖子近似值可能达到极端值时，它将挽救一切。[1.x.147] 
//[2.x.4959] 常数5.0乘以声速的最大值是[1.x.148]一个临时的常数，[1.x.149]一个调整参数。它为任何 [2.x.4960] 定义了一个上限。请不要玩弄它!
//
[0.x.40485] 
[0.x.40486] 
[0.x.40487] 
[0.x.40488] 
[0.x.40489] 
[0.x.40490] 
[0.x.40491] 
[0.x.40492] 
//
[0.x.40493] 
[0.x.40494] 
[0.x.40495] 
//
// 下面是我们要调用的主函数，以计算 [2.x.4961] 。我们简单地计算两个最大的波速估计值并返回最小值。
//
[0.x.40496] 
[0.x.40497] 
[0.x.40498] 
[0.x.40499] 
[0.x.40500] 
[0.x.40501] 
[0.x.40502] 
[0.x.40503] 
//
[0.x.40504] 
[0.x.40505] 
//
[0.x.40506] 
[0.x.40507] 
//
[0.x.40508] 
[0.x.40509] 
//
// 我们通过定义静态数组[2.x.4962]来结束本节，这些静态数组包含描述我们的状态向量的组件名称的字符串。我们对维度一、二和三进行了模板特化，这在后面的DataOut中被用来命名相应的组件。
//
[0.x.40510] 
[0.x.40511] 
[0.x.40512] 
//
[0.x.40513] 
[0.x.40514] 
[0.x.40515] 
//
[0.x.40516] 
[0.x.40517] 
[0.x.40518] 
//[2.x.4963] 
//
// 在我们讨论正向欧拉方案的实现之前，最后一个准备步骤是简单地实现`InitialValues`类。
//
// 在构造函数中，我们用默认值初始化所有参数，为`参数接受器`类声明所有参数，并将[2.x.4964]槽连接到相应的信号。
//
// [2.x.4965]槽将在调用[2.x.4966]后从ParameterAceptor中调用。 在这方面，它的使用适合于参数必须被后处理（在某种意义上）或必须检查参数之间的某些一致性条件的情况。
//
[0.x.40519] 
[0.x.40520] 
[0.x.40521] 
[0.x.40522] 
//
// /我们把插槽[2.x.4967]连接到
//
[0.x.40523] 
[0.x.40524] 
[0.x.40525] 
//
[0.x.40526] 
[0.x.40527] 
[0.x.40528] 
[0.x.40529] 
//
[0.x.40530] 
[0.x.40531] 
[0.x.40532] 
[0.x.40533] 
[0.x.40534] 
[0.x.40535] 
[0.x.40536] 
//
// 到目前为止，[2.x.4968]的构造函数已经为两个私有成员[2.x.4969]定义了默认值，并将它们添加到参数列表中。但是我们还没有定义我们真正关心的唯一公共成员的实现，也就是[2.x.4970]（我们将调用这个函数来实际评估网格节点的初始解）。在该函数的顶部，我们必须确保提供的初始方向不是零矢量。
//
// [2.x.4971] 正如所评论的，我们可以避免使用方法 [2.x.4972] 并定义一个类成员 [2.x.4973] 以便定义 [2.x.4974] 的实现。但为了说明问题，我们想在这里记录一种不同的方式，并使用ParameterAcceptor的回调信号。
//
[0.x.40537] 
[0.x.40538] 
[0.x.40539] 
[0.x.40540] 
[0.x.40541] 
[0.x.40542] 
[0.x.40543] 
//
// 接下来，我们用一个计算均匀流场的lambda函数来实现[2.x.4975]函数对象。为此，我们必须将给定的原始1d状态（密度[2.x.4976]、速度[2.x.4977]和压力[2.x.4978]）转换为保守的n维状态（密度[2.x.4979]、动量[2.x.4980]和总能量[2.x.4981] ）。
//
[0.x.40544] 
[0.x.40545] 
[0.x.40546] 
[0.x.40547] 
[0.x.40548] 
//
[0.x.40549] 
//
[0.x.40550] 
[0.x.40551] 
[0.x.40552] 
//
[0.x.40553] 
//
[0.x.40554] 
[0.x.40555] 
[0.x.40556] 
//[2.x.4982] 
//
// [2.x.4983]类的构造函数不包含任何令人惊讶的代码。
//
[0.x.40557] 
[0.x.40558] 
[0.x.40559] 
[0.x.40560] 
[0.x.40561] 
[0.x.40562] 
[0.x.40563] 
[0.x.40564] 
[0.x.40565] 
[0.x.40566] 
[0.x.40567] 
[0.x.40568] 
[0.x.40569] 
[0.x.40570] 
[0.x.40571] 
[0.x.40572] 
[0.x.40573] 
[0.x.40574] 
//
// 在类成员 [2.x.4984] 中我们初始化了临时向量 [2.x.4985] 。该向量[2.x.4986]将在其内容与旧向量交换之前用于临时存储解决方案的更新。
//
[0.x.40575] 
[0.x.40576] 
[0.x.40577] 
[0.x.40578] 
[0.x.40579] 
//
[0.x.40580] 
[0.x.40581] 
//
[0.x.40582] 
[0.x.40583] 
//
// 现在是实现正向欧拉步骤的时候了。给出一个在时间[2.x.4988]的旧状态[2.x.4987]的（可写引用），我们就地更新状态[2.x.4989]，并返回所选择的时间步长。我们首先声明一些对各种不同变量和数据结构的只读引用。我们这样做主要是为了有更短的变量名称（例如，[2.x.4990]而不是[2.x.4991]）。
//
[0.x.40584] 
[0.x.40585] 
[0.x.40586] 
[0.x.40587] 
[0.x.40588] 
//
[0.x.40589] 
[0.x.40590] 
[0.x.40591] 
[0.x.40592] 
//
[0.x.40593] 
//
[0.x.40594] 
[0.x.40595] 
[0.x.40596] 
[0.x.40597] 
//
[0.x.40598] 
//[1.x.150]: 计算[2.x.4992]图的粘性矩阵。
//
// 需要强调的是，粘度矩阵必须是对称的，即 [2.x.4993] 。在这方面我们注意到，[2.x.4994]（或等同于[2.x.4995]）提供了[2.x.4996]或[2.x.4997]是一个位于远离边界的支持点。在这种情况下，我们可以通过构造检查出[2.x.4998]，这保证了[2.x.4999]的属性。
//
// 然而，如果两个支持点[2.x.5000]或[2.x.5001]恰好都位于边界上，那么，等式[2.x.5002]和[2.x.5003]就不一定成立。对于这个难题，数学上唯一安全的解决方案是计算[2.x.5004]和[2.x.5005]，并取其最大值。
//
// 总体而言，[2.x.5006]的计算是相当昂贵的。为了节省一些计算时间，我们利用了粘度矩阵必须是对称的这一事实（如上所述）：我们只计算[2.x.5007]的上三角条目，并将相应的条目复制到下三角的对应项上。
//
// 我们再次使用[2.x.5008]来实现线程并行的for loops。我们在讨论矩阵的组装[2.x.5009]和上面[2.x.5010]的归一化时介绍的几乎所有并行遍历的想法都在这里得到了应用。
//
// 我们再次定义了一个 "工作者 "函数[2.x.5011]，计算列索引子范围[i1, i2]的黏度[2.x.5012]。
//
[0.x.40599] 
[0.x.40600] 
[0.x.40601] 
//
[0.x.40602] 
[0.x.40603] 
[0.x.40604] 
[0.x.40605] 
[0.x.40606] 
[0.x.40607] 
[0.x.40608] 
//
// 对于一个给定的列索引i，我们遍历从[2.x.5013]到[2.x.5014]的稀疏模式的列。
//
[0.x.40609] 
[0.x.40610] 
[0.x.40611] 
//
// 我们只计算[2.x.5015]，如果[2.x.5016]（上三角条目），随后将数值复制到[2.x.5017] 。
//
[0.x.40612] 
[0.x.40613] 
//
[0.x.40614] 
//
[0.x.40615] 
[0.x.40616] 
//
[0.x.40617] 
[0.x.40618] 
//
[0.x.40619] 
//
// 如果两个支持点刚好都在边界上，我们也要计算[2.x.5018]，然后再取[2.x.5019] 。在这之后，我们可以最终设定上三角和下三角的条目。
//
[0.x.40620] 
[0.x.40621] 
[0.x.40622] 
[0.x.40623] 
[0.x.40624] 
[0.x.40625] 
[0.x.40626] 
[0.x.40627] 
[0.x.40628] 
//
[0.x.40629] 
[0.x.40630] 
//
[0.x.40631] 
[0.x.40632] 
[0.x.40633] 
[0.x.40634] 
[0.x.40635] 
//
[0.x.40636] 
[0.x.40637] 
[0.x.40638] 
[0.x.40639] 
[0.x.40640] 
//[1.x.151]: 计算对角线项 [2.x.5020] 和 [2.x.5021] 。
//
// 到目前为止，我们已经计算了矩阵[2.x.5022]的所有非对角线项。我们仍然需要填补其对角线项，定义为 [2.x.5023] 。我们再次使用[2.x.5024]来实现这一目的。在计算[2.x.5025]s的同时，我们也确定了最大的可接受的时间步长，定义为[1.x.152] 注意，[2.x.5026]的操作本质上是全局的，它在所有节点上操作：首先我们必须在所有线程（特定节点的）上取最小值，然后我们必须在所有MPI进程上取最小值。在目前的实现中。
//
// - 我们将[2.x.5027]（每个节点）存储为[1.x.153]。  2.x.5028]的内部实现将在一个以上的线程试图同时读取和/或写入[2.x.5029]时，负责保护任何可能的竞赛条件。
//
// - 为了取所有MPI进程的最小值，我们使用实用函数 [2.x.5030] 。
//
[0.x.40641] 
//
[0.x.40642] 
[0.x.40643] 
[0.x.40644] 
//
// on_subranges()将在每个线程上单独执行。因此，变量[2.x.5031]被存储在线程本地。
//
[0.x.40645] 
[0.x.40646] 
[0.x.40647] 
//
[0.x.40648] 
[0.x.40649] 
[0.x.40650] 
[0.x.40651] 
[0.x.40652] 
//
[0.x.40653] 
[0.x.40654] 
[0.x.40655] 
//
[0.x.40656] 
[0.x.40657] 
//
[0.x.40658] 
[0.x.40659] 
//
// 我们将d_ij项的负数之和存储在对角线的位置上。
//
[0.x.40660] 
//
// 并计算出最大的局部时间步长 [2.x.5032] 。
//
[0.x.40661] 
[0.x.40662] 
[0.x.40663] 
[0.x.40664] 
//[2.x.5033] 包含为（线程局部）子范围计算的最大可能的时间步长。在这一点上，我们必须在所有线程上同步该值。这就是我们使用[1.x.154] 的原因。
//[1.x.155] 更新机制。
//
[0.x.40665] 
[0.x.40666] 
[0.x.40667] 
[0.x.40668] 
[0.x.40669] 
[0.x.40670] 
//
[0.x.40671] 
[0.x.40672] 
[0.x.40673] 
[0.x.40674] 
//
// 在所有线程完成后，我们可以简单地在所有MPI进程中同步该值。
//
[0.x.40675] 
//
// 这是一个验证计算出的[2.x.5034]确实是一个有效浮点数的好时机。
//
[0.x.40676] 
[0.x.40677] 
[0.x.40678] 
[0.x.40679] 
[0.x.40680] 
[0.x.40681] 
//[1.x.156]: 执行更新。
//
// 在这一点上，我们已经计算了所有的粘性系数 [2.x.5035] 并且我们知道最大的可接受的时间步长 [2.x.5036] 。这意味着我们现在可以计算更新了。
//
// [1.x.157]
//
// 这个更新公式与介绍中讨论的略有不同（在伪代码中）。然而，可以证明这两个公式在代数上是等价的（它们将产生相同的数值）。我们更倾向于第二个公式，因为它具有自然的取消属性，可能有助于避免数字上的伪影。
//
[0.x.40682] 
[0.x.40683] 
[0.x.40684] 
//
[0.x.40685] 
[0.x.40686] 
[0.x.40687] 
[0.x.40688] 
[0.x.40689] 
//
[0.x.40690] 
//
[0.x.40691] 
[0.x.40692] 
//
[0.x.40693] 
//
[0.x.40694] 
[0.x.40695] 
[0.x.40696] 
//
[0.x.40697] 
[0.x.40698] 
//
[0.x.40699] 
[0.x.40700] 
//
[0.x.40701] 
[0.x.40702] 
[0.x.40703] 
[0.x.40704] 
[0.x.40705] 
[0.x.40706] 
[0.x.40707] 
//
[0.x.40708] 
[0.x.40709] 
[0.x.40710] 
//
[0.x.40711] 
[0.x.40712] 
[0.x.40713] 
[0.x.40714] 
[0.x.40715] 
//[1.x.158]: 修复了边界状态。
//
// 作为正向欧拉方法的最后一步，我们必须修复所有的边界状态。正如在介绍中所讨论的，我们
//
// 在完全不满足边界条件的情况下进行时间推进。
//
// -- 在时间步长结束时，在后处理步骤中强力执行边界条件。
//
// 在这里，我们计算修正[1.x.159]，它消除了[2.x.5037]的法线成分。
//
[0.x.40716] 
[0.x.40717] 
[0.x.40718] 
//
[0.x.40719] 
[0.x.40720] 
[0.x.40721] 
//
// 我们只对本地拥有的子集进行迭代。
//
[0.x.40722] 
[0.x.40723] 
//
[0.x.40724] 
[0.x.40725] 
[0.x.40726] 
//
[0.x.40727] 
//
// 在自由滑移的边界上，我们去除动量的法向分量。
//
[0.x.40728] 
[0.x.40729] 
[0.x.40730] 
[0.x.40731] 
[0.x.40732] 
[0.x.40733] 
[0.x.40734] 
//
// 在Dirichlet边界上，我们强行执行初始条件。
//
[0.x.40735] 
[0.x.40736] 
[0.x.40737] 
[0.x.40738] 
//
[0.x.40739] 
[0.x.40740] 
[0.x.40741] 
//[1.x.160]: 我们现在在所有MPI行列上更新幽灵层，将临时向量与解决方案向量交换 [2.x.5038] （将通过引用返回），并返回选择的时间步长 [2.x.5039] 。
//
[0.x.40742] 
[0.x.40743] 
//
[0.x.40744] 
//
[0.x.40745] 
[0.x.40746] 
//[2.x.5040] 
//
// 在不同的时间间隔内，我们将输出解决方案的当前状态[2.x.5041]以及所谓的Schlieren图。[2.x.5042]类的构造函数同样不包含任何惊喜。我们只是提供默认值并注册两个参数。
//
// - schlieren_beta: 是一个临时的正向放大系数，以增强可视化中的对比度。它的实际值是一个品味问题。
//
// - schlieren_index: 是一个整数，表示我们将使用状态[2.x.5043]中的哪个组件来生成可视化。
//
[0.x.40747] 
[0.x.40748] 
[0.x.40749] 
[0.x.40750] 
[0.x.40751] 
[0.x.40752] 
[0.x.40753] 
[0.x.40754] 
[0.x.40755] 
[0.x.40756] 
[0.x.40757] 
[0.x.40758] 
[0.x.40759] 
[0.x.40760] 
[0.x.40761] 
//
[0.x.40762] 
[0.x.40763] 
[0.x.40764] 
[0.x.40765] 
[0.x.40766] 
[0.x.40767] 
//
// 同样，[2.x.5044]函数初始化了两个临时向量（ [2.x.5045] ）。
//
[0.x.40768] 
[0.x.40769] 
[0.x.40770] 
[0.x.40771] 
[0.x.40772] 
//
[0.x.40773] 
[0.x.40774] 
[0.x.40775] 
//
// 我们现在讨论类成员[2.x.5046]的实现，它基本上是取状态向量[2.x.5047]的一个分量并计算该分量的Schlieren指标（Schlieren指标的公式可以在类的声明[2.x.5048]之前找到）。我们首先注意到这个公式需要 "结点梯度" [2.x.5049] 。然而，对于 [2.x.5050] 有限元函数来说，梯度的节点值并没有定义。更为普遍的是，梯度的点值对于[2.x.5051]函数没有定义。我们可以用最简单的技术来恢复节点的梯度，即加权平均法。
//
// [1.x.161]
//
// 其中[2.x.5052]是形状函数[2.x.5053]的支持，而[2.x.5054]是权重。权重可以是任何正函数，如[2.x.5055]（这将使我们恢复通常的均值概念）。但是像往常一样，我们的目标是尽可能多地重复使用离线数据。在这个意义上，最自然的权重选择是[2.x.5056] 。将这种权重的选择和扩展[2.x.5057]插入[2.x.5058]中，我们得到:
//
// [1.x.162]
//
// 使用这最后一个公式，我们可以恢复平均的节点梯度，而不需要借助任何形式的正交。这个想法与基于边缘的方案（或代数方案）的整体精神非常吻合，我们希望尽可能直接对矩阵和向量进行操作，以避免使用双线性形式、单元环、正交，或在输入参数（上一时间步的状态）和计算更新所需的实际矩阵和向量之间的任何其他中间结构/操作。
//
// 第二件要注意的事情是，我们必须计算全局最小和最大 [2.x.5059] 和 [2.x.5060] 。按照在类成员[2.x.5061]中用于计算时间步长的相同思路，我们将[2.x.5062]和[2.x.5063]定义为原子双数，以解决线程之间的任何冲突。像往常一样，我们使用[2.x.5064]和[2.x.5065]来寻找所有MPI进程中的全局最大/最小值。
//
// 最后，不可能在所有节点上单次循环计算Schlieren指标。整个操作需要在节点上进行两次循环。
//
//
//
// - 第一个循环对网格中所有的[2.x.5066]进行计算，并计算边界[2.x.5068]和[2.x.5069] 。
//
// - 第二个循环最后用公式计算Schlieren指标
//
// [1.x.163]
//
// 这意味着我们将不得不为每一个阶段定义两个工作者[2.x.5070]。
//
[0.x.40776] 
[0.x.40777] 
[0.x.40778] 
[0.x.40779] 
[0.x.40780] 
//
[0.x.40781] 
[0.x.40782] 
[0.x.40783] 
[0.x.40784] 
[0.x.40785] 
//
[0.x.40786] 
[0.x.40787] 
[0.x.40788] 
//
// 我们将当前MPI进程中的r_i_max和r_i_min定义为原子倍数，以避免线程之间的竞赛条件。
//
[0.x.40789] 
[0.x.40790] 
//
// 第一个循环：计算每个节点的平均梯度以及梯度的全局最大值和最小值。
//
[0.x.40791] 
[0.x.40792] 
[0.x.40793] 
[0.x.40794] 
[0.x.40795] 
//
[0.x.40796] 
[0.x.40797] 
[0.x.40798] 
//
[0.x.40799] 
//
 
[0.x.40801] 
[0.x.40802] 
//
[0.x.40803] 
[0.x.40804] 
//
[0.x.40805] 
[0.x.40806] 
[0.x.40807] 
[0.x.40808] 
//
// 我们在自由滑移边界固定梯度r_i，类似于我们在正向欧拉步骤中固定边界状态的方式。    这样可以避免在自由滑移边界的Schlieren图中出现尖锐的、人为的梯度，这纯粹是一种外观上的选择。
//
[0.x.40809] 
[0.x.40810] 
[0.x.40811] 
[0.x.40812] 
[0.x.40813] 
//
[0.x.40814] 
[0.x.40815] 
[0.x.40816] 
[0.x.40817] 
[0.x.40818] 
//
// 我们提醒读者，我们对结点梯度本身并不感兴趣。我们只想得到它们的规范，以便计算Schlieren指标（用块状质量矩阵[2.x.5071] 加权）。
//
[0.x.40819] 
[0.x.40820] 
[0.x.40821] 
[0.x.40822] 
[0.x.40823] 
//
// 我们将current_r_i_max和current_r_i_min（在当前子范围内）与r_i_max和r_i_min（对于当前MPI进程）进行比较，并在必要时进行更新。
//
[0.x.40824] 
[0.x.40825] 
[0.x.40826] 
[0.x.40827] 
[0.x.40828] 
//
[0.x.40829] 
[0.x.40830] 
[0.x.40831] 
[0.x.40832] 
[0.x.40833] 
[0.x.40834] 
//
[0.x.40835] 
[0.x.40836] 
[0.x.40837] 
[0.x.40838] 
[0.x.40839] 
//
// 在所有MPI进程中同步[2.x.5072]。
//
[0.x.40840] 
[0.x.40841] 
//
// 第二个循环：我们现在有了矢量[2.x.5073]和标量[2.x.5074]可以使用。这样我们就可以实际计算Schlieren指标了。
//
[0.x.40842] 
[0.x.40843] 
[0.x.40844] 
[0.x.40845] 
[0.x.40846] 
[0.x.40847] 
//
[0.x.40848] 
[0.x.40849] 
[0.x.40850] 
[0.x.40851] 
[0.x.40852] 
//
[0.x.40853] 
[0.x.40854] 
[0.x.40855] 
[0.x.40856] 
[0.x.40857] 
//
// 最后，交换幽灵元素。
//
[0.x.40858] 
[0.x.40859] 
//[2.x.5075] 
//
// 在实现了所有的类之后，是时候创建一个[2.x.5076]、[2.x.5077]和[2.x.5078]的实例，并在一个循环中运行欧拉正步。
//
// 在[2.x.5079]的构造函数中，我们现在初始化所有类的实例，并声明一些控制输出的参数。最值得注意的是，我们声明了一个布尔参数[2.x.5080]，它将控制程序是否试图从中断的计算中重新启动。
//
[0.x.40860] 
[0.x.40861] 
[0.x.40862] 
[0.x.40863] 
[0.x.40864] 
[0.x.40865] 
[0.x.40866] 
[0.x.40867] 
[0.x.40868] 
[0.x.40869] 
[0.x.40870] 
[0.x.40871] 
[0.x.40872] 
[0.x.40873] 
[0.x.40874] 
[0.x.40875] 
[0.x.40876] 
[0.x.40877] 
[0.x.40878] 
[0.x.40879] 
[0.x.40880] 
[0.x.40881] 
[0.x.40882] 
[0.x.40883] 
[0.x.40884] 
[0.x.40885] 
[0.x.40886] 
//
[0.x.40887] 
[0.x.40888] 
//
[0.x.40889] 
[0.x.40890] 
[0.x.40891] 
[0.x.40892] 
//
[0.x.40893] 
[0.x.40894] 
[0.x.40895] 
[0.x.40896] 
//
[0.x.40897] 
[0.x.40898] 
[0.x.40899] 
//
// 我们首先在匿名命名空间中实现一个辅助函数[2.x.5081]，用来在终端输出带有一些漂亮格式的信息。
//
[0.x.40900] 
[0.x.40901] 
[0.x.40902] 
[0.x.40903] 
[0.x.40904] 
[0.x.40905] 
[0.x.40906] 
[0.x.40907] 
[0.x.40908] 
[0.x.40909] 
//
[0.x.40910] 
[0.x.40911] 
[0.x.40912] 
[0.x.40913] 
//
// /* 关闭clang-format [2.x.5082] 。
[0.x.40914] 
[0.x.40915] 
[0.x.40916] 
[0.x.40917] 
[0.x.40918] 
[0.x.40919] 
[0.x.40920] 
[0.x.40921] 
//
// /* clang-format on [2.x.5083] 。
[0.x.40922] 
[0.x.40923] 
//
// 有了[2.x.5084]，现在是时候实现[2.x.5085]了，它包含了我们程序的主循环。
//
[0.x.40924] 
[0.x.40925] 
[0.x.40926] 
//
// 我们开始读入参数并初始化所有对象。我们在这里注意到，对[2.x.5086]的调用是从参数文件（其名称作为一个字符串参数给出）中读入所有参数。ParameterAcceptor处理一个全局的ParameterHandler，它被初始化为所有从ParameterAceptor派生的类实例的子节和参数声明。调用initialize进入每个每个派生类的分节，并设置所有使用[2.x.5087]添加的变量。
[0.x.40927] 
//
[0.x.40928] 
[0.x.40929] 
//
// 接下来我们创建三角形，集合所有的矩阵，设置划痕空间，并初始化DataOut<dim>对象。
//
[0.x.40930] 
[0.x.40931] 
[0.x.40932] 
//
[0.x.40933] 
[0.x.40934] 
[0.x.40935] 
//
[0.x.40936] 
[0.x.40937] 
[0.x.40938] 
//
[0.x.40939] 
[0.x.40940] 
//
[0.x.40941] 
[0.x.40942] 
[0.x.40943] 
[0.x.40944] 
//
// 我们将在变量 [2.x.5088] 中存储当前的时间和状态。
//
[0.x.40945] 
[0.x.40946] 
//
[0.x.40947] 
[0.x.40948] 
//[2.x.5089] 
//
// 默认情况下，布尔值[2.x.5090]被设置为false，也就是说，下面的代码段不会被运行。然而，如果[2.x.5091]，我们表明我们确实有一个中断的计算，程序应重新启动，从检查点文件中读入由[2.x.5092]、[2.x.5093]组成的旧状态。这些检查点文件将在下面讨论的[2.x.5094]程序中创建。
//
[0.x.40949] 
[0.x.40950] 
[0.x.40951] 
//
[0.x.40952] 
[0.x.40953] 
//
[0.x.40954] 
[0.x.40955] 
[0.x.40956] 
//
// 我们使用一个[2.x.5095]来存储和读入检查点状态的内容。
//
[0.x.40957] 
[0.x.40958] 
//
[0.x.40959] 
[0.x.40960] 
//[2.x.5096] 遍历状态向量的所有组件 [2.x.5097] 。我们依次读入分量的每一个条目，之后更新ghost层。
//
[0.x.40961] 
[0.x.40962] 
[0.x.40963] 
[0.x.40964] 
[0.x.40965] 
//
// 随着初始状态的建立，或中断状态的恢复，是时候进入主循环了。
//
[0.x.40966] 
//
[0.x.40967] 
//
[0.x.40968] 
[0.x.40969] 
//
// 我们首先打印一个信息性的状态信息
//
[0.x.40970] 
[0.x.40971] 
//
[0.x.40972] 
[0.x.40973] 
[0.x.40974] 
[0.x.40975] 
//
[0.x.40976] 
//
// 然后执行一个单一的前向欧拉步骤。请注意，状态向量[2.x.5098]被就地更新，[2.x.5099]返回选择的步长。
//
[0.x.40977] 
//
// 后期处理、生成输出和写出当前状态是一个CPU和IO密集型的任务，我们不能在每个时间步长进行处理
//
// -- 特别是在显式时间步进中。因此，我们只在超过[2.x.5101]设定的阈值时，通过调用[2.x.5100]函数安排输出。
//
[0.x.40978] 
[0.x.40979] 
[0.x.40980] 
[0.x.40981] 
[0.x.40982] 
[0.x.40983] 
//
// 我们等待任何剩余的后台输出线程完成，然后打印一个摘要并退出。
//
[0.x.40984] 
[0.x.40985] 
//
[0.x.40986] 
[0.x.40987] 
[0.x.40988] 
//
// [2.x.5102]将初始时间 "t "作为输入参数，并在[2.x.5104]对象的帮助下填充状态向量[2.x.5103]。
//
[0.x.40989] 
[0.x.40990] 
[0.x.40991] 
[0.x.40992] 
[0.x.40993] 
[0.x.40994] 
[0.x.40995] 
[0.x.40996] 
//
[0.x.40997] 
//
[0.x.40998] 
[0.x.40999] 
//
[0.x.41000] 
[0.x.41001] 
//
// [2.x.5105]的函数签名对于[2.x.5106]来说不太合适。我们通过以下方式来解决这个问题：首先，创建一个lambda函数，对于给定的位置[2.x.5107]只返回[2.x.5108]的第三部分的值。在ScalarFunctionFromFunctionObject包装器的帮助下，这个lambda又被转换为一个[2.x.5109]。
//
[0.x.41002] 
[0.x.41003] 
[0.x.41004] 
[0.x.41005] 
[0.x.41006] 
[0.x.41007] 
[0.x.41008] 
//
[0.x.41009] 
[0.x.41010] 
//
[0.x.41011] 
[0.x.41012] 
//[2.x.5110] 
//
// 写出最终的 vtk 文件是一项相当密集的 IO 任务，会让主循环停滞一段时间。为了避免这种情况，我们使用了[1.x.164]的策略，即创建一个后台线程，在主循环被允许继续的情况下执行IO。为了使其发挥作用，我们必须注意两件事。
//
// - 在运行 [2.x.5111] 线程之前，我们必须创建一个状态向量 [2.x.5112] 的副本。我们把它存储在向量 [2.x.5113] 中。
//
// - 我们必须避免在后台线程中进行任何MPI通信，否则程序可能会出现死锁。这意味着我们必须在工作线程之外运行后处理程序。
//
[0.x.41013] 
[0.x.41014] 
[0.x.41015] 
[0.x.41016] 
[0.x.41017] 
[0.x.41018] 
[0.x.41019] 
[0.x.41020] 
[0.x.41021] 
//
// 如果设置了异步回写选项，我们会启动一个后台线程，执行所有的慢速IO到磁盘。在这种情况下，我们必须确保后台线程确实完成了运行。如果没有，我们必须等待它完成。我们用[1.x.165]启动上述背景线程，该线程返回[1.x.166]对象。这个[2.x.5114]对象包含了函数的返回值，在我们的例子中就是[2.x.5115] 。
//
[0.x.41022] 
[0.x.41023] 
[0.x.41024] 
[0.x.41025] 
[0.x.41026] 
//
[0.x.41027] 
[0.x.41028] 
//
// 在这一点上，我们制作一份状态向量的副本，运行schlieren后处理器，并运行[2.x.5116] 实际输出代码是标准的。我们创建一个DataOut实例，附加所有我们想要输出的数据向量，并调用[2.x.5117]，但是有一个转折。为了在后台线程上执行异步IO，我们将DataOut<dim>对象创建为一个共享指针，传递给工作线程，以确保一旦我们退出这个函数，工作线程完成后，DataOut<dim>对象再次被销毁。
//
[0.x.41029] 
[0.x.41030] 
[0.x.41031] 
[0.x.41032] 
[0.x.41033] 
//
[0.x.41034] 
//
[0.x.41035] 
//
[0.x.41036] 
//
[0.x.41037] 
//
[0.x.41038] 
[0.x.41039] 
//
[0.x.41040] 
[0.x.41041] 
//
[0.x.41042] 
[0.x.41043] 
//
// 接下来我们为后台线程创建一个lambda函数。我们 [1.x.167] [2.x.5118] 指针以及输出函数的大部分参数的值，这样我们就可以在lambda函数中访问它们。
//
[0.x.41044] 
[0.x.41045] 
[0.x.41046] 
//
// 我们通过对[1.x.168]的精确反向操作来检查当前状态。
//
[0.x.41047] 
[0.x.41048] 
[0.x.41049] 
[0.x.41050] 
//
[0.x.41051] 
//
[0.x.41052] 
[0.x.41053] 
[0.x.41054] 
[0.x.41055] 
[0.x.41056] 
[0.x.41057] 
//
[0.x.41058] 
[0.x.41059] 
[0.x.41060] 
[0.x.41061] 
[0.x.41062] 
//
[0.x.41063] 
[0.x.41064] 
[0.x.41065] 
//
// 如果设置了异步回写选项，我们在[1.x.169]函数的帮助下启动一个新的后台线程。该函数返回一个[1.x.170]对象，我们可以用它来查询后台线程的状态。在这一点上，我们可以从[2.x.5119]函数中返回，继续在主循环中进行时间步进
//
// - 该线程将在后台运行。
//
[0.x.41066] 
[0.x.41067] 
[0.x.41068] 
[0.x.41069] 
[0.x.41070] 
[0.x.41071] 
[0.x.41072] 
[0.x.41073] 
[0.x.41074] 
//
[0.x.41075] 
//
// 最后是主函数。
//
[0.x.41076] 
[0.x.41077] 
[0.x.41078] 
[0.x.41079] 
[0.x.41080] 
//
[0.x.41081] 
[0.x.41082] 
//
[0.x.41083] 
//
[0.x.41084] 
[0.x.41085] 
//
[0.x.41086] 
[0.x.41087] 
[0.x.41088] 
[0.x.41089] 
[0.x.41090] 
[0.x.41091] 
[0.x.41092] 
[0.x.41093] 
[0.x.41094] 
[0.x.41095] 
[0.x.41096] 
[0.x.41097] 
[0.x.41098] 
[0.x.41099] 
[0.x.41100] 
[0.x.41101] 
[0.x.41102] 
[0.x.41103] 
[0.x.41104] 
[0.x.41105] 
[0.x.41106] 
[0.x.41107] 
[0.x.41108] 
[0.x.41109] 
[0.x.41110] 
[0.x.41111] 
[0.x.41112] 
[0.x.41113] 
[0.x.41114] 
[0.x.41115] 
[0.x.41116] 
[0.x.41117] 
[0.x.41118] 
[0.x.41119] 
[0.x.41120] 
[0.x.41121] 
[0.x.41122] 
[0.x.41123] 
[0.x.41124] 
[0.x.41125] 
[0.x.41126] 
[0.x.41127] 
//
[0.x.41128] 
[0.x.41129] 
[0.x.41130] 
//[2.x.5120] 
//
// 这些第一个包含文件在前面的例子中都已经处理过了，所以我们不再解释其中的内容。
//
[0.x.41131] 
[0.x.41132] 
[0.x.41133] 
[0.x.41134] 
[0.x.41135] 
[0.x.41136] 
[0.x.41137] 
[0.x.41138] 
[0.x.41139] 
[0.x.41140] 
[0.x.41141] 
[0.x.41142] 
[0.x.41143] 
[0.x.41144] 
[0.x.41145] 
[0.x.41146] 
[0.x.41147] 
[0.x.41148] 
[0.x.41149] 
//
// 在这个例子中，我们将不使用DoFHandler类默认使用的编号方案，而是使用Cuthill-McKee算法对其进行重新编号。正如在[2.x.5121]中已经解释过的，必要的函数被声明在以下文件中。
//
[0.x.41150] 
//
// 然后我们将展示一个小技巧，如何确保对象在仍在使用时不被删除。为此，deal.II有一个SmartPointer辅助类，它被声明在这个文件中。
//
[0.x.41151] 
//
// 接下来，我们要使用介绍中提到的函数[2.x.5122]，我们要使用一个ConvergenceTable，在运行过程中收集所有重要的数据，并在最后以表格形式打印出来。这些来自于以下两个文件。
//
[0.x.41152] 
[0.x.41153] 
//
// 最后，我们需要使用FEFaceValues类，它与FEValues类在同一个文件中声明。
//
[0.x.41154] 
//
[0.x.41155] 
[0.x.41156] 
[0.x.41157] 
//
// 在我们继续实际执行之前的最后一步是打开一个命名空间[2.x.5123]，我们将把所有的东西放进去，正如在介绍的最后所讨论的，并把命名空间[2.x.5124]的成员导入其中。
//
[0.x.41158] 
[0.x.41159] 
[0.x.41160] 
//[2.x.5125] 
//
// 在实现实际求解的类之前，我们首先声明和定义一些代表右手边和求解类的函数类。由于我们要将数值得到的解与精确的连续解进行比较，我们需要一个代表连续解的函数对象。另一方面，我们需要右手边的函数，而这个函数当然与解共享一些特征。为了减少如果我们必须同时改变两个类中的某些东西而产生的依赖性，我们将两个函数的共同特征移到一个基类中。
//
// 解（正如介绍中所解释的，我们选择三个指数之和）和右手边的共同特征是：指数的数量，它们的中心，以及它们的半宽。我们在以下类别中声明它们。由于指数的数量是一个编译时的常数，我们使用一个固定长度的[2.x.5126]来存储中心点。
//
[0.x.41161] 
[0.x.41162] 
[0.x.41163] 
[0.x.41164] 
[0.x.41165] 
[0.x.41166] 
[0.x.41167] 
//
// 表示指数中心和宽度的变量刚刚被声明，现在我们还需要给它们赋值。在这里，我们可以展示另一个小小的模板魔法，即我们如何根据维度给这些变量分配不同的值。我们将在程序中只使用2维的情况，但我们展示1维的情况是为了说明一个有用的技术。
//
// 首先我们为1d情况下的中心赋值，我们将中心等距离地放在-1/3、0和1/3处。这个定义的<code>template &lt;&gt;</code>头显示了一个明确的专业化。这意味着，这个变量属于一个模板，但是我们并没有向编译器提供一个模板，让它通过用一些具体的值来替代[2.x.5127]来专门化一个具体的变量，而是自己提供一个专门化，在这个例子中是[2.x.5128] 。如果编译器在模板参数等于1的地方看到了对这个变量的引用，它就知道它不需要通过替换[2.x.5129]从模板中生成这个变量，而是可以立即使用下面的定义。
//
[0.x.41168] 
[0.x.41169] 
[0.x.41170] 
//
// 同样地，我们可以为[2.x.5130]提供一个明确的特殊化。我们将2d情况下的中心放置如下。
//
[0.x.41171] 
[0.x.41172] 
[0.x.41173] 
//
// 还需要给指数的半宽指定一个值。我们希望对所有维度使用相同的数值。在这种情况下，我们只需向编译器提供一个模板，它可以通过用一个具体的值替换[2.x.5131]来生成一个具体的实例。
//
[0.x.41174] 
[0.x.41175] 
//
// 在声明和定义了解和右手的特征后，我们可以声明代表这两者的类。它们都代表连续函数，所以它们都派生于Function&lt;dim&gt;基类，它们也继承了SolutionBase类中定义的特征。
//
// 实际的类是在下面声明的。请注意，为了计算数值解与连续解在L2和H1（半）准则下的误差，我们必须提供精确解的值和梯度。这比我们在以前的例子中所做的要多，在以前的例子中，我们所提供的只是一个或一列点的值。幸运的是，Function类也有用于梯度的虚拟函数，所以我们可以简单地重载Function基类中各自的虚拟成员函数。请注意，一个函数在[2.x.5132]空间维度上的梯度是一个大小为[2.x.5133]的向量，即一个等级为1、维度为[2.x.5134]的张量。就像其他很多东西一样，该库提供了一个合适的类。这个类的一个新特点是，它明确地使用了张量对象，之前在 [2.x.5135] 和 [2.x.5136] 中作为中间词出现。张量是标量（等级为零的张量）、向量（等级为一的张量）和矩阵（等级为二的张量）以及高维对象的概括。张量类需要两个模板参数：张量等级和张量维度。例如，在这里我们使用等级为一的张量（向量），维度为[2.x.5137]项）。虽然这比使用Vector的灵活性要差一些，但当编译时知道向量的长度时，编译器可以生成更快的代码。此外，指定一个秩为1、维数为[2.x.5138]的张量，可以保证张量具有正确的形状（因为它是内置于对象本身的类型中的），所以编译器可以为我们抓住大多数与尺寸有关的错误。
//
[0.x.41176] 
[0.x.41177] 
[0.x.41178] 
[0.x.41179] 
[0.x.41180] 
[0.x.41181] 
//
[0.x.41182] 
[0.x.41183] 
[0.x.41184] 
[0.x.41185] 
//
//精确解类的值和梯度的实际定义是根据其数学定义，不需要过多解释。
//
// 唯一值得一提的是，如果我们访问一个依赖模板的基类的元素（在本例中是SolutionBase&lt;dim&gt;的元素），那么C++语言会强迫我们写 [2.x.5139] ，对于基类的其他成员也是如此。如果基类不依赖模板，C++就不需要[2.x.5140]的限定。这一点的原因很复杂，C++书籍会在[1.x.171]这句话下进行解释，在deal.II FAQs中也有很长的描述。
//
[0.x.41186] 
[0.x.41187] 
[0.x.41188] 
[0.x.41189] 
[0.x.41190] 
[0.x.41191] 
[0.x.41192] 
[0.x.41193] 
[0.x.41194] 
[0.x.41195] 
//
[0.x.41196] 
[0.x.41197] 
//
// 同样，这也是对解的梯度的计算。 为了从指数的贡献中积累梯度，我们分配了一个对象 [2.x.5141] ，它表示秩 [2.x.5142] 和维 [2.x.5143] 的张量的数学量。它的默认构造函数将其设置为只包含零的向量，所以我们不需要明确关心它的初始化。
//
// 注意，我们也可以把对象的类型定为Point&lt;dim&gt;，而不是Tensor&lt;1,dim&gt;。等级1的张量和点几乎是可以交换的，而且只有非常细微的数学含义不同。事实上，Point&lt;dim&gt;类是由Tensor&lt;1,dim&gt;类派生出来的，这就弥补了它们的相互交换能力。它们的主要区别在于它们在逻辑上的含义：点是空间中的点，比如我们要评估一个函数的位置（例如，见这个函数的第一个参数的类型）。另一方面，秩1的张量具有相同的变换属性，例如，当我们改变坐标系时，它们需要以某种方式旋转；然而，它们不具有点所具有的相同内涵，只是比坐标方向所跨越的空间更抽象的对象。事实上，梯度生活在 "对等 "的空间中，因为它们的分量的维度不是长度，而是长度上的一个）。
//
[0.x.41198] 
[0.x.41199] 
[0.x.41200] 
[0.x.41201] 
[0.x.41202] 
//
[0.x.41203] 
[0.x.41204] 
[0.x.41205] 
//
// 对于梯度，注意它的方向是沿着（x-x_i），所以我们把这个距离向量的倍数加起来，其中的因子是由指数给出。
//
[0.x.41206] 
[0.x.41207] 
[0.x.41208] 
[0.x.41209] 
[0.x.41210] 
//
[0.x.41211] 
[0.x.41212] 
//
// 除了代表精确解的函数外，我们还需要一个函数，在组装离散方程的线性系统时，我们可以将其作为右手。这可以通过下面的类和其函数的定义来实现。请注意，这里我们只需要函数的值，而不是它的梯度或高阶导数。
//
[0.x.41213] 
[0.x.41214] 
[0.x.41215] 
[0.x.41216] 
[0.x.41217] 
[0.x.41218] 
[0.x.41219] 
//
// 右手边的值是由解的负拉普拉斯加上解本身给出的，因为我们要解决亥姆霍兹方程的问题。
//
[0.x.41220] 
[0.x.41221] 
[0.x.41222] 
[0.x.41223] 
[0.x.41224] 
[0.x.41225] 
[0.x.41226] 
[0.x.41227] 
//
// 第一个贡献是拉普拉斯的。
//
[0.x.41228] 
[0.x.41229] 
[0.x.41230] 
[0.x.41231] 
[0.x.41232] 
//
// 而第二个是解决方案本身。
//
[0.x.41233] 
[0.x.41234] 
[0.x.41235] 
//
[0.x.41236] 
[0.x.41237] 
//[2.x.5144] 
//
// 然后我们需要做所有工作的类。除了它的名字，它的接口与前面的例子基本相同。
//
// 其中一个不同点是，我们将在几种模式下使用这个类：用于不同的有限元，以及用于自适应细化和全局细化。全局细化还是自适应细化的决定是通过在类的顶部声明的枚举类型传达给该类的构造函数的。构造函数接收一个有限元对象和细化模式作为参数。
//
// 除了[2.x.5145]函数外，其余的成员函数与之前一样。在解被计算出来后，我们对它进行一些分析，比如计算各种规范的误差。为了实现一些输出，它需要细化周期的编号，因此得到它作为一个参数。
//
[0.x.41238] 
[0.x.41239] 
[0.x.41240] 
[0.x.41241] 
[0.x.41242] 
[0.x.41243] 
[0.x.41244] 
[0.x.41245] 
[0.x.41246] 
//
[0.x.41247] 
[0.x.41248] 
//
[0.x.41249] 
//
[0.x.41250] 
[0.x.41251] 
[0.x.41252] 
[0.x.41253] 
[0.x.41254] 
[0.x.41255] 
//
// 现在是这个类的数据元素。在我们以前的例子中已经使用过的变量中，只有有限元对象不同。这个类的对象所操作的有限元被传递给这个类的构造函数。它必须存储一个指向有限元的指针，供成员函数使用。现在，对于本类来说，这没有什么大不了的，但由于我们想在这些程序中展示技术而不是解决方案，我们将在这里指出一个经常出现的问题--当然也包括正确的解决方案。
//
// 考虑以下在所有示例程序中出现的情况：我们有一个三角形对象，我们有一个有限元对象，我们还有一个DoFHandler类型的对象，它同时使用前两个对象。这三个对象的寿命与其他大多数对象相比都相当长：它们基本上是在程序开始时或外循环时设置的，并在最后被销毁。问题是：我们能否保证DoFHandler使用的两个对象的寿命至少与它们被使用的时间相同？这意味着DoFHandler必须对其他对象的销毁情况有一定的了解。
//
// 我们将在这里展示库如何设法找出对一个对象仍有活动的引用，并且从使用对象的角度来看，该对象仍然活着。基本上，该方法是沿着以下思路进行的：所有受到这种潜在危险的指针的对象都来自一个叫做Subscriptor的类。例如，Triangulation、DoFHandler和FiniteElement类的一个基类都派生于Subscriptor。后面这个类并没有提供太多的功能，但是它有一个内置的计数器，我们可以订阅这个计数器，因此这个类的名字就叫 "订阅器"。每当我们初始化一个指向该对象的指针时，我们可以增加它的使用计数器，而当我们移开指针或不再需要它时，我们再减少计数器。这样，我们就可以随时检查有多少个对象还在使用该对象。此外，该类需要知道一个指针，它可以用来告诉订阅对象它的无效性。
//
// 如果一个从Subscriptor类派生出来的对象被销毁，它也必须调用Subscriptor类的析构函数。在这个析构器中，我们使用存储的指针告诉所有订阅的对象该对象的无效性。当对象出现在移动表达式的右侧时，也会发生同样的情况，也就是说，在操作后它将不再包含有效的内容。在试图访问被订阅的对象之前，订阅类应该检查存储在其相应指针中的值。
//
// 这正是SmartPointer类正在做的事情。它基本上就像一个指针一样，也就是说，它可以被取消引用，可以被分配给其他指针，等等。除此之外，当我们试图解除引用这个类所代表的指针时，它使用上面描述的机制来找出这个指针是否是悬空的。在这种情况下，会抛出一个异常。
//
// 在本例程序中，我们希望保护有限元对象，避免因某种原因导致所指向的有限元在使用中被破坏。因此，我们使用了一个指向有限元对象的SmartPointer；由于有限元对象在我们的计算中实际上从未改变，我们传递了一个const FiniteElement&lt;dim&gt;作为SmartPointer类的模板参数。请注意，这样声明的指针是在构造求解对象时被分配的，并在销毁时被销毁，所以对有限元对象销毁的锁定贯穿了这个HelmholtzProblem对象的生命周期。
//
[0.x.41256] 
[0.x.41257] 
//
[0.x.41258] 
//
[0.x.41259] 
//
[0.x.41260] 
[0.x.41261] 
//
[0.x.41262] 
[0.x.41263] 
//
// 倒数第二个变量存储了传递给构造函数的细化模式。由于它只在构造函数中设置，我们可以声明这个变量为常数，以避免有人不由自主地设置它（例如在一个 "if "语句中，==偶然被写成=）。
//
[0.x.41264] 
//
// 对于每个细化级别，一些数据（比如单元格的数量，或者数值解的L2误差）将被生成，并在之后打印出来。TableHandler可以用来收集所有这些数据，并在运行结束后以简单文本或LaTeX格式的表格输出。这里我们不仅使用TableHandler，还使用了派生类ConvergenceTable，它还可以评估收敛率。
//
[0.x.41265] 
[0.x.41266] 
//[2.x.5146] 
//[2.x.5147] 
//
// 在这个类的构造函数中，我们只设置作为参数传递的变量，并将DoF处理程序对象与三角形（不过目前是空的）相关联。
//
[0.x.41267] 
[0.x.41268] 
[0.x.41269] 
[0.x.41270] 
[0.x.41271] 
[0.x.41272] 
[0.x.41273] 
//[2.x.5148] 
//
// 下面的函数设置了自由度、矩阵和向量的大小等。它的大部分功能在前面的例子中已经展示过了，唯一不同的是在第一次分配自由度后立即进行重新编号的步骤。
//
// 重编自由度并不难，只要你使用库中的一种算法。它只需要一行代码。这方面的更多信息可以在 [2.x.5149] 中找到。
//
// 但是请注意，当你对自由度进行重新编号时，你必须在分配自由度后立即进行，因为诸如悬空节点、稀疏模式等都取决于重新编号后的绝对数。
//
// 我们在这里介绍重新编号的原因是，这是一个相对便宜的操作，但往往有一个有利的效果。虽然CG迭代本身与自由度的实际排序无关，但我们将使用SSOR作为一个预处理程序。SSOR会经过所有的自由度，并做一些取决于之前发生的操作；因此，SSOR操作并不独立于自由度的编号，而且众所周知，它的性能会通过使用重新编号技术得到改善。一个小实验表明，确实如此，例如，用这里使用的Q1程序进行自适应细化的第五个细化周期的CG迭代次数，在没有重编号的情况下为40次，而在重编号的情况下为36次。对于这个程序中的所有计算，一般都可以观察到类似的节省。
//
[0.x.41274] 
[0.x.41275] 
[0.x.41276] 
[0.x.41277] 
[0.x.41278] 
//
[0.x.41279] 
[0.x.41280] 
[0.x.41281] 
[0.x.41282] 
//
[0.x.41283] 
[0.x.41284] 
[0.x.41285] 
[0.x.41286] 
//
[0.x.41287] 
//
[0.x.41288] 
[0.x.41289] 
[0.x.41290] 
//[2.x.5150] 
//
// 为手头的问题组装方程组，主要是像之前的例子程序一样。然而，无论如何，有些东西已经改变了，所以我们对这个函数进行了相当广泛的评论。
//
// 在该函数的顶部，你会发现通常的各种变量声明。与以前的程序相比，重要的是我们希望解决的问题也是双二次元的，因此必须使用足够精确的正交公式。此外，我们需要计算面的积分，即[2.x.5151]维的对象。那么，面的正交公式的声明就很直接了。
//
[0.x.41291] 
[0.x.41292] 
[0.x.41293] 
[0.x.41294] 
[0.x.41295] 
//
[0.x.41296] 
[0.x.41297] 
//
[0.x.41298] 
//
[0.x.41299] 
[0.x.41300] 
//
[0.x.41301] 
//
// 然后我们需要一些对象来评估正交点上的形状函数的值、梯度等。虽然看起来用一个对象来做域积分和面积分应该是可行的，但是有一个微妙的区别，因为域积分的权重包括域中单元的度量，而面积分的正交需要低维流形中面的度量。在内部，这两个类都根植于一个共同的基类，它完成了大部分工作，并为域积分和面积分提供了相同的接口。
//
// 对于亥姆霍兹方程的双线性形式的域积分，我们需要计算值和梯度，以及正交点的权重。此外，我们需要实细胞上的正交点（而不是单位细胞上的正交点）来评估右手边的函数。我们用来获取这些信息的对象是之前讨论过的FEValues类。
//
// 对于面积分，我们只需要形状函数的值以及权重。我们还需要实心单元上的法向量和正交点，因为我们要从精确解对象中确定Neumann值（见下文）。给我们提供这些信息的类被称为FEFaceValues。
//
[0.x.41302] 
[0.x.41303] 
[0.x.41304] 
[0.x.41305] 
//
[0.x.41306] 
[0.x.41307] 
[0.x.41308] 
[0.x.41309] 
[0.x.41310] 
//
// 然后我们需要一些从以前的例子中已经知道的对象。一个表示右侧函数的对象，它在单元格上正交点的值，单元格矩阵和右侧，以及单元格上自由度的指数。
//
// 请注意，我们对右手边对象的操作只是查询数据，绝不会改变该对象。因此我们可以声明它 [2.x.5152] 。
//
[0.x.41311] 
[0.x.41312] 
//
// 最后我们定义一个表示精确解函数的对象。我们将用它来计算边界上的诺伊曼值。通常情况下，我们当然会使用一个单独的对象来计算，特别是由于精确解通常是未知的，而诺伊曼值是规定的。然而，我们将有点偷懒，使用我们已经有的信息。当然，现实生活中的程序会在这里采取其他方式。
//
[0.x.41313] 
//
// 现在是所有单元格的主循环。这与之前的例子基本没有变化，所以我们只对有变化的地方进行评论。
//
[0.x.41314] 
[0.x.41315] 
[0.x.41316] 
[0.x.41317] 
//
[0.x.41318] 
//
[0.x.41319] 
[0.x.41320] 
//
[0.x.41321] 
[0.x.41322] 
[0.x.41323] 
[0.x.41324] 
//
// 第一件改变的事情是双线性形式。它现在包含了亥姆霍兹方程的附加项。
//
[0.x.41325] 
[0.x.41326] 
[0.x.41327] 
[0.x.41328] 
[0.x.41329] 
[0.x.41330] 
[0.x.41331] 
//
[0.x.41332] 
[0.x.41333] 
[0.x.41334] 
[0.x.41335] 
//
// 然后是右手边的第二项，即等高线积分。首先我们要找出这个单元格的面与边界部分Gamma2的交点是否为非零。为此，我们对所有面进行循环，检查其边界指示器是否等于[2.x.5153]，这是我们在下面的[2.x.5154]函数中为组成Gamma2的边界部分指定的值。(边界指示器的默认值是[2.x.5155]，所以只有在我们明确设置的情况下，面的指示器才能等于[2.x.5156]。)
//
[0.x.41336] 
[0.x.41337] 
[0.x.41338] 
//
// 如果我们来到这里，那么我们已经找到了一个属于Gamma2的外部面。接下来，我们必须计算形状函数的值和其他数量，这些都是我们在计算轮廓积分时需要的。这是用[2.x.5157]函数完成的，我们已经从FEValue类中知道了。
//
[0.x.41339] 
//
// 然后，我们可以通过在所有的正交点上进行循环来进行积分。        在每个正交点上，我们首先计算法线导数的值。我们使用精确解的梯度和从[2.x.5158]对象中获得的当前正交点处的面的法向量来进行计算。然后用它来计算这个面对右手边的额外贡献。
//
[0.x.41340] 
[0.x.41341] 
[0.x.41342] 
[0.x.41343] 
[0.x.41344] 
[0.x.41345] 
[0.x.41346] 
//
[0.x.41347] 
[0.x.41348] 
[0.x.41349] 
[0.x.41350] 
[0.x.41351] 
[0.x.41352] 
[0.x.41353] 
//
// 现在我们有了本单元的贡献，我们可以把它转移到全局矩阵和右手边的向量，就像之前的例子一样。
//
[0.x.41354] 
[0.x.41355] 
[0.x.41356] 
[0.x.41357] 
[0.x.41358] 
[0.x.41359] 
[0.x.41360] 
//
[0.x.41361] 
[0.x.41362] 
[0.x.41363] 
//
// 同样，对边界值的消除和处理也在前面显示过。
//
// 然而，我们注意到，现在我们插值边界值的边界指标（由[2.x.5159]的第二个参数表示）不再代表整个边界了。相反，它是我们没有指定其他指标的那部分边界（见下文）。因此，边界上不属于Gamma1的自由度被排除在边界值的插值之外，就像我们希望的那样。
//
[0.x.41364] 
[0.x.41365] 
//
[0.x.41366] 
[0.x.41367] 
[0.x.41368] 
[0.x.41369] 
[0.x.41370] 
[0.x.41371] 
[0.x.41372] 
[0.x.41373] 
[0.x.41374] 
[0.x.41375] 
//[2.x.5160] 
//
// 解方程组的方法与之前一样。
//
[0.x.41376] 
[0.x.41377] 
[0.x.41378] 
[0.x.41379] 
[0.x.41380] 
//
[0.x.41381] 
[0.x.41382] 
//
[0.x.41383] 
//
[0.x.41384] 
[0.x.41385] 
//[2.x.5161] 
//
// 现在是做网格细化的函数。根据传递给构造函数的细化模式，我们进行全局或适应性细化。
//
// 全局细化很简单，所以没有什么可评论的。 在适应性细化的情况下，我们使用的函数和类与前面的例子程序相同。请注意，我们可以将诺伊曼边界与迪里切特边界区别对待，事实上在这里也应该这样做，因为我们在部分边界上有诺伊曼边界条件，但是由于我们在这里没有描述诺伊曼值的函数（我们只是在组装矩阵时从精确解中构造这些值），我们省略了这个细节，尽管以严格正确的方式做这些并不难添加。
//
// 在开关的最后，我们有一个看起来稍微有点奇怪的默认情况：一个[2.x.5162]条件。由于[2.x.5163]宏在条件为假的时候会引发一个错误，这意味着只要我们碰到这个语句，程序就会被中止。这是故意的。现在我们只实现了两种细化策略（全局性和适应性），但有人可能想增加第三种策略（例如，具有不同细化标准的适应性），并在决定细化模式的枚举中增加第三个成员。如果不是switch语句的默认情况，这个函数会简单地运行到结束而不做任何事情。这很可能不是原意。因此，在deal.II库中，你会发现一个防御性的编程技术，那就是总是有默认的中止案例，以确保在switch语句中列出案例时没有考虑的值最终被抓住，并迫使程序员添加代码来处理它们。我们还将在下面的其他地方使用同样的技术。
//
[0.x.41386] 
[0.x.41387] 
[0.x.41388] 
[0.x.41389] 
[0.x.41390] 
[0.x.41391] 
[0.x.41392] 
[0.x.41393] 
[0.x.41394] 
[0.x.41395] 
//
[0.x.41396] 
[0.x.41397] 
[0.x.41398] 
[0.x.41399] 
//
[0.x.41400] 
[0.x.41401] 
[0.x.41402] 
[0.x.41403] 
[0.x.41404] 
[0.x.41405] 
//
[0.x.41406] 
[0.x.41407] 
//
[0.x.41408] 
//
[0.x.41409] 
[0.x.41410] 
//
[0.x.41411] 
[0.x.41412] 
[0.x.41413] 
[0.x.41414] 
[0.x.41415] 
[0.x.41416] 
//[2.x.5164] 
//
// 最后，我们想在计算出解决方案后对其进行处理。为此，我们用各种（半）准则对误差进行积分，并生成表格，这些表格以后将被用来以漂亮的格式显示对连续解的收敛情况。
//
[0.x.41417] 
[0.x.41418] 
[0.x.41419] 
//
// 我们的第一个任务是计算误差准则。为了整合计算出的数值解和连续解之间的差异（由本文件顶部定义的Solution类描述），我们首先需要一个向量来保存每个单元的误差准则。由于16位数的精度对这些数量来说并不那么重要，我们通过使用[2.x.5165]而不是[2.x.5166]值来节省一些内存。
//
// 下一步是使用库中的一个函数来计算每个单元的L2准则的误差。 我们必须将DoF处理程序对象、保存数值解的节点值的向量、作为函数对象的连续解、它应将每个单元上的误差规范放入的向量、计算该规范的正交规则，以及要使用的规范类型传递给它。这里，我们使用高斯公式，在每个空间方向上有三个点，并计算L2规范。
//
// 最后，我们想得到全局L2准则。这当然可以通过对每个单元格上的规范的平方求和，然后取该值的平方根来得到。这相当于取每个单元格上的规范向量的l2（小写[2.x.5167] ）规范。
//
[0.x.41420] 
[0.x.41421] 
[0.x.41422] 
[0.x.41423] 
[0.x.41424] 
[0.x.41425] 
[0.x.41426] 
[0.x.41427] 
[0.x.41428] 
[0.x.41429] 
[0.x.41430] 
//
// 通过同样的程序，我们可以得到H1半正态。我们重新使用[2.x.5168]向量，因为在计算了上面的[2.x.5169]变量后，它不再被使用。全局[2.x.5170]半正态误差的计算方法是：取每个单元格上的误差的平方和，然后取其平方根--这个操作由[2.x.5171]方便地执行。
[0.x.41431] 
[0.x.41432] 
[0.x.41433] 
[0.x.41434] 
[0.x.41435] 
[0.x.41436] 
[0.x.41437] 
[0.x.41438] 
[0.x.41439] 
[0.x.41440] 
//
// 最后，我们计算出最大法线。当然，我们实际上不能计算域中*所有*点上的真正的最大误差，而只能计算有限的评估点上的最大误差，为了方便起见，我们仍然称之为 "正交点"，并用一个正交类型的对象来表示，尽管我们实际上没有进行任何积分。
//
// 然后是我们想在哪些点上精确地进行评估的问题。事实证明，我们得到的结果相当敏感地取决于所使用的 "正交 "点。还有一个超融合的问题。在某些网格上，对于多项式程度[2.x.5172]，有限元解决方案在节点点以及Gauss-Lobatto点上特别精确，比随机选择的点要精确得多。(参见[2.x.5173]和第1.2节的讨论和参考文献，以了解更多这方面的信息)。换句话说，如果我们有兴趣找到最大的差值[2.x.5174]，那么我们应该看一下[2.x.5175]，这些点特别不属于这种 "特殊 "的点，而且我们特别不应该用`QGauss(fe->degree+1)`来定义我们评估的地方。相反，我们使用一个特殊的正交规则，该规则是通过梯形规则迭代有限元的度数乘以2再加上每个空间方向的1而得到的。请注意，QIterated类的构造函数需要一个一维正交规则和一个数字，这个数字告诉它在每个空间方向重复这个规则的频率。
//
// 使用这个特殊的正交规则，我们就可以尝试找到每个单元的最大误差。最后，我们通过调用[2.x.5176]来计算每个单元上的L无穷大误差的全局L无穷大误差。
[0.x.41441] 
[0.x.41442] 
[0.x.41443] 
[0.x.41444] 
[0.x.41445] 
[0.x.41446] 
[0.x.41447] 
[0.x.41448] 
[0.x.41449] 
[0.x.41450] 
[0.x.41451] 
[0.x.41452] 
//
// 在所有这些错误被计算出来之后，我们最终写出一些输出。此外，我们通过指定列的键和值将重要的数据添加到TableHandler中。 注意，没有必要事先定义列的键 -- 只需添加值即可，列将按照第一次添加值的顺序被引入到表中。
//
[0.x.41453] 
[0.x.41454] 
//
[0.x.41455] 
[0.x.41456] 
[0.x.41457] 
[0.x.41458] 
//
[0.x.41459] 
[0.x.41460] 
[0.x.41461] 
[0.x.41462] 
[0.x.41463] 
[0.x.41464] 
[0.x.41465] 
//[2.x.5177] 
//
// 和前面的例子程序一样，[2.x.5178]函数控制执行的流程。基本布局与前面的例子一样：在连续细化的网格上有一个外循环，在这个循环中首先是问题的设置，组装线性系统，求解，和后处理。
//
// 主循环的第一个任务是创建和细化网格。这和前面的例子一样，唯一的区别是我们想把边界的一部分标记为诺伊曼型，而不是迪里希型。
//
// 为此，我们将使用以下惯例。属于Gamma1的面将有边界指示器[2.x.5179]（这是默认的，所以我们不需要明确设置），属于Gamma2的面将使用[2.x.5180]作为边界指示器。 为了设置这些值，我们在所有单元格上循环，然后在给定单元格的所有面上循环，检查它是否是我们想用Gamma2表示的边界的一部分，如果是，则将其边界指示器设置为[2.x.5181] 。在本程序中，我们认为左边和底部的边界是Gamma2。我们通过询问一个面的中点的x或y坐标（即向量分量0和1）是否等于-1来确定一个面是否是该边界的一部分，但我们必须给出一些小的回旋余地，因为比较在中间计算中会有四舍五入的浮点数是不稳定的。
//
// 值得注意的是，我们必须在这里对所有的单元格进行循环，而不仅仅是活动单元格。原因是在细化时，新创建的面会继承其父面的边界指标。如果我们现在只设置活动面的边界指示器，粗化一些单元并在以后细化它们，它们将再次拥有我们没有修改的父单元的边界指示器，而不是我们想要的那个。因此，我们必须改变Gamma2上所有单元的面的边界指标，无论它们是否处于活动状态。另外，我们当然也可以在最粗的网格上完成这项工作（即在第一个细化步骤之前），之后才细化网格。
//
[0.x.41466] 
[0.x.41467] 
[0.x.41468] 
[0.x.41469] 
[0.x.41470] 
[0.x.41471] 
[0.x.41472] 
[0.x.41473] 
[0.x.41474] 
[0.x.41475] 
[0.x.41476] 
//
[0.x.41477] 
[0.x.41478] 
[0.x.41479] 
[0.x.41480] 
[0.x.41481] 
[0.x.41482] 
[0.x.41483] 
[0.x.41484] 
[0.x.41485] 
[0.x.41486] 
[0.x.41487] 
//
// 接下来的步骤在前面的例子中已经知道了。这主要是每个有限元程序的基本设置。
//
[0.x.41488] 
//
[0.x.41489] 
[0.x.41490] 
//
// 在这一连串的函数调用中，最后一步通常是对自己感兴趣的数量的计算解进行评估。这在下面的函数中完成。由于该函数产生的输出显示了当前细化步骤的编号，我们将这个编号作为一个参数传递。
//
[0.x.41491] 
[0.x.41492] 
//[2.x.5182] 
//
// 在最后一次迭代后，我们在最细的网格上输出解决方案。这是用下面的语句序列完成的，我们在以前的例子中已经讨论过了。第一步是生成一个合适的文件名（这里称为[2.x.5183]，因为我们想以VTK格式输出数据；我们添加前缀以区分该文件名与下面其他输出文件的文件名）。在这里，我们通过网格细化算法来增加名称，和上面一样，我们要确保在增加了另一种细化方法而没有通过下面的switch语句来处理的情况下，中止程序。
//
[0.x.41493] 
[0.x.41494] 
[0.x.41495] 
[0.x.41496] 
[0.x.41497] 
[0.x.41498] 
[0.x.41499] 
[0.x.41500] 
[0.x.41501] 
[0.x.41502] 
[0.x.41503] 
[0.x.41504] 
//
// 我们用一个后缀来增加文件名，表示我们在计算中使用的有限元。为此，有限元基类将每个坐标变量中形状函数的最大多项式程度存储为一个变量[2.x.5184]，我们在切换语句中使用（注意，双线性形状函数的多项式程度实际上是2，因为它们包含术语[2.x.5185]；但是，每个坐标变量的多项式程度仍然只有1）。我们再次使用同样的防御性编程技术来防止多项式阶数具有意外值的情况，在switch语句的默认分支中使用[2.x.5186]这个成语。
//
[0.x.41505] 
[0.x.41506] 
[0.x.41507] 
[0.x.41508] 
[0.x.41509] 
[0.x.41510] 
[0.x.41511] 
[0.x.41512] 
//
[0.x.41513] 
[0.x.41514] 
[0.x.41515] 
//
// 一旦我们有了输出文件的基本名称，我们就为VTK输出添加一个合适的扩展名，打开一个文件，并将解决方案的向量添加到将进行实际输出的对象中。
//
[0.x.41516] 
[0.x.41517] 
//
[0.x.41518] 
[0.x.41519] 
[0.x.41520] 
//
// 现在像以前一样建立中间格式是下一步。我们在这里再介绍一下deal.II的一个特点。其背景如下：在这个函数的一些运行中，我们使用了双二次元的有限元。然而，由于几乎所有的输出格式都只支持双线性数据，所以数据只写成了双线性，信息因此而丢失。 当然，我们不能改变图形程序接受其输入的格式，但我们可以用不同的方式来写数据，这样我们就能更接近于四次方近似中的信息。例如，我们可以把每个单元写成四个子单元，每个子单元都有双线数据，这样我们在三角图中的每个单元都有九个数据点。当然，图形程序显示的这些数据仍然只是双线性的，但至少我们又给出了一些我们拥有的信息。
//
// 为了允许在每个实际单元中写入多个子单元，[2.x.5187]函数接受一个参数（默认为[2.x.5188] ，这就是为什么你在之前的例子中没有看到这个参数）。这个参数表示每个空间方向上的每个单元应被细分为多少个子单元来输出。例如，如果你给出 [2.x.5189] ，这将导致二维的4个单元和三维的8个单元。对于二次元元素，每个空间方向的两个子单元显然是正确的选择，所以这就是我们所选择的。一般来说，对于多项式阶的元素[2.x.5190]细分，元素的顺序也是按照上述方式确定的。
//
// 有了这样生成的中间格式，我们就可以实际写入图形输出了。
//
[0.x.41521] 
[0.x.41522] 
//[2.x.5191] 
//
// 在图形输出之后，我们还想从我们在 [2.x.5192] 中进行的误差计算中生成表格。在那里，我们用每个细化步骤的单元格数量以及不同规范的误差来填充一个表格对象。
//
// 为了使这些数据有更好的文本输出，我们可能想设置输出时写入数值的精度。我们使用3位数，这对误差规范来说通常是足够的。默认情况下，数据是以定点符号写入的。然而，对于人们想看到的科学符号的列，另一个函数调用设置了[2.x.5193] ，导致数字的浮点表示。
//
[0.x.41523] 
[0.x.41524] 
[0.x.41525] 
//
[0.x.41526] 
[0.x.41527] 
[0.x.41528] 
//
// 对于输出到LaTeX文件的表格，默认的列的标题是作为参数给[2.x.5194]函数的键。要想拥有不同于默认的TeX标题，你可以通过以下函数调用来指定它们。注意，`\\'被编译器简化为`\'，这样，真正的TeX标题就是，例如，`[2.x.5195] -error'。
//
[0.x.41529] 
[0.x.41530] 
[0.x.41531] 
[0.x.41532] 
[0.x.41533] 
//
// 最后，表格中每一列的默认LaTeX格式是`c'（居中）。要指定一个不同的（如`右'），可以使用以下函数。
//
[0.x.41534] 
[0.x.41535] 
//
// 在这之后，我们终于可以把表写到标准输出流[2.x.5196]（在多写一行空行之后，使事情看起来更漂亮）。请注意，文本格式的输出是非常简单的，标题可能不会直接打印在特定的列上面。
//
[0.x.41536] 
[0.x.41537] 
//
// 该表也可以写成LaTeX文件。 在调用 "latex filename "和例如 "xdvi filename "后，可以查看（很好的）格式化的表格，其中filename是我们现在要写入输出的文件名。我们构建文件名的方法和以前一样，但有一个不同的前缀 "error"。
//
[0.x.41538] 
[0.x.41539] 
[0.x.41540] 
[0.x.41541] 
[0.x.41542] 
[0.x.41543] 
[0.x.41544] 
[0.x.41545] 
[0.x.41546] 
[0.x.41547] 
[0.x.41548] 
[0.x.41549] 
//
[0.x.41550] 
[0.x.41551] 
[0.x.41552] 
[0.x.41553] 
[0.x.41554] 
[0.x.41555] 
[0.x.41556] 
[0.x.41557] 
[0.x.41558] 
[0.x.41559] 
[0.x.41560] 
//
[0.x.41561] 
[0.x.41562] 
//
[0.x.41563] 
//[2.x.5197] 
//
// 在全局细化的情况下，输出收敛率也可能是有意义的。这可以通过ConvergenceTable提供的比常规TableHandler的功能来实现。然而，我们只为全局细化做这件事，因为对于自适应细化来说，确定像收敛顺序这样的事情是比较麻烦的。在此，我们还展示了一些可以用表来做的其他事情。
//
[0.x.41564] 
[0.x.41565] 
//
// 第一件事是，人们可以将单个列组合在一起，形成所谓的超级列。从本质上讲，这些列保持不变，但被分组的那些列将得到一个贯穿一组中所有列的标题。例如，让我们把 "周期 "和 "单元格 "两列合并成一个名为 "n单元格 "的超级列。
//
[0.x.41566] 
[0.x.41567] 
//
// 接下来，没有必要总是输出所有的列，或者按照它们在运行过程中最初添加的顺序。选择和重新排列列的工作方式如下（注意，这包括超级列）。
//
[0.x.41568] 
[0.x.41569] 
[0.x.41570] 
[0.x.41571] 
[0.x.41572] 
//
// 对于在这之前发生在ConvergenceTable上的一切，使用一个简单的TableHandler就足够了。事实上，ConvergenceTable是由TableHandler派生出来的，但它提供了自动评估收敛率的额外功能。例如，下面是我们如何让表计算减少率和收敛率（收敛率是减少率的二进制对数）。
//
[0.x.41573] 
[0.x.41574] 
[0.x.41575] 
[0.x.41576] 
[0.x.41577] 
[0.x.41578] 
[0.x.41579] 
[0.x.41580] 
//
// 这些函数的每一次调用都会产生一个额外的列，与原来的列（在我们的例子中是 "L2 "和 "H1 "列）合并成一个超级列。
//
// 最后，我们想再次写下这个收敛图，首先写到屏幕上，然后以LaTeX格式写到磁盘上。文件名还是按照上面的方法构建。
//
[0.x.41581] 
[0.x.41582] 
//
[0.x.41583] 
[0.x.41584] 
[0.x.41585] 
[0.x.41586] 
[0.x.41587] 
[0.x.41588] 
[0.x.41589] 
[0.x.41590] 
[0.x.41591] 
[0.x.41592] 
[0.x.41593] 
[0.x.41594] 
[0.x.41595] 
[0.x.41596] 
[0.x.41597] 
[0.x.41598] 
[0.x.41599] 
[0.x.41600] 
[0.x.41601] 
[0.x.41602] 
[0.x.41603] 
[0.x.41604] 
[0.x.41605] 
[0.x.41606] 
//
[0.x.41607] 
[0.x.41608] 
[0.x.41609] 
[0.x.41610] 
//
// 在进入[2.x.5198]之前的最后一步是关闭命名空间[2.x.5199]，我们已经把这个程序所需要的一切都放在这个命名空间里。
//
[0.x.41611] 
//[2.x.5200] 
//
// 主函数主要和以前一样。唯一不同的是，我们解了三次，一次是Q1和适应性细化，一次是Q1元素和全局细化，一次是Q2元素和全局细化。
//
// 由于我们在下面为两个空间维度实例化了几个模板类，我们通过在函数的开头声明一个常数来表示空间维度的数量，使之更加通用。如果你想在1d或2d中运行程序，那么你只需要改变这个实例，而不是下面的所有用法。
//
[0.x.41612] 
[0.x.41613] 
[0.x.41614] 
//
[0.x.41615] 
[0.x.41616] 
[0.x.41617] 
[0.x.41618] 
//
// 现在是对主类的三次调用。每个调用都被封锁在大括号中，以便在区块结束时和我们进入下一个运行之前销毁各自的对象（即有限元和HelmholtzProblem对象）。这就避免了变量名称的冲突，也确保了在三次运行中的一次运行结束后立即释放内存，而不是只在[2.x.5201]块的末尾释放。
//
[0.x.41619] 
[0.x.41620] 
[0.x.41621] 
[0.x.41622] 
[0.x.41623] 
[0.x.41624] 
//
[0.x.41625] 
[0.x.41626] 
[0.x.41627] 
//
[0.x.41628] 
//
[0.x.41629] 
[0.x.41630] 
//
[0.x.41631] 
[0.x.41632] 
[0.x.41633] 
[0.x.41634] 
//
[0.x.41635] 
[0.x.41636] 
[0.x.41637] 
//
[0.x.41638] 
//
[0.x.41639] 
[0.x.41640] 
//
[0.x.41641] 
[0.x.41642] 
[0.x.41643] 
[0.x.41644] 
//
[0.x.41645] 
[0.x.41646] 
[0.x.41647] 
//
[0.x.41648] 
//
[0.x.41649] 
[0.x.41650] 
[0.x.41651] 
[0.x.41652] 
[0.x.41653] 
[0.x.41654] 
[0.x.41655] 
//
[0.x.41656] 
[0.x.41657] 
[0.x.41658] 
//
[0.x.41659] 
//
[0.x.41660] 
[0.x.41661] 
[0.x.41662] 
[0.x.41663] 
[0.x.41664] 
[0.x.41665] 
[0.x.41666] 
[0.x.41667] 
[0.x.41668] 
[0.x.41669] 
[0.x.41670] 
[0.x.41671] 
[0.x.41672] 
[0.x.41673] 
[0.x.41674] 
[0.x.41675] 
[0.x.41676] 
[0.x.41677] 
[0.x.41678] 
[0.x.41679] 
[0.x.41680] 
[0.x.41681] 
[0.x.41682] 
[0.x.41683] 
[0.x.41684] 
[0.x.41685] 
[0.x.41686] 
[0.x.41687] 
//
[0.x.41688] 
[0.x.41689] 
[0.x.41690] 
[0.x.41691] 
[0.x.41692] 
[0.x.41693] 
[0.x.41694] 
[0.x.41695] 
[0.x.41696] 
[0.x.41697] 
[0.x.41698] 
[0.x.41699] 
[0.x.41700] 
[0.x.41701] 
[0.x.41702] 
[0.x.41703] 
//
[0.x.41704] 
[0.x.41705] 
[0.x.41706] 
//[2.x.5202] 其中大部分已经在其他地方介绍过了，我们只对新的部分进行评论。靠近顶部的开关允许在 PETSc 和 Trilinos 线性代数功能之间进行选择，这与 [2.x.5203] 和 [2.x.5204] 中的开关类似。
//
[0.x.41707] 
[0.x.41708] 
[0.x.41709] 
//
[0.x.41710] 
[0.x.41711] 
[0.x.41712] 
[0.x.41713] 
//
[0.x.41714] 
//
[0.x.41715] 
[0.x.41716] 
[0.x.41717] 
[0.x.41718] 
[0.x.41719] 
[0.x.41720] 
[0.x.41721] 
[0.x.41722] 
[0.x.41723] 
[0.x.41724] 
[0.x.41725] 
[0.x.41726] 
//
[0.x.41727] 
[0.x.41728] 
[0.x.41729] 
[0.x.41730] 
[0.x.41731] 
//
[0.x.41732] 
[0.x.41733] 
[0.x.41734] 
//
[0.x.41735] 
[0.x.41736] 
[0.x.41737] 
//
[0.x.41738] 
[0.x.41739] 
[0.x.41740] 
[0.x.41741] 
[0.x.41742] 
[0.x.41743] 
//
[0.x.41744] 
[0.x.41745] 
[0.x.41746] 
[0.x.41747] 
//
[0.x.41748] 
[0.x.41749] 
[0.x.41750] 
[0.x.41751] 
[0.x.41752] 
[0.x.41753] 
[0.x.41754] 
[0.x.41755] 
[0.x.41756] 
[0.x.41757] 
[0.x.41758] 
[0.x.41759] 
//
[0.x.41760] 
[0.x.41761] 
[0.x.41762] 
//
// 这些是关于 [2.x.5205] 的唯一新的包含文件。在本教程中，实体和流体之间的非匹配耦合是通过一个中间数据结构来计算的，该结构记录了实体的正交点在流体网格中的位置如何演变。这个数据结构需要跟踪描述实体域的每个单元上的正交点的位置、正交权重，如果实体域是同维度的，还需要跟踪每个点的法向量。
//
// Deal.II通过ParticleHandler类在Particles命名空间中提供这些设施。ParticleHandler是一个允许你管理粒子集合的类（类型为[2.x.5206]的对象，代表具有一些附加属性（如id）的点的集合，漂浮在一个[2.x.5207]命名空间中的方法和类允许人们轻松实现Particle-In-Cell方法和在分布式三角形上的粒子追踪。
//
// 我们 "滥用 "这个数据结构来存储嵌入周围流体网格中的实体正交点的位置信息，包括积分权重，以及可能的表面法线。我们之所以使用这个额外的数据结构，是因为实体网格和流体网格可能是不重叠的，如果我们使用两个独立的三角计算对象，那么它们将独立地分布在并行进程中。
//
// 为了耦合这两个问题，我们依靠ParticleHandler类，在每个粒子中存储一个实体正交点的位置（一般来说，它不与任何流体正交点对齐），它的权重，以及耦合这两个问题可能需要的任何其他信息。这些位置然后与固体叶轮的（规定）速度一起传播。
//
// 固体正交点的所有权最初是从固体网格本身的MPI分区中继承的。这样产生的粒子后来通过ParticleHandler类的方法分配到流体网格中。这允许MPI进程之间透明地交换关于流体单元和实体正交点之间的重叠模式的信息。
//
[0.x.41763] 
[0.x.41764] 
[0.x.41765] 
[0.x.41766] 
//
// 在生成网格时，我们允许从文件中读取它，如果deal.II已经建立了OpenCASCADE支持，我们也允许读取CAD文件，并将它们作为网格的流形描述符（参见[2.x.5208]对OpenCASCADE命名空间中的各种流形描述符的详细描述）。
//
[0.x.41767] 
[0.x.41768] 
[0.x.41769] 
[0.x.41770] 
[0.x.41771] 
//
[0.x.41772] 
[0.x.41773] 
[0.x.41774] 
[0.x.41775] 
//
[0.x.41776] 
[0.x.41777] 
[0.x.41778] 
//[2.x.5209] 
//
// 与我们在[2.x.5210]中所做的类似，我们建立了一个持有我们问题的所有参数的类，并从ParameterAcceptor类中派生出来以简化参数文件的管理和创建。
//
// ParameterAcceptor范式要求所有参数都可以被ParameterAcceptor方法写入。为了避免出现很难追踪的错误（比如写成`time = 0`而不是`time == 0`），我们在一个外部类中声明所有的参数，该类在实际的`StokesImmersedProblem`类之前被初始化，并将其作为`const`引用传递给主类。
//
// 该类的构造函数负责该类的成员与ParameterHandler中的相应条目之间的连接。由于使用了[2.x.5211]方法，这种连接是微不足道的，但要求这个类的所有成员都是可写的。
//
[0.x.41779] 
[0.x.41780] 
[0.x.41781] 
[0.x.41782] 
[0.x.41783] 
//
// 然而，由于这个类将作为一个`const`引用传递给StokesImmersedProblem类，我们必须确保我们仍然可以在这里定义的Function类派生的对象中正确设置时间。为了做到这一点，我们声明[2.x.5212]和[2.x.5213]成员都是 "可变 "的，并定义以下的小辅助方法，将它们的时间设置为正确的值。
//
[0.x.41784] 
[0.x.41785] 
[0.x.41786] 
[0.x.41787] 
[0.x.41788] 
//
// 该类的其余部分主要由描述模拟及其离散化细节的成员变量组成。下面的参数是关于输出的位置、空间和时间离散化（默认是[2.x.5214]Taylor-Hood离散化，它使用2度的多项式来计算速度），以及在我们再次生成图形输出之前应该经过多少时间步长。
//
[0.x.41789] 
//
[0.x.41790] 
//
[0.x.41791] 
[0.x.41792] 
//
[0.x.41793] 
//
// 我们允许每个网格独立地被细化。在本教程中，固体网格上没有解决物理问题，其速度被作为基准点给出。然而，在本教程中加入一些弹性模型，并将其转化为一个完全成熟的FSI求解器是相对简单的。
//
[0.x.41794] 
[0.x.41795] 
[0.x.41796] 
//
// 为了提供对流体领域的粗略描述，我们使用extract_rtree_level()方法，该方法适用于流体三角结构中每个局部拥有的单元的边界盒树。树的级别越高，提取的边界盒数量就越多，对流体领域的描述也就越准确。然而，大量的边界盒也意味着巨大的通信成本，因为边界盒的收集是由所有进程收集的。
//
[0.x.41797] 
//
// 方程中使用的唯一两个数值参数是流体的粘度，以及Nitsche公式中使用的惩罚项[2.x.5215]。
//
[0.x.41798] 
[0.x.41799] 
//
// 默认情况下，我们创建一个没有着色的hyper_cube，并且我们使用同质的Dirichlet边界条件。在这个集合中，我们存储了设置边界条件时要使用的边界ID。
//
[0.x.41800] 
//
// 我们在此说明另一种从参数文件中创建三角形的方法，使用[2.x.5216]，该方法接收GridGenerator命名空间中的函数名称，其参数为一个字符串，代表参数的元组。
//
// 在[2.x.5217]类中详细解释了将参数从字符串解析成字符串的机制，该类用于将字符串翻译成大多数基本STL类型（向量、映射、图元）和基本deal.II类型（点、张量、BoundingBox等）。
//
// 一般来说，可以用等级1的统一元素表示的对象（即[2.x.5218] Point<dim>, [2.x.5219] 等）是用逗号分开的。额外的等级采取分号，允许你将字符串解析为[2.x.5220]或例如[2.x.5221]类型的对象，如`0.0, 0.1; 0.1, 0.2`。这个字符串可以被解释为两个Point对象的向量，或者一个双数向量的向量。
//
// 当条目不统一时，比如在元组的情况下，我们用冒号来分隔各个条目。例如，像`5: 0.1, 0.2`这样的字符串可以用来解析一个类型为[2.x.5222] Point<2>>的对象或者一个[2.x.5223] 的对象。
//[2.x.5224] 
//
// 在我们的例子中，大多数参数是点对象（代表中心、角、细分元素等）、整数值（细分数量）、双倍值（半径、长度等）或布尔选项（如许多GridGenerator函数采取的`colorize`选项）。
//
// 在下面的例子中，我们设置了合理的默认值，但这些值可以在运行时通过选择GridGenerator命名空间的任何其他支持的函数来改变。如果GridGenerator函数失败，本程序将把网格的名称解释为vtk网格文件名，把参数解释为从manifold_id到描述域的几何形状的CAD文件的映射。每个CAD文件都将被分析，并根据CAD文件本身的内容生成OpenCASCADE命名空间的Manifold。
//
// 为了尽可能的通用，我们对每个生成的网格都这样做：流体网格、固体网格，但也包括使用三角法生成的示踪粒子。
//
[0.x.41801] 
[0.x.41802] 
[0.x.41803] 
[0.x.41804] 
[0.x.41805] 
[0.x.41806] 
[0.x.41807] 
[0.x.41808] 
[0.x.41809] 
//
// 同样地，我们允许不同的局部细化策略。特别是，我们限制了细化水平的最大数量，以控制流体网格的最小尺寸，并保证它与实体网格兼容。细化级数的最小值也得到了控制，以确保在流动的大部分地区有足够的精度。此外，我们根据流体速度场的标准误差估计器进行局部细化。
//
// 我们允许用户选择两种最常见的细化策略，即 "fixed_number "或 "fixed_fraction"，这两种策略参考了[2.x.5225]和[2.x.5226]方法。
//
// 细化可以每隔几个时间步骤进行一次，而不是连续进行，我们通过`细化_频率`参数来控制这个值。
//
[0.x.41810] 
[0.x.41811] 
[0.x.41812] 
[0.x.41813] 
[0.x.41814] 
[0.x.41815] 
[0.x.41816] 
//
// 最后，以下两个函数对象被用来控制斯托克斯流的源项和我们移动固体体的角速度。在一个更现实的模拟中，实体速度或其变形将来自于实体域上的辅助问题的解决。在这个例子中，我们把这部分放在一边，只是在浸没的固体上沿Z轴施加一个固定的旋转速度场，由一个可以在参数文件中指定的函数来控制。
//
[0.x.41817] 
[0.x.41818] 
[0.x.41819] 
[0.x.41820] 
//
// 还有一个任务就是声明我们在输入文件中可以接受哪些运行时参数。我们将这些参数分成不同的类别，把它们放在ParameterHandler类的不同部分。我们首先在全局范围内声明StokesImmersedProblem使用的所有全局参数。
//
[0.x.41821] 
[0.x.41822] 
[0.x.41823] 
[0.x.41824] 
[0.x.41825] 
[0.x.41826] 
[0.x.41827] 
[0.x.41828] 
[0.x.41829] 
//
[0.x.41830] 
[0.x.41831] 
//
[0.x.41832] 
//
[0.x.41833] 
//
[0.x.41834] 
//
[0.x.41835] 
//
[0.x.41836] 
[0.x.41837] 
[0.x.41838] 
//
[0.x.41839] 
[0.x.41840] 
[0.x.41841] 
//
[0.x.41842] 
[0.x.41843] 
[0.x.41844] 
[0.x.41845] 
//
[0.x.41846] 
[0.x.41847] 
[0.x.41848] 
[0.x.41849] 
//
[0.x.41850] 
[0.x.41851] 
[0.x.41852] 
[0.x.41853] 
//
// 下一节专门介绍用于创建各种网格的参数。我们将需要三种不同的三角形。流体网格 "用于定义流体领域，"固体网格 "用于定义固体领域，"粒子网格 "用于分布一些示踪粒子，这些粒子随速度漂移，只作为被动示踪物使用。
//
[0.x.41854] 
[0.x.41855] 
[0.x.41856] 
[0.x.41857] 
//
[0.x.41858] 
[0.x.41859] 
//
 
[0.x.41861] 
[0.x.41862] 
[0.x.41863] 
[0.x.41864] 
//
[0.x.41865] 
[0.x.41866] 
[0.x.41867] 
[0.x.41868] 
[0.x.41869] 
[0.x.41870] 
[0.x.41871] 
[0.x.41872] 
[0.x.41873] 
[0.x.41874] 
[0.x.41875] 
[0.x.41876] 
[0.x.41877] 
[0.x.41878] 
[0.x.41879] 
//
// 最后的任务是修正右侧函数的默认尺寸，并定义一个有意义的默认角速度而不是零。
//
[0.x.41880] 
[0.x.41881] 
[0.x.41882] 
[0.x.41883] 
[0.x.41884] 
[0.x.41885] 
[0.x.41886] 
[0.x.41887] 
[0.x.41888] 
//
// 一旦角速度被提供为一个函数对象，我们就通过下面这个派生自函数类的类来重建点状实体速度。它通过假设实体以给定的角速度绕原点（或3D中的[2.x.5227]轴）旋转，提供实体在给定位置的速度值。
//
[0.x.41889] 
[0.x.41890] 
[0.x.41891] 
[0.x.41892] 
[0.x.41893] 
[0.x.41894] 
//
[0.x.41895] 
[0.x.41896] 
[0.x.41897] 
//
[0.x.41898] 
[0.x.41899] 
[0.x.41900] 
[0.x.41901] 
//
// 我们假设角速度是沿Z轴方向的，也就是说，我们把实际的角速度模拟成二维旋转，而不考虑`spacedim`的实际值。
//
[0.x.41902] 
[0.x.41903] 
[0.x.41904] 
//
[0.x.41905] 
[0.x.41906] 
//
[0.x.41907] 
[0.x.41908] 
[0.x.41909] 
//
// 同样地，我们假设固体的位置可以在每个时间步长明确地计算出来，利用角速度的知识。我们计算固体粒子的确切位置，假定固体的旋转量等于时间步长乘以在`p`点计算的角速度。
//
[0.x.41910] 
[0.x.41911] 
[0.x.41912] 
[0.x.41913] 
[0.x.41914] 
[0.x.41915] 
//
[0.x.41916] 
[0.x.41917] 
[0.x.41918] 
[0.x.41919] 
[0.x.41920] 
[0.x.41921] 
//
[0.x.41922] 
[0.x.41923] 
[0.x.41924] 
[0.x.41925] 
//
[0.x.41926] 
//
[0.x.41927] 
[0.x.41928] 
//
[0.x.41929] 
[0.x.41930] 
//
[0.x.41931] 
[0.x.41932] 
[0.x.41933] 
[0.x.41934] 
//
[0.x.41935] 
[0.x.41936] 
[0.x.41937] 
[0.x.41938] 
//[2.x.5228] 
//
// 我们现在准备介绍我们的教程程序的主类。像往常一样，除了构造函数外，我们只留下一个公共入口：`run()`方法。其他的都是 "私有 "的，并通过run方法本身进行访问。
//
[0.x.41939] 
[0.x.41940] 
[0.x.41941] 
[0.x.41942] 
[0.x.41943] 
[0.x.41944] 
//
[0.x.41945] 
//
// 接下来的部分包含了该类的`private`成员。第一个方法类似于前一个例子中的方法。然而，它不仅负责生成流体的网格，而且还负责生成固体的网格。第二个方法是计算最大的时间步长，保证每个粒子最多移动一个单元。这对于确保[2.x.5229]能够找到粒子最终所在的单元是非常重要的，因为它只能从一个单元看向它的近邻（因为在并行设置中，每个MPI进程只知道它拥有的单元以及它们的近邻）。
//
[0.x.41946] 
[0.x.41947] 
//
[0.x.41948] 
//
// 接下来的两个函数将初始化这个类中使用的[2.x.5230]对象。我们有两个这样的对象。一个代表被动追踪器，用于绘制流体粒子的轨迹，而另一个代表固体的材料粒子，它们被放置在固体网格的正交点上。
//
[0.x.41949] 
[0.x.41950] 
//
// 剩下的设置分为两部分。以下两个函数中的第一个创建了每次模拟需要的所有对象，而另一个则设置了所有需要在每个细化步骤中重新初始化的对象。
//
[0.x.41951] 
[0.x.41952] 
//
// 装配例程与其他斯托克斯装配例程非常相似，但Nitsche限制部分除外，它利用其中一个粒子处理程序在流体域的非匹配部分进行积分，对应于固体的位置。我们将这两部分分成两个独立的函数。
//
[0.x.41953] 
[0.x.41954] 
//
// 其余的函数求解线性系统（看起来与[2.x.5231]中的线性系统几乎相同），然后对解进行后处理。refine_and_transfer()方法仅在每一个`refinement_frequency`步骤中被调用，以适应网格，并确保所有在细化前的时间步骤中计算的场都正确地转移到新的网格中。这包括矢量场，以及粒子信息。同样地，我们每隔`output_frequency`步就会调用两个输出方法。
//
[0.x.41955] 
//
[0.x.41956] 
//
[0.x.41957] 
[0.x.41958] 
[0.x.41959] 
[0.x.41960] 
[0.x.41961] 
//
//接下来让我们来看看这个类的成员函数。第一个是处理从参数文件中读取的运行时参数。如前所述，我们通过使其成为一个`const`引用来确保我们不能从这个类中修改这个对象。
//
[0.x.41962] 
//
// 然后还有MPI通信器对象，如果程序是并行运行的，我们将用它来让进程在网络上发送信息，还有`pcout`对象和定时器信息，也被[2.x.5232]采用，例如。
//
[0.x.41963] 
//
[0.x.41964] 
//
[0.x.41965] 

// 接下来是关于 [2.x.5233] 的主要创新点之一。这里我们假设固体和流体都是完全分布的三角形。这使得问题可以扩展到非常大的自由度，代价是要沟通所有非匹配三角形之间的重叠区域。这一点特别棘手，因为我们没有对两个三角形的各个子域的相对位置或分布做出假设。特别是，我们假设每个进程只拥有 "solid_tria "的一部分，以及 "fluid_tria "的一部分，不一定在同一个物理区域，也不一定重叠。
//
// 我们原则上可以尝试创建初始分区，使每个过程的子域在固体和流体区域之间重叠。然而，这种重叠在模拟过程中会被破坏，我们将不得不一次又一次地重新分配DoF。我们在本教程中采用的方法更加灵活，而且成本也不高。我们在模拟开始时进行两次全对全的通信，以交换每个处理器的几何占用信息（近似）（通过包围盒的集合完成）。
//
// 这个信息被[2.x.5234]类用来交换（使用某对某的通信模式）所有的粒子，因此每个进程都知道生活在它所拥有的流体子域所占区域的粒子。
//
// 为了把重叠的区域连接起来，我们利用了ParticleHandler类中实现的设施。
//
[0.x.41966] 
[0.x.41967] 
//
// 接下来是对所使用的有限元的描述，以及适当的正交公式和相应的DoFHandler对象。在目前的实现中，只有`fluid_fe`是真正必要的。为了完整起见，并便于扩展，我们还保留了`solid_fe`，但它被初始化为一个FE_Nothing有限元空间，即没有自由度的空间。
//
// 我们将这两个有限元空间声明为[2.x.5235]对象，而不是普通的成员变量，以便在`StokesImmersedProblemParameters'被初始化后生成它们。特别是，它们将在`initial_setup()`方法中被初始化。
//
[0.x.41968] 
[0.x.41969] 
//
[0.x.41970] 
[0.x.41971] 
//
[0.x.41972] 
[0.x.41973] 
//
[0.x.41974] 
//
// 与[2.x.5236]中的做法类似，我们使用一个块状系统来处理问题的斯托克斯部分，并非常密切地遵循那里的做法。
//
[0.x.41975] 
[0.x.41976] 
//
[0.x.41977] 
[0.x.41978] 
//
// 利用这种自由度的划分，我们就可以定义所有必要的对象来描述有关的线性系统。
//
[0.x.41979] 
//
[0.x.41980] 
[0.x.41981] 
//
[0.x.41982] 
[0.x.41983] 
[0.x.41984] 
//
// 让我们转到这个程序的粒子方面。有两个[2.x.5237]对象用于耦合固体和流体，以及描述被动追踪器。在许多方面，这些对象的作用类似于离散化中使用的DoFHandler类，也就是说，它们提供了粒子的枚举，并允许查询每个粒子的信息。
//
[0.x.41985] 
[0.x.41986] 
//
// 对于每个追踪器粒子，我们需要计算其当前位置的速度场，并使用离散时间步进方案更新其位置。我们使用分布式线性代数对象来做这件事，这些对象存储了每个粒子的位置或速度的坐标。也就是说，这些向量有`tracer_particle_handler.n_global_particles() * spacedim`项，我们将以一种方式来存储这些向量的一部分，以便在所有进程中进行划分。(隐含地，我们在此假设每个粒子的`spacedim'坐标被存储在向量的连续条目中)。因此，我们需要确定每个向量条目的所有者是谁。我们将这个所有者设定为等于在时间[2.x.5238]产生该粒子的进程。这个信息对每一个进程都存储在`locally_owned_tracer_particle_coordinates`索引集里。
//
// 一旦粒子被分配到与拥有粒子所在区域的进程相匹配，我们将需要从该进程读取相应的速度场。我们通过填充一个只读的速度矢量场来实现这一目标，该矢量场包含了Ghost条目中的相关信息。这是通过`locally_relevant_tracer_particle_coordinates`索引集实现的，该索引集记录了模拟过程中的变化情况，也就是说，它记录了当前进程拥有的粒子最终出现在哪里，以及谁拥有最终出现在我的子域的粒子。
//
// 虽然这不是最有效的策略，但我们保持这种方式是为了说明事情在真实的流固耦合（FSI）问题中是如何运作的。如果一个粒子与一个特定的固体自由度相联系，我们就不能自由选择谁拥有它，我们必须把这个信息传达给周围的人。我们在这里说明了这一点，并表明通信模式是点对点的，就算法的总成本而言可以忽略不计。
//
// 然后，基于这些细分定义的向量被用来存储粒子的速度（只读，有幽灵条目）和它们的位移（读/写，没有幽灵条目）。
//
[0.x.41987] 
[0.x.41988] 
//
[0.x.41989] 
[0.x.41990] 
//
// 本教程程序的关键点之一是两个独立的[2.x.5239]对象之间的耦合，其中一个对象可能相对于另一个对象移动和变形（可能有较大的变形）。当流体和实体的三角形都是[2.x.5240]类型时，每个进程只能访问这两个三角形中每个单元的局部拥有的部分。如上所述，一般情况下，本地拥有的域是不重叠的。
//
// 为了允许在不重叠的[2.x.5241]对象之间有效地交换信息，该库的一些算法要求用户提供三角形的本地拥有部分所占区域的粗略描述，其形式是每个进程的轴对齐的边界盒集合，这些边界盒提供了域的本地拥有部分的完整覆盖。这种信息就可以用于这样的情况：人们需要向已知位置周围的单元格的所有者发送信息，而不知道这个所有者实际上是谁。但是，如果我们知道每个进程拥有的几何区域或体积的边界盒集合，那么我们就可以确定可能拥有该位置所在单元的所有进程的一个子集：即其边界盒包含该点的所有进程。与其向所有进程发送与该位置相关的信息，不如只向具有点对点通信基元的一小部分进程发送信息。你会注意到，这也允许典型的时间与内存的权衡：我们愿意存储的关于每个进程拥有的区域的数据越多--以更精细的边界框信息的形式--我们必须执行的通信就越少）。
//
// 我们通过收集一个向量（长度为[2.x.5242]的BoundingBox对象的向量）来构建这些信息。我们用extract_rtree_level()函数填充这个向量，并允许用户选择要提取的树的哪一级。这个 "级别 "对应的是与边界框重叠的区域应该有多粗/多细。
//
// 作为一个例子，这是由extract_rtree_level()函数对一个分布在三个过程中的二维超球所提取的结果。每张图片中，绿色显示的是与每个进程上的三角形的本地所有单元相关的边界框，紫色显示的是从rtree中提取的边界框。
//
// [2.x.5243] 
//[2.x.5244] 
//[2.x.5245] 
//
// 我们将这些盒子存储在一个全局成员变量中，在每个细化步骤中都会更新。
//
[0.x.41991] 
[0.x.41992] 
//
// [2.x.5246] 
//[2.x.5247] 
//
// 在构造函数中，我们创建了mpi_communicator，以及流体和实体的三角计算和dof_handler。通过使用mpi_communicator，我们构建了ConditionalOStream和TimerOutput对象。
//
[0.x.41993] 
[0.x.41994] 
[0.x.41995] 
[0.x.41996] 
[0.x.41997] 
[0.x.41998] 
[0.x.41999] 
[0.x.42000] 
[0.x.42001] 
[0.x.42002] 
[0.x.42003] 
[0.x.42004] 
[0.x.42005] 
[0.x.42006] 
[0.x.42007] 
[0.x.42008] 
[0.x.42009] 
[0.x.42010] 
[0.x.42011] 
[0.x.42012] 
[0.x.42013] 
[0.x.42014] 
//
// 为了生成网格，我们首先尝试使用deal.II GridGenerator命名空间中的函数，通过利用[2.x.5248] 如果这个函数失败，那么我们使用以下方法，名称被解释为文件名，参数被解释为从流形ID到CAD文件的映射，并使用OpenCASCADE命名空间设施转换为流形描述符。在顶部，我们把文件读成一个三角图。
//
[0.x.42015] 
[0.x.42016] 
[0.x.42017] 
[0.x.42018] 
[0.x.42019] 
[0.x.42020] 
[0.x.42021] 
[0.x.42022] 
//
// 如果我们走到这一步，那么三角图已经被读取，我们已经准备好将正确的流形描述附加到它上面。只有在deal.II支持OpenCASCADE的情况下，我们才会执行接下来的几行代码。对于地图中的每个条目，我们尝试打开相应的CAD文件，分析它，并根据其内容，选择一个[2.x.5249]（如果CAD文件包含一个`TopoDS_Edge'或一个`TopoDS_Wire'）或一个[2.x.5250]，如果文件包含一个面。请注意，如果CAD文件不包含单一的线、边或面，在生成Manifold时将会抛出一个断言。
//
// 我们使用[2.x.5251]类来完成从字符串到歧管ID和文件名之间的映射的转换。
//
[0.x.42023] 
[0.x.42024] 
[0.x.42025] 
//
[0.x.42026] 
[0.x.42027] 
[0.x.42028] 
[0.x.42029] 
//
[0.x.42030] 
[0.x.42031] 
//
[0.x.42032] 
[0.x.42033] 
[0.x.42034] 
[0.x.42035] 
[0.x.42036] 
[0.x.42037] 
[0.x.42038] 
[0.x.42039] 
[0.x.42040] 
[0.x.42041] 
//
// 现在我们检查一下这个 "形状 "中包含了多少个面。OpenCASCADE本质上是三维的，所以如果这个数字是零，我们就把它解释为线状流形，否则就解释为`spacedim`=3中的[2.x.5252]，或者`spacedim`=2中的[2.x.5253]。
//
[0.x.42042] 
[0.x.42043] 
[0.x.42044] 
[0.x.42045] 
[0.x.42046] 
[0.x.42047] 
[0.x.42048] 
//
// 我们使用这个技巧，因为[2.x.5254]只在spacedim = 3的情况下实现。上面的检查保证了事情的实际运作是正确的。
//
[0.x.42049] 
[0.x.42050] 
[0.x.42051] 
[0.x.42052] 
[0.x.42053] 
[0.x.42054] 
//
// 我们也允许基于单个NURBS补丁的二维空间的曲面描述。要做到这一点，CAD文件必须包含一个单一的`TopoDS_Face`。
//
[0.x.42055] 
[0.x.42056] 
[0.x.42057] 
[0.x.42058] 
[0.x.42059] 
[0.x.42060] 
[0.x.42061] 
[0.x.42062] 
[0.x.42063] 
//
// 现在让我们把东西放在一起，并制作所有必要的网格。如上所述，我们首先尝试在内部生成网格，如果我们失败了（即如果我们最终进入了`catch'子句），那么我们就继续执行上述函数。
//
// 我们对流体和固体网格都重复这个模式。
//
[0.x.42064] 
[0.x.42065] 
[0.x.42066] 
[0.x.42067] 
[0.x.42068] 
[0.x.42069] 
[0.x.42070] 
[0.x.42071] 
[0.x.42072] 
[0.x.42073] 
[0.x.42074] 
[0.x.42075] 
[0.x.42076] 
[0.x.42077] 
[0.x.42078] 
[0.x.42079] 
[0.x.42080] 
//
[0.x.42081] 
[0.x.42082] 
[0.x.42083] 
[0.x.42084] 
[0.x.42085] 
[0.x.42086] 
[0.x.42087] 
[0.x.42088] 
[0.x.42089] 
[0.x.42090] 
[0.x.42091] 
//
[0.x.42092] 
[0.x.42093] 
//[2.x.5255] 
//
// 一旦固体和流体网格被创建，我们就开始填充[2.x.5256]对象。我们要处理的第一个对象是用来跟踪流体中的被动追踪器的对象。这些东西只是沿途传送，从某种意义上说，它们的位置并不重要：我们只是想用它们来观察流体被传送的位置。我们可以使用任何我们选择的方式来确定它们的初始位置。一个方便的方法是将初始位置创建为我们所选择的形状的网格顶点，这个选择由参数文件中的一个运行时参数决定。
//
// 在这个实现中，我们使用FE_Q有限元空间的支持点来创建追踪器，这些支持点定义在一个临时网格上，然后被丢弃。在这个网格中，我们只保留与支撑点相关的[2.x.5257]对象（存储在[2.x.5258]类中）。
//
// [2.x.5259]类提供了插入一组粒子的可能性，这些粒子实际生活在活动过程所拥有的域的一部分。然而，在这种情况下，这个功能是不够的。作为任意网格（与流体网格不匹配）上的FE_Q对象的本地拥有的支持点所产生的粒子没有理由位于流体网格的本地拥有的子域的同一物理区域内。事实上，这种情况几乎不会发生，尤其是我们想要跟踪粒子本身发生了什么。
//
// 在粒子入室方法（PIC）中，人们通常习惯于将粒子的所有权分配给粒子所在的过程。在本教程中，我们说明了一种不同的方法，如果想跟踪与粒子有关的信息，这种方法是很有用的（例如，如果一个粒子与一个特定的自由度有关，而这个自由度是由一个特定的过程所拥有的，不一定是在任何特定时间拥有该粒子所在的流体单元的同一个过程）。在这里使用的方法中，粒子的所有权在开始时被分配一次，每当原始所有者需要从拥有粒子所在单元的进程中获得信息时，就会发生一对一的通信。我们确保使用初始粒子分布来设置粒子的所有权，并在程序的整个执行过程中保持相同的所有权。
//
// 有了这个概述，让我们看看这个函数做什么。在顶部，我们创建了一个临时的三角形和DoFHandler对象，我们将从中获取初始粒子位置的节点位置。
//
[0.x.42094] 
[0.x.42095] 
[0.x.42096] 
[0.x.42097] 
[0.x.42098] 
[0.x.42099] 
[0.x.42100] 
[0.x.42101] 
[0.x.42102] 
[0.x.42103] 
//
[0.x.42104] 
[0.x.42105] 
[0.x.42106] 
//
// 这就是事情开始变得复杂的地方。由于我们可能会在并行环境中运行这个程序，每个并行进程现在都会创建这些临时三角形和DoFHandlers。但是，在完全分布式三角形中，活动进程只知道本地拥有的单元，而不知道其他进程是如何分布自己的单元的。这对于上面创建的临时三角形以及我们想嵌入粒子的流体三角形都是如此。另一方面，一般来说，这两个三角形的局部已知部分不会重合。也就是说，我们将从临时网格的节点位置创建的粒子的位置是任意的，并且可能落在当前进程无法访问的流体三角结构的区域内（即流体领域中细胞是人工的区域）。为了了解将这些粒子发送给谁，我们需要对流体网格在处理器中的分布有一个（粗略的）概念。
//
// 我们通过以下方式来构建这一信息：首先建立一个以本地拥有的单元为边界的盒子的索引树，然后提取该树的第一层中的一个。
//
[0.x.42107] 
[0.x.42108] 
[0.x.42109] 
[0.x.42110] 
[0.x.42111] 
//
[0.x.42112] 
[0.x.42113] 
[0.x.42114] 
//
// 每个进程现在都有一个完全包围所有本地拥有的进程的边界盒集合（但可能与其他进程的边界盒相重叠）。然后我们在所有参与的进程之间交换这些信息，这样每个进程都知道所有其他进程的边界盒。
//
// 有了这些信息，我们就可以将`tracer_particle_handler`初始化到流体网格，并从（临时）tracer particles triangulation的支持点生成粒子。这个函数调用使用了我们刚刚构建的`global_bounding_boxes`对象，以确定将位置来自`particles_dof_handler`的本地拥有部分的粒子发送到何处。在这个调用结束时，每个粒子将被分配到正确的进程（即拥有粒子所在的流体单元的进程）。在这一点上，我们也将他们的编号输出到屏幕上。
//
[0.x.42115] 
[0.x.42116] 
//
[0.x.42117] 
[0.x.42118] 
//
[0.x.42119] 
[0.x.42120] 
[0.x.42121] 
//
[0.x.42122] 
[0.x.42123] 
//
// 这样创建的每个粒子都有一个唯一的ID。在下面的算法中的某个时刻，我们将需要包含每个粒子的位置和速度信息的向量。这个向量的大小为`n_particles * // spacedim`，我们需要为每个粒子提供位置和速度信息。
// spacedim`，我们将不得不以一种方式来存储这个向量的元素，以便每个并行进程 "拥有 "与它拥有的粒子的坐标相对应的那些元素。换句话说，我们必须在所有进程中划分0和`n_particles * spacedim`之间的索引空间。我们可以通过查询`tracer_particle_handler`的本地相关粒子的ID来做到这一点，并构建需要的索引，将所有粒子的位置和速度存储在一个（平行分布的）矢量中，其中我们隐含地假设我们将每个位置或速度的坐标存储在`spacedim`连续的矢量元素中（这就是[2.x.5260]函数的作用）。
//
[0.x.42124] 
[0.x.42125] 
[0.x.42126] 
//
// 在模拟开始时，所有粒子都在它们的原始位置。当粒子移动时，它们可能会穿越到另一个进程所拥有的领域的某个部分。如果发生这种情况，当前进程会正式保持对粒子的 "所有权"，但可能需要从粒子落地的进程中读取访问。我们将这一信息保存在另一个索引集中，该索引集存储了当前进程的子域中的所有粒子的索引，不管它们是否一直在这里。
//
// 保留这个索引集使我们能够利用线性代数类来进行有关粒子位置和速度的所有通信。这模拟了在固体域中解决另一个问题的情况下会发生的情况（如在流体-结构相互作用中。在后一种情况下，实体域上的额外DOFs将被耦合到流体域中发生的情况。
//
[0.x.42127] 
[0.x.42128] 
//
// 最后，我们要确保在细化时，粒子被正确转移。在进行局部细化或粗化时，粒子会落在另一个单元中。原则上，我们可以在细化后重新分配所有的粒子，但是这将是非常昂贵的。
//
// [2.x.5261]类有一种方法可以在细化时将信息从一个单元转移到它的子单元或它的父单元，而不需要重构整个数据结构。这是通过向三角结构注册两个回调函数来实现的。这些函数将在细化即将发生和刚刚发生时收到一个信号，并将以最小的计算成本将所有信息转移到新的细化网格中。
//
[0.x.42129] 
[0.x.42130] 
//
[0.x.42131] 
[0.x.42132] 
[0.x.42133] 
[0.x.42134] 
//
// 与我们对被动追踪器所做的类似，我们接下来设置追踪实体网格的正交点的粒子。这里的主要区别是，我们还想给每个粒子附加一个权重值（正交点的 "JxW "值），这样我们就可以在不直接访问原始实体网格的情况下计算积分。
//
// 这是通过利用[2.x.5262]类的 "属性 "概念实现的。它可以（以一种有效的内存方式）在一个[2.x.5264]对象内为每个[2.x.5263]对象存储任意数量的`双`数字。我们利用这种可能性来存储实体网格的正交点的JxW值。
//
// 在我们的例子中，我们只需要为每个粒子存储一个属性：实体网格上的积分的JxW值。这将在构造时作为最后一个参数传递给solid_particle_handler对象。
//
[0.x.42135] 
[0.x.42136] 
[0.x.42137] 
[0.x.42138] 
//
[0.x.42139] 
[0.x.42140] 
[0.x.42141] 
[0.x.42142] 
//
// 我们在本地生成的粒子数等于本地拥有的单元总数乘以每个单元中使用的正交点的数量。我们将所有这些点存储在一个向量中，并将其相应的属性存储在一个向量的向量中。
//
[0.x.42143] 
[0.x.42144] 
[0.x.42145] 
//
[0.x.42146] 
[0.x.42147] 
[0.x.42148] 
//
[0.x.42149] 
[0.x.42150] 
[0.x.42151] 
[0.x.42152] 
[0.x.42153] 
[0.x.42154] 
[0.x.42155] 
[0.x.42156] 
[0.x.42157] 
//
[0.x.42158] 
[0.x.42159] 
[0.x.42160] 
[0.x.42161] 
[0.x.42162] 
[0.x.42163] 
[0.x.42164] 
//
// 我们以处理示踪粒子的同样方式进行，重新使用计算出的边界盒。然而，我们首先检查`global_fluid_bounding_boxes`对象是否已经被填充。这里当然应该是这样的，因为这个方法是在初始化示踪粒子的方法之后调用的。然而，我们要确保，如果将来有人决定（无论出于什么原因）先初始化固体粒子处理程序，或者只复制教程的这一部分，当事情没有按照预期进行时，会抛出一个有意义的异常。
//
// 由于我们已经存储了正交点的位置，我们可以使用这些位置来直接使用`solid_particle_handler`插入粒子，而不必通过[2.x.5265]函数。
//
[0.x.42165] 
[0.x.42166] 
[0.x.42167] 
[0.x.42168] 
[0.x.42169] 
[0.x.42170] 
//
[0.x.42171] 
[0.x.42172] 
[0.x.42173] 
//
// 和前面的函数一样，我们最后要确保在细化时，粒子被正确转移。
//
[0.x.42174] 
[0.x.42175] 
//
[0.x.42176] 
[0.x.42177] 
//
[0.x.42178] 
[0.x.42179] 
[0.x.42180] 
//
// [2.x.5266] 
//
// 我们设置了有限元空间和整个步骤中使用的正交公式。对于流体，我们使用Taylor-Hood元素（例如[2.x.5267] ）。由于我们没有解决固体领域的任何方程，所以产生了一个空的有限元空间。这个程序的一个自然扩展是解决流体结构的相互作用问题，这就要求`solid_fe`使用更有用的FiniteElement类。
//
// 和其他许多函数一样，我们在这里存储了进行操作所需的时间。当前的函数把它的时间信息放到一个标签为 "初始设置 "的部分。在不同的函数中对这个定时器进行了许多其他的调用。它们允许监测每个单独函数的绝对和相对成本，以确定瓶颈。
//
[0.x.42181] 
[0.x.42182] 
[0.x.42183] 
[0.x.42184] 
//
[0.x.42185] 
[0.x.42186] 
[0.x.42187] 
[0.x.42188] 
[0.x.42189] 
[0.x.42190] 
//
[0.x.42191] 
[0.x.42192] 
//
[0.x.42193] 
[0.x.42194] 
[0.x.42195] 
[0.x.42196] 
[0.x.42197] 
//
// 接下来我们构建分布式块状矩阵和向量，用于解决问题中出现的线性方程。这个函数改编自[2.x.5268]，我们参考这个步骤进行全面解释。
//
[0.x.42198] 
[0.x.42199] 
[0.x.42200] 
[0.x.42201] 
//
[0.x.42202] 
//
[0.x.42203] 
[0.x.42204] 
[0.x.42205] 
//
[0.x.42206] 
[0.x.42207] 
//
[0.x.42208] 
//
[0.x.42209] 
[0.x.42210] 
[0.x.42211] 
[0.x.42212] 
//
[0.x.42213] 
[0.x.42214] 
[0.x.42215] 
[0.x.42216] 
//
[0.x.42217] 
[0.x.42218] 
[0.x.42219] 
[0.x.42220] 
[0.x.42221] 
//
[0.x.42222] 
[0.x.42223] 
//
[0.x.42224] 
[0.x.42225] 
[0.x.42226] 
[0.x.42227] 
[0.x.42228] 
[0.x.42229] 
[0.x.42230] 
[0.x.42231] 
[0.x.42232] 
[0.x.42233] 
//
[0.x.42234] 
[0.x.42235] 
[0.x.42236] 
[0.x.42237] 
[0.x.42238] 
//
[0.x.42239] 
[0.x.42240] 
[0.x.42241] 
[0.x.42242] 
[0.x.42243] 
[0.x.42244] 
[0.x.42245] 
[0.x.42246] 
[0.x.42247] 
//
[0.x.42248] 
//
[0.x.42249] 
[0.x.42250] 
//
[0.x.42251] 
[0.x.42252] 
[0.x.42253] 
[0.x.42254] 
[0.x.42255] 
//
[0.x.42256] 
[0.x.42257] 
//
[0.x.42258] 
[0.x.42259] 
//
[0.x.42260] 
[0.x.42261] 
[0.x.42262] 
[0.x.42263] 
[0.x.42264] 
[0.x.42265] 
[0.x.42266] 
//
[0.x.42267] 
//
[0.x.42268] 
[0.x.42269] 
[0.x.42270] 
[0.x.42271] 
[0.x.42272] 
[0.x.42273] 
[0.x.42274] 
[0.x.42275] 
[0.x.42276] 
//
[0.x.42277] 
[0.x.42278] 
[0.x.42279] 
[0.x.42280] 
[0.x.42281] 
[0.x.42282] 
//[2.x.5269] 
//
// 我们将系统矩阵、预处理矩阵和右手边组合起来。这段代码改编自[2.x.5270]，基本上是[2.x.5271]的内容，如果你知道斯托克斯方程是什么样子的，就会觉得很标准。
//
[0.x.42283] 
[0.x.42284] 
[0.x.42285] 
[0.x.42286] 
[0.x.42287] 
[0.x.42288] 
//
[0.x.42289] 
//
[0.x.42290] 
[0.x.42291] 
[0.x.42292] 
[0.x.42293] 
[0.x.42294] 
//
[0.x.42295] 
[0.x.42296] 
//
[0.x.42297] 
[0.x.42298] 
[0.x.42299] 
//
[0.x.42300] 
[0.x.42301] 
//
[0.x.42302] 
[0.x.42303] 
[0.x.42304] 
//
[0.x.42305] 
[0.x.42306] 
[0.x.42307] 
//
[0.x.42308] 
[0.x.42309] 
[0.x.42310] 
[0.x.42311] 
[0.x.42312] 
[0.x.42313] 
//
[0.x.42314] 
[0.x.42315] 
[0.x.42316] 
[0.x.42317] 
[0.x.42318] 
[0.x.42319] 
[0.x.42320] 
[0.x.42321] 
[0.x.42322] 
[0.x.42323] 
[0.x.42324] 
//
[0.x.42325] 
[0.x.42326] 
[0.x.42327] 
[0.x.42328] 
[0.x.42329] 
[0.x.42330] 
[0.x.42331] 
[0.x.42332] 
[0.x.42333] 
//
[0.x.42334] 
[0.x.42335] 
[0.x.42336] 
//
[0.x.42337] 
[0.x.42338] 
[0.x.42339] 
[0.x.42340] 
[0.x.42341] 
[0.x.42342] 
//
[0.x.42343] 
[0.x.42344] 
[0.x.42345] 
[0.x.42346] 
[0.x.42347] 
 
//
[0.x.42349] 
[0.x.42350] 
[0.x.42351] 
[0.x.42352] 
//
[0.x.42353] 
[0.x.42354] 
[0.x.42355] 
[0.x.42356] 
//
// 下面的方法是处理因对叶轮施加速度而产生的惩罚项。从某种意义上说，它是本教程的核心，但它相对简单。这里我们利用`solid_particle_handler`来计算Nitsche限制或嵌入域中的惩罚。
//
[0.x.42357] 
[0.x.42358] 
[0.x.42359] 
[0.x.42360] 
//
[0.x.42361] 
[0.x.42362] 
//
[0.x.42363] 
//
[0.x.42364] 
[0.x.42365] 
//
[0.x.42366] 
[0.x.42367] 
[0.x.42368] 
//
[0.x.42369] 
[0.x.42370] 
//
// 我们在所有的本地粒子上循环。虽然这可以直接通过循环所有的单元格来实现，但这将迫使我们循环许多不包含粒子的单元格。因此，我们在所有的粒子上循环，但是，我们得到粒子所在的单元格的参考，然后在该单元格中循环所有的粒子。这使得我们能够跳过不包含粒子的单元格，但又能集合每个单元格的局部矩阵和rhs来应用Nitsche的限制。一旦我们完成了一个单元格上的所有粒子，我们就将`粒子`迭代器推进到当前单元格上的粒子的末端（这是`while`循环体的最后一行）。
//
[0.x.42371] 
[0.x.42372] 
[0.x.42373] 
[0.x.42374] 
[0.x.42375] 
//
// 我们从粒子本身得到一个通往粒子所在单元的迭代器。然后，我们就可以像通常那样在系统矩阵和右手边组装附加项了。
//
[0.x.42376] 
[0.x.42377] 
[0.x.42378] 
[0.x.42379] 
//
所以//然后让我们得到位于这个单元格上的单元格集合，并对它们进行迭代。从每个粒子中，我们收集该粒子的位置和参考位置，以及附加在该粒子上的额外信息。在本例中，这些信息是用于生成粒子的正交点的 "JxW"。
//
// 利用这些信息，我们可以将正交点的贡献加入到local_matrix和local_rhs中。我们可以利用每个粒子的参考位置，轻松地评估其位置上的形状函数值。
//
[0.x.42380] 
[0.x.42381] 
[0.x.42382] 
[0.x.42383] 
[0.x.42384] 
[0.x.42385] 
[0.x.42386] 
//
[0.x.42387] 
[0.x.42388] 
[0.x.42389] 
[0.x.42390] 
[0.x.42391] 
[0.x.42392] 
[0.x.42393] 
[0.x.42394] 
[0.x.42395] 
[0.x.42396] 
[0.x.42397] 
[0.x.42398] 
[0.x.42399] 
[0.x.42400] 
[0.x.42401] 
[0.x.42402] 
[0.x.42403] 
[0.x.42404] 
[0.x.42405] 
[0.x.42406] 
[0.x.42407] 
[0.x.42408] 
[0.x.42409] 
//
[0.x.42410] 
[0.x.42411] 
[0.x.42412] 
[0.x.42413] 
[0.x.42414] 
[0.x.42415] 
[0.x.42416] 
//
[0.x.42417] 
[0.x.42418] 
[0.x.42419] 
//[2.x.5272] 
//
// 这个函数用FGMRES求解线性系统，有一个对角线块的预处理和一个对角线块的代数多重网格（AMG）方法。该预处理程序对[2.x.5273]（即速度-速度）块应用V循环，对[2.x.5274]块应用质量矩阵的CG（这是我们对舒尔补码的近似值：上面组装的压力质量矩阵）。
//
[0.x.42420] 
[0.x.42421] 
[0.x.42422] 
[0.x.42423] 
//
[0.x.42424] 
[0.x.42425] 
[0.x.42426] 
//
[0.x.42427] 
[0.x.42428] 
[0.x.42429] 
[0.x.42430] 
[0.x.42431] 
//
[0.x.42432] 
[0.x.42433] 
[0.x.42434] 
//
[0.x.42435] 
[0.x.42436] 
[0.x.42437] 
[0.x.42438] 
[0.x.42439] 
//
[0.x.42440] 
[0.x.42441] 
//
[0.x.42442] 
[0.x.42443] 
[0.x.42444] 
//
[0.x.42445] 
[0.x.42446] 
[0.x.42447] 
[0.x.42448] 
//
[0.x.42449] 
//
[0.x.42450] 
[0.x.42451] 
[0.x.42452] 
[0.x.42453] 
//
[0.x.42454] 
[0.x.42455] 
//
[0.x.42456] 
//
[0.x.42457] 
//
 
//
[0.x.42459] 
[0.x.42460] 
//
[0.x.42461] 
//
[0.x.42462] 
[0.x.42463] 
[0.x.42464] 
[0.x.42465] 
[0.x.42466] 
[0.x.42467] 
[0.x.42468] 
[0.x.42469] 
[0.x.42470] 
//
// [2.x.5275] 
//
// 我们以一种完全标准的方式处理网格细化问题。
//
[0.x.42471] 
[0.x.42472] 
[0.x.42473] 
[0.x.42474] 
[0.x.42475] 
//
[0.x.42476] 
[0.x.42477] 
[0.x.42478] 
[0.x.42479] 
[0.x.42480] 
[0.x.42481] 
[0.x.42482] 
[0.x.42483] 
//
[0.x.42484] 
[0.x.42485] 
[0.x.42486] 
[0.x.42487] 
[0.x.42488] 
[0.x.42489] 
[0.x.42490] 
[0.x.42491] 
[0.x.42492] 
[0.x.42493] 
[0.x.42494] 
[0.x.42495] 
[0.x.42496] 
[0.x.42497] 
[0.x.42498] 
[0.x.42499] 
[0.x.42500] 
//
[0.x.42501] 
[0.x.42502] 
[0.x.42503] 
[0.x.42504] 
[0.x.42505] 
[0.x.42506] 
[0.x.42507] 
[0.x.42508] 
[0.x.42509] 
//
[0.x.42510] 
[0.x.42511] 
[0.x.42512] 
[0.x.42513] 
[0.x.42514] 
//
[0.x.42515] 
//
[0.x.42516] 
[0.x.42517] 
[0.x.42518] 
[0.x.42519] 
//[2.x.5276] 
//
// 我们使用deal.II的标准并行功能在流体域上输出结果（速度和压力）。编写一个压缩的vtu文件，将所有处理器的信息聚集在一起。另外写一个`.pvd`记录，将物理时间与vtu文件联系起来。
//
[0.x.42520] 
[0.x.42521] 
[0.x.42522] 
[0.x.42523] 
[0.x.42524] 
[0.x.42525] 
//
[0.x.42526] 
[0.x.42527] 
[0.x.42528] 
[0.x.42529] 
[0.x.42530] 
[0.x.42531] 
[0.x.42532] 
//
[0.x.42533] 
[0.x.42534] 
[0.x.42535] 
[0.x.42536] 
[0.x.42537] 
[0.x.42538] 
//
[0.x.42539] 
[0.x.42540] 
[0.x.42541] 
[0.x.42542] 
//
[0.x.42543] 
//
[0.x.42544] 
[0.x.42545] 
[0.x.42546] 
[0.x.42547] 
//
[0.x.42548] 
[0.x.42549] 
[0.x.42550] 
[0.x.42551] 
[0.x.42552] 
//
// 同样地，我们通过[2.x.5277]对象将粒子（无论是来自实体还是追踪器）写成一个单一的压缩vtu文件。这个简单的对象并不写作为 "属性 "附加到粒子上的额外信息，而只写它们的id--但是，无论如何，我们并不关心这些粒子位置的 "JxW "值，所以我们可能想要可视化的信息并没有丢失。
//
[0.x.42553] 
[0.x.42554] 
[0.x.42555] 
[0.x.42556] 
[0.x.42557] 
[0.x.42558] 
[0.x.42559] 
[0.x.42560] 
[0.x.42561] 
[0.x.42562] 
[0.x.42563] 
[0.x.42564] 
[0.x.42565] 
//
[0.x.42566] 
[0.x.42567] 
[0.x.42568] 
[0.x.42569] 
[0.x.42570] 
[0.x.42571] 
[0.x.42572] 
[0.x.42573] 
[0.x.42574] 
//[2.x.5278] 
//
// 这个函数现在负责协调整个模拟过程。它与其他时间相关的教程程序非常相似--以[2.x.5279]或[2.x.5280]为例。在开始的时候，我们会输出一些状态信息，同时将所有的当前参数保存到输出目录下的文件中，以利于重现。
//
[0.x.42575] 
[0.x.42576] 
[0.x.42577] 
[0.x.42578] 
[0.x.42579] 
[0.x.42580] 
[0.x.42581] 
[0.x.42582] 
[0.x.42583] 
[0.x.42584] 
[0.x.42585] 
[0.x.42586] 
[0.x.42587] 
[0.x.42588] 
[0.x.42589] 
[0.x.42590] 
//
// 然后我们开始时间循环。我们在第一个循环中初始化模拟的所有元素
//
[0.x.42591] 
[0.x.42592] 
[0.x.42593] 
//
[0.x.42594] 
[0.x.42595] 
[0.x.42596] 
[0.x.42597] 
[0.x.42598] 
[0.x.42599] 
//
[0.x.42600] 
[0.x.42601] 
[0.x.42602] 
[0.x.42603] 
[0.x.42604] 
[0.x.42605] 
[0.x.42606] 
[0.x.42607] 
[0.x.42608] 
[0.x.42609] 
[0.x.42610] 
[0.x.42611] 
[0.x.42612] 
[0.x.42613] 
[0.x.42614] 
[0.x.42615] 
[0.x.42616] 
[0.x.42617] 
[0.x.42618] 
[0.x.42619] 
[0.x.42620] 
[0.x.42621] 
[0.x.42622] 
[0.x.42623] 
[0.x.42624] 
//
// 在第一个时间步长之后，我们在每个时间步长的开始时对实体进行位移，以考虑到它已经移动的事实。
//
[0.x.42625] 
[0.x.42626] 
[0.x.42627] 
[0.x.42628] 
//
[0.x.42629] 
[0.x.42630] 
[0.x.42631] 
[0.x.42632] 
[0.x.42633] 
//
// 为了更新系统的状态，我们首先对示踪粒子位置的流体速度进行插值，并采用天真的显式欧拉方案对无质量示踪粒子进行漂移。
//
[0.x.42634] 
[0.x.42635] 
[0.x.42636] 
[0.x.42637] 
[0.x.42638] 
[0.x.42639] 
[0.x.42640] 
[0.x.42641] 
//
[0.x.42642] 
//
[0.x.42643] 
[0.x.42644] 
[0.x.42645] 
//
[0.x.42646] 
[0.x.42647] 
[0.x.42648] 
[0.x.42649] 
//
[0.x.42650] 
//
[0.x.42651] 
[0.x.42652] 
[0.x.42653] 
//
// 利用这些新的位置，我们就可以组装斯托克斯系统，并解决它。
//
[0.x.42654] 
[0.x.42655] 
[0.x.42656] 
//
// 在适当的频率下，我们再将固体粒子、示踪粒子和流体领域的信息写入文件，以便进行可视化，并通过适应网格来结束时间步骤。
//
[0.x.42657] 
[0.x.42658] 
[0.x.42659] 
[0.x.42660] 
[0.x.42661] 
[0.x.42662] 
[0.x.42663] 
[0.x.42664] 
[0.x.42665] 
[0.x.42666] 
[0.x.42667] 
[0.x.42668] 
[0.x.42669] 
[0.x.42670] 
[0.x.42671] 
[0.x.42672] 
[0.x.42673] 
[0.x.42674] 
[0.x.42675] 
[0.x.42676] 
[0.x.42677] 
[0.x.42678] 
[0.x.42679] 
[0.x.42680] 
//
[0.x.42681] 
//[2.x.5281] 
//
// 代码的其余部分，即`main()`函数，是标准的，除了对输入参数文件的处理。我们允许用户指定一个可选的参数文件作为程序的参数。如果没有指定，我们就使用默认文件 "parameters.prm"，如果不存在，我们就创建这个文件。文件名首先被扫描为字符串 "23"，然后是 "3"。如果文件名包含字符串 "23"，问题类将分别以模板参数2和3进行实例化。如果只找到 "3 "这个字符串，那么两个模板参数都被设置为3，否则都被设置为2。
//
// 如果程序被调用时没有任何命令行参数（即`argc==1`），那么我们就默认使用 "参数.prm"。
//
[0.x.42682] 
[0.x.42683] 
[0.x.42684] 
[0.x.42685] 
[0.x.42686] 
[0.x.42687] 
[0.x.42688] 
[0.x.42689] 
//
[0.x.42690] 
[0.x.42691] 
[0.x.42692] 
[0.x.42693] 
[0.x.42694] 
//
[0.x.42695] 
[0.x.42696] 
[0.x.42697] 
[0.x.42698] 
//
[0.x.42699] 
[0.x.42700] 
[0.x.42701] 
[0.x.42702] 
[0.x.42703] 
[0.x.42704] 
[0.x.42705] 
//
[0.x.42706] 
[0.x.42707] 
[0.x.42708] 
[0.x.42709] 
[0.x.42710] 
[0.x.42711] 
[0.x.42712] 
//
[0.x.42713] 
[0.x.42714] 
[0.x.42715] 
[0.x.42716] 
[0.x.42717] 
[0.x.42718] 
[0.x.42719] 
[0.x.42720] 
[0.x.42721] 
[0.x.42722] 
[0.x.42723] 
[0.x.42724] 
[0.x.42725] 
[0.x.42726] 
[0.x.42727] 
//
[0.x.42728] 
[0.x.42729] 
[0.x.42730] 
[0.x.42731] 
[0.x.42732] 
[0.x.42733] 
[0.x.42734] 
[0.x.42735] 
[0.x.42736] 
[0.x.42737] 
[0.x.42738] 
[0.x.42739] 
[0.x.42740] 
[0.x.42741] 
//
[0.x.42742] 
[0.x.42743] 
[0.x.42744] 
[0.x.42745] 
[0.x.42746] 
[0.x.42747] 
[0.x.42748] 
[0.x.42749] 
[0.x.42750] 
[0.x.42751] 
[0.x.42752] 
[0.x.42753] 
[0.x.42754] 
[0.x.42755] 
[0.x.42756] 
[0.x.42757] 
[0.x.42758] 
[0.x.42759] 
[0.x.42760] 
//
// 我们首先包括所有必要的deal.II头文件和一些C++相关的文件。这第一个头文件将使我们能够访问一个数据结构，使我们能够在其中存储任意的数据。
//
[0.x.42761] 
//
// 接下来是一些核心类，包括一个提供时间步进的实现。
//
[0.x.42762] 
[0.x.42763] 
[0.x.42764] 
[0.x.42765] 
[0.x.42766] 
[0.x.42767] 
[0.x.42768] 
//
// 然后是一些标题，定义了一些有用的坐标变换和运动学关系，这些关系在非线性弹性中经常出现。
//
[0.x.42769] 
[0.x.42770] 
[0.x.42771] 
//
// 下面两个标头提供了我们进行自动微分所需的所有功能，并使用deal.II可以利用的符号计算机代数系统。所有自动微分和符号微分封装类的头文件，以及任何需要的辅助数据结构，都被收集在这些统一的头文件中。
//
[0.x.42772] 
[0.x.42773] 
//
// 包括这个头文件使我们有能力将输出写入文件流中。
//
[0.x.42774] 
//
// 按照惯例，整个教程程序被定义在它自己独特的命名空间中。
//
[0.x.42775] 
[0.x.42776] 
[0.x.42777] 
//[2.x.5282] 
//
// 自动和象征性的区分有一些神奇和神秘的特质。尽管在一个项目中使用它们会因多种原因而受益，但了解如何使用这些框架或如何利用它们的障碍可能会超过试图将它们（可靠地）整合到工作中的开发者的耐心。
//
// 尽管作者希望能够成功地说明这些工具是如何被整合到有限元建模的工作流程中的，但最好还是先退一步，从基础开始。因此，一开始，我们先看看如何使用这两个框架来区分一个 "简单 "的数学函数，这样就可以牢固地建立和理解基本的操作（包括它们的顺序和功能），并使其复杂程度降到最低。在本教程的第二部分，我们将把这些基本原理付诸实践，并在此基础上进一步发展。
//
// 伴随着对使用框架的算法步骤的描述，我们将对它们*可能在后台做的事情有一个简化的看法。这种描述在很大程度上是为了帮助理解，我们鼓励读者查看[2.x.5283]模块文档，以获得对这些工具实际工作的更正式描述。
//
// [2.x.5284] 
[0.x.42778] 
[0.x.42779] 
//
// 为了让读者相信这些工具在实践中确实有用，让我们选择一个函数，用手计算分析导数并不难。只是它的复杂程度足以让你考虑是否真的要去做这个练习，也可能让你怀疑你是否完全确定你对其导数的计算和实现是正确的。当然，问题的关键在于，函数的微分在某种意义上是相对公式化的，应该是计算机擅长的事情--如果我们能在现有的软件基础上理解这些规则，我们就不必费力地自己做了。
//
// 我们为此选择了双变量三角函数[2.x.5285]。注意，这个函数是以数字类型为模板的。这样做是因为我们经常（但不总是）可以使用特殊的自动微分和符号类型来替代实数或复数类型，然后这些类型将执行一些基本的计算，例如评估一个函数值及其导数。我们将利用这一特性，确保我们只需要定义一次我们的函数，然后就可以在我们希望对其进行微分操作的任何情况下重新使用。
//
[0.x.42780] 
[0.x.42781] 
[0.x.42782] 
[0.x.42783] 
[0.x.42784] 
//
// 我们没有立即揭示这个函数的导数，而是向前声明返回导数的函数，并将它们的定义推迟到以后。正如函数名称所暗示的，它们分别返回导数 [2.x.5286] 。
//
[0.x.42785] 
//[2.x.5287] :
//
[0.x.42786] 
//[2.x.5288] :
//
[0.x.42787] 
//[2.x.5289] :
//
[0.x.42788] 
//[2.x.5290] :
//
[0.x.42789] 
//
// 最后是 [2.x.5291] 。
//
[0.x.42790] 
//[2.x.5292] 
//
// 首先，我们将使用AD作为工具，为我们自动计算导数。我们将用参数`x`和`y`来评估函数，并期望得到的值和所有的导数都能在给定的公差范围内匹配。
//
[0.x.42791] 
[0.x.42792] 
[0.x.42793] 
//
// 我们的函数[2.x.5293]是一个标量值函数，其参数代表代数计算或张量计算中遇到的典型输入变量。由于这个原因，[2.x.5294]类是合适的包装类，可以用来做我们需要的计算。(作为比较，如果函数参数代表有限元单元的自由度，我们会希望以不同的方式处理它们)。问题的空间维度是不相关的，因为我们没有矢量或张量值的参数需要容纳，所以`dim`模板参数被任意分配为1的值。 第二个模板参数规定了将使用哪个AD框架（deal.II支持几个外部AD框架），以及这个框架提供的基础数字类型将被使用。这个数字类型影响了微分运算的最大顺序，以及用于计算它们的基础算法。鉴于其模板性质，这个选择是一个编译时的决定，因为许多（但不是全部）AD库利用编译时的元编程，以有效的方式实现这些特殊的数字类型。第三个模板参数说明了结果类型是什么；在我们的例子中，我们要处理的是 "双数"。
//
[0.x.42794] 
[0.x.42795] 
[0.x.42796] 
[0.x.42797] 
[0.x.42798] 
//
// 我们有必要在我们的[2.x.5295]类中预先登记函数[2.x.5296]有多少个参数（我们将称之为 "独立变量"）。这些参数是`x`和`y`，所以显然有两个。
//
[0.x.42799] 
//
// 我们现在有足够的信息来创建和初始化一个辅助类的实例。我们还可以得到具体的数字类型，它将在所有后续计算中使用。这很有用，因为我们可以从这里开始通过引用这个类型来编写一切，如果我们想改变使用的框架或数字类型（例如，如果我们需要更多的微分运算），那么我们只需要调整`ADTypeCode`模板参数。
//
[0.x.42800] 
[0.x.42801] 
//
// 下一步是在辅助类中注册自变量的数值。这样做是因为函数和它的导数将正好针对这些参数进行评估。由于我们按照`{x,y}`的顺序注册它们，变量`x`将被分配到分量号`0`，而`y`将是分量号`1`--这个细节将在接下来的几行中使用。
//
[0.x.42802] 
//
// 我们现在要求辅助类向我们提供自变量及其自动区分的表示。这些被称为 "敏感变量"，因为从现在开始，我们对组件`独立变量_ad`所做的任何操作都会被AD框架跟踪和记录，并且在我们要求计算它们的导数时，会被考虑。帮助器返回的是一个可自动微分的 "向量"，但是我们可以确定，第2个元素代表 "x"，第1个元素代表 "y"。为了完全确保这些变量的数字类型没有任何歧义，我们给所有的自动微分变量加上`ad'的后缀。
//
[0.x.42803] 
[0.x.42804] 
[0.x.42805] 
[0.x.42806] 
//
// 我们可以立即将自变量的敏感表示法传递给我们的模板函数，计算出 [2.x.5297] 。这也会返回一个可自动微分的数字。
//
[0.x.42807] 
//
// 所以现在要问的自然是，我们把这些特殊的`x_ad`和`y_ad`变量传递给函数`f`，而不是原来的`double`变量`x`和`y`，实际上计算了什么？换句话说，这一切与我们想要确定的导数的计算有什么关系？或者，更简洁地说。这个返回的`ADNumberType`对象有什么特别之处，使它有能力神奇地返回导数？
//
// 从本质上讲，这*可以*做的是以下几点。这个特殊的数字可以被看作是一个数据结构，它存储了函数值，以及规定的导数数量。对于一个期望有两个参数的一次可导数，它可能看起来像这样。
//
// [1.x.172]
//
// 对于我们的自变量`x_ad`，`x_ad.value`的起始值只是它的赋值（即这个变量代表的实值）。导数`x_ad.derivatives[0]`将被初始化为`1'，因为`x'是第2个独立变量和[2.x.5298] 。导数`x.derivatives[1]`将被初始化为零，因为第一个自变量是`y`和[2.x.5299] 。
//
// 为了使函数导数有意义，我们必须假设这个函数不仅在分析意义上是可微的，而且在评估点`x,y`也是可微的。我们可以利用这两个假设：当我们在数学运算中使用这种数字类型时，AD框架可以**的
//重载操作（例如，`%operator+()`, `%operator*()`以及`%sin()`, `%exp()`, 等等），使返回的结果具有预期值。同时，它将通过对被重载的确切函数的了解和对连锁规则的严格应用来计算导数。因此，`%sin()`函数（其参数`a`本身是自变量`x`和`y`的一个函数 *可能*被定义如下。
//
// [1.x.173]

// 当然，所有这些也可以用于二阶甚至高阶导数。
//
// 所以现在很明显，通过上述表示，`ADNumberType`携带了一些额外的数据，这些数据代表了可微调函数相对于原始（敏感）自变量的各种导数。因此应该注意到，使用它们会产生计算开销（因为我们在做导数计算时要计算额外的函数），以及存储这些结果的内存开销。因此，规定的微分运算的级数最好保持在最低水平，以限制计算成本。例如，我们可以自己计算第一级导数，然后使用[2.x.5300]辅助类来确定依赖函数集合的梯度，这将是原始标量函数的第二级导数。
//
// 还值得注意的是，由于链式规则是无差别应用的，我们只看到计算的起点和终点`{x,y}` [2.x.5301] `f(x,y)`，我们永远只能查询到`f`的总导数；部分导数（上例中的`a.导数[0]`和`a.导数[1]`）是中间值，对我们是隐藏的。
//
// 好的，既然我们现在至少知道了`f_ad'代表什么，以及它的编码是什么，让我们把所有的东西用于实际的用途。为了获得那些隐藏的派生结果，我们将最终结果注册到帮助类中。在这之后，我们不能再改变`f_ad`的值，也不能让这些变化反映在帮助者类返回的结果中。
//
[0.x.42808] 
//
// 下一步是提取导数（特别是函数梯度和Hessian）。为此，我们首先创建一些临时数据结构（结果类型为`double`）来存储导数（注意，所有的导数都是一次性返回的，而不是单独返回）...
//
[0.x.42809] 
[0.x.42810] 
[0.x.42811] 
//
// ... 然后我们要求助手类计算这些导数，以及函数值本身。就这样了。我们得到了我们想得到的一切。
//
[0.x.42812] 
[0.x.42813] 
[0.x.42814] 
//
// 我们可以通过与分析方案的比较来说服自己，AD框架是正确的。(或者，如果你像作者一样，你会做相反的事情，宁愿验证你对分析方案的实现是正确的！)
//
[0.x.42815] 
[0.x.42816] 
[0.x.42817] 
[0.x.42818] 
[0.x.42819] 
[0.x.42820] 
[0.x.42821] 
//
// 因为我们知道自变量的排序，所以我们知道梯度的哪个部分与哪个导数有关......。
//
[0.x.42822] 
[0.x.42823] 
//
[0.x.42824] 
[0.x.42825] 
[0.x.42826] 
[0.x.42827] 
[0.x.42828] 
[0.x.42829] 
[0.x.42830] 
[0.x.42831] 
[0.x.42832] 
[0.x.42833] 
[0.x.42834] 
[0.x.42835] 
[0.x.42836] 
[0.x.42837] 
//
// .......对于Hessian也是如此。
//
[0.x.42838] 
[0.x.42839] 
[0.x.42840] 
[0.x.42841] 
//
[0.x.42842] 
[0.x.42843] 
[0.x.42844] 
[0.x.42845] 
[0.x.42846] 
[0.x.42847] 
[0.x.42848] 
[0.x.42849] 
[0.x.42850] 
[0.x.42851] 
[0.x.42852] 
[0.x.42853] 
[0.x.42854] 
[0.x.42855] 
[0.x.42856] 
[0.x.42857] 
[0.x.42858] 
[0.x.42859] 
[0.x.42860] 
[0.x.42861] 
[0.x.42862] 
[0.x.42863] 
[0.x.42864] 
[0.x.42865] 
[0.x.42866] 
[0.x.42867] 
[0.x.42868] 
[0.x.42869] 
[0.x.42870] 
//
// 这很不错。在计算这个三角函数的二阶导数时并没有太多的工作。
//
// [2.x.5302] 
//
// 既然我们现在知道了让AD框架为我们计算这些导数需要多少 "执行工作"，让我们把它与手工计算并在几个独立的函数中实现的同样的导数进行比较。
//
// 这里是[2.x.5303]的两个一阶导数。
//
// [2.x.5304] 
[0.x.42871] 
[0.x.42872] 
[0.x.42873] 
[0.x.42874] 
[0.x.42875] 
//[2.x.5305] 
[0.x.42876] 
[0.x.42877] 
[0.x.42878] 
[0.x.42879] 
//
// 这里是[2.x.5306]的四个二次导数。
//
// [2.x.5307] 
[0.x.42880] 
[0.x.42881] 
[0.x.42882] 
[0.x.42883] 
[0.x.42884] 
//[2.x.5308] 
[0.x.42885] 
[0.x.42886] 
[0.x.42887] 
[0.x.42888] 
//[2.x.5309] （正如预期的那样，根据[施瓦茨定理]（https:en.wikipedia.org/wiki/Symmetry_of_second_derivatives））。
//
[0.x.42889] 
[0.x.42890] 
[0.x.42891] 
[0.x.42892] 
//[2.x.5310] 
[0.x.42893] 
[0.x.42894] 
[0.x.42895] 
[0.x.42896] 
//
// 嗯......上面有很多地方我们可以引入错误，特别是在应用链式规则的时候。虽然它们不是银弹，但至少这些AD框架可以作为一个验证工具，确保我们没有犯任何错误（无论是计算还是执行），从而对我们的结果产生负面影响。
//
// 当然，这个例子的重点是，我们可能选择了一个相对简单的函数[2.x.5311]，我们可以手工验证AD框架计算的导数是否正确。但是AD框架并不关心这个函数是否简单。它可能是一个复杂得多的表达式，或者取决于两个以上的变量，它仍然能够计算出导数--唯一的区别是，*我们*不能再想出导数来验证AD框架的正确性。
//
// [2.x.5312] 
//
// 我们现在要用符号微分法重复同样的练习。术语 "符号微分 "有点误导，因为微分只是计算机代数系统（CAS）（即符号框架）提供的一个工具。然而，在有限元建模和应用的背景下，它是CAS最常见的用途，因此将是我们关注的重点。再一次，我们将提供参数值`x`和`y`来评估我们的函数[2.x.5313]和它的导数，并提供一个公差来测试返回结果的正确性。
//
[0.x.42897] 
[0.x.42898] 
[0.x.42899] 
//
// 我们需要做的第一步是形成符号变量，代表我们希望对其进行微分的函数参数。同样，这些将是我们问题的独立变量，因此在某种意义上是原始变量，与其他变量没有任何关系。我们通过初始化一个符号类型[2.x.5314]来创建这些类型的（独立）变量，这个符号类型是对符号框架所使用的一组类的包装，有一个唯一的标识。在这种情况下，这个标识符，一个[2.x.5315]对于[2.x.5316]的参数来说，是简单的 "x"，同样，对于依赖函数的[2.x.5317]参数来说，也是 "y"。像以前一样，我们将用`sd`作为符号变量名称的后缀，这样我们就可以清楚地看到哪些变量是符号性的（而不是数字性的）。
//
[0.x.42900] 
[0.x.42901] 
//
// 使用计算[2.x.5318]的模板化函数，我们可以将这些独立变量作为参数传递给该函数。返回的结果将是另一个符号类型，代表用于计算 [2.x.5319] 的操作序列。
//
[0.x.42902] 
//
// 在这一点上，打印出表达式`f_sd`是合法的，如果我们这样做的话 [1.x.174] 我们会看到`f(x,y) = cos(y/x)`打印到控制台。
//
// 你可能会注意到，我们在构建我们的符号函数`f_sd`时，没有说明我们可能要如何使用它。与上面显示的AD方法相比，我们从调用`f(x_sd, y_sd)`返回的不是函数`f`在某个特定点的评价，而实际上是在一个通用的、尚未确定的点的评价的符号表示。这是使符号框架（CAS）不同于自动区分框架的关键点之一。每个变量`x_sd`和`y_sd`，甚至复合依赖函数`f_sd`，在某种意义上分别是数值的 "占位符 "和操作的组合。事实上，用于组成函数的各个组件也是占位符。操作序列被编码成一个树状的数据结构（概念上类似于[抽象语法树](https:en.wikipedia.org/wiki/Abstract_syntax_tree)）。
//
// 一旦我们形成了这些数据结构，我们就可以把我们可能想对它们进行的任何操作推迟到以后的某个时间。这些占位符中的每一个都代表了一些东西，但我们有机会在任何方便的时间点上定义或重新定义它们所代表的东西。因此，对于这个特定的问题，我们想把 "x "和 "y "与*一些*数值（类型尚未确定）联系起来是有道理的，但我们可以在概念上（如果有意义的话）给 "y/x "这个比率赋值，而不是单独给 "x "和 "y "这些变量赋值。我们还可以将 "x "或 "y "与其他一些符号函数`g(a,b)`联系起来。这些操作中的任何一个都涉及到对所记录的操作树的操作，以及用其他东西替换树上的突出节点（以及该节点的子树）。这里的关键词是 "替换"，事实上，在[2.x.5320]命名空间中有许多函数的名称中都有这个词。
//
// 这种能力使框架完全通用。在有限元模拟的背景下，我们通常会对我们的符号类型进行的操作类型是函数组合、微分、替换（部分或完全）和评估（即符号类型向其数字对应物的转换）。但如果你需要，一个CAS的能力往往不止这些。它可以形成函数的反导数（积分），对形成函数的表达式进行简化（例如，用[2.x.5322]替换[2.x.5321]；或者，更简单：如果函数做了像`1+2`这样的运算，CAS可以用`3`替换它），等等。变量所代表的*表达式是从函数[2.x.5323]的实现方式中得到的，但CAS可以对其进行任何功能的操作。
//
// 具体来说，为了计算因果函数相对于各个自变量的一阶导数的符号表示，我们使用[2.x.5324]函数，自变量作为其参数。每次调用都会导致CAS通过组成`f_sd`的运算树，并对表达式树的每个节点进行相对于给定符号参数的微分。
//
[0.x.42903] 
[0.x.42904] 
//
// 为了计算二阶导数的符号表示，我们只需对自变量的一阶导数进行微分。所以要计算高阶导数，我们首先需要计算低阶导数。由于调用 "differentiate() "的返回类型是一个表达式，我们原则上可以通过将两个调用连在一起，直接从标量上执行双倍微分。但是在这个特殊的情况下，这是不需要的，因为我们手头有中间结果）。)
//
[0.x.42905] 
[0.x.42906] 
[0.x.42907] 
[0.x.42908] 
[0.x.42909] 
[0.x.42910] 
[0.x.42911] 
[0.x.42912] 
//
// 使用语句[1.x.175]打印由CAS计算的第一和第二导数的表达式，得到以下输出。[1.x.176] 这与前面介绍的这些导数的分析表达式相比，效果很好。
//
// 现在我们已经形成了函数及其导数的符号表达式，我们想对函数的主要参数`x`和`y`的数字值进行评估。为了达到这个目的，我们构造了一个*替代图*，它将符号值映射到它们的数字对应值。
//
[0.x.42913] 
[0.x.42914] 
[0.x.42915] 
[0.x.42916] 
//
// 这个过程的最后一步是将所有的符号变量和操作转换成数值，并产生这个操作的数值结果。为了做到这一点，我们在上面已经提到的步骤中，将替换图与符号变量结合起来。"替换"。
//
// 一旦我们把这个替换图传递给CAS，它就会把符号变量的每个实例（或者更一般的，子表达式）替换成它的数字对应物，然后把这些结果在操作树上传播，如果可能的话，简化树上的每个节点。如果运算树被简化为一个单一的值（也就是说，我们已经将所有的独立变量替换成了它们的数字对应值），那么评估就完成了。
//
// 由于C++的强类型特性，我们需要指示CAS将其对结果的表示转换为内在的数据类型（本例中为`double'）。这就是 "评估 "步骤，通过模板类型我们定义了这个过程的返回类型。方便的是，如果我们确定我们已经进行了完整的替换，这两个步骤可以一次完成。
//
[0.x.42917] 
[0.x.42918] 
//
[0.x.42919] 
[0.x.42920] 
[0.x.42921] 
[0.x.42922] 
[0.x.42923] 
[0.x.42924] 
[0.x.42925] 
//
// 我们可以对第一个导数做同样的处理......
//
[0.x.42926] 
[0.x.42927] 
[0.x.42928] 
[0.x.42929] 
//
[0.x.42930] 
[0.x.42931] 
[0.x.42932] 
[0.x.42933] 
[0.x.42934] 
[0.x.42935] 
[0.x.42936] 
[0.x.42937] 
 
 
 
 
 
[0.x.42943] 
//
// ...以及二阶导数。请注意，我们可以在这些操作中重复使用相同的替换图，因为我们希望针对相同的`x`和`y`值评估所有这些函数。修改置换图中的值，就可以得到相同的符号表达式的评估结果，同时给自变量分配不同的值。我们也可以很高兴地让每个变量在一次中代表一个实值，在下一次中代表一个复值。
//
[0.x.42944] 
[0.x.42945] 
[0.x.42946] 
[0.x.42947] 
[0.x.42948] 
[0.x.42949] 
[0.x.42950] 
[0.x.42951] 
//
[0.x.42952] 
[0.x.42953] 
[0.x.42954] 
[0.x.42955] 
[0.x.42956] 
[0.x.42957] 
[0.x.42958] 
[0.x.42959] 
[0.x.42960] 
[0.x.42961] 
[0.x.42962] 
[0.x.42963] 
[0.x.42964] 
[0.x.42965] 
[0.x.42966] 
[0.x.42967] 
[0.x.42968] 
[0.x.42969] 
[0.x.42970] 
[0.x.42971] 
[0.x.42972] 
[0.x.42973] 
[0.x.42974] 
[0.x.42975] 
[0.x.42976] 
[0.x.42977] 
[0.x.42978] 
[0.x.42979] 
[0.x.42980] 
//[2.x.5325] 
//
// 用来驱动这些初始例子的函数是直接的。我们将任意选择一些值来评估该函数（尽管知道`x = 0`是不允许的），然后将这些值传递给使用AD和SD框架的函数。
//
[0.x.42981] 
[0.x.42982] 
[0.x.42983] 
[0.x.42984] 
//
[0.x.42985] 
[0.x.42986] 
[0.x.42987] 
[0.x.42988] 
//
[0.x.42989] 
[0.x.42990] 
[0.x.42991] 
[0.x.42992] 
[0.x.42993] 
//
[0.x.42994] 
//[2.x.5326] 
//
// 现在我们已经介绍了自动分化和符号分化背后的原理，我们将通过制定两个耦合的磁力学构成法将其付诸实施：一个是与速率无关的，另一个则表现为与速率有关的行为。
//
// 正如你在介绍中记得的那样，我们将考虑的材料构成法则要比上面的简单例子复杂得多。这不仅仅是因为我们将考虑的函数[2.x.5327]的形式，而且特别是因为[2.x.5328]不仅仅取决于两个标量变量，而是取决于一大堆*张量，每个张量都有几个组成部分。在某些情况下，这些是*对称*张量，对于这些张量来说，只有一个分量子集实际上是独立的，我们必须考虑计算[2.x.5329]这样的导数的实际意义，其中[2.x.5330]是一个对称张量。希望这一切将在下面变得清晰。我们也将清楚地看到，用手来做这件事，在最好的情况下，将是非常**的。
// *繁琐，而在最坏的情况下，充满了难以发现的错误。
//
[0.x.42995] 
[0.x.42996] 
//[2.x.5331] 
//
// 我们先描述一下能量函数描述中出现的各种材料参数 [2.x.5332] 。
//
// ConstitutiveParameters类被用来保存这些数值。所有参数的值（包括构成参数和流变参数）都来自于 [2.x.5333] ，并给出了能够产生大致代表真实的、实验室制造的磁活性聚合物的构成响应的值，当然，这里使用的具体数值对本程序的目的没有影响。
//
// 前四个构成参数分别代表
//
// 弹性剪切模量[2.x.5334] 。
//
// --磁饱和时的弹性剪切模量 [2.x.5335] 。
//
// - 弹性剪切模量的饱和磁场强度 [2.x.5336] ，以及
//
// 泊松比 [2.x.5337] 。
//
[0.x.42997] 
[0.x.42998] 
[0.x.42999] 
[0.x.43000] 
//
[0.x.43001] 
[0.x.43002] 
[0.x.43003] 
[0.x.43004] 
//
// 接下来的四个，只与速率相关的材料有关，是以下的参数
//
// - 粘弹性剪切模量 [2.x.5338] 。
//
// - 磁饱和时的粘弹性剪切模量 [2.x.5339] 。
//
// 粘弹性剪切模量的饱和磁场强度[2.x.5340] ，以及
//
// --特征松弛时间 [2.x.5341] 。
//
[0.x.43005] 
[0.x.43006] 
[0.x.43007] 
[0.x.43008] 
//
// 最后一个参数是相对磁导率 [2.x.5342] 。
//
[0.x.43009] 
//
[0.x.43010] 
[0.x.43011] 
//
// 参数是通过ParameterAcceptor框架初始化的，该框架在 [2.x.5343] 中有详细讨论。
//
[0.x.43012] 
[0.x.43013] 
[0.x.43014] 
[0.x.43015] 
[0.x.43016] 
[0.x.43017] 
[0.x.43018] 
[0.x.43019] 
[0.x.43020] 
//
[0.x.43021] 
[0.x.43022] 
[0.x.43023] 
[0.x.43024] 
[0.x.43025] 
[0.x.43026] 
[0.x.43027] 
//
[0.x.43028] 
//
[0.x.43029] 
[0.x.43030] 
//[2.x.5344] 
//
// 由于我们将为同一类材料制定两种构成法，因此定义一个基类以确保它们有统一的接口是有意义的。
//
// 类的声明从构造函数开始，它将接受一组构成参数，这些参数与材料定律本身一起决定了材料的响应。
//
[0.x.43031] 
[0.x.43032] 
[0.x.43033] 
[0.x.43034] 
[0.x.43035] 
[0.x.43036] 
//
// 我们将在一个方法中计算和存储这些值，而不是随意计算和返回动力学变量或其线性化。然后这些缓存的结果将在请求时返回。我们将把为什么要这样做的精确解释推迟到以后的阶段。现在重要的是看到这个函数接受所有的场变量，即磁场矢量[2.x.5345]和右Cauchy-Green变形张量[2.x.5346]，以及时间离散器。除了[2.x.5347]之外，这些都是计算材料响应所需的基本量。
//
[0.x.43037] 
[0.x.43038] 
[0.x.43039] 
//
// 接下来的几个函数提供了探测材料响应的接口，这些响应是由于施加的变形和磁荷载引起的。
//
// 由于该类材料可以用自由能[2.x.5348]来表示，我们可以计算出......
//
[0.x.43040] 
//
// ... 以及两个动力学量。
//
// 磁感应矢量 [2.x.5349] ，和
//
// --皮奥拉-基尔霍夫总应力张量[2.x.5350] 。
[0.x.43041] 

[0.x.43042] 
//
// .......以及动力学量的线性化，它们是。
//
// --磁静力学正切张量 [2.x.5351] 。
//
// - 总的参考性磁弹性耦合张量[2.x.5352] ，以及
//
// --总的参考弹性正切张量[2.x.5353] 。
//
[0.x.43043] 
//
[0.x.43044] 
//
[0.x.43045] 
//
// 我们还将定义一个方法，为这个类实例提供一个机制，在进入下一个时间段之前做任何额外的任务。同样，这样做的原因将在稍后变得清晰。
//
[0.x.43046] 
[0.x.43047] 
//
// 在该类的`保护'部分，我们存储了一个对支配材料响应的构成参数实例的引用。为了方便起见，我们还定义了一些函数来返回各种构成参数（包括明确定义的，以及计算的）。
//
与材料的弹性响应有关的参数依次是：//。
//
// - 弹性剪切模量。
//
// - 饱和磁场下的弹性剪切模量。
//
// - 弹性剪切模量的饱和磁场强度。
//
// - 泊松比。
//
// 泊松比、Lam&eacute;参数，以及
//
// 体积模量。
//
[0.x.43048] 
[0.x.43049] 
//
[0.x.43050] 
//
[0.x.43051] 
//
[0.x.43052] 
//
[0.x.43053] 
//
[0.x.43054] 
//
[0.x.43055] 
//
// 与材料的弹性响应有关的参数依次是
//
// - 粘弹性剪切模量。
//
// -- 磁饱和时的粘弹性剪切模量。
//
// - 粘弹性剪切模量的饱和磁场强度，以及
//
粘弹性剪切模量的饱和磁场强度，和//--特征松弛时间。
//
[0.x.43056] 
//
[0.x.43057] 
//
[0.x.43058] 
//
[0.x.43059] 
//
// 与材料的磁响应有关的参数依次是：。
//
// 相对磁导率，以及
//
// - 磁导率常数[2.x.5354]（其实不是一个材料常数，而是一个普遍的常数，为了简单起见，我们在这里分组）。

// 我们还将实现一个函数，从时间离散性中返回时间步长。
//
[0.x.43060] 
//
[0.x.43061] 
[0.x.43062] 
[0.x.43063] 
//
// 在下文中，让我们从实现刚才定义的类的几个相对琐碎的成员函数开始。
//
[0.x.43064] 
[0.x.43065] 
[0.x.43066] 
[0.x.43067] 
[0.x.43068] 
[0.x.43069] 
[0.x.43070] 
[0.x.43071] 
//
[0.x.43072] 
[0.x.43073] 
[0.x.43074] 
[0.x.43075] 
[0.x.43076] 
[0.x.43077] 
//
[0.x.43078] 
[0.x.43079] 
[0.x.43080] 
[0.x.43081] 
[0.x.43082] 
[0.x.43083] 
//
[0.x.43084] 
[0.x.43085] 
[0.x.43086] 
[0.x.43087] 
[0.x.43088] 
[0.x.43089] 
//
[0.x.43090] 
[0.x.43091] 
[0.x.43092] 
[0.x.43093] 
[0.x.43094] 
[0.x.43095] 
//
[0.x.43096] 
[0.x.43097] 
[0.x.43098] 
[0.x.43099] 
[0.x.43100] 
[0.x.43101] 
//
[0.x.43102] 
[0.x.43103] 
[0.x.43104] 
[0.x.43105] 
[0.x.43106] 
[0.x.43107] 
[0.x.43108] 
//
[0.x.43109] 
[0.x.43110] 
[0.x.43111] 
[0.x.43112] 
[0.x.43113] 
[0.x.43114] 
//
[0.x.43115] 
[0.x.43116] 
[0.x.43117] 
[0.x.43118] 
[0.x.43119] 
[0.x.43120] 
//
[0.x.43121] 
[0.x.43122] 
[0.x.43123] 
[0.x.43124] 
[0.x.43125] 
[0.x.43126] 
//
[0.x.43127] 
[0.x.43128] 
[0.x.43129] 
[0.x.43130] 
[0.x.43131] 
[0.x.43132] 
//
[0.x.43133] 
[0.x.43134] 
[0.x.43135] 
[0.x.43136] 
[0.x.43137] 
[0.x.43138] 
//
[0.x.43139] 
[0.x.43140] 
[0.x.43141] 
[0.x.43142] 
[0.x.43143] 
[0.x.43144] 
//
[0.x.43145] 
[0.x.43146] 
[0.x.43147] 
[0.x.43148] 
[0.x.43149] 
[0.x.43150] 
//[2.x.5355] 
//
// 我们将首先考虑一种非耗散性材料，即受磁超弹性构成法则支配的材料，在浸入磁场时表现出僵硬。正如介绍中所述，这种材料的储能密度函数可能由[1.x.177]和[1.x.178]给出。
//
// 现在来看看实现这种行为的类。由于我们希望这个类能完全描述一种材料，所以我们将它标记为 "final"，这样继承树就在这里终止了。在类的顶部，我们定义了辅助类型，我们将在标量能量密度函数的AD计算中使用它。请注意，我们希望它能返回 "double "类型的值。我们还必须指定空间维度的数量，`dim'，以便建立矢量、张量和对称张量场与它们所含分量数量之间的联系。用于ADHelper类的具体的`ADTypeCode`将在实际使用该类的时候作为模板参数提供。
//
[0.x.43151] 
[0.x.43152] 
[0.x.43153] 
[0.x.43154] 
[0.x.43155] 
[0.x.43156] 
[0.x.43157] 
//
[0.x.43158] 
[0.x.43159] 
[0.x.43160] 
//
// 由于基类的公共接口是纯 "虚拟 "的，这里我们将声明这个类将覆盖所有这些基类方法。
//
[0.x.43161] 
[0.x.43162] 
[0.x.43163] 
//
[0.x.43164] 
//
[0.x.43165] 
//
[0.x.43166] 
//
[0.x.43167] 
//
[0.x.43168] 
//
[0.x.43169] 
//
// 在这个类的`private`部分，我们需要定义一些提取器，这些提取器将帮助我们设置自变量，随后得到与因变量相关的计算值。如果这个类是在有限元问题的背景下使用，那么这些提取器中的每一个都（很可能）与解场的一个分量（在本例中，位移和磁标势）的梯度有关。正如你现在可能推断的那样，这里 "C "表示右Cauchy-Green张量，"H "表示磁场向量。
//
[0.x.43170] 
[0.x.43171] 
[0.x.43172] 
//
// 这是一个自动微分助手的实例，我们将设置它来完成与构成法则有关的所有微分计算......
//
[0.x.43173] 
//
// ... 以下三个成员变量将存储来自[2.x.5356]的输出。 [2.x.5357]一次性返回关于所有场变量的导数，因此我们将保留完整的梯度向量和Hessian矩阵。我们将从中提取我们真正感兴趣的单个条目。
//
[0.x.43174] 
[0.x.43175] 
[0.x.43176] 
[0.x.43177] 
//
// 在设置字段组件提取器时，对于它们的顺序是完全任意的。但重要的是，这些提取器没有重叠的索引。这些提取器的组件总数定义了[2.x.5358]需要跟踪的独立变量的数量，并且我们将对其进行导数。由此产生的数据结构[2.x.5359]和[2.x.5360]也必须有相应的大小。一旦[2.x.5361]被配置好（它的输入参数是[2.x.5362]和[2.x.5363]的组件总数），我们就可以直接询问它使用多少个独立变量。
//
[0.x.43178] 
[0.x.43179] 
[0.x.43180] 
[0.x.43181] 
[0.x.43182] 
[0.x.43183] 
[0.x.43184] 
[0.x.43185] 
[0.x.43186] 
[0.x.43187] 
[0.x.43188] 
[0.x.43189] 
[0.x.43190] 
[0.x.43191] 
[0.x.43192] 
//
// 如前所述，由于自动微分库的工作方式，[2.x.5364]将总是同时返回能量密度函数相对于所有场变量的导数。由于这个原因，在函数`get_B()`、`get_S()`等中计算导数是没有意义的，因为我们会做很多额外的计算，然后直接丢弃。因此，处理这个问题的最好方法是用一个单一的函数调用来完成所有的前期计算，然后我们在需要时提取存储的数据。这就是我们在 "update_internal_data() "方法中要做的。由于材料是与速率无关的，我们可以忽略DiscreteTime参数。
//
[0.x.43193] 
[0.x.43194] 
[0.x.43195] 
[0.x.43196] 
[0.x.43197] 
[0.x.43198] 
[0.x.43199] 
[0.x.43200] 
//
// 由于我们在每个时间步骤中都会重复使用[2.x.5365]数据结构，所以我们需要在使用前清除它的所有陈旧信息。
//
[0.x.43201] 
//
// 下一步是设置所有字段组件的值。这些定义了 "点"，我们将围绕这个点计算函数梯度及其线性化。我们之前创建的提取器提供了字段和[2.x.5366]中的注册表之间的关联 -- 它们将被反复使用，以确保我们对哪个变量对应于`H`或`C`的哪个分量有正确的解释。
//
[0.x.43202] 
[0.x.43203] 
//
// 现在我们已经完成了最初的设置，我们可以检索我们字段的AD对应关系。这些是真正的能量函数的独立变量，并且对用它们进行的计算是 "敏感的"。请注意，AD数被视为一种特殊的数字类型，可以在许多模板化的类中使用（在这个例子中，作为Tensor和SymmetricTensor类的标量类型）。
//
[0.x.43204] 
[0.x.43205] 
[0.x.43206] 
[0.x.43207] 
//
// 我们还可以在许多以标量类型为模板的函数中使用它们。因此，对于我们需要的这些中间值，我们可以进行张量运算和一些数学函数。由此产生的类型也将是一个自动可分的数字，它对这些函数中的操作进行编码。
//
[0.x.43208] 
[0.x.43209] 
[0.x.43210] 
[0.x.43211] 
//
// 接下来我们将计算出在磁场影响下导致剪切模量变化（增加）的比例函数......
//
[0.x.43212] 
[0.x.43213] 
[0.x.43214] 
[0.x.43215] 
//
// ...然后我们就可以定义材料的储能密度函数。我们将在后面看到，这个例子足够复杂，值得使用AD，至少可以验证一个无辅助的实现。
//
[0.x.43216] 
[0.x.43217] 
[0.x.43218] 
[0.x.43219] 
[0.x.43220] 
[0.x.43221] 
//
// 储存的能量密度函数实际上是这个问题的因变量，所以作为 "配置 "阶段的最后一步，我们用[2.x.5367]注册其定义。
[0.x.43222] 
//
// 最后，我们可以检索存储的能量密度函数的结果值，以及它相对于输入字段的梯度和Hessian，并将它们缓存起来。
//
[0.x.43223] 
[0.x.43224] 
[0.x.43225] 
[0.x.43226] 
//
// 下面的几个函数可以查询[2.x.5368]的存储值，并提取梯度向量和Hessian矩阵的所需成分。我们再次利用提取器来表达我们希望检索的总梯度向量和Hessian矩阵的哪些部分。它们只返回能量函数的导数，所以对于我们的动能变量的定义和它们的线性化，还需要进行一些操作来形成所需的结果。
//
[0.x.43227] 
[0.x.43228] 
[0.x.43229] 
[0.x.43230] 
[0.x.43231] 
//
[0.x.43232] 
[0.x.43233] 
[0.x.43234] 
[0.x.43235] 
[0.x.43236] 
[0.x.43237] 
[0.x.43238] 
[0.x.43239] 
//
[0.x.43240] 
[0.x.43241] 
[0.x.43242] 
[0.x.43243] 
[0.x.43244] 
[0.x.43245] 
[0.x.43246] 
[0.x.43247] 
//
[0.x.43248] 
[0.x.43249] 
[0.x.43250] 
[0.x.43251] 
[0.x.43252] 
[0.x.43253] 
[0.x.43254] 
[0.x.43255] 
//
// 请注意，对于耦合项来说，提取器参数的顺序特别重要，因为它决定了定向导数的提取顺序。因此，如果我们在调用`extract_hessian_component()`时颠倒了提取器的顺序，那么我们实际上是在检索 [2.x.5369] 的一部分。
//
[0.x.43256] 
[0.x.43257] 
[0.x.43258] 
[0.x.43259] 
[0.x.43260] 
[0.x.43261] 
[0.x.43262] 
[0.x.43263] 
//
[0.x.43264] 
[0.x.43265] 
[0.x.43266] 
[0.x.43267] 
[0.x.43268] 
[0.x.43269] 
[0.x.43270] 
[0.x.43271] 
//[2.x.5370] 
//
// 我们要考虑的第二个材料定律将是一个代表具有单一耗散机制的磁涡弹材料。我们将考虑这种材料的自由能密度函数定义为[1.x.179]，其中[1.x.180]。
//[1.x.181]与内部粘性变量[1.x.182]的演化规律相结合，该演化规律采用一阶后向差分近似法进行离散。
//
// 再一次，让我们看看在一个具体的类中是如何实现的。我们现在将利用SD方法，而不是之前类中使用的AD框架。为了支持这一点，这个类的构造函数不仅接受[2.x.5371]，而且还接受两个额外的变量，这些变量将被用来初始化一个[2.x.5372]我们将在后面给出更多的背景。
//
[0.x.43272] 
[0.x.43273] 
[0.x.43274] 
[0.x.43275] 
[0.x.43276] 
[0.x.43277] 
[0.x.43278] 
[0.x.43279] 
[0.x.43280] 
//
// 和自动区分助手一样，[2.x.5373]将一次性返回一个结果集合。因此，为了只做一次，我们将利用与之前类似的方法，在`update_internal_data()`函数中做所有昂贵的计算，并将结果缓存起来，以便分层提取。
//
[0.x.43281] 
[0.x.43282] 
[0.x.43283] 
//
[0.x.43284] 
//
[0.x.43285] 
//
[0.x.43286] 
//
[0.x.43287] 
//
[0.x.43288] 
//
[0.x.43289] 
//
// 因为我们要处理的是一个与速率有关的材料，所以我们必须在适当的时候更新历史变量。这将是这个函数的目的。
//
[0.x.43290] 
//
// 在该类的`private`部分，我们将希望跟踪内部的粘性变形，所以下面两个（实值的，非符号的）成员变量分别持有
//
// - 内部变量时间步长（如果嵌入非线性求解器框架，则为牛顿步长）的值，以及
//
// - 内部变量在前一个时间步长的值。
//
// （我们将这些变量标记为 "Q"，以便于识别；在计算的海洋中，不一定容易将`Cv`或`C_v`与`C`区分开来）。
//
[0.x.43291] 
[0.x.43292] 
[0.x.43293] 
//
// 由于我们将使用符号类型，我们需要定义一些符号变量，以便与框架一起使用。(它们都以 "SD "为后缀，以方便区分符号类型或表达式与实值类型或标量。) 这可以在前面做一次（甚至有可能作为 "静态 "变量），以尽量减少与创建这些变量相关的开销。为了实现通用编程的终极目标，我们甚至可以用符号来描述构成参数，*有可能*允许一个类的实例在这些值的不同输入下被重复使用。
//
// 这些是代表弹性、粘性和磁性材料参数的符号标量（定义的顺序与它们在[2.x.5374]类中出现的顺序基本相同）。我们还存储了一个符号表达式，[2.x.5375]，表示时间步长）。)
//
[0.x.43294] 
[0.x.43295] 
[0.x.43296] 
[0.x.43297] 
[0.x.43298] 
[0.x.43299] 
[0.x.43300] 
[0.x.43301] 
[0.x.43302] 
[0.x.43303] 
//
// 接下来我们定义一些代表独立场变量的张量符号变量，在此基础上，能量密度函数被参数化。
//
[0.x.43304] 
[0.x.43305] 
//
// 同样，我们也有内部粘性变量的符号表示（包括它的当前值和它在前一个时间段的值）。
//
[0.x.43306] 
[0.x.43307] 
//
// 我们还应该存储从属表达式的定义。虽然我们只计算一次，但我们需要它们从下面声明的[2.x.5376]中检索数据。此外，当序列化一个像这样的材料类时（不是作为本教程的一部分），我们要么需要把这些表达式也序列化，要么需要在重新加载时重建它们。
//
[0.x.43308] 
[0.x.43309] 
[0.x.43310] 
[0.x.43311] 
[0.x.43312] 
[0.x.43313] 
//
// 然后，下一个变量是用于评估从属函数的优化器。更具体地说，它提供了加速评估符号依赖表达式的可能性。这是一个重要的工具，因为对冗长表达式的本地评估（不使用加速方法，而是直接对符号表达式进行评估）会非常慢。[2.x.5377]类提供了一种机制，可以将符号表达式树转化为另一种代码路径，例如，在各种从属表达式之间共享中间结果（意味着这些中间值每次评估只计算一次）和/或使用即时编译器编译代码（从而检索评估步骤的接近原生性能）。
//
// 执行这种代码转换在计算上是非常昂贵的，所以我们存储了优化器，使其在每个类实例中只做一次。这也进一步促使我们决定将构成参数本身变成符号化。这样我们就可以在几种材料（当然是相同的能量函数）和潜在的多个连续体点（如果嵌入到有限元模拟中）中重复使用这个[2.x.5378]的单一实例。
//
// 正如模板参数所指定的，数值结果将是<tt>double</tt>类型。
//
[0.x.43314] 
//
// 在评估阶段，我们必须将符号变量映射到它们的实值对应物。下一个方法将提供这个功能。
//
// 这个类的最后一个方法将配置 [2.x.5379] 。
[0.x.43315] 
[0.x.43316] 
[0.x.43317] 
[0.x.43318] 
//
[0.x.43319] 
[0.x.43320] 
//
// 由于静止变形状态是材料被认为是完全松弛的状态，内部粘性变量被初始化为同一张量，即 [2.x.5380] 。代表构成参数、时间步长、场和内部变量的各种符号变量都有一个唯一的标识符。优化器被传递给两个参数，这两个参数声明了应该应用哪种优化（加速）技术，以及CAS应该采取哪些额外步骤来帮助提高评估期间的性能。
//
[0.x.43321] 
[0.x.43322] 
[0.x.43323] 
[0.x.43324] 
[0.x.43325] 
[0.x.43326] 
[0.x.43327] 
[0.x.43328] 
[0.x.43329] 
[0.x.43330] 
[0.x.43331] 
[0.x.43332] 
[0.x.43333] 
[0.x.43334] 
[0.x.43335] 
[0.x.43336] 
[0.x.43337] 
[0.x.43338] 
[0.x.43339] 
[0.x.43340] 
[0.x.43341] 
[0.x.43342] 
[0.x.43343] 
[0.x.43344] 
[0.x.43345] 
[0.x.43346] 
[0.x.43347] 
[0.x.43348] 
[0.x.43349] 
[0.x.43350] 
//
// 替换图只是将以下所有数据配对在一起。
//
// - 构成参数（从基类中获取的值）。
//
// - 时间步长（从时间离散器中获取其值）。
//
// 场值（其值由调用该[2.x.5381]实例的外部函数规定），以及
//
// 当前和之前的内部粘性变形（其值存储在这个类实例中）。
//
[0.x.43351] 
[0.x.43352] 
[0.x.43353] 
[0.x.43354] 
[0.x.43355] 
[0.x.43356] 
[0.x.43357] 
[0.x.43358] 
[0.x.43359] 
[0.x.43360] 
[0.x.43361] 
[0.x.43362] 
[0.x.43363] 
[0.x.43364] 
[0.x.43365] 
[0.x.43366] 
[0.x.43367] 
[0.x.43368] 
[0.x.43369] 
[0.x.43370] 
[0.x.43371] 
[0.x.43372] 
[0.x.43373] 
//
// 由于符号表达式的 "自然 "使用，配置[2.x.5382]的大部分过程看起来与构建自动区分帮助器的过程非常相似。尽管如此，我们还是要再次详细说明这些步骤，以强调这两个框架的不同之处。
//
// 该函数从符号化编码变形梯度行列式的表达式开始（用右Cauchy-Green变形张量表示，即我们的主要场变量），以及[2.x.5383]本身的逆。
//
[0.x.43374] 
[0.x.43375] 
[0.x.43376] 
[0.x.43377] 
[0.x.43378] 
[0.x.43379] 
[0.x.43380] 
//
// 接下来是自由能密度函数的弹性部分的饱和函数的符号表示，然后是自由能密度函数的磁弹性贡献。这一切都与我们之前看到的结构相同。
//
[0.x.43381] 
[0.x.43382] 
[0.x.43383] 
[0.x.43384] 
//
[0.x.43385] 
[0.x.43386] 
[0.x.43387] 
[0.x.43388] 
[0.x.43389] 
//
// 此外，我们还定义了自由能密度函数的磁-粘弹性贡献。实现这一点所需的第一个组件是一个缩放函数，它将使粘性剪切模量在磁场影响下发生变化（增加）（见[2.x.5384] ，公式29）。此后，我们可以计算能量密度函数的耗散分量；其表达式见[2.x.5385]（公式28），这是对[2.x.5386]（公式46）中提出的能量密度函数的直接扩展。
//
[0.x.43390] 
[0.x.43391] 
[0.x.43392] 
[0.x.43393] 
//
[0.x.43394] 
[0.x.43395] 
[0.x.43396] 
[0.x.43397] 
//
// 从这些构件中，我们可以定义材料的总自由能密度函数。
//
[0.x.43398] 
//
// 目前，对中科院来说，变量[2.x.5387]似乎是独立于[2.x.5388]的，我们的张量符号表达式[2.x.5389]只是有一个与之相关的标识符，没有任何东西将其与另一个张量符号表达式[2.x.5390]联系起来。因此，相对于[2.x.5391]的任何导数将忽略这种内在的依赖关系，正如我们从进化规律可以看到的，实际上是[2.x.5392] 。这意味着，相对于[2.x.5394]推导任何函数[2.x.5393]将返回部分导数[2.x.5395]，而不是总导数[2.x.5396] 。
//
// 相比之下，在当前的AD库中，总导数将总是被返回。这意味着对于这类材料模型来说，计算出的动能变量是不正确的，这使得AD成为从能量密度函数中推导出（连续点水平）这种耗散性材料的构成法的不正确工具。
//
// 正是这种特定的控制水平描述了SD和AD框架之间的一个决定性差异。在几行中，我们将对内部变量[2.x.5397]的表达式进行操作，使其产生正确的线性化。
//
但是，//首先，我们将计算动能变量的符号表达式，即磁感应向量和Piola-Kirchhoff应力张量。执行微分的代码相当接近于模仿理论中所述的定义。
//
[0.x.43399] 
[0.x.43400] 
//
// 因为下一步是对上述内容进行线性化，所以现在是告知CAS [2.x.5398] 对 [2.x.5399] 的明确依赖性的适当时机，即说明 [2.x.5400] 。这意味着未来所有关于[2.x.5401]的微分运算将考虑到这种依赖关系（即计算总导数）。换句话说，我们将转换一些表达式，使其内在参数化从[2.x.5402]变为[2.x.5403] .
//
// 为了做到这一点，我们考虑时间离散的演化规律。由此，我们有了内部变量在其历史上的明确表达，以及主要场变量。这就是它在这个表达式中描述的内容。
//
[0.x.43401] 
[0.x.43402] 
[0.x.43403] 
[0.x.43404] 
[0.x.43405] 
//
// 接下来我们产生一个中间替换图，它将在一个表达式中找到[2.x.5404]（我们的标识符）的每个实例，并用[2.x.5405]中的完整表达式来替换它。
[0.x.43406] 
[0.x.43407] 
[0.x.43408] 
//
// 我们可以在两个动力学变量上进行这种替换，并立即将替换后的结果与场变量进行区分。(如果你愿意，这可以分成两步进行，中间的结果储存在一个临时变量中)。同样，如果你忽略了代换所产生的 "复杂性"，这些将运动变量线性化并产生三个切向张量的调用与理论中所述的非常相似。
//
[0.x.43409] 
[0.x.43410] 
[0.x.43411] 
[0.x.43412] 
[0.x.43413] 
[0.x.43414] 
[0.x.43415] 
[0.x.43416] 
[0.x.43417] 
[0.x.43418] 
//
// 现在我们需要告诉[2.x.5406]我们需要提供哪些条目的数值，以便它能成功地进行计算。这些基本上充当了[2.x.5407]必须评估的所有从属函数的输入参数。它们统称为问题的自变量、历史变量、时间步长和构成参数（因为我们没有在能量密度函数中硬编码它们）。
//
// 因此，我们真正想要的是为它提供一个符号集合，我们可以这样完成。[1.x.183] 但这实际上都已经被编码为替换图的键。这样做还意味着我们需要在两个地方（这里和构建替换图时）管理这些符号，这很烦人，而且如果这个材料类被修改或扩展，可能会出现错误。由于我们此时对数值不感兴趣，所以如果替换图中与每个键项相关的数值被填入无效的数据也没有关系。所以我们将简单地创建一个假的替换图，并从中提取符号。请注意，任何传递给[2.x.5408]的替换图都必须至少包含这些符号的条目。
//
[0.x.43419] 
[0.x.43420] 
[0.x.43421] 
//
// 然后我们通知优化器我们想要计算哪些数值，在我们的情况下，这包括所有的因变量（即能量密度函数及其各种导数）。
//
[0.x.43422] 
//
// 最后一步是最终确定优化器。通过这个调用，它将确定一个等价的代码路径，一次性评估所有的从属函数，但计算成本比直接评估符号表达式时要低。注意：这是一个昂贵的调用，所以我们希望尽可能少地执行它。我们在类的构造函数中完成了这一过程，实现了每个类实例只被调用一次的目标。
//
[0.x.43423] 
[0.x.43424] 
//
// 由于[2.x.5409]的配置是在前面完成的，所以每次我们想计算动能变量或它们的线性化（导数）时，要做的事情就很少了。
//
[0.x.43425] 
[0.x.43426] 
[0.x.43427] 
[0.x.43428] 
[0.x.43429] 
[0.x.43430] 
//
// 为了更新内部历史变量，我们首先需要计算一些基本量，这一点我们之前已经看到了。我们还可以向时间离散器询问用于从上一个时间步长迭代到当前时间步长的时间步长。
//
[0.x.43431] 
//
[0.x.43432] 
[0.x.43433] 
[0.x.43434] 
[0.x.43435] 
//
// 现在，我们可以按照演化规律给出的定义，结合所选择的时间离散化方案，更新（实值）内部粘性变形张量。
//
[0.x.43436] 
[0.x.43437] 
[0.x.43438] 
//
// 接下来我们向优化器传递我们希望自变量、时间步长和（本调用隐含的）构成参数所代表的数值。
//
[0.x.43439] 
//
// 在进行下一次调用时，用于（数值）评估从属函数的调用路径要比字典替换更快。
//
[0.x.43440] 
[0.x.43441] 
//
// 在调用了`update_internal_data()`之后，从优化器中提取数据就有效了。在进行评估时，我们需要从优化器中提取数据的确切符号表达式。这意味着我们需要在优化器的生命周期内存储所有因变量的符号表达式（自然，对输入变量也有同样的暗示）。
//
[0.x.43442] 
[0.x.43443] 
[0.x.43444] 
[0.x.43445] 
[0.x.43446] 
//
[0.x.43447] 
[0.x.43448] 
[0.x.43449] 
[0.x.43450] 
[0.x.43451] 
//
[0.x.43452] 
[0.x.43453] 
[0.x.43454] 
[0.x.43455] 
[0.x.43456] 
[0.x.43457] 
//
[0.x.43458] 
[0.x.43459] 
[0.x.43460] 
[0.x.43461] 
[0.x.43462] 
[0.x.43463] 
//
[0.x.43464] 
[0.x.43465] 
[0.x.43466] 
[0.x.43467] 
[0.x.43468] 
//
[0.x.43469] 
[0.x.43470] 
[0.x.43471] 
[0.x.43472] 
[0.x.43473] 
[0.x.43474] 
//
// 当在时间上向前移动时，内部变量的 "当前 "状态瞬间定义了 "前 "时间段的状态。因此，我们记录历史变量的值，作为下一个时间步长的 "过去值 "使用。
//
[0.x.43475] 
[0.x.43476] 
[0.x.43477] 
[0.x.43478] 
[0.x.43479] 
//[2.x.5410] 
//
// 现在我们已经看到了AD和SD框架如何在定义这些构成法则方面做了大量的工作，为了验证，我们将手工实现相应的类，并对框架与本地实现做一些初步的基准测试。
//
// 为了保证作者的理智，下面记录的（希望是准确的）是动能变量和它们的切线的完整定义，以及一些中间计算过程。由于构成法则类的结构和设计已经在前面概述过了，我们将略过它，只是在 "update_internal_data() "方法的定义中对各阶段的计算进行划分。将导数计算（及其适度表达的变量名）与出现在类描述中的文档定义联系起来应该是很容易的。然而，我们将借此机会介绍两种实现构成法类的不同范式。第二种将比第一种提供更多的灵活性（从而使其更容易扩展，在作者看来），但要牺牲一些性能。
//
// [2.x.5411] 
//
// 从前面提到的储存能量中，对于这种磁弹性材料，定义为[1.x.184]与[1.x.185]，对应于磁感应向量和总Piola-Kirchhoff应力张量的第一导数是[1.x.186] 
//[1.x.187] 与[1.x.188] 。
//[1.x.189] 
//[1.x.190] 
//[1.x.191] 
//[1.x.192] 在上面的一个推导中使用对称算子[2.x.5412]有助于确保所产生的秩-4张量，由于[2.x.5413]的对称性而持有小的对称性，仍然将秩-2对称张量映射为秩-2对称张量。参见SymmetricTensor类文档和[2.x.5414]的介绍，并进一步解释在四阶张量的背景下对称性的含义。
//
//每个运动学变量相对于其参数的线性化是[1.x.193] 。
//[1.x.194] 
//[1.x.195]与[1.x.196] 。
//[1.x.197] 
//[1.x.198] 
//[1.x.199]
//
// 好吧，很快就升级了--尽管[2.x.5415]和[2.x.5416]的定义可能已经给出了一些提示，说明计算动能场和它们的线性化需要一些努力，但最终的定义可能比最初想象的要复杂一些。了解了我们现在所做的，也许可以说我们真的不想计算这些函数相对于其参数的一、二次导数--不管我们在微积分课上做得如何，或者我们可能是多么好的程序员。
//
// 在最终实现这些的类方法定义中，我们以稍微不同的方式组成这些计算。一些中间步骤也被保留下来，以便从另一个角度说明如何系统地计算导数。此外，一些计算被分解得更少或更进一步，以重用一些中间值，并希望能帮助读者跟随导数的操作。
//
[0.x.43480] 
[0.x.43481] 
[0.x.43482] 
[0.x.43483] 
[0.x.43484] 
[0.x.43485] 
[0.x.43486] 
//
[0.x.43487] 
[0.x.43488] 
[0.x.43489] 
//
[0.x.43490] 
//
[0.x.43491] 
//
[0.x.43492] 
//
[0.x.43493] 
//
[0.x.43494] 
//
[0.x.43495] 
//
[0.x.43496] 
[0.x.43497] 
[0.x.43498] 
[0.x.43499] 
[0.x.43500] 
[0.x.43501] 
[0.x.43502] 
[0.x.43503] 
//
[0.x.43504] 
[0.x.43505] 
[0.x.43506] 
[0.x.43507] 
[0.x.43508] 
[0.x.43509] 
[0.x.43510] 
//
// 对于这个类的更新方法，我们将简单地预先计算一个中间值的集合（用于函数求值、导数计算等），并 "手动 "安排它们的顺序，以使其重复使用最大化。这意味着我们必须自己管理，并决定哪些值必须在其他值之前计算，同时保持代码本身的某种秩序或结构的模样。这很有效，但也许有点乏味。它对类的未来扩展也没有太大的帮助，因为所有这些值都是这个单一方法的局部。
//
// 有趣的是，这种预先计算在多个地方使用的中间表达式的基本技术有一个名字：[共同子表达式消除（CSE）]（https：en.wikipedia.org/wiki/Common_subexpression_elimination）。它是计算机代数系统在承担评估类似表达式的任务时用来减少计算费用的一种策略。
//
[0.x.43511] 
[0.x.43512] 
[0.x.43513] 
[0.x.43514] 
[0.x.43515] 
[0.x.43516] 
[0.x.43517] 
[0.x.43518] 
[0.x.43519] 
[0.x.43520] 
//
// 磁弹性能的饱和函数。
//
[0.x.43521] 
[0.x.43522] 
[0.x.43523] 
[0.x.43524] 
//
[0.x.43525] 
[0.x.43526] 
[0.x.43527] 
//
// 饱和函数的一阶导数，注意到 [2.x.5417] 。
//
[0.x.43528] 
[0.x.43529] 
[0.x.43530] 
[0.x.43531] 
//
[0.x.43532] 
[0.x.43533] 
[0.x.43534] 
//
// 饱和度函数的二阶导数，注意 [2.x.5418] 。
//
[0.x.43535] 
[0.x.43536] 
[0.x.43537] 
[0.x.43538] 
[0.x.43539] 
//
[0.x.43540] 
[0.x.43541] 
[0.x.43542] 
[0.x.43543] 
[0.x.43544] 
[0.x.43545] 
//
// 从场/运动学变量中直接获得的一些中间量。
//
[0.x.43546] 
[0.x.43547] 
[0.x.43548] 
[0.x.43549] 
//
// 中间量的一阶导数。
//
[0.x.43550] 
[0.x.43551] 
[0.x.43552] 
[0.x.43553] 
//
[0.x.43554] 
//
[0.x.43555] 
[0.x.43556] 
[0.x.43557] 
[0.x.43558] 
[0.x.43559] 
[0.x.43560] 
[0.x.43561] 
[0.x.43562] 
//
[0.x.43563] 
[0.x.43564] 
//
// 中间量的二阶导数。
//
[0.x.43565] 
//
[0.x.43566] 
[0.x.43567] 
//
[0.x.43568] 
//
[0.x.43569] 
[0.x.43570] 
[0.x.43571] 
[0.x.43572] 
[0.x.43573] 
[0.x.43574] 
[0.x.43575] 
//
[0.x.43576] 
[0.x.43577] 
[0.x.43578] 
[0.x.43579] 
[0.x.43580] 
[0.x.43581] 
[0.x.43582] 
[0.x.43583] 
[0.x.43584] 
[0.x.43585] 
//
// 储存的能量密度函数。
//
[0.x.43586] 
[0.x.43587] 
[0.x.43588] 
[0.x.43589] 
[0.x.43590] 
//
// 动能量。
//
[0.x.43591] 
[0.x.43592] 
[0.x.43593] 
[0.x.43594] 
//
[0.x.43595] 
[0.x.43596] 
[0.x.43597] 
[0.x.43598] 
[0.x.43599] 
[0.x.43600] 
//
// 动能量的线性化。
//
[0.x.43601] 
[0.x.43602] 
[0.x.43603] 
[0.x.43604] 
//
[0.x.43605] 
[0.x.43606] 
[0.x.43607] 
[0.x.43608] 
[0.x.43609] 
[0.x.43610] 
[0.x.43611] 
//
[0.x.43612] 
[0.x.43613] 
[0.x.43614] 
[0.x.43615] 
[0.x.43616] 
[0.x.43617] 
[0.x.43618] 
[0.x.43619] 
[0.x.43620] 
[0.x.43621] 
[0.x.43622] 
//
[0.x.43623] 
[0.x.43624] 
[0.x.43625] 
[0.x.43626] 
[0.x.43627] 
//
[0.x.43628] 
[0.x.43629] 
[0.x.43630] 
[0.x.43631] 
[0.x.43632] 
//
[0.x.43633] 
[0.x.43634] 
[0.x.43635] 
[0.x.43636] 
[0.x.43637] 
//
[0.x.43638] 
[0.x.43639] 
[0.x.43640] 
[0.x.43641] 
[0.x.43642] 
//
[0.x.43643] 
[0.x.43644] 
[0.x.43645] 
[0.x.43646] 
[0.x.43647] 
//
[0.x.43648] 
[0.x.43649] 
[0.x.43650] 
[0.x.43651] 
[0.x.43652] 
//[2.x.5419] 
//
// 如前所述，我们将考虑的具有一种耗散机制的磁涡流材料的自由能密度函数定义为 [1.x.200] 。
//[1.x.201] 
//[1.x.202]与[1.x.203]。
//[1.x.204]和演变规律[1.x.205]，其本身是以[2.x.5420]为参数的。根据设计，能量[2.x.5421]的磁弹性部分与前面介绍的磁弹性材料的磁弹性部分是相同的。因此，对于源于这部分能量的各种贡献的导数，请参考前面的章节。我们将继续强调来自这些条款的具体贡献，用[2.x.5422]对突出的条款进行上标，而来自磁弹性部分的贡献则用[2.x.5423]上标。此外，阻尼项的磁饱和函数[2.x.5424]具有与弹性项相同的形式（即[2.x.5425]），因此其导数的结构与之前看到的相同；唯一的变化是三个构成参数，现在与粘性剪切模量[2.x.5426]而非弹性剪切模量[2.x.5427]相关。
//
// 对于这种磁-粘弹性材料，对应于磁感应矢量和Piola-Kirchhoff总应力张量的第一导数是 [1.x.206] 。
//[1.x.207]，其中粘性贡献为[1.x.208] 。
//[1.x.209]和[1.x.210] 时间微缩的演化规律，[1.x.211]也将决定内部变量相对于场变量的线性化是如何构成的。
//
// 注意，为了获得这种耗散材料的磁感应矢量和总Piola-Kirchhoff应力张量的*正确表达式，我们必须严格遵守应用Coleman-Noll程序的结果：我们必须取*部分导数*。
//自由能密度函数与场变量的关系。(对于我们的非耗散性磁弹性材料，取部分导数或全部导数都会有同样的结果，所以之前没有必要提请大家注意这一点)。操作的关键部分是冻结内部变量[2.x.5428]，同时计算[2.x.5429]相对于[2.x.5430]的导数--[2.x.5431]对[2.x.5432]的依赖性不被考虑。当决定是使用AD还是SD来执行这个任务时，选择是很清楚的--只有符号框架提供了一个机制来完成这个任务；如前所述，AD只能返回总导数，所以它不适合这个任务。
//
// 为了对事情进行总结，我们将介绍这种速度依赖性耦合材料的材料切线。两个动能变量相对于其参数的线性化是 [1.x.212] 。
//[1.x.213] 
//[1.x.214] 其中粘性贡献的切线为[1.x.215] 。
//[1.x.216] 
//[1.x.217]与[1.x.218]，从演化定律来看，[1.x.219]注意，只是[2.x.5433]的最后一项包含内部变量的切线。这个特殊演化规律的线性化是线性的。关于非线性演化定律的例子，这种线性化必须以迭代的方式求解，见[2.x.5434] -Theiss2011a。
//
[0.x.43653] 
[0.x.43654] 
[0.x.43655] 
[0.x.43656] 
[0.x.43657] 
[0.x.43658] 
[0.x.43659] 
//
[0.x.43660] 
[0.x.43661] 
[0.x.43662] 
//
[0.x.43663] 
//
[0.x.43664] 
//
[0.x.43665] 
//
[0.x.43666] 
//
[0.x.43667] 
//
[0.x.43668] 
//
[0.x.43669] 
//
[0.x.43670] 
[0.x.43671] 
[0.x.43672] 
//
[0.x.43673] 
[0.x.43674] 
[0.x.43675] 
[0.x.43676] 
[0.x.43677] 
[0.x.43678] 
//
// 一个用于存储所有中间计算的数据结构。我们很快就会准确地看到如何利用这一点来使我们实际进行计算的那部分代码变得干净和容易（好吧，至少是更容易）遵循和维护。但是现在，我们可以说，它将允许我们把计算中间量的导数的那部分代码从使用它们的地方移开。
//
[0.x.43679] 
//
// 接下来的两个函数是用来更新场和内部变量的状态的，在我们进行任何详细的计算之前会被调用。
//
[0.x.43680] 
[0.x.43681] 
//
[0.x.43682] 
//
// 该类接口的其余部分专门用于计算自由能密度函数及其所有导数所需的组件的方法。
//
// 运动学变量，或称场变量。
//
[0.x.43683] 
//
[0.x.43684] 
//
// 饱和度函数的一般化表述，所需的构成参数作为参数传递给每个函数。
//
[0.x.43685] 
//
[0.x.43686] 
//
[0.x.43687] 
[0.x.43688] 
[0.x.43689] 
//
// 饱和度函数一阶导数的一般化表述，所需的构成参数作为参数传递给每个函数。
//
[0.x.43690] 
//
[0.x.43691] 
[0.x.43692] 
//
[0.x.43693] 
[0.x.43694] 
[0.x.43695] 
//
// 饱和度函数二阶导数的广义公式，所需的构成参数作为参数传递给每个函数。
//
[0.x.43696] 
//
[0.x.43697] 
[0.x.43698] 
//
[0.x.43699] 
[0.x.43700] 
[0.x.43701] 
//
// 从场/运动学变量中直接获得的中间量。
//
[0.x.43702] 
//
[0.x.43703] 
//
[0.x.43704] 
//
 
//
[0.x.43706] 
//
 
//
// 中间量的一阶导数。
//
[0.x.43708] 
//
[0.x.43709] 
//
[0.x.43710] 
//
[0.x.43711] 
//
 
//
 
//
// 内部变量相对于场变量的导数。注意，我们只需要内部变量的这个导数，因为这个变量只是作为动力学变量线性化的一部分而被微分。
//
[0.x.43714] 
[0.x.43715] 
//
// 中间量的二阶导数。
//
[0.x.43716] 
//
[0.x.43717] 
//
 
//
[0.x.43719] 
//
[0.x.43720] 
[0.x.43721] 
//
[0.x.43722] 
[0.x.43723] 
[0.x.43724] 
[0.x.43725] 
[0.x.43726] 
[0.x.43727] 
[0.x.43728] 
[0.x.43729] 
[0.x.43730] 
[0.x.43731] 
//
[0.x.43732] 
[0.x.43733] 
[0.x.43734] 
[0.x.43735] 
[0.x.43736] 
[0.x.43737] 
//
// 记录应用的变形状态以及磁载荷。此后，根据新的变形状态更新内部（粘性）变量。
//
[0.x.43738] 
[0.x.43739] 
//
// 根据当前磁场获取弹性和粘性饱和函数的值...
//
 
[0.x.43741] 
[0.x.43742] 
//
[0.x.43743] 
[0.x.43744] 
[0.x.43745] 
//
// ... 以及它们的一阶导数...
//
[0.x.43746] 
[0.x.43747] 
[0.x.43748] 
//
[0.x.43749] 
[0.x.43750] 
[0.x.43751] 
//
// ...以及它们的二阶导数。
//
[0.x.43752] 
[0.x.43753] 
[0.x.43754] 
[0.x.43755] 
//
[0.x.43756] 
[0.x.43757] 
[0.x.43758] 
[0.x.43759] 
//
// 中间量。请注意，由于我们是从一个缓存中获取这些值，而这个缓存的寿命比这个函数调用的寿命长，所以我们可以对结果进行别名，而不是从缓存中复制这个值。
//
[0.x.43760] 
[0.x.43761] 
//
[0.x.43762] 
[0.x.43763] 
[0.x.43764] 
//
// 中间值的第一导数，以及内部变量相对于右Cauchy-Green变形张量的那部分。
//
[0.x.43765] 
[0.x.43766] 
[0.x.43767] 
//
[0.x.43768] 
//
[0.x.43769] 
//
[0.x.43770] 
[0.x.43771] 
//
// 中间值的二阶导数。
//
[0.x.43772] 
[0.x.43773] 
//
[0.x.43774] 
//
[0.x.43775] 
[0.x.43776] 
//
[0.x.43777] 
[0.x.43778] 
//
[0.x.43779] 
[0.x.43780] 
//
// 由于线性化的定义变得特别冗长，我们将把自由能密度函数分解成三个相加的部分。
//
// --类似 "新胡克 "的项。
//
// -- 与速度有关的项，以及
//
// --类似于储存在磁场中的能量的项。
//
// 为了保持一致，这些贡献中的每一个都将被单独加入到我们想要计算的变量中，其顺序也是如此。
//
// 所以，首先这是能量密度函数本身。
//
[0.x.43781] 
[0.x.43782] 
[0.x.43783] 
[0.x.43784] 
[0.x.43785] 
[0.x.43786] 
[0.x.43787] 
[0.x.43788] 
//
// ...然后是磁感应强度和Piola-Kirchhoff应力。
//
[0.x.43789] 
[0.x.43790] 
[0.x.43791] 
[0.x.43792] 
[0.x.43793] 
[0.x.43794] 
[0.x.43795] 
[0.x.43796] 
//
[0.x.43797] 
[0.x.43798] 
[0.x.43799] 
[0.x.43800] 
[0.x.43801] 
[0.x.43802] 
[0.x.43803] 
[0.x.43804] 
[0.x.43805] 
[0.x.43806] 
//
// ...... 最后是由于动能变量的线性化而产生的切线。
//
[0.x.43807] 
[0.x.43808] 
[0.x.43809] 
[0.x.43810] 
[0.x.43811] 
[0.x.43812] 
[0.x.43813] 
[0.x.43814] 
//
[0.x.43815] 
[0.x.43816] 
[0.x.43817] 
[0.x.43818] 
[0.x.43819] 
[0.x.43820] 
[0.x.43821] 
[0.x.43822] 
[0.x.43823] 
[0.x.43824] 
[0.x.43825] 
[0.x.43826] 
[0.x.43827] 
//
[0.x.43828] 
[0.x.43829] 
[0.x.43830] 
[0.x.43831] 
[0.x.43832] 
[0.x.43833] 
[0.x.43834] 
[0.x.43835] 
[0.x.43836] 
[0.x.43837] 
[0.x.43838] 
[0.x.43839] 
[0.x.43840] 
[0.x.43841] 
[0.x.43842] 
[0.x.43843] 
[0.x.43844] 
[0.x.43845] 
[0.x.43846] 
[0.x.43847] 
[0.x.43848] 
[0.x.43849] 
[0.x.43850] 
[0.x.43851] 
//
// 现在我们已经用完了存储在缓存中的所有临时变量，我们可以把它清除掉，以释放一些内存。
//
[0.x.43852] 
[0.x.43853] 
//
[0.x.43854] 
[0.x.43855] 
[0.x.43856] 
[0.x.43857] 
[0.x.43858] 
//
[0.x.43859] 
[0.x.43860] 
[0.x.43861] 
[0.x.43862] 
[0.x.43863] 
//
[0.x.43864] 
[0.x.43865] 
[0.x.43866] 
[0.x.43867] 
[0.x.43868] 
[0.x.43869] 
//
[0.x.43870] 
[0.x.43871] 
[0.x.43872] 
[0.x.43873] 
[0.x.43874] 
[0.x.43875] 
//
[0.x.43876] 
[0.x.43877] 
[0.x.43878] 
[0.x.43879] 
[0.x.43880] 
//
[0.x.43881] 
[0.x.43882] 
[0.x.43883] 
[0.x.43884] 
[0.x.43885] 
[0.x.43886] 
//
[0.x.43887] 
[0.x.43888] 
[0.x.43889] 
[0.x.43890] 
[0.x.43891] 
//
[0.x.43892] 
[0.x.43893] 
[0.x.43894] 
[0.x.43895] 
[0.x.43896] 
//
[0.x.43897] 
[0.x.43898] 
[0.x.43899] 
[0.x.43900] 
//
// 接下来的几个函数实现了饱和度函数的广义表述，以及它的各种导数。
//
[0.x.43901] 
[0.x.43902] 
[0.x.43903] 
[0.x.43904] 
[0.x.43905] 
[0.x.43906] 
[0.x.43907] 
[0.x.43908] 
//
[0.x.43909] 
[0.x.43910] 
[0.x.43911] 
[0.x.43912] 
[0.x.43913] 
[0.x.43914] 
//
// 一个比例函数，它将使剪切模量在磁场的影响下发生变化（增加）。
//
 
[0.x.43916] 
[0.x.43917] 
[0.x.43918] 
[0.x.43919] 
[0.x.43920] 
[0.x.43921] 
[0.x.43922] 
[0.x.43923] 
//
// 缩放函数的一阶导数
//
[0.x.43924] 
[0.x.43925] 
[0.x.43926] 
[0.x.43927] 
[0.x.43928] 
[0.x.43929] 
[0.x.43930] 
//
[0.x.43931] 
[0.x.43932] 
[0.x.43933] 
[0.x.43934] 
[0.x.43935] 
[0.x.43936] 
//
[0.x.43937] 
[0.x.43938] 
[0.x.43939] 
[0.x.43940] 
[0.x.43941] 
[0.x.942] 
[0.x.43943] 
[0.x.43944] 
[0.x.43945] 
[0.x.43946] 
//
[0.x.43947] 
[0.x.43948] 
[0.x.43949] 
[0.x.43950] 
[0.x.43951] 
[0.x.43952] 
[0.x.43953] 
//
[0.x.43954] 
[0.x.43955] 
[0.x.43956] 
[0.x.43957] 
[0.x.43958] 
[0.x.43959] 
[0.x.43960] 
//
[0.x.43961] 
[0.x.43962] 
[0.x.43963] 
[0.x.43964] 
[0.x.43965] 
[0.x.43966] 
[0.x.43967] 
[0.x.43968] 
[0.x.43969] 
[0.x.43970] 
[0.x.43971] 
[0.x.43972] 
[0.x.43973] 
[0.x.43974] 
[0.x.43975] 
//
// 对于我们为这个材料类采用的缓存计算方法，所有计算的根基是场变量，以及不可改变的辅助数据，如构成参数和时间步长。因此，我们需要以与其他变量不同的方式将它们输入缓存，因为它们是由类本身之外规定的输入。这个函数只是将它们从输入参数中直接添加到缓存中，同时检查那里是否有等效的数据（我们希望每个时间步长或牛顿迭代只调用一次`update_internal_data()`方法）。
//
[0.x.43976] 
[0.x.43977] 
[0.x.43978] 
[0.x.43979] 
[0.x.43980] 
//
// 设置 [2.x.5435] 的值。
//
[0.x.43981] 
[0.x.43982] 
[0.x.43983] 
[0.x.43984] 
[0.x.43985] 
//
// 设置 [2.x.5436] 的值。
//
[0.x.43986] 
[0.x.43987] 
[0.x.43988] 
[0.x.43989] 
[0.x.43990] 
[0.x.43991] 
//
// 此后，我们可以在任何时间点从缓存中获取它们。
//
[0.x.43992] 
[0.x.43993] 
[0.x.43994] 
[0.x.43995] 
[0.x.43996] 
[0.x.43997] 
[0.x.43998] 
[0.x.43999] 
[0.x.44000] 
//
[0.x.44001] 
[0.x.44002] 
[0.x.44003] 
[0.x.44004] 
[0.x.44005] 
[0.x.44006] 
[0.x.44007] 
[0.x.44008] 
[0.x.44009] 
//
// 当我们需要主要变量时，保证它们在缓存中，我们不能从它们中计算出所有的中间值（无论是直接，还是间接）。
//
// 如果缓存中还没有存储我们要找的值，那么我们就快速计算，把它存储在缓存中，然后返回刚刚存储在缓存中的值。这样我们就可以把它作为一个引用返回，避免复制对象。同样的道理也适用于复合函数可能依赖的任何值。换句话说，如果在我们目前感兴趣的计算之前有一个依赖链，那么在我们继续使用这些值之前，我们可以保证解决这些依赖关系。尽管从缓存中获取数据是有成本的，但 "已解决的依赖关系 "的概念可能足够方便，使其值得看一下这个额外的成本。如果这些材料定律被嵌入到有限元框架中，那么额外的成本甚至可能不会被注意到。
//
[0.x.44010] 
[0.x.44011] 
[0.x.44012] 
[0.x.44013] 
[0.x.44014] 
[0.x.44015] 
[0.x.44016] 
[0.x.44017] 
[0.x.44018] 
[0.x.44019] 
[0.x.44020] 
//
[0.x.44021] 
[0.x.44022] 
//
[0.x.44023] 
[0.x.44024] 
[0.x.44025] 
[0.x.44026] 
[0.x.44027] 
[0.x.44028] 
[0.x.44029] 
[0.x.44030] 
[0.x.44031] 
//
[0.x.44032] 
[0.x.44033] 
//
[0.x.44034] 
[0.x.44035] 
[0.x.44036] 
[0.x.44037] 
[0.x.44038] 
[0.x.44039] 
[0.x.44040] 
//
[0.x.44041] 
[0.x.44042] 
//
[0.x.44043] 
[0.x.44044] 
[0.x.44045] 
[0.x.44046] 
[0.x.44047] 
[0.x.44048] 
//
[0.x.44049] 
[0.x.44050] 
//
[0.x.44051] 
[0.x.44052] 
[0.x.44053] 
[0.x.44054] 
[0.x.44055] 
[0.x.44056] 
[0.x.44057] 
//
[0.x.44058] 
[0.x.44059] 
//
[0.x.44060] 
[0.x.44061] 
[0.x.44062] 
[0.x.44063] 
[0.x.44064] 
[0.x.44065] 
[0.x.44066] 
//
[0.x.44067] 
[0.x.44068] 
//
[0.x.44069] 
[0.x.44070] 
[0.x.44071] 
[0.x.44072] 
[0.x.44073] 
[0.x.44074] 
[0.x.44075] 
[0.x.44076] 
[0.x.44077] 
[0.x.44078] 
//
[0.x.44079] 
[0.x.44080] 
[0.x.44081] 
[0.x.44082] 
[0.x.44083] 
[0.x.44084] 
//
[0.x.44085] 
[0.x.44086] 
//
[0.x.44087] 
[0.x.44088] 
//
[0.x.44089] 
[0.x.44090] 
[0.x.44091] 
[0.x.44092] 
[0.x.44093] 
[0.x.44094] 
[0.x.44095] 
[0.x.44096] 
[0.x.44097] 
//
[0.x.44098] 
[0.x.44099] 
[0.x.44100] 
[0.x.44101] 
[0.x.44102] 
[0.x.44103] 
[0.x.44104] 
//
[0.x.44105] 
[0.x.44106] 
//
[0.x.44107] 
[0.x.44108] 
//
[0.x.44109] 
[0.x.44110] 
[0.x.44111] 
[0.x.44112] 
[0.x.44113] 
[0.x.44114] 
[0.x.44115] 
[0.x.44116] 
//
[0.x.44117] 
[0.x.44118] 
//
[0.x.44119] 
[0.x.44120] 
[0.x.44121] 
[0.x.44122] 
[0.x.44123] 
[0.x.44124] 
[0.x.44125] 
//
[0.x.44126] 
[0.x.44127] 
//
[0.x.44128] 
[0.x.44129] 
[0.x.44130] 
[0.x.44131] 
[0.x.44132] 
[0.x.44133] 
[0.x.44134] 
//
[0.x.44135] 
[0.x.44136] 
//
[0.x.44137] 
[0.x.44138] 
[0.x.44139] 
[0.x.44140] 
[0.x.44141] 
[0.x.44142] 
[0.x.44143] 
//
[0.x.44144] 
[0.x.44145] 
//
[0.x.44146] 
[0.x.44147] 
[0.x.44148] 
[0.x.44149] 
[0.x.44150] 
[0.x.44151] 
[0.x.44152] 
[0.x.44153] 
[0.x.44154] 
[0.x.44155] 
[0.x.44156] 
//
[0.x.44157] 
[0.x.44158] 
//
[0.x.44159] 
[0.x.44160] 
[0.x.44161] 
[0.x.44162] 
[0.x.44163] 
[0.x.44164] 
[0.x.44165] 
//
[0.x.44166] 
[0.x.44167] 
//
[0.x.44168] 
[0.x.44169] 
[0.x.44170] 
[0.x.44171] 
[0.x.44172] 
[0.x.44173] 
[0.x.44174] 
[0.x.44175] 
[0.x.44176] 
[0.x.44177] 
//
[0.x.44178] 
[0.x.44179] 
//
[0.x.44180] 
[0.x.44181] 
[0.x.44182] 
[0.x.44183] 
[0.x.44184] 
[0.x.44185] 
[0.x.44186] 
[0.x.44187] 
//
[0.x.44188] 
[0.x.44189] 
//
[0.x.44190] 
[0.x.44191] 
[0.x.44192] 
[0.x.44193] 
[0.x.44194] 
[0.x.44195] 
[0.x.44196] 
[0.x.44197] 
[0.x.44198] 
[0.x.44199] 
//
[0.x.44200] 
[0.x.44201] 
[0.x.44202] 
[0.x.44203] 
[0.x.44204] 
[0.x.44205] 
[0.x.44206] 
//
[0.x.44207] 
[0.x.44208] 
//
[0.x.44209] 
[0.x.44210] 
//
[0.x.44211] 
[0.x.44212] 
[0.x.44213] 
[0.x.44214] 
[0.x.44215] 
[0.x.44216] 
[0.x.44217] 
[0.x.44218] 
[0.x.44219] 
[0.x.44220] 
//
[0.x.44221] 
[0.x.44222] 
[0.x.44223] 
[0.x.44224] 
[0.x.44225] 
[0.x.44226] 
[0.x.44227] 
[0.x.44228] 
[0.x.44229] 
[0.x.44230] 
//
[0.x.44231] 
[0.x.44232] 
//
[0.x.44233] 
[0.x.44234] 
//[2.x.5437] 
//
// [2.x.5438]类是用来驱动数值实验的，这些实验将在我们已经实现了构成法则的耦合材料上进行。
//
[0.x.44235] 
[0.x.44236] 
[0.x.44237] 
[0.x.44238] 
//
// 这些是要模拟的流变学试样的尺寸。它们有效地定义了我们虚拟实验的测量点。
//
[0.x.44239] 
[0.x.44240] 
//
// 三个稳态负载参数分别是
//
// - 轴向拉伸。
//
// -- 剪切应变振幅，和
//
// - 轴向磁场强度。
//
[0.x.44241] 
[0.x.44242] 
[0.x.44243] 
//
// 此外，随时间变化的流变学负载条件的参数为
//
// --加载周期的频率。
//
// - 负载周期的数量，以及
//
// - 每个周期的离散时间步数。
//
[0.x.44244] 
[0.x.44245] 
[0.x.44246] 
//
// 我们还声明了一些不言自明的参数，这些参数与用速率依赖型和速率非依赖型材料进行的实验所产生的输出数据有关。
//
[0.x.44247] 
[0.x.44248] 
[0.x.44249] 
[0.x.44250] 
[0.x.44251] 
//
// 接下来的几个函数将计算与时间有关的实验参数...
//
[0.x.44252] 
//
[0.x.44253] 
//
[0.x.44254] 
//
// ...... 而下面两个则规定了任何时候的机械和磁力负载......
//
[0.x.44255] 
//
[0.x.44256] 
//
// ...... 而这最后一个是将实验的状态输出到控制台。
//
[0.x.44257] 
//
[0.x.44258] 
[0.x.44259] 
//
[0.x.44260] 
[0.x.44261] 
[0.x.44262] 
[0.x.44263] 
[0.x.44264] 
//
[0.x.44265] 
[0.x.44266] 
[0.x.44267] 
//
[0.x.44268] 
[0.x.44269] 
[0.x.44270] 
//
[0.x.44271] 
[0.x.44272] 
[0.x.44273] 
[0.x.44274] 
[0.x.44275] 
//
[0.x.44276] 
[0.x.44277] 
//
[0.x.44278] 
[0.x.44279] 
[0.x.44280] 
[0.x.44281] 
//
[0.x.44282] 
[0.x.44283] 
[0.x.44284] 
[0.x.44285] 
//
[0.x.44286] 
[0.x.44287] 
[0.x.44288] 
[0.x.44289] 
//
[0.x.44290] 
[0.x.44291] 
[0.x.44292] 
[0.x.44293] 
[0.x.44294] 
//
// 施加的磁场总是与流变仪转子的旋转轴对齐。
//
[0.x.44295] 
[0.x.44296] 
[0.x.44297] 
[0.x.44298] 
//
// 根据流变仪和样品的几何形状、采样点和实验参数，计算出应用的变形（梯度）。根据介绍中记录的位移曲线，变形梯度可以用直角坐标表示为 [1.x.220] 。
//
[0.x.44299] 
[0.x.44300] 
[0.x.44301] 
[0.x.44302] 
[0.x.44303] 
[0.x.44304] 
//
[0.x.44305] 
[0.x.44306] 
//
[0.x.44307] 
[0.x.44308] 
[0.x.44309] 
[0.x.44310] 
[0.x.44311] 
[0.x.44312] 
[0.x.44313] 
[0.x.44314] 
[0.x.44315] 
[0.x.44316] 
//
[0.x.44317] 
[0.x.44318] 
[0.x.44319] 
[0.x.44320] 
[0.x.44321] 
[0.x.44322] 
[0.x.44323] 
[0.x.44324] 
[0.x.44325] 
[0.x.44326] 
//
[0.x.44327] 
[0.x.44328] 
[0.x.44329] 
[0.x.44330] 
//
[0.x.44331] 
[0.x.44332] 
//[2.x.5439] 
//
// 这是将驱动数值实验的函数。
//
[0.x.44333] 
[0.x.44334] 
[0.x.44335] 
[0.x.44336] 
[0.x.44337] 
[0.x.44338] 
[0.x.44339] 
[0.x.44340] 
[0.x.44341] 
[0.x.44342] 
//
// 我们可以利用手工实现的构成法，将我们用它达到的结果与用AD或SD得到的结果进行比较。通过这种方式，我们可以验证它们产生了相同的结果（这表明要么两种实现方式都有很大的可能性是正确的，要么就是它们都有相同的缺陷而不正确）。无论哪种方式，对于完全自我实现的变体来说，这都是一个很好的理智检查，当发现结果之间的差异时，当然可以作为一种调试策略）。)
//
[0.x.44343] 
[0.x.44344] 
[0.x.44345] 
[0.x.44346] 
[0.x.44347] 
[0.x.44348] 
[0.x.44349] 
[0.x.44350] 
//
[0.x.44351] 
[0.x.44352] 
[0.x.44353] 
[0.x.44354] 
//
[0.x.44355] 
[0.x.44356] 
[0.x.44357] 
[0.x.44358] 
[0.x.44359] 
[0.x.44360] 
[0.x.44361] 
[0.x.44362] 
//
[0.x.44363] 
[0.x.44364] 
[0.x.44365] 
[0.x.44366] 
[0.x.44367] 
[0.x.44368] 
[0.x.44369] 
[0.x.44370] 
[0.x.44371] 
[0.x.44372] 
[0.x.44373] 
[0.x.44374] 
[0.x.44375] 
//
// 我们将把材料的构成性响应输出到文件中进行后处理，所以在这里我们声明一个`stream`，它将作为这个输出的缓冲区。我们将使用一个简单的CSV格式来输出结果。
//
[0.x.44376] 
[0.x.44377] 
[0.x.44378] 
//
// 使用DiscreteTime类，我们使用一个固定的时间步长来迭代每个时间段。
//
[0.x.44379] 
[0.x.44380] 
[0.x.44381] 
[0.x.44382] 
[0.x.44383] 
[0.x.44384] 
[0.x.44385] 
[0.x.44386] 
[0.x.44387] 
[0.x.44388] 
[0.x.44389] 
//
// 我们获取并计算在这个时间步长中应用于材料的负载...
//
[0.x.44390] 
[0.x.44391] 
[0.x.44392] 
[0.x.44393] 
[0.x.44394] 
[0.x.44395] 
//
// ...然后我们更新材料的状态...
//
[0.x.44396] 
[0.x.44397] 
[0.x.44398] 
[0.x.44399] 
[0.x.44400] 
//
[0.x.44401] 
[0.x.44402] 
[0.x.44403] 
[0.x.44404] 
[0.x.44405] 
//
// ...并测试两者之间的差异。
//
[0.x.44406] 
[0.x.44407] 
//
[0.x.44408] 
[0.x.44409] 
//
// 接下来我们要做的是收集一些结果进行后处理。所有的数量都在 "当前配置 "中（而不是 "参考配置"，所有由构成法则计算的数量都在这个框架中）。
//
[0.x.44410] 
[0.x.44411] 
[0.x.44412] 
[0.x.44413] 
[0.x.44414] 
[0.x.44415] 
[0.x.44416] 
[0.x.44417] 
[0.x.44418] 
[0.x.44419] 
[0.x.44420] 
[0.x.44421] 
//
// 最后，我们将应变应力和磁载荷历史输出到文件中。
//
[0.x.44422] 
[0.x.44423] 
[0.x.44424] 
[0.x.44425] 
[0.x.44426] 
[0.x.44427] 
//[2.x.5440] 
//
// 这个驱动函数的目的是读取文件中的所有参数，并在此基础上创建每个构成法则的代表性实例，并调用函数对其进行流变学实验。
//
[0.x.44428] 
[0.x.44429] 
[0.x.44430] 
//
[0.x.44431] 
//
[0.x.44432] 
[0.x.44433] 
//
[0.x.44434] 
[0.x.44435] 
[0.x.44436] 
[0.x.44437] 
[0.x.44438] 
[0.x.44439] 
//
// 我们开始实际工作，使用我们与速率无关的构成法配置和运行实验。这里的自动可微调数类型是硬编码的，但是通过一些巧妙的模板设计，可以在运行时选择使用哪种框架（例如，通过参数文件选择）。我们将同时用完全手工实现的反面材料法进行实验，并检查它与我们的辅助实现的计算结果。
//
[0.x.44440] 
[0.x.44441] 
[0.x.44442] 
[0.x.44443] 
[0.x.44444] 
[0.x.44445] 
[0.x.44446] 
//
[0.x.44447] 
[0.x.44448] 
//
[0.x.44449] 
[0.x.44450] 
[0.x.44451] 
//
[0.x.44452] 
[0.x.44453] 
[0.x.44454] 
[0.x.44455] 
[0.x.44456] 
//
[0.x.44457] 
[0.x.44458] 
//
// 接下来我们对与速率相关的构成法则做同样的处理。如果SymEngine被设置为使用LLVM即时编译器，则默认选择最高性能的选项，该编译器（结合一些积极的编译标志）产生所有可用选项中最快的代码评估路径。作为后备措施，所谓的 "lambda "优化器（它只需要一个兼容C++11的编译器）将被选中。同时，我们将要求CAS进行普通子表达式的消除，以尽量减少评估过程中使用的中间计算的数量。我们将记录在SD实现的构造器内执行 "初始化 "步骤所需的时间，因为这正是上述转换发生的地方。
//
[0.x.44459] 
[0.x.44460] 
[0.x.44461] 
[0.x.44462] 
[0.x.44463] 
[0.x.44464] 
[0.x.44465] 
//
[0.x.44466] 
[0.x.44467] 
[0.x.44468] 
[0.x.44469] 
[0.x.44470] 
[0.x.44471] 
[0.x.44472] 
[0.x.44473] 
[0.x.44474] 
[0.x.44475] 
[0.x.44476] 
[0.x.44477] 
[0.x.44478] 
//
[0.x.44479] 
[0.x.44480] 
//
[0.x.44481] 
[0.x.44482] 
[0.x.44483] 
[0.x.44484] 
//
[0.x.44485] 
[0.x.44486] 
[0.x.44487] 
[0.x.44488] 
[0.x.44489] 
//
[0.x.44490] 
[0.x.44491] 
[0.x.44492] 
//
[0.x.44493] 
//
[0.x.44494] 
//[2.x.5441] 
//
// 主函数只调用两组要执行的例子的驱动函数。
//
[0.x.44495] 
[0.x.44496] 
[0.x.44497] 
[0.x.44498] 
//
[0.x.44499] 
[0.x.44500] 
[0.x.44501] 
[0.x.44502] 
[0.x.44503] 
[0.x.44504] 
[0.x.44505] 
[0.x.44506] 
[0.x.44507] 
[0.x.44508] 
[0.x.44509] 
[0.x.44510] 
[0.x.44511] 
[0.x.44512] 
[0.x.44513] 
[0.x.44514] 
//
[0.x.44515] 
[0.x.44516] 
[0.x.44517] 
[0.x.44518] 
[0.x.44519] 
//
// 本教程的大部分内容是对 [2.x.5442] 的完全复制。因此，为了简洁起见，并保持对这里所实现的变化的关注，我们将只记录新的内容，并简单地指出哪些部分的代码是对以前内容的重复。
//
// [2.x.5443] 
//
// 本教程中包含了几个新的头文件。第一个是提供ParameterAcceptor类的声明的文件。
//
[0.x.44520] 
[0.x.44521] 
[0.x.44522] 
[0.x.44523] 
[0.x.44524] 
//
// 这是第二个，这是一个包罗万象的头，它将使我们能够在这段代码中纳入自动区分（AD）功能。
//
[0.x.44525] 
//
[0.x.44526] 
[0.x.44527] 
[0.x.44528] 
[0.x.44529] 
[0.x.44530] 
[0.x.44531] 
[0.x.44532] 
//
[0.x.44533] 
[0.x.44534] 
[0.x.44535] 
//
[0.x.44536] 
[0.x.44537] 
//
[0.x.44538] 
[0.x.44539] 
[0.x.44540] 
//
// 而接下来的三个提供了一些使用通用[2.x.5444]框架的多线程能力。
//
[0.x.44541] 
[0.x.44542] 
[0.x.44543] 
//
[0.x.44544] 
[0.x.44545] 
[0.x.44546] 
[0.x.44547] 
//
[0.x.44548] 
[0.x.44549] 
//
[0.x.44550] 
//
// 然后，我们为这个程序打开一个命名空间，像以前的程序一样，将dealii命名空间中的所有东西导入其中。
//
[0.x.44551] 
[0.x.44552] 
[0.x.44553] 
//[2.x.5445] 
//
// 在本教程中，我们将实现三种不同的方法来组装线性系统。其中一种反映了最初在[2.x.5446]中提供的手工实现，而另外两种则使用作为Trilinos框架的一部分提供的Sacado自动微分库。
//
// 为了方便在三种实现之间进行切换，我们有这个非常基本的参数类，它只有两个可配置的选项。
//
[0.x.44554] 
[0.x.44555] 
[0.x.44556] 
[0.x.44557] 
//
// 选择要使用的配方和相应的AD框架。
//
// - formulation = 0 : 无辅助执行（全手工线性化）。
//
// - 配方 = 1 : 有限元残差的自动线性化。
//
// - formulation = 2 : 使用变量公式自动计算有限元残差和线性化。
//
[0.x.44558] 
//
// 线性系统残差的最大可接受公差。我们将看到，一旦我们使用AD框架，装配时间就会变得很明显，所以我们将[2.x.5447]中选择的公差提高了一个数量级。这样，计算就不会花费太长时间来完成。
//
[0.x.44559] 
[0.x.44560] 
//
[0.x.44561] 
[0.x.44562] 
[0.x.44563] 
[0.x.44564] 
[0.x.44565] 
[0.x.44566] 
[0.x.44567] 
//
// [2.x.5448] 
//
// 该类模板与 [2.x.5449] 中的内容基本相同。该类的唯一功能变化是：。
//
// - run()函数现在接收两个参数：一个是选择采用哪种装配方式，一个是允许的最终残差的公差，以及
//
// - 现在有三个不同的装配函数来实现线性系统的三种装配方法。我们将在后面提供关于这些的细节。
//
[0.x.44568] 
[0.x.44569] 
[0.x.44570] 
[0.x.44571] 
[0.x.44572] 
//
[0.x.44573] 
//
[0.x.44574] 
[0.x.44575] 
[0.x.44576] 
[0.x.44577] 
[0.x.44578] 
[0.x.44579] 
[0.x.44580] 
[0.x.44581] 
[0.x.44582] 
[0.x.44583] 
[0.x.44584] 
//
[0.x.44585] 
//
[0.x.44586] 
[0.x.44587] 
[0.x.44588] 
//
[0.x.44589] 
//
[0.x.44590] 
[0.x.44591] 
//
[0.x.44592] 
[0.x.44593] 
[0.x.44594] 
[0.x.44595] 
//[2.x.5450] 
//
//应用于该问题的边界条件没有变化。
//
[0.x.44596] 
[0.x.44597] 
[0.x.44598] 
[0.x.44599] 
[0.x.44600] 
[0.x.44601] 
[0.x.44602] 
//
[0.x.44603] 
[0.x.44604] 
[0.x.44605] 
[0.x.44606] 
[0.x.44607] 
[0.x.44608] 
//[2.x.5451] 
//[2.x.5452] 
//
// 对类的构造函数没有做任何修改。
//
[0.x.44609] 
[0.x.44610] 
[0.x.44611] 
[0.x.44612] 
[0.x.44613] 
[0.x.44614] 
//[2.x.5453] 
//
// 设置类数据结构的函数没有任何变化，即DoFHandler、应用于问题的悬挂节点约束以及线性系统。
//
[0.x.44615] 
[0.x.44616] 
[0.x.44617] 
[0.x.44618] 
[0.x.44619] 
[0.x.44620] 
[0.x.44621] 
//
[0.x.44622] 
[0.x.44623] 
[0.x.44624] 
[0.x.44625] 
[0.x.44626] 
//
[0.x.44627] 
[0.x.44628] 
//
[0.x.44629] 
[0.x.44630] 
//
[0.x.44631] 
//
[0.x.44632] 
[0.x.44633] 
[0.x.44634] 
//[2.x.5454] 
//[2.x.5455] 
//
// 汇编函数是本教程的有趣贡献。assemble_system_unassisted()方法实现了与[2.x.5456]中详述的完全相同的装配函数，但在这个例子中，我们使用[2.x.5457]函数来多线程装配过程。这样做的原因很简单。当使用自动分化时，我们知道会有一些额外的计算开销产生。为了减轻这种性能损失，我们希望尽可能多地利用（容易获得的）计算资源。[2.x.5458]的概念使这成为一个相对简单的任务。同时，为了公平比较，我们需要对在计算残差或其线性化时不使用任何援助的实现做同样的事情。([2.x.5459]函数首先在[2.x.5460]和[2.x.5461]中讨论，如果你想阅读它的话。)
//
// 实现多线程所需的步骤在这三个函数中是相同的，所以我们将利用assemble_system_unassisted()函数的机会，重点讨论多线程本身。
//
[0.x.44635] 
[0.x.44636] 
[0.x.44637] 
[0.x.44638] 
[0.x.44639] 
//
[0.x.44640] 
//
// [2.x.5462]希望我们提供两个示范性的数据结构。第一个，`ScratchData`，是用来存储所有要在线程间重复使用的大数据。`CopyData`将保存来自每个单元的对线性系统的贡献。这些独立的矩阵-向量对必须按顺序累积到全局线性系统中。由于我们不需要[2.x.5463]和[2.x.5464]类已经提供的东西，所以我们使用这些确切的类定义来解决我们的问题。请注意，我们只需要一个局部矩阵、局部右手向量和单元自由度索引向量的单个实例--因此[2.x.5465]的三个模板参数都是`1`。
//
[0.x.44641] 
[0.x.44642] 
//
// 我们还需要知道我们在装配过程中要处理的迭代器的类型。为了简单起见，我们只要求编译器使用decltype()指定器为我们解决这个问题，知道我们将在由 [2.x.5466] 拥有的活动单元上迭代。
[0.x.44643] 
//
// 在这里我们初始化示例的数据结构。因为我们知道我们需要计算形状函数梯度、加权雅各布和四分位点在实空间的位置，所以我们把这些标志传给类的构造函数。
//
[0.x.44644] 
[0.x.44645] 
[0.x.44646] 
[0.x.44647] 
[0.x.44648] 
[0.x.44649] 
//
// 现在我们定义一个lambda函数，它将在一个单元格上执行装配。三个参数是由于我们将传递给该最终调用的参数，将被[2.x.5467]所期望的参数。我们还捕获了[2.x.5468]指针，这意味着我们将可以访问 "this"（即当前的`MinimalSurfaceProblem<dim>`）类实例，以及它的私有成员数据（因为lambda函数被定义在MinimalSurfaceProblem<dim>方法中）。
//
// 在函数的顶部，我们初始化了依赖于正在执行工作的单元的数据结构。请注意，重新初始化的调用实际上返回了一个FEValues对象的实例，该对象被初始化并存储在`scratch_data`对象中（因此，被重复使用）。
//
// 同样地，我们从[2.x.5469]提供的`copy_data`实例中获得本地矩阵、本地RHS向量和本地单元格DoF指数的别名。然后我们初始化单元格的DoF指数，因为我们知道本地矩阵和向量的大小已经正确。
//
[0.x.44650] 
[0.x.44651] 
[0.x.44652] 
[0.x.44653] 
//
[0.x.44654] 
[0.x.44655] 
[0.x.44656] 
[0.x.44657] 
[0.x.44658] 
//
// 对于牛顿方法，我们需要问题被线性化的那一点的解的梯度。
//
// 一旦我们有了这个梯度，我们就可以用通常的方法对这个单元进行装配。 与[2.x.5470]的一个小区别是，我们使用了（相当方便的）基于范围的循环来迭代所有的正交点和自由度。
//
[0.x.44659] 
[0.x.44660] 
[0.x.44661] 
[0.x.44662] 
//
[0.x.44663] 
[0.x.44664] 
[0.x.44665] 
[0.x.44666] 
[0.x.44667] 
//
[0.x.44668] 
[0.x.44669] 
[0.x.44670] 
[0.x.44671] 
[0.x.44672] 
[0.x.44673] 
[0.x.44674] 
[0.x.44675] 
[0.x.44676] 
[0.x.44677] 
[0.x.44678] 
[0.x.44679] 
[0.x.44680] 
[0.x.44681] 
//
[0.x.44682] 
[0.x.44683] 
[0.x.44684] 
[0.x.44685] 
[0.x.44686] 
[0.x.44687] 
[0.x.44688] 
//
// [2.x.5471]要求的第二个lambda函数是一个执行累积全局线性系统中的局部贡献的任务。这正是这个函数所做的，实现的细节在前面已经看到过。需要认识的主要一点是，局部贡献被存储在传入该函数的`copy_data`实例中。这个`copy_data`在[2.x.5472]对`cell_worker`的一些调用中已经被填满了数据。
//
[0.x.44689] 
[0.x.44690] 
[0.x.44691] 
[0.x.44692] 
[0.x.44693] 
//
[0.x.44694] 
[0.x.44695] 
[0.x.44696] 
[0.x.44697] 
[0.x.44698] 
[0.x.44699] 
//
[0.x.44700] 
[0.x.44701] 
[0.x.44702] 
//
// 我们已经有了所有需要的函数定义，所以现在我们调用[2.x.5473]来执行实际的装配。 我们传递一个标志作为最后的参数，说明我们只想对单元格进行装配。在内部，[2.x.5474]然后将可用的工作分配给不同的线程，有效地利用当今几乎所有的处理器所提供的多核。
//
[0.x.44703] 
[0.x.44704] 
[0.x.44705] 
[0.x.44706] 
[0.x.44707] 
[0.x.44708] 
//
// 最后，正如在 [2.x.5475] 中所做的那样，我们从系统中移除悬空的节点，并对定义牛顿更新的线性系统应用零边界值 [2.x.5476] 。
//
[0.x.44709] 
[0.x.44710] 
//
[0.x.44711] 
[0.x.44712] 
[0.x.44713] 
[0.x.44714] 
[0.x.44715] 
[0.x.44716] 
[0.x.44717] 
[0.x.44718] 
[0.x.44719] 
[0.x.44720] 
//[2.x.5477] 
//
// 正如介绍中所述，我们需要为第二种方法做的是实现[2.x.5478]单元对残差向量的局部贡献，然后让AD机器处理如何计算它的导数[2.x.5480]。
//
// 对于下面的内容，请记住，[1.x.221] 其中[2.x.5481] 。
//
// 我们来看看这在实践中是如何实现的。
//
[0.x.44721] 
[0.x.44722] 
[0.x.44723] 
[0.x.44724] 
[0.x.44725] 
//
[0.x.44726] 
//
[0.x.44727] 
[0.x.44728] 
[0.x.44729] 
//
[0.x.44730] 
[0.x.44731] 
[0.x.44732] 
[0.x.44733] 
[0.x.44734] 
[0.x.44735] 
//
// 我们将利用 [2.x.5482] 中所示的技术，预先定义我们要使用的AD数据结构。在这种情况下，我们选择辅助类，它将使用Sacado向前自动微分类型自动计算有限元残差的线性化。这些数字类型可以只用来计算一阶导数。这正是我们想要的，因为我们知道我们将只对残差进行线性化，这意味着我们只需要计算一阶导数。计算的返回值将是`double`类型。
//
// 我们还需要一个提取器来检索一些与问题的现场解决方案有关的数据。
//
[0.x.44736] 
[0.x.44737] 
[0.x.44738] 
[0.x.44739] 
//
[0.x.44740] 
//
// 有了这个，让我们定义lambda函数，它将被用来计算单元格对雅各布矩阵和右手边的贡献。
//
[0.x.44741] 
[0.x.44742] 
[0.x.44743] 
[0.x.44744] 
[0.x.44745] 
//
[0.x.44746] 
[0.x.44747] 
[0.x.44748] 
[0.x.44749] 
[0.x.44750] 
//
// 我们现在要创建并初始化一个AD辅助类的实例。要做到这一点，我们需要指定有多少个自变量和因变量。自变量将是我们的解向量所具有的局部自由度的数量，即离散化解向量[2.x.5484]的每元素表示中的数字[2.x.5483]，它表示每个有限元素有多少个解系数。在deal.II中，这等于[2.x.5485]，自变量的数量将是我们要形成的局部残差向量的条目数。在这个特定的问题中（就像许多其他采用[标准Galerkin方法](https:en.wikipedia.org/wiki/Galerkin_method)的问题一样），局部求解系数的数量与局部残差方程的数量相符。
//
[0.x.44751] 
[0.x.44752] 
[0.x.44753] 
//
// 接下来，我们将解决方案的值告知帮助器，即我们希望线性化的[2.x.5486]的实际值。由于这是在每个元素上单独进行的，我们必须从全局解决方案向量中提取解决方案的系数。换句话说，我们将所有这些系数[2.x.5487]（其中[2.x.5488]是一个局部自由度）定义为进入向量[2.x.5489]（因果函数）计算的自变量。
//然后，
//我们就得到了由可自动微分的数字表示的自由度值的完整集合。对这些变量进行的操作从这一点开始被AD库跟踪，直到对象超出范围。所以正是这些变量[2.x.5490][2.x.5491]，我们将对其计算残差项的导数。
//
[0.x.44754] 
//
[0.x.44755] 
[0.x.44756] 
//
// 然后我们做一些特定问题的任务，首先是根据 "敏感 "的AD自由度值计算所有数值、（空间）梯度等。在这个例子中，我们要检索每个正交点的解梯度。请注意，现在解梯度对自由度值很敏感，因为它们使用[2.x.5492]作为标量类型，[2.x.5493]矢量提供局部自由度值。
//
[0.x.44757] 
[0.x.44758] 
[0.x.44759] 
[0.x.44760] 
//
// 我们声明的下一个变量将存储单元格残余向量贡献。这是相当不言自明的，除了一个[1.x.222]的细节。请注意，向量中的每个条目都是手工初始化的，数值为0。这是一个[2.x.5494]强烈推荐的[2.x.5495]做法，因为一些AD库似乎没有安全地初始化这些数字类型的内部数据结构。不这样做可能会导致一些非常难以理解或检测的错误（感谢这个程序的作者出于一般的坏经验而提到这一点）。因此，出于谨慎考虑，值得明确地将初始值归零。在这之后，除了符号的改变，残差集看起来和我们之前看到的单元格RHS向量差不多。我们在所有正交点上循环，确保系数现在通过使用正确的`ADNumberType'来编码它对（敏感的）有限元DoF值的依赖性，最后我们组装残差向量的组件。为了完全清楚，有限元形状函数（及其梯度等）以及 "JxW "值仍然是标量值，但每个正交点的[2.x.5496]和[2.x.5497]是以独立变量计算的。
//
[0.x.44761] 
[0.x.44762] 
[0.x.44763] 
[0.x.44764] 
[0.x.44765] 
[0.x.44766] 
[0.x.44767] 
//
[0.x.44768] 
[0.x.44769] 
[0.x.44770] 
[0.x.44771] 
[0.x.44772] 
[0.x.44773] 
[0.x.44774] 
[0.x.44775] 
//
// 一旦我们计算出完整的单元格残差向量，我们就可以将其注册到辅助类。
//
// 此后，我们在评估点计算残差值（基本上是从我们已经计算出来的东西中提取出真实的值）和它们的Jacobian（每个残差分量相对于所有单元DoF的线性化）。为了组装成全局线性系统，我们必须尊重残差和RHS贡献之间的符号差异。对于牛顿方法，右手边的向量需要等于*负的残差向量。
//
[0.x.44776] 
//
[0.x.44777] 
[0.x.44778] 
//
[0.x.44779] 
[0.x.44780] 
//
// 该函数的剩余部分等于我们之前的内容。
//
[0.x.44781] 
[0.x.44782] 
[0.x.44783] 
[0.x.44784] 
[0.x.44785] 
//
[0.x.44786] 
[0.x.44787] 
[0.x.44788] 
[0.x.44789] 
[0.x.44790] 
[0.x.44791] 
//
[0.x.44792] 
[0.x.44793] 
[0.x.44794] 
//
[0.x.44795] 
[0.x.44796] 
[0.x.44797] 
[0.x.44798] 
[0.x.44799] 
[0.x.44800] 
//
[0.x.44801] 
[0.x.44802] 
//
[0.x.44803] 
[0.x.44804] 
[0.x.44805] 
[0.x.44806] 
[0.x.44807] 
[0.x.44808] 
[0.x.44809] 
[0.x.44810] 
[0.x.44811] 
[0.x.44812] 
//[2.x.5498] 
//
// 在这第三种方法中，我们将残差和雅各布作为局部能量函数[1.x.223]的第一和第二导数来计算，能量密度由[1.x.224]给出。
//
// 我们再来看看这是如何做到的。
//
[0.x.44813] 
[0.x.44814] 
[0.x.44815] 
[0.x.44816] 
[0.x.44817] 
//
[0.x.44818] 
//
[0.x.44819] 
[0.x.44820] 
[0.x.44821] 
//
[0.x.44822] 
[0.x.44823] 
[0.x.44824] 
[0.x.44825] 
[0.x.44826] 
[0.x.44827] 
//
// 在这个装配过程的实现中，我们选择了辅助类，它将使用嵌套的Sacado前向自动微分类型自动计算残差及其从单元贡献到能量函数的线性化。所选的数字类型可以用来计算第一和第二导数。我们需要这样做，因为残差定义为势能对DoF值的敏感性（即其梯度）。然后我们需要将残差线性化，这意味着必须计算势能的二阶导数。你可能想把这与之前函数中使用的 "ADHelper "的定义进行比较，在那里我们使用[2.x.5499]。
[0.x.44828] 
[0.x.44829] 
[0.x.44830] 
[0.x.44831] 
//
[0.x.44832] 
//
// 然后让我们再次定义lambda函数，对一个单元进行积分。
//
// 为了初始化辅助类的实例，我们现在只需要预先知道自变量的数量（即与元素解向量相关的自由度数量）。这是因为由能量函数产生的二阶导数矩阵必然是平方的（顺便说一下，也是对称的）。
//
[0.x.44833] 
[0.x.44834] 
[0.x.44835] 
[0.x.44836] 
//
[0.x.44837] 
[0.x.44838] 
[0.x.44839] 
[0.x.44840] 
[0.x.44841] 
//
[0.x.44842] 
[0.x.44843] 
//
// 再一次，我们将所有的单元格DoFs值注册到帮助器中，然后提取这些值的 "敏感 "变体，用于后续必须区分的操作--其中之一是计算解决方案的梯度。
//
[0.x.44844] 
//
[0.x.44845] 
[0.x.44846] 
//
[0.x.44847] 
[0.x.44848] 
[0.x.44849] 
[0.x.44850] 
//
// 我们接下来创建一个变量来存储电池的总能量。我们再一次强调，我们明确地对这个值进行零初始化，从而确保这个起始值的数据的完整性。
//
// 我们的目的是计算细胞总能量，它是内部能量（由于右手函数，通常是[2.x.5500]的线性）和外部能量的总和。在这种特殊情况下，我们没有外部能量（例如，来自源项或诺伊曼边界条件），所以我们将关注内部能量部分。
//
// 事实上，计算[2.x.5501]几乎是微不足道的，只需要以下几行。
//
[0.x.44851] 
[0.x.44852] 
[0.x.44853] 
[0.x.44854] 
[0.x.44855] 
//
[0.x.44856] 
[0.x.44857] 
//
// 在我们计算出这个单元的总能量后，我们将把它注册到帮助器上。 在此基础上，我们现在可以计算出所需的数量，即残差值和它们在评估点的雅各布系数。和以前一样，牛顿的右手边需要是残差的负数。
//
[0.x.44858] 
//
[0.x.44859] 
[0.x.44860] 
//
 
[0.x.44862] 
//
// 与前两个函数一样，函数的剩余部分与之前一样。
//
[0.x.44863] 
[0.x.44864] 
[0.x.44865] 
[0.x.44866] 
[0.x.44867] 
//
[0.x.44868] 
[0.x.44869] 
[0.x.44870] 
[0.x.44871] 
[0.x.44872] 
[0.x.44873] 
//
[0.x.44874] 
[0.x.44875] 
[0.x.44876] 
//
[0.x.44877] 
[0.x.44878] 
[0.x.44879] 
[0.x.44880] 
[0.x.44881] 
[0.x.44882] 
//
[0.x.44883] 
[0.x.44884] 
//
[0.x.44885] 
[0.x.44886] 
[0.x.44887] 
[0.x.44888] 
[0.x.44889] 
[0.x.44890] 
[0.x.44891] 
[0.x.44892] 
[0.x.44893] 
[0.x.44894] 
//[2.x.5502] 
//
// 解算函数与 [2.x.5503] 中使用的相同。
//
[0.x.44895] 
[0.x.44896] 
[0.x.44897] 
[0.x.44898] 
[0.x.44899] 
[0.x.44900] 
//
[0.x.44901] 
[0.x.44902] 
//
[0.x.44903] 
//
[0.x.44904] 
//
[0.x.44905] 
[0.x.44906] 
[0.x.44907] 
//[2.x.5504] 
//
//自[2.x.5505]以来，在网格细化程序和适应性网格之间的解决方案的转移方面没有任何变化。
//
[0.x.44908] 
[0.x.44909] 
[0.x.44910] 
[0.x.44911] 
//
[0.x.44912] 
[0.x.44913] 
[0.x.44914] 
[0.x.44915] 
[0.x.44916] 
[0.x.44917] 
//
[0.x.44918] 
[0.x.44919] 
[0.x.44920] 
[0.x.44921] 
//
[0.x.44922] 
[0.x.44923] 
[0.x.44924] 
[0.x.44925] 
//
[0.x.44926] 
//
[0.x.44927] 
[0.x.44928] 
[0.x.44929] 
//
[0.x.44930] 
[0.x.44931] 
[0.x.44932] 
[0.x.44933] 
//
[0.x.44934] 
//
 
[0.x.44936] 
//
// [2.x.5506] 
//
// 边界条件的选择仍然与[2.x.5507]相同 ...
//
[0.x.44937] 
[0.x.44938] 
[0.x.44939] 
[0.x.44940] 
[0.x.941] 
[0.x.942] 
[0.x.44943] 
[0.x.44944] 
[0.x.44945] 
[0.x.44946] 
//
[0.x.44947] 
[0.x.44948] 
//[2.x.5508] 
//
// ...就像在求解迭代过程中用来计算残差的函数一样。如果真的需要，我们可以用能量函数的微分来代替它，但是为了简单起见，我们在这里只是简单地复制我们在[2.x.5509]中已经有的东西。
//
[0.x.44949] 
[0.x.44950] 
[0.x.44951] 
[0.x.44952] 
//
[0.x.44953] 
[0.x.44954] 
[0.x.44955] 
//
[0.x.44956] 
[0.x.44957] 
[0.x.44958] 
[0.x.44959] 
[0.x.44960] 
//
[0.x.44961] 
[0.x.44962] 
//
[0.x.44963] 
[0.x.44964] 
//
[0.x.44965] 
//
[0.x.44966] 
[0.x.44967] 
[0.x.44968] 
[0.x.44969] 
//
[0.x.44970] 
//
[0.x.44971] 
[0.x.44972] 
[0.x.44973] 
[0.x.44974] 
//
[0.x.44975] 
[0.x.44976] 
[0.x.44977] 
[0.x.44978] 
[0.x.44979] 
[0.x.44980] 
//
[0.x.44981] 
[0.x.44982] 
[0.x.44983] 
[0.x.44984] 
//
[0.x.44985] 
//
[0.x.44986] 
[0.x.44987] 
[0.x.44988] 
//
[0.x.44989] 
[0.x.44990] 
//
// [2.x.5510] 
//
// 非线性迭代程序的步长（或欠松系数）的选择仍然固定在 [2.x.5511] 中选择和讨论的值。
//
[0.x.44991] 
[0.x.44992] 
[0.x.44993] 
[0.x.44994] 
[0.x.44995] 
//
// [2.x.5512] 
//
// 从`run()`调用的最后一个函数以图形形式输出当前的解决方案（和牛顿更新），作为VTU文件。它与之前教程中使用的完全相同。
//
[0.x.44996] 
[0.x.44997] 
[0.x.44998] 
[0.x.44999] 
[0.x.45000] 
//
[0.x.45001] 
[0.x.45002] 
[0.x.45003] 
[0.x.45004] 
//
[0.x.45005] 
[0.x.45006] 
[0.x.45007] 
[0.x.45008] 
[0.x.45009] 
//[2.x.5513] 
//
// 在运行函数中，大部分内容与最初在 [2.x.5514] 中实现的相同。唯一可以观察到的变化是，我们现在可以（通过参数文件）选择系统残差的最终可接受的公差是什么，并且我们可以选择我们希望利用的装配方法。为了使第二个选择明确，我们向控制台输出一些信息，表明选择。由于我们对比较三种方法中每一种的装配时间感兴趣，我们还添加了一个计时器，跟踪装配过程中所花费的时间。我们还跟踪了解决线性系统所需的时间，这样我们就可以将这些数字与通常需要最长时间执行的那部分代码进行对比。
//
[0.x.45010] 
[0.x.45011] 
[0.x.45012] 
[0.x.45013] 
[0.x.45014] 
[0.x.45015] 
[0.x.45016] 
[0.x.45017] 
[0.x.45018] 
[0.x.45019] 
[0.x.45020] 
//
[0.x.45021] 
//
[0.x.45022] 
[0.x.45023] 
//
[0.x.45024] 
[0.x.45025] 
//
[0.x.45026] 
[0.x.45027] 
[0.x.45028] 
[0.x.45029] 
[0.x.45030] 
//
[0.x.45031] 
[0.x.45032] 
//
[0.x.45033] 
//
[0.x.45034] 
[0.x.45035] 
[0.x.45036] 
[0.x.45037] 
[0.x.45038] 
//
[0.x.45039] 
[0.x.45040] 
[0.x.45041] 
[0.x.45042] 
[0.x.45043] 
[0.x.45044] 
[0.x.45045] 
[0.x.45046] 
[0.x.45047] 
//
[0.x.45048] 
//
[0.x.45049] 
[0.x.45050] 
[0.x.45051] 
[0.x.45052] 
//
[0.x.45053] 
[0.x.45054] 
//
[0.x.45055] 
//
[0.x.45056] 
[0.x.45057] 
[0.x.45058] 
[0.x.45059] 
[0.x.45060] 
[0.x.45061] 
//[2.x.5515] 
//
// 最后是主函数。它遵循大多数其他主函数的方案，但有两个明显的例外。
//
// - 我们调用[2.x.5516]，以便（通过一个隐藏的默认参数）设置使用多线程任务执行的线程数。
//
// - 我们还有几行专门用于读取或初始化用户定义的参数，这些参数将在程序执行过程中被考虑。
//
[0.x.45062] 
[0.x.45063] 
[0.x.45064] 
[0.x.45065] 
[0.x.45066] 
//
[0.x.45067] 
//
[0.x.45068] 
[0.x.45069] 
[0.x.45070] 
[0.x.45071] 
[0.x.45072] 
//
[0.x.45073] 
[0.x.45074] 
//
[0.x.45075] 
[0.x.45076] 
[0.x.45077] 
[0.x.45078] 
[0.x.45079] 
[0.x.45080] 
[0.x.45081] 
[0.x.45082] 
[0.x.45083] 
[0.x.45084] 
[0.x.45085] 
[0.x.45086] 
[0.x.45087] 
[0.x.45088] 
[0.x.45089] 
//
[0.x.45090] 
[0.x.45091] 
[0.x.45092] 
[0.x.45093] 
[0.x.45094] 
[0.x.45095] 
[0.x.45096] 
[0.x.45097] 
[0.x.45098] 
[0.x.45099] 
[0.x.45100] 
[0.x.45101] 
[0.x.45102] 
[0.x.45103] 
[0.x.45104] 
[0.x.45105] 
[0.x.45106] 
[0.x.45107] 
[0.x.45108] 
[0.x.45109] 
[0.x.45110] 
[0.x.45111] 
[0.x.45112] 
[0.x.45113] 
[0.x.45114] 
[0.x.45115] 
[0.x.45116] 
[0.x.45117] 
[0.x.45118] 
[0.x.45119] 
//
[0.x.45120] 
[0.x.45121] 
[0.x.45122] 
//
// 前面几个文件已经在前面的例子中讲过了，因此不再做进一步的评论。
//
[0.x.45123] 
[0.x.45124] 
[0.x.45125] 
[0.x.45126] 
[0.x.45127] 
[0.x.45128] 
[0.x.45129] 
[0.x.45130] 
[0.x.45131] 
[0.x.45132] 
[0.x.45133] 
[0.x.45134] 
[0.x.45135] 
[0.x.45136] 
[0.x.45137] 
[0.x.45138] 
//
// 这里定义了不连续的有限元和FEInterfaceValues。
//
[0.x.45139] 
[0.x.45140] 
//
[0.x.45141] 
[0.x.45142] 
[0.x.45143] 
//
[0.x.45144] 
[0.x.45145] 
[0.x.45146] 
//
[0.x.45147] 
[0.x.45148] 
[0.x.45149] 
//[2.x.5517] 这里我们定义了两个测试案例：平滑函数的收敛率和[2.x.5518]的l_singularity。
[0.x.45150] 
[0.x.45151] 
[0.x.45152] 
[0.x.45153] 
[0.x.45154] 
//
// 用于收敛性测试的平滑解。
//
[0.x.45155] 
[0.x.45156] 
[0.x.45157] 
[0.x.45158] 
[0.x.45159] 
[0.x.45160] 
[0.x.45161] 
//
[0.x.45162] 
[0.x.45163] 
[0.x.45164] 
//
[0.x.45165] 
[0.x.45166] 
[0.x.45167] 
[0.x.45168] 
//
[0.x.45169] 
[0.x.45170] 
[0.x.45171] 
[0.x.45172] 
[0.x.45173] 
[0.x.45174] 
[0.x.45175] 
[0.x.45176] 
[0.x.45177] 
[0.x.45178] 
//
[0.x.45179] 
[0.x.45180] 
[0.x.45181] 
[0.x.45182] 
[0.x.45183] 
[0.x.45184] 
[0.x.45185] 
[0.x.45186] 
[0.x.45187] 
[0.x.45188] 
[0.x.45189] 
[0.x.45190] 
[0.x.45191] 
//
// 平滑函数的相应右手边。
//
[0.x.45192] 
[0.x.45193] 
[0.x.45194] 
[0.x.45195] 
[0.x.45196] 
[0.x.45197] 
[0.x.45198] 
//
[0.x.45199] 
[0.x.45200] 
[0.x.45201] 
[0.x.45202] 
//
[0.x.45203] 
[0.x.45204] 
[0.x.45205] 
[0.x.45206] 
[0.x.45207] 
[0.x.45208] 
[0.x.45209] 
[0.x.45210] 
[0.x.45211] 
[0.x.45212] 
[0.x.45213] 
//
//对应于函数[2.x.5519]的右手边，我们假设扩散系数[2.x.5520] 。
//
[0.x.45214] 
[0.x.45215] 
[0.x.45216] 
[0.x.45217] 
[0.x.45218] 
[0.x.45219] 
[0.x.45220] 
//
[0.x.45221] 
[0.x.45222] 
[0.x.45223] 
//
[0.x.45224] 
[0.x.45225] 
[0.x.45226] 
//
[0.x.45227] 
[0.x.45228] 
[0.x.45229] 
[0.x.45230] 
[0.x.45231] 
[0.x.45232] 
[0.x.45233] 
[0.x.45234] 
[0.x.45235] 
//
// [2.x.5521] 以下两个辅助函数分别用于计算一个面上的[2.x.5522]和[2.x.5523]的跳转项。
//
[0.x.45236] 
[0.x.45237] 
[0.x.45238] 
[0.x.45239] 
[0.x.45240] 
[0.x.45241] 
[0.x.45242] 
[0.x.45243] 
[0.x.45244] 
[0.x.45245] 
[0.x.45246] 
[0.x.45247] 
[0.x.45248] 
[0.x.45249] 
[0.x.45250] 
[0.x.45251] 
[0.x.45252] 
//
[0.x.45253] 
[0.x.45254] 
[0.x.45255] 
[0.x.45256] 
[0.x.45257] 
[0.x.45258] 
[0.x.45259] 
[0.x.45260] 
[0.x.45261] 
[0.x.45262] 
[0.x.45263] 
[0.x.45264] 
[0.x.45265] 
[0.x.45266] 
[0.x.45267] 
[0.x.45268] 
[0.x.45269] 
//
// 这个函数计算惩罚 [2.x.5524] 。
//
[0.x.45270] 
[0.x.45271] 
[0.x.45272] 
[0.x.45273] 
[0.x.45274] 
[0.x.45275] 
[0.x.45276] 
[0.x.45277] 
//[2.x.5525] 下面，我们为[2.x.5526]定义 "复制 "对象，它与[2.x.5527]本质上是一样的。注意，这里没有定义 "Scratch "对象，因为我们用[2.x.5528]代替。复制 "和 "抓取 "对象的使用在WorkStream命名空间文档中得到了广泛的解释）。
//
[0.x.45278] 
[0.x.45279] 
[0.x.45280] 
[0.x.45281] 
[0.x.45282] 
[0.x.45283] 
[0.x.45284] 
//
[0.x.45285] 
[0.x.45286] 
[0.x.45287] 
[0.x.45288] 
[0.x.45289] 
[0.x.45290] 
[0.x.45291] 
[0.x.45292] 
//
[0.x.45293] 
[0.x.45294] 
[0.x.45295] 
[0.x.45296] 
[0.x.45297] 
[0.x.45298] 
[0.x.45299] 
[0.x.45300] 
[0.x.45301] 
//
// [2.x.5529] 在这些准备工作之后，我们继续进行本程序的主类，称为`SIPGLaplace`。该类的整体结构与其他许多教程程序一样。主要的区别只出现在组装函数的实现上，因为我们使用FEInterfaceValues来组装面条。
//
[0.x.45302] 
[0.x.45303] 
[0.x.45304] 
[0.x.45305] 
[0.x.45306] 
[0.x.45307] 
//
[0.x.45308] 
[0.x.45309] 
[0.x.45310] 
[0.x.45311] 
[0.x.45312] 
[0.x.45313] 
//
[0.x.45314] 
[0.x.45315] 
[0.x.45316] 
//
[0.x.45317] 
[0.x.45318] 
[0.x.45319] 
[0.x.45320] 
[0.x.45321] 
[0.x.45322] 
[0.x.45323] 
//
[0.x.45324] 
//
[0.x.45325] 
[0.x.45326] 
//
[0.x.45327] 
[0.x.45328] 
[0.x.45329] 
[0.x.45330] 
//
// 该类的其余成员用于以下方面。
//
// - 用于存储每个单元的误差估计方和能量规范方的矢量。
//
// - 在屏幕上打印收敛率和误差。
//
// - 扩散系数[2.x.5530]被设置为1。
//
// - 存储要计算的测试案例信息的成员。
//
[0.x.45331] 
[0.x.45332] 
//
[0.x.45333] 
//
[0.x.45334] 
//
[0.x.45335] 
[0.x.45336] 
[0.x.45337] 
[0.x.45338] 
//
// 这里的构造函数将测试案例作为输入，然后确定正确的解决方案和右手边的类。其余的成员变量以明显的方式进行初始化。
//
[0.x.45339] 
[0.x.45340] 
[0.x.45341] 
[0.x.45342] 
[0.x.45343] 
[0.x.45344] 
[0.x.45345] 
[0.x.45346] 
[0.x.45347] 
[0.x.45348] 
[0.x.45349] 
[0.x.45350] 
[0.x.45351] 
[0.x.45352] 
[0.x.45353] 
[0.x.45354] 
[0.x.45355] 
//
[0.x.45356] 
[0.x.45357] 
[0.x.45358] 
[0.x.45359] 
[0.x.45360] 
[0.x.45361] 
[0.x.45362] 
[0.x.45363] 
[0.x.45364] 
//
[0.x.45365] 
[0.x.45366] 
[0.x.45367] 
[0.x.45368] 
[0.x.45369] 
[0.x.45370] 
[0.x.45371] 
//
[0.x.45372] 
[0.x.45373] 
[0.x.45374] 
[0.x.45375] 
//
// [2.x.5531] 这里的组装功能与 [2.x.5532] 和 [2.x.5533] 中类似。与手工装配不同的是，我们只需要专注于在每个单元格、每个边界面和每个内部面进行装配。单元和面的循环由 [2.x.5534] 自动处理。
//
// 该函数首先定义了一个局部（lambda）函数，用来整合单元项。
//
[0.x.45376] 
[0.x.45377] 
[0.x.45378] 
[0.x.45379] 
[0.x.45380] 
[0.x.45381] 
[0.x.45382] 
[0.x.45383] 
//
[0.x.45384] 
[0.x.45385] 
[0.x.45386] 
//
[0.x.45387] 
[0.x.45388] 
//
[0.x.45389] 
[0.x.45390] 
[0.x.45391] 
[0.x.45392] 
[0.x.45393] 
[0.x.45394] 
[0.x.45395] 
[0.x.45396] 
[0.x.45397] 
//
[0.x.45398] 
[0.x.45399] 
[0.x.45400] 
[0.x.45401] 
[0.x.45402] 
//
// 接下来，我们需要一个在边界上集合面积分的函数。
//
[0.x.45403] 
[0.x.45404] 
[0.x.45405] 
[0.x.45406] 
[0.x.45407] 
//
[0.x.45408] 
[0.x.45409] 
[0.x.45410] 
//
[0.x.45411] 
[0.x.45412] 
[0.x.45413] 
//
[0.x.45414] 
[0.x.45415] 
//
[0.x.45416] 
[0.x.45417] 
//
[0.x.45418] 
[0.x.45419] 
[0.x.45420] 
[0.x.45421] 
[0.x.45422] 
[0.x.45423] 
[0.x.45424] 
[0.x.45425] 
[0.x.45426] 
//
[0.x.45427] 
[0.x.45428] 
[0.x.45429] 
[0.x.45430] 
//
[0.x.45431] 
[0.x.45432] 
[0.x.45433] 
//
[0.x.45434] 
[0.x.45435] 
//
[0.x.45436] 
[0.x.45437] 
[0.x.45438] 
[0.x.45439] 
[0.x.45440] 
[0.x.45441] 
//
[0.x.45442] 
[0.x.45443] 
//
[0.x.45444] 
[0.x.45445] 
[0.x.45446] 
[0.x.45447] 
//
// 最后，一个在内部面组装面积分的函数。为了重新初始化FEInterfaceValues，我们需要向FEInterfaceValues的reinit()函数传递单元格、面和子面指数（用于自适应细化）。
//
[0.x.45448] 
[0.x.45449] 
[0.x.45450] 
[0.x.45451] 
[0.x.45452] 
[0.x.45453] 
[0.x.45454] 
[0.x.45455] 
[0.x.45456] 
[0.x.45457] 
//
[0.x.45458] 
[0.x.45459] 
//
[0.x.45460] 
[0.x.45461] 
[0.x.45462] 
[0.x.45463] 
[0.x.45464] 
//
[0.x.45465] 
[0.x.45466] 
//
[0.x.45467] 
[0.x.45468] 
[0.x.45469] 
//
[0.x.45470] 
[0.x.45471] 
[0.x.45472] 
[0.x.45473] 
[0.x.45474] 
[0.x.45475] 
[0.x.45476] 
[0.x.45477] 
[0.x.45478] 
//
[0.x.45479] 
[0.x.45480] 
[0.x.45481] 
[0.x.45482] 
//
[0.x.45483] 
[0.x.45484] 
[0.x.45485] 
//
[0.x.45486] 
[0.x.45487] 
[0.x.45488] 
[0.x.45489] 
//
// 下面的lambda函数就会把数据复制到全局矩阵和右侧。 虽然DG离散化中没有悬空节点约束，但我们定义了一个空的AffineConstraints对象，允许我们使用[2.x.5535]功能。
//
[0.x.45490] 
[0.x.45491] 
[0.x.45492] 
[0.x.45493] 
[0.x.45494] 
[0.x.45495] 
[0.x.45496] 
[0.x.45497] 
//
// 将内部面组件的数据复制到全局矩阵中。
//
[0.x.45498] 
[0.x.45499] 
[0.x.45500] 
[0.x.45501] 
[0.x.45502] 
[0.x.45503] 
[0.x.45504] 
//
// 在定义了装配函数后，我们现在可以创建ScratchData和CopyData对象，并将它们和上面的lambda函数一起传递给[2.x.5536]此外，我们还需要指定我们要在内部面完全装配一次。
//
[0.x.45505] 
[0.x.45506] 
[0.x.45507] 
[0.x.45508] 
[0.x.45509] 
//
[0.x.45510] 
[0.x.45511] 
[0.x.45512] 
//
[0.x.45513] 
[0.x.45514] 
[0.x.45515] 
[0.x.45516] 
[0.x.45517] 
[0.x.45518] 
[0.x.45519] 
[0.x.45520] 
[0.x.45521] 
[0.x.45522] 
[0.x.45523] 
[0.x.45524] 
//
// [2.x.5537] 以下两个函数完全是标准的，没有难度。
//
[0.x.45525] 
[0.x.45526] 
[0.x.45527] 
[0.x.45528] 
[0.x.45529] 
[0.x.45530] 
[0.x.45531] 
//
[0.x.45532] 
[0.x.45533] 
[0.x.45534] 
[0.x.45535] 
[0.x.45536] 
[0.x.45537] 
[0.x.45538] 
//
[0.x.45539] 
[0.x.45540] 
[0.x.45541] 
[0.x.45542] 
[0.x.45543] 
[0.x.45544] 
//[2.x.5538] 这里的误差估计器的装配与全局矩阵和右前侧的装配很相似，可以由[2.x.5539]框架处理。为了理解每个局部（lambda）函数的作用，首先回顾一下，局部单元残差的定义为 [2.x.5540] 。
//
[0.x.45545] 
[0.x.45546] 
[0.x.45547] 
[0.x.45548] 
[0.x.45549] 
[0.x.45550] 
//
[0.x.45551] 
//
[0.x.45552] 
[0.x.45553] 
[0.x.45554] 
//
[0.x.45555] 
[0.x.45556] 
//
[0.x.45557] 
[0.x.45558] 
//
[0.x.45559] 
[0.x.45560] 
//
[0.x.45561] 
[0.x.45562] 
[0.x.45563] 
[0.x.45564] 
[0.x.45565] 
[0.x.45566] 
[0.x.45567] 
[0.x.45568] 
//
// 接下来计算边界条款 [2.x.5541] 。
//
[0.x.45569] 
[0.x.45570] 
[0.x.45571] 
[0.x.45572] 
[0.x.45573] 
//
[0.x.45574] 
[0.x.45575] 
//
[0.x.45576] 
//
[0.x.45577] 
[0.x.45578] 
//
[0.x.45579] 
[0.x.45580] 
//
[0.x.45581] 
[0.x.45582] 
//
[0.x.45583] 
[0.x.45584] 
[0.x.45585] 
[0.x.45586] 
[0.x.45587] 
[0.x.45588] 
[0.x.45589] 
[0.x.45590] 
//
// 最后是内部面孔条款 [2.x.5542] 。
//
[0.x.45591] 
[0.x.45592] 
[0.x.45593] 
[0.x.45594] 
[0.x.45595] 
[0.x.45596] 
[0.x.45597] 
[0.x.45598] 
[0.x.45599] 
[0.x.45600] 
//
[0.x.45601] 
[0.x.45602] 
//
[0.x.45603] 
[0.x.45604] 
//
[0.x.45605] 
[0.x.45606] 
//
[0.x.45607] 
[0.x.45608] 
//
[0.x.45609] 
[0.x.45610] 
//
[0.x.45611] 
[0.x.45612] 
//
[0.x.45613] 
//
[0.x.45614] 
[0.x.45615] 
[0.x.45616] 
//
[0.x.45617] 
[0.x.45618] 
[0.x.45619] 
[0.x.45620] 
[0.x.45621] 
[0.x.45622] 
[0.x.45623] 
[0.x.45624] 
[0.x.45625] 
[0.x.45626] 
[0.x.45627] 
[0.x.45628] 
[0.x.45629] 
//
// 在计算了每个单元的局部贡献后，我们仍然需要一种方法将这些复制到全局向量中，该向量将保存所有单元的误差估计值。
//
[0.x.45630] 
[0.x.45631] 
[0.x.45632] 
[0.x.45633] 
[0.x.45634] 
[0.x.45635] 
[0.x.45636] 
[0.x.45637] 
//
// 在所有这些设置之后，让我们来做实际的工作。我们调整向量的大小，将结果写入其中，然后用[2.x.5543]函数驱动整个过程。
//
[0.x.45638] 
//
[0.x.45639] 
[0.x.45640] 
[0.x.45641] 
[0.x.45642] 
[0.x.45643] 
//
[0.x.45644] 
[0.x.45645] 
//
[0.x.45646] 
[0.x.45647] 
[0.x.45648] 
[0.x.45649] 
[0.x.45650] 
[0.x.45651] 
[0.x.45652] 
[0.x.45653] 
[0.x.45654] 
[0.x.45655] 
[0.x.45656] 
[0.x.45657] 
[0.x.45658] 
//[2.x.5544] 接下来，我们用能量准则来评估准确性。这个函数类似于上面的误差估计器的集合。这里我们计算由[1.x.225]定义的能量准则的平方 因此，相应的误差是[1.x.226]
//
[0.x.45659] 
[0.x.45660] 
[0.x.45661] 
[0.x.45662] 
//
// 组装 [2.x.5545] 。
//
[0.x.45663] 
[0.x.45664] 
[0.x.45665] 
//
[0.x.45666] 
//
[0.x.45667] 
[0.x.45668] 
[0.x.45669] 
//
[0.x.45670] 
[0.x.45671] 
//
[0.x.45672] 
[0.x.45673] 
//
[0.x.45674] 
[0.x.45675] 
[0.x.45676] 
[0.x.45677] 
[0.x.45678] 
[0.x.45679] 
[0.x.45680] 
[0.x.45681] 
//
// 组装 [2.x.5546] 。
//
[0.x.45682] 
[0.x.45683] 
[0.x.45684] 
[0.x.45685] 
[0.x.45686] 
//
[0.x.45687] 
[0.x.45688] 
//
[0.x.45689] 
//
[0.x.45690] 
[0.x.45691] 
//
[0.x.45692] 
[0.x.45693] 
//
[0.x.45694] 
[0.x.45695] 
//
[0.x.45696] 
[0.x.45697] 
[0.x.45698] 
[0.x.45699] 
[0.x.45700] 
[0.x.45701] 
[0.x.45702] 
[0.x.45703] 
//
// 组装 [2.x.5547] 。
//
[0.x.45704] 
[0.x.45705] 
[0.x.45706] 
[0.x.45707] 
[0.x.45708] 
[0.x.45709] 
[0.x.45710] 
[0.x.45711] 
[0.x.45712] 
[0.x.45713] 
//
[0.x.45714] 
[0.x.45715] 
//
[0.x.45716] 
[0.x.45717] 
//
[0.x.45718] 
//
[0.x.45719] 
[0.x.45720] 
//
[0.x.45721] 
[0.x.45722] 
//
[0.x.45723] 
[0.x.45724] 
[0.x.45725] 
//
[0.x.45726] 
[0.x.45727] 
[0.x.45728] 
[0.x.45729] 
[0.x.45730] 
[0.x.45731] 
[0.x.45732] 
[0.x.45733] 
//
[0.x.45734] 
[0.x.45735] 
[0.x.45736] 
[0.x.45737] 
[0.x.45738] 
[0.x.45739] 
[0.x.45740] 
//
[0.x.45741] 
[0.x.45742] 
[0.x.45743] 
[0.x.45744] 
//
[0.x.45745] 
[0.x.45746] 
[0.x.45747] 
[0.x.45748] 
[0.x.45749] 
[0.x.45750] 
//
[0.x.45751] 
[0.x.45752] 
[0.x.45753] 
[0.x.45754] 
[0.x.45755] 
[0.x.45756] 
[0.x.45757] 
[0.x.45758] 
[0.x.45759] 
[0.x.45760] 
[0.x.45761] 
[0.x.45762] 
[0.x.45763] 
[0.x.45764] 
[0.x.45765] 
[0.x.45766] 
//
// [2.x.5548] 
[0.x.45767] 
[0.x.45768] 
[0.x.45769] 
[0.x.45770] 
//
[0.x.45771] 
[0.x.45772] 
//
[0.x.45773] 
[0.x.45774] 

// [2.x.5549] 我们分别计算[2.x.5550]规范、[2.x.5551]半规范和能量规范中的三个误差。这些误差会被打印到屏幕上，同时也会存储在一个表格中，该表格记录了这些误差是如何随着网格细化而衰减的，并且可以在程序结束时一步步输出。
//
[0.x.45775] 
[0.x.45776] 
[0.x.45777] 
[0.x.45778] 
//
[0.x.45779] 
[0.x.45780] 
[0.x.45781] 
[0.x.45782] 
[0.x.45783] 
[0.x.45784] 
[0.x.45785] 
[0.x.45786] 
[0.x.45787] 
//
[0.x.45788] 
[0.x.45789] 
[0.x.45790] 
[0.x.45791] 
[0.x.45792] 
//
[0.x.45793] 
[0.x.45794] 
[0.x.45795] 
[0.x.45796] 
[0.x.45797] 
[0.x.45798] 
[0.x.45799] 
[0.x.45800] 
[0.x.45801] 
//
[0.x.45802] 
[0.x.45803] 
[0.x.45804] 
[0.x.45805] 
[0.x.45806] 
//
[0.x.45807] 
[0.x.45808] 
[0.x.45809] 
[0.x.45810] 
//
[0.x.45811] 
[0.x.45812] 
[0.x.45813] 
[0.x.45814] 
[0.x.45815] 
//
// [2.x.5552] 
 
[0.x.45817] 
[0.x.45818] 
[0.x.45819] 
[0.x.45820] 
[0.x.45821] 
[0.x.45822] 
[0.x.45823] 
//
[0.x.45824] 
[0.x.45825] 
[0.x.45826] 
[0.x.45827] 
[0.x.45828] 
[0.x.45829] 
[0.x.45830] 
//
[0.x.45831] 
[0.x.45832] 
[0.x.45833] 
[0.x.45834] 
[0.x.45835] 
[0.x.45836] 
[0.x.45837] 
 
//
[0.x.45839] 
[0.x.45840] 
[0.x.45841] 
[0.x.45842] 
[0.x.45843] 
[0.x.45844] 
[0.x.45845] 
[0.x.45846] 
[0.x.45847] 
[0.x.45848] 
[0.x.45849] 
[0.x.45850] 
[0.x.45851] 
//
[0.x.45852] 
[0.x.45853] 
[0.x.45854] 
[0.x.45855] 
[0.x.45856] 
//
[0.x.45857] 
[0.x.45858] 
[0.x.45859] 
//
[0.x.45860] 
[0.x.45861] 
//
[0.x.45862] 
[0.x.45863] 
[0.x.45864] 
[0.x.45865] 
[0.x.45866] 
[0.x.45867] 
[0.x.45868] 
[0.x.45869] 
[0.x.45870] 
//
[0.x.45871] 
[0.x.45872] 
[0.x.45873] 
[0.x.45874] 
[0.x.45875] 
[0.x.45876] 
//
[0.x.45877] 
[0.x.45878] 
[0.x.45879] 
[0.x.45880] 
[0.x.45881] 
[0.x.45882] 
//
// 在运行了所有的计算之后，让我们告诉收敛表如何格式化它的数据并将其输出到屏幕。
//
[0.x.45883] 
[0.x.45884] 
[0.x.45885] 
//
[0.x.45886] 
[0.x.45887] 
[0.x.45888] 
//
[0.x.45889] 
[0.x.45890] 
[0.x.45891] 
[0.x.45892] 
[0.x.45893] 
[0.x.45894] 
[0.x.45895] 
[0.x.45896] 
[0.x.45897] 
[0.x.45898] 
[0.x.45899] 
[0.x.45900] 
//
[0.x.45901] 
[0.x.45902] 
[0.x.45903] 
[0.x.45904] 
[0.x.45905] 
//
// [2.x.5553] 下面的[2.x.5554]函数与前面的例子也类似，不需要注释。
//
[0.x.45906] 
[0.x.45907] 
[0.x.45908] 
[0.x.45909] 
[0.x.45910] 
[0.x.45911] 
//
[0.x.45912] 
//
[0.x.45913] 
[0.x.45914] 
[0.x.45915] 
[0.x.45916] 
[0.x.45917] 
[0.x.45918] 
[0.x.45919] 
[0.x.45920] 
[0.x.45921] 
[0.x.45922] 
[0.x.45923] 
[0.x.45924] 
[0.x.45925] 
[0.x.45926] 
[0.x.45927] 
[0.x.45928] 
[0.x.45929] 
[0.x.45930] 
[0.x.45931] 
[0.x.45932] 
[0.x.45933] 
[0.x.45934] 
[0.x.45935] 
[0.x.45936] 
[0.x.45937] 
[0.x.45938] 
[0.x.45939] 
[0.x.45940] 
//
[0.x.45941] 
[0.x.45942] 
[0.x.45943] 
[0.x.45944] 
[0.x.45945] 
[0.x.45946] 
[0.x.45947] 
[0.x.45948] 
[0.x.45949] 
[0.x.45950] 
[0.x.45951] 
[0.x.45952] 
[0.x.45953] 
[0.x.45954] 
[0.x.45955] 
[0.x.45956] 
//
[0.x.45957] 
[0.x.45958] 
[0.x.45959] 
[0.x.45960] 
[0.x.45961] 
[0.x.45962] 
//[2.x.5555] 
//
// 在以前的教程程序中，特别是在[2.x.5556]和[2.x.5557]中，已经使用和讨论了以下包含文件。
//
[0.x.45963] 
[0.x.45964] 
[0.x.45965] 
[0.x.45966] 
[0.x.45967] 
//
[0.x.45968] 
[0.x.45969] 
//
[0.x.45970] 
[0.x.45971] 
//
[0.x.45972] 
//
[0.x.45973] 
[0.x.45974] 
//
[0.x.45975] 
[0.x.45976] 
//
[0.x.45977] 
[0.x.45978] 
[0.x.45979] 
[0.x.45980] 
[0.x.45981] 
[0.x.45982] 
[0.x.45983] 
//
[0.x.45984] 
[0.x.45985] 
[0.x.45986] 
[0.x.45987] 
//
[0.x.45988] 
[0.x.45989] 
[0.x.45990] 
//
// 为了实现负载平衡，我们将在单元格上分配单独的权重，为此我们将使用类 [2.x.5558] 。
[0.x.45991] 
//
// 求解函数需要从直角坐标到极坐标的转换。[2.x.5559]命名空间提供了必要的工具。
//
[0.x.45992] 
[0.x.45993] 
//
// 以下包含的文件将启用MatrixFree功能。
//
[0.x.45994] 
[0.x.45995] 
[0.x.45996] 
//
// 我们将使用[2.x.5560]进行线性代数操作。
//
[0.x.45997] 
//
// 我们剩下的就是包含多网格求解器所需的文件。
//
[0.x.45998] 
[0.x.45999] 
[0.x.46000] 
[0.x.46001] 
[0.x.46002] 
[0.x.46003] 
[0.x.46004] 
//
[0.x.46005] 
[0.x.46006] 
[0.x.46007] 
//[2.x.5561] 
//
// 我们有一个分析性的方案可以使用。我们将用这个解来为问题的数值解施加边界条件。解决方案的表述需要转换为极坐标。为了从笛卡尔坐标转换到球面坐标，我们将使用[2.x.5562]命名空间的一个辅助函数。这个转换的前两个坐标对应于x-y面的极坐标。
//
[0.x.46008] 
[0.x.46009] 
[0.x.46010] 
[0.x.46011] 
[0.x.46012] 
[0.x.46013] 
[0.x.46014] 
//
[0.x.46015] 
[0.x.46016] 
[0.x.46017] 
[0.x.46018] 
[0.x.46019] 
//
[0.x.46020] 
[0.x.46021] 
[0.x.46022] 
[0.x.46023] 
//
// [2.x.5563] 
//
// 在本教程中，我们将使用一个简化的参数集。这里也可以使用ParameterHandler类，但为了使本教程简短，我们决定使用简单的结构。所有这些参数的实际意图将在接下来的类中描述，在它们各自使用的位置。
//
// 下面的参数集控制着多网格机制的粗网格求解器、平滑器和网格间传输方案。我们用默认参数来填充它。
//
[0.x.46024] 
[0.x.46025] 
[0.x.46026] 
[0.x.46027] 
[0.x.46028] 
[0.x.46029] 
[0.x.46030] 
[0.x.46031] 
[0.x.46032] 
[0.x.46033] 
[0.x.46034] 
[0.x.46035] 
//
[0.x.46036] 
[0.x.46037] 
[0.x.46038] 
[0.x.46039] 
[0.x.46040] 
[0.x.46041] 
[0.x.46042] 
//
[0.x.46043] 
[0.x.46044] 
[0.x.46045] 
[0.x.46046] 
[0.x.46047] 
[0.x.46048] 
[0.x.46049] 
[0.x.46050] 
//
// 这是该问题类的一般参数结构。你会发现这个结构分为几个类别，包括一般的运行时参数、级别限制、细化和粗化分数，以及单元加权的参数。它还包含一个上述结构的实例，用于多网格参数，这些参数将被传递给多网格算法。
//
[0.x.46051] 
[0.x.46052] 
[0.x.46053] 
[0.x.46054] 
//
[0.x.46055] 
//
[0.x.46056] 
[0.x.46057] 
[0.x.46058] 
[0.x.46059] 
[0.x.46060] 
//
[0.x.46061] 
[0.x.46062] 
[0.x.46063] 
[0.x.46064] 
//
[0.x.46065] 
[0.x.46066] 
[0.x.46067] 
//
// [2.x.5564] 
//
// 这是一个无矩阵的拉普拉斯算子的实现，基本上将接管其他教程中的`assemble_system()`函数的部分。所有成员函数的含义将在后面的定义中解释。
//
// 我们将使用FEEvaluation类来评估正交点的解向量并进行积分。与其他教程不同的是，模板参数`度数`被设置为 [2.x.5565] ，`一维正交数`被设置为 [2.x.5566] 。在这种情况下，FEEvaluation会动态地选择正确的多项式度数和正交点的数量。在这里，我们为FEEvaluation引入一个带有正确模板参数的别名，这样我们以后就不用担心这些参数了。
//
[0.x.46068] 
[0.x.46069] 
[0.x.46070] 
[0.x.46071] 
[0.x.46072] 
//
[0.x.46073] 
//
[0.x.46074] 
//
[0.x.46075] 
[0.x.46076] 
[0.x.46077] 
[0.x.46078] 
[0.x.46079] 
//
[0.x.46080] 
[0.x.46081] 
[0.x.46082] 
[0.x.46083] 
[0.x.46084] 
//
[0.x.46085] 
//
[0.x.46086] 
//
[0.x.46087] 
//
[0.x.46088] 
//
[0.x.46089] 
//
[0.x.46090] 
//
[0.x.46091] 
//
[0.x.46092] 
[0.x.46093] 
//
[0.x.46094] 
[0.x.46095] 
[0.x.46096] 
//
[0.x.46097] 
[0.x.46098] 
[0.x.46099] 
[0.x.46100] 
[0.x.46101] 
//
[0.x.46102] 
//
// 为了用AMG预处理程序解决最粗层次的方程系统，我们需要一个最粗层次的实际系统矩阵。为此，我们提供了一种机制，可以选择从无矩阵公式中计算出一个矩阵，为此我们引入了一个专门的SparseMatrix对象。在默认情况下，这个矩阵保持为空。一旦`get_system_matrix()`被调用，这个矩阵就会被填充（懒惰分配）。由于这是一个 "const "函数，我们需要在这里使用 "mutable "关键字。我们还需要一个约束对象来构建矩阵。
//
[0.x.46103] 
[0.x.46104] 
[0.x.46105] 
//
// 下面的部分包含了初始化和重新初始化该类的函数。特别是，这些函数初始化了内部的MatrixFree实例。为了简单起见，我们还计算了系统右侧的向量。
//
[0.x.46106] 
[0.x.46107] 
[0.x.46108] 
[0.x.46109] 
[0.x.46110] 
[0.x.46111] 
[0.x.46112] 
[0.x.46113] 
[0.x.46114] 
[0.x.46115] 
//
[0.x.46116] 
[0.x.46117] 
[0.x.46118] 
[0.x.46119] 
[0.x.46120] 
[0.x.46121] 
[0.x.46122] 
[0.x.46123] 
//
// 清除内部数据结构（在操作者被重复使用的情况下）。
//
[0.x.46124] 
//
// 复制约束条件，因为以后在计算系统矩阵时可能需要它们。
//
[0.x.46125] 
//
// 设置MatrixFree。在正交点，我们只需要评估解的梯度，并用形状函数的梯度进行测试，所以我们只需要设置标志`update_gradients`。
//
[0.x.46126] 
[0.x.46127] 
//
[0.x.46128] 
//
// 计算右手边的向量。为此，我们设置了第二个MatrixFree实例，它使用一个修改过的AffineConstraints，不包含由于Dirichlet-边界条件的约束。这个修改过的算子被应用于一个只设置了迪里希特值的向量。其结果是负的右手边向量。
//
[0.x.46129] 
[0.x.46130] 
//
[0.x.46131] 
[0.x.46132] 
[0.x.46133] 
[0.x.46134] 
//
[0.x.46135] 
[0.x.46136] 
[0.x.46137] 
//
[0.x.46138] 
//
[0.x.46139] 
//
[0.x.46140] 
[0.x.46141] 
[0.x.46142] 
//
[0.x.46143] 
[0.x.46144] 
//
[0.x.46145] 
//
[0.x.46146] 
[0.x.46147] 
[0.x.46148] 
[0.x.46149] 
//
[0.x.46150] 
//
[0.x.46151] 
[0.x.46152] 
[0.x.46153] 
//
// 以下函数是多网格算法隐含需要的，包括平滑器。
//
// 由于我们没有矩阵，所以要向DoFHandler查询自由度的数量。
//
[0.x.46154] 
[0.x.46155] 
[0.x.46156] 
[0.x.46157] 
[0.x.46158] 
//
// 访问矩阵中的一个特定元素。这个函数既不需要也没有实现，但是，在编译程序时需要它。
//
[0.x.46159] 
[0.x.46160] 
[0.x.46161] 
[0.x.46162] 
[0.x.46163] 
[0.x.46164] 
//
// 初始化给定的向量。我们只是把这个任务委托给同名的MatrixFree函数。
//
[0.x.46165] 
[0.x.46166] 
[0.x.46167] 
[0.x.46168] 
[0.x.46169] 
[0.x.46170] 
//
// 在MatrixFree的帮助下，通过在所有单元中循环进行运算评估，并评估单元积分的效果（参见。`do_cell_integral_local()`和`do_cell_integral_global()`）。)
//
[0.x.46171] 
[0.x.46172] 
[0.x.46173] 
[0.x.46174] 
[0.x.46175] 
[0.x.46176] 
[0.x.46177] 
//
// 执行转置的运算符评估。由于我们考虑的是对称的 "矩阵"，这个函数可以简单地将其任务委托给vmult()。
//
[0.x.46178] 
[0.x.46179] 
[0.x.46180] 
[0.x.46181] 
[0.x.46182] 
[0.x.46183] 
//
// 由于我们没有一个系统矩阵，我们不能循环计算矩阵的对角线项。相反，我们通过对单位基向量进行一连串的运算符评估来计算对角线。为此，我们使用了MatrixFreeTools命名空间中的一个优化函数。之后再手动进行反转。
//
[0.x.46184] 
[0.x.46185] 
[0.x.46186] 
[0.x.46187] 
[0.x.46188] 
[0.x.46189] 
[0.x.46190] 
[0.x.46191] 
//
[0.x.46192] 
[0.x.46193] 
[0.x.46194] 
//
// 在无矩阵的情况下，在这个类的初始化过程中没有设置系统矩阵。因此，如果需要的话，它必须在这里被计算出来。由于矩阵在本教程中只对线性元素进行计算（在粗略的网格上），这一点是可以接受的。矩阵的条目是通过运算符的评估序列得到的。为此，使用了优化函数[2.x.5567]。矩阵只有在尚未设置的情况下才会被计算（懒惰分配）。
//
[0.x.46195] 
[0.x.46196] 
[0.x.46197] 
[0.x.46198] 
[0.x.46199] 
[0.x.46200] 
[0.x.46201] 
//
[0.x.46202] 
[0.x.46203] 
[0.x.46204] 
//
[0.x.46205] 
//
[0.x.46206] 
[0.x.46207] 
//
[0.x.46208] 
[0.x.46209] 
[0.x.46210] 
[0.x.46211] 
[0.x.46212] 
[0.x.46213] 
[0.x.46214] 
//
[0.x.46215] 
[0.x.46216] 
//
// 对一个单元格批处理进行单元格积分，不需要收集和分散数值。MatrixFreeTools函数需要这个函数，因为这些函数直接对FEEvaluation的缓冲区进行操作。
//
[0.x.46217] 
[0.x.46218] 
[0.x.46219] 
[0.x.46220] 
[0.x.46221] 
//
[0.x.46222] 
[0.x.46223] 
//
[0.x.46224] 
[0.x.46225] 
//
// 与上述相同，但可以访问全局向量。
//
[0.x.46226] 
[0.x.46227] 
[0.x.46228] 
[0.x.46229] 
[0.x.46230] 
[0.x.46231] 
[0.x.46232] 
//
[0.x.46233] 
[0.x.46234] 
//
[0.x.46235] 
[0.x.46236] 
//
// 这个函数在一个单元格批次范围内的所有单元格批次上循环，并调用上述函数。
//
[0.x.46237] 
[0.x.46238] 
[0.x.46239] 
[0.x.46240] 
[0.x.46241] 
[0.x.46242] 
[0.x.46243] 
[0.x.46244] 
//
[0.x.46245] 
[0.x.46246] 
[0.x.46247] 
//
[0.x.46248] 
[0.x.46249] 
[0.x.46250] 
//
// [2.x.5568] 
//[2.x.5569] 
//
// 这个函数用一连串提供的多网格对象来解决方程组。它的目的是为了尽可能的通用，因此有许多模板参数。
//
[0.x.46251] 
[0.x.46252] 
[0.x.46253] 
[0.x.46254] 
[0.x.46255] 
[0.x.46256] 
[0.x.46257] 
[0.x.46258] 
[0.x.46259] 
[0.x.46260] 
[0.x.46261] 
[0.x.46262] 
[0.x.46263] 
[0.x.46264] 
[0.x.46265] 
[0.x.46266] 
[0.x.46267] 
[0.x.46268] 
//
[0.x.46269] 
[0.x.46270] 
//
[0.x.46271] 
[0.x.46272] 
[0.x.46273] 
[0.x.46274] 
[0.x.46275] 
//
// 我们在这里初始化电平运算符和切比雪夫平滑器。
//
[0.x.46276] 
//
[0.x.46277] 
[0.x.46278] 
//
[0.x.46279] 
[0.x.46280] 
[0.x.46281] 
[0.x.46282] 
[0.x.46283] 
[0.x.46284] 
[0.x.46285] 
[0.x.46286] 
[0.x.46287] 
[0.x.46288] 
[0.x.46289] 
//
[0.x.46290] 
[0.x.46291] 
[0.x.46292] 
//
// 接下来，我们初始化粗略网格求解器。我们使用共轭梯度法和AMG作为预处理程序。
//
[0.x.46293] 
[0.x.46294] 
[0.x.46295] 
[0.x.46296] 
[0.x.46297] 
[0.x.46298] 
//
[0.x.46299] 
//
[0.x.46300] 
[0.x.46301] 
[0.x.46302] 
[0.x.46303] 
[0.x.46304] 
//
[0.x.46305] 
[0.x.46306] 
//
[0.x.46307] 
[0.x.46308] 
[0.x.46309] 
[0.x.46310] 
[0.x.46311] 
[0.x.46312] 
//
// 最后，我们创建Multigrid对象，将其转换为预处理程序，并在共轭梯度求解器中使用它来解决线性方程组。
//
[0.x.46313] 
[0.x.46314] 
//
[0.x.46315] 
//
[0.x.46316] 
[0.x.46317] 
[0.x.46318] 
//
// [2.x.5570] 
//
// 上述函数处理给定的多网格对象序列的实际解决方案。这个函数创建了实际的多重网格层次，特别是运算符，以及作为MGTransferGlobalCoarsening对象的转移运算符。
//
[0.x.46319] 
[0.x.46320] 
[0.x.46321] 
[0.x.46322] 
[0.x.46323] 
[0.x.46324] 
[0.x.46325] 
[0.x.46326] 
[0.x.46327] 
[0.x.46328] 
//
// 为每个多网格层次创建一个DoFHandler和操作符，以及，创建转移操作符。为了能够设置运算符，我们需要一组DoFHandler，通过p或h的全局粗化来创建。
//
// 如果没有要求h-transfer，我们为`emplace_back()`函数提供一个空的删除器，因为我们的DoFHandler的Triangulation是一个外部字段，其析构器在其他地方被调用。
//
[0.x.46329] 
[0.x.46330] 
[0.x.46331] 
//
[0.x.46332] 
[0.x.46333] 
[0.x.46334] 
[0.x.46335] 
[0.x.46336] 
[0.x.46337] 
[0.x.46338] 
[0.x.46339] 
[0.x.46340] 
[0.x.46341] 
//
// 确定多栅格操作的总层数，并为所有层数分配足够的内存。
//
[0.x.46342] 
//
[0.x.46343] 
[0.x.46344] 
//
[0.x.46345] 
[0.x.46346] 
[0.x.46347] 
[0.x.46348] 
//
[0.x.46349] 
[0.x.46350] 
//
[0.x.46351] 
[0.x.46352] 
[0.x.46353] 
[0.x.46354] 
//
[0.x.46355] 
[0.x.46356] 
[0.x.46357] 
[0.x.46358] 
[0.x.46359] 
[0.x.46360] 
[0.x.46361] 
[0.x.46362] 
//
[0.x.46363] 
[0.x.46364] 
[0.x.46365] 
//
[0.x.46366] 
[0.x.46367] 
[0.x.46368] 
//
// 从最小（最粗）到最大（最细）级别的循环，并相应地设置DoFHandler。我们从h层开始，在这里我们分布在越来越细的网格上的线性元素。
//
[0.x.46369] 
[0.x.46370] 
[0.x.46371] 
[0.x.46372] 
[0.x.46373] 
//
// 在我们达到最细的网格后，我们将调整每一层的多项式度数。我们反向迭代我们的数据结构，从包含所有活动FE指数信息的最细网格开始。然后我们逐级降低每个单元的多项式度数。
//
[0.x.46374] 
[0.x.46375] 
[0.x.46376] 
//
[0.x.46377] 
[0.x.46378] 
[0.x.46379] 
//
[0.x.46380] 
[0.x.46381] 
[0.x.46382] 
[0.x.46383] 
[0.x.46384] 
[0.x.46385] 
[0.x.46386] 
[0.x.46387] 
[0.x.46388] 
[0.x.46389] 
[0.x.46390] 
[0.x.46391] 
//
[0.x.46392] 
[0.x.46393] 
[0.x.46394] 
[0.x.46395] 
[0.x.46396] 
[0.x.46397] 
[0.x.46398] 
[0.x.46399] 
[0.x.46400] 
[0.x.46401] 
[0.x.46402] 
[0.x.46403] 
[0.x.46404] 
[0.x.46405] 
//
[0.x.46406] 
[0.x.46407] 
[0.x.46408] 
[0.x.46409] 
[0.x.46410] 
//
[0.x.46411] 
[0.x.46412] 
//
// 接下来，我们将在每个多重网格层面上创建所有额外需要的数据结构。这涉及到确定具有同质Dirichlet边界条件的约束，并像在活动层上一样建立运算器。
//
[0.x.46413] 
[0.x.46414] 
//
[0.x.46415] 
[0.x.46416] 
[0.x.46417] 
[0.x.46418] 
//
[0.x.46419] 
[0.x.46420] 
[0.x.46421] 
[0.x.46422] 
//
[0.x.46423] 
[0.x.46424] 
[0.x.46425] 
[0.x.46426] 
[0.x.46427] 
[0.x.46428] 
[0.x.46429] 
//
[0.x.46430] 
//
[0.x.46431] 
[0.x.46432] 
[0.x.46433] 
[0.x.46434] 
[0.x.46435] 
[0.x.46436] 
//
//根据多网格求解器类的需要，在单个算子中设置网格间算子和收集转移算子。
//
[0.x.46437] 
[0.x.46438] 
[0.x.46439] 
[0.x.46440] 
[0.x.46441] 
//
[0.x.46442] 
[0.x.46443] 
[0.x.46444] 
[0.x.46445] 
[0.x.46446] 
//
[0.x.46447] 
[0.x.46448] 
[0.x.46449] 
[0.x.46450] 
//
// 最后，继续用多网格法解决问题。
//
[0.x.46451] 
[0.x.46452] 
[0.x.46453] 
[0.x.46454] 
[0.x.46455] 
[0.x.46456] 
[0.x.46457] 
[0.x.46458] 
[0.x.46459] 
//
// [2.x.5572] 
//
// 现在，我们将最后声明这个程序的主类，它在随后的精炼函数空间上求解拉普拉斯方程。它的结构看起来很熟悉，因为它与 [2.x.5573] 和 [2.x.5574] 的主类类似。基本上只增加了两个。
//
// - 持有系统矩阵的SparseMatrix对象已经被MatrixFree公式中的LaplaceOperator类对象所取代。
//
// - 加入了一个[2.x.5575]的对象，它将帮助我们实现负载平衡。
//
[0.x.46460] 
[0.x.46461] 
[0.x.46462] 
[0.x.46463] 
[0.x.46464] 
//
[0.x.46465] 
//
[0.x.46466] 
[0.x.46467] 
[0.x.46468] 
[0.x.46469] 
[0.x.46470] 
[0.x.46471] 
[0.x.46472] 
[0.x.46473] 
//
[0.x.46474] 
//
[0.x.46475] 
//
[0.x.46476] 
[0.x.46477] 
//
[0.x.46478] 
[0.x.46479] 
[0.x.46480] 
[0.x.46481] 
//
[0.x.46482] 
[0.x.46483] 
//
[0.x.46484] 
//
[0.x.46485] 
[0.x.46486] 
[0.x.46487] 
//
[0.x.46488] 
[0.x.46489] 
//
[0.x.46490] 
[0.x.46491] 
//
[0.x.46492] 
[0.x.46493] 
[0.x.46494] 
//
// [2.x.5576] 
//[2.x.5577] 
//
// 构造函数以一个初始化器列表开始，该列表看起来与 [2.x.5578] 的列表相似。我们再次准备好ConditionalOStream对象，只允许第一个进程在控制台输出任何东西，并正确初始化计算计时器。
//
[0.x.46495] 
[0.x.46496] 
[0.x.46497] 
[0.x.46498] 
[0.x.46499] 
[0.x.46500] 
[0.x.46501] 
[0.x.46502] 
[0.x.46503] 
[0.x.46504] 
[0.x.46505] 
[0.x.46506] 
[0.x.46507] 
[0.x.46508] 
[0.x.46509] 
[0.x.46510] 
[0.x.46511] 
[0.x.46512] 
//
// 我们需要在构造函数的实际主体中为hp-functionality准备数据结构，并在参数结构的指定范围内为每个度数创建相应的对象。由于我们只处理非扭曲的矩形单元，在这种情况下，一个线性映射对象就足够了。
//
// 在参数结构中，我们为函数空间以合理的分辨率运行的层级提供范围。多网格算法需要在最粗的层次上使用线性元素。所以我们从最低的多项式度数开始，用连续的高度数填充集合，直到达到用户指定的最大值。
//
[0.x.46513] 
//
[0.x.46514] 
[0.x.46515] 
[0.x.46516] 
[0.x.46517] 
[0.x.46518] 
[0.x.46519] 
//
// 由于我们的FECollection包含的有限元比我们想用于求解的有限元近似值要多，我们想限制活动FE指数可以操作的范围。为此，FECollection类允许注册一个层次结构，在p-精简和p-粗化的情况下，分别决定后续的和前面的有限元。[2.x.5579]命名空间中的所有函数都会参考这个层次结构来确定未来的FE指数。我们将注册这样一个层次结构，它只对建议范围内的多项式程度的有限元起作用 [2.x.5580] 。
//
[0.x.46520] 
[0.x.46521] 
//
// /下一个_index= [2.x.5581] 。
[0.x.46522] 
[0.x.46523] 
[0.x.46524] 
[0.x.46525] 
[0.x.46526] 
//
// /*上一页_index= [2.x.5582] 。
[0.x.46527] 
[0.x.46528] 
[0.x.46529] 
[0.x.46530] 
[0.x.46531] 
[0.x.46532] 
//
// 我们以默认配置初始化[2.x.5583]对象，以便进行平滑度估计。
//
[0.x.46533] 
[0.x.46534] 
//
// 接下来的部分会很棘手。在执行细化的过程中，有几个hp-算法需要干扰三角形对象上的实际细化过程。我们通过将几个函数连接到[2.x.5584]信号，在实际细化过程中的不同阶段被调用，并触发所有连接的函数来做到这一点。我们需要这个功能来实现负载平衡和限制相邻单元的多项式度数。
//
// 对于前者，我们希望给每个单元分配一个权重，这个权重与它未来的有限元的自由度数成正比。该库提供了一个类[2.x.5585]，允许在细化过程中的正确位置轻松地附加单个权重，即在所有细化和粗化标志被正确设置为hp-adaptation之后，以及在即将发生的负载平衡的重新划分之前。可以注册一些函数，这些函数将以 [2.x.5586] 提供的一对参数的形式附加权重 [2.x.5587] 。我们在下文中注册了这样一个函数。每个单元在创建时将被赋予一个恒定的权重，这个值是1000（见 [2.x.5588] ）。
//
// 为了实现负载平衡，像我们使用的高效求解器应该与拥有的自由度数量成线性比例。此外，为了增加我们想要附加的权重的影响，确保单个权重将超过这个基础权重的数量级。我们相应地设置单元加权的参数。大的加权系数为[2.x.5589]，指数为[2.x.5590] 。
//
[0.x.46535] 
[0.x.46536] 
[0.x.46537] 
[0.x.46538] 
//
// 在h-adaptive应用中，我们通过限制相邻单元的细化水平的差异为1来确保2:1的网格平衡。通过下面代码片段中的第二个调用，我们将确保相邻单元的p级数也是如此：未来有限元的级数不允许相差超过指定的差值。函数[2.x.5591]可以处理这个问题，但需要与并行环境中的一个非常特殊的信号相连。问题是，我们需要知道网格的实际细化情况，以便相应地设置未来的FE指数。由于我们要求p4est神谕进行细化，我们需要确保Triangulation已经先用神谕的适应标志进行了更新。[2.x.5592]的实例化在其生命期内正是如此。因此，我们将在限制p级差之前创建这个类的对象，并将相应的lambda函数连接到信号[2.x.5593]上，该信号将在神谕被完善之后，但在三角法被完善之前被触发。此外，我们指定这个函数将被连接到信号的前面，以确保修改在连接到同一信号的任何其他函数之前进行。
//
[0.x.46539] 
[0.x.46540] 
[0.x.46541] 
[0.x.46542] 
[0.x.46543] 
[0.x.46544] 
//
//包含= [2.x.5594] min_fe_index）。)
//
[0.x.46545] 
[0.x.46546] 
[0.x.46547] 
//
// [2.x.5595] 
//
// 对于L型域，我们可以使用[2.x.5596]这个函数，如[2.x.5597]中所演示的。然而在二维的情况下，该函数只去除第一象限，而在我们的方案中我们需要去除第四象限。因此，我们将使用一个不同的函数[2.x.5598]，它给我们更多的选择来创建网格。此外，我们在制定该函数时，也会生成一个三维网格：二维L型域基本上会在正Z方向上拉长1。
//
// 我们首先假装建立一个 [2.x.5599] 我们需要提供的参数是左下角和右上角的点对象，以及基本网格在每个方向的重复次数。我们为前两个维度提供这些参数，对更高的第三维度单独处理。
//
// 为了创建一个L型域，我们需要去除多余的单元。为此，我们相应地指定[2.x.5600]。我们希望从负方向的每一个单元格中移除一个单元格，但从正的x方向移除一个。
//
// 最后，我们提供与所提供的最小网格细化水平相对应的初始细化数。此外，我们相应地设置初始活动FE指数。
//
[0.x.46548] 
[0.x.46549] 
[0.x.46550] 
[0.x.46551] 
//
[0.x.46552] 
[0.x.46553] 
[0.x.46554] 
[0.x.46555] 
[0.x.46556] 
[0.x.46557] 
[0.x.46558] 
[0.x.46559] 
[0.x.46560] 
[0.x.46561] 
[0.x.46562] 
[0.x.46563] 
[0.x.46564] 
[0.x.46565] 
[0.x.46566] 
//
[0.x.46567] 
[0.x.46568] 
//
[0.x.46569] 
[0.x.46570] 
//
[0.x.46571] 
//
[0.x.46572] 
[0.x.46573] 
[0.x.46574] 
[0.x.46575] 
[0.x.46576] 
//
// [2.x.5601] 
//
// 这个函数看起来和[2.x.5602]的函数完全一样，但是你会注意到没有系统矩阵以及围绕它的脚手架。相反，我们将在这里初始化[2.x.5603]中的MatrixFree公式。对于边界条件，我们将使用本教程前面介绍的Solution类。
//
[0.x.46577] 
[0.x.46578] 
[0.x.46579] 
[0.x.46580] 
//
[0.x.46581] 
//
[0.x.46582] 
[0.x.46583] 
//
[0.x.46584] 
[0.x.46585] 
[0.x.46586] 
[0.x.46587] 
//
[0.x.46588] 
[0.x.46589] 
[0.x.46590] 
[0.x.46591] 
[0.x.46592] 
[0.x.46593] 
//
[0.x.46594] 
[0.x.46595] 
[0.x.46596] 
[0.x.46597] 
[0.x.46598] 
[0.x.46599] 
//
// [2.x.5604] 
//
// 这是一个打印关于方程组及其划分的额外诊断的函数。除了通常的全局活动单元数和自由度外，我们还输出它们的局部等价物。为了规范输出，我们将用[2.x.5605]操作将局部数量传达给第一个进程，然后由该进程输出所有信息。本地量的输出只限于前8个进程，以避免终端的杂乱。
//
// 此外，我们想打印数值离散化中的多项式度数的频率。由于这些信息只存储在本地，我们将计算本地拥有的单元上的有限元，随后通过[2.x.5606]进行交流。
[0.x.46600] 
[0.x.46601] 
[0.x.46602] 
[0.x.46603] 
[0.x.46604] 
[0.x.46605] 
[0.x.46606] 
[0.x.46607] 
//
[0.x.46608] 
[0.x.46609] 
[0.x.46610] 
[0.x.46611] 
//
[0.x.46612] 
[0.x.46613] 
[0.x.46614] 
[0.x.46615] 
[0.x.46616] 
[0.x.46617] 
[0.x.46618] 
[0.x.46619] 
[0.x.46620] 
//
[0.x.46621] 
[0.x.46622] 
[0.x.46623] 
[0.x.46624] 
//
[0.x.46625] 
[0.x.46626] 
[0.x.46627] 
[0.x.46628] 
[0.x.46629] 
[0.x.46630] 
[0.x.46631] 
[0.x.46632] 
[0.x.46633] 
//
[0.x.46634] 
[0.x.46635] 
[0.x.46636] 
//
[0.x.46637] 
[0.x.46638] 
[0.x.46639] 
[0.x.46640] 
[0.x.46641] 
[0.x.46642] 
[0.x.46643] 
[0.x.46644] 
[0.x.46645] 
[0.x.46646] 
[0.x.46647] 
[0.x.46648] 
//
[0.x.46649] 
[0.x.46650] 
[0.x.46651] 
[0.x.46652] 
[0.x.46653] 
//
[0.x.46654] 
//
[0.x.46655] 
[0.x.46656] 
[0.x.46657] 
[0.x.46658] 
[0.x.46659] 
[0.x.46660] 
[0.x.46661] 
//
// [2.x.5607] 
//
// 围绕解决方案的脚手架与 [2.x.5608] 的类似。我们准备一个符合MatrixFree要求的向量，并收集本地相关的自由度，我们解决了方程系统。解决方法是通过前面介绍的函数进行的。
//
[0.x.46662] 
[0.x.46663] 
[0.x.46664] 
[0.x.46665] 
//
[0.x.46666] 
[0.x.46667] 
//
[0.x.46668] 
[0.x.46669] 
//
[0.x.46670] 
[0.x.46671] 
[0.x.46672] 
[0.x.46673] 
[0.x.46674] 
[0.x.46675] 
[0.x.46676] 
[0.x.46677] 
//
[0.x.46678] 
[0.x.46679] 
//
[0.x.46680] 
//
[0.x.46681] 
[0.x.46682] 
[0.x.46683] 
[0.x.46684] 
//
// [2.x.5609] 
//
// 这个函数只包含其他教程中典型的[2.x.5610]函数的一部分，在这个意义上是新的。在这里，我们将只计算与实际细化网格相适应的所有指标。我们这样做的目的是将所有的指标写到文件系统中，以便为以后储存。
//
// 由于我们处理的是一个椭圆问题，我们将再次利用KellyErrorEstimator，但有一点不同。修改底层面积分的缩放系数，使其取决于相邻元素的实际多项式程度，这对hp-adaptive应用是有利的 [2.x.5611] 。我们可以通过指定你所注意到的附加参数中的最后一个参数来做到这一点。其他的实际上只是默认的。
//
// 为了hp-adaptation的目的，我们将用教程介绍中的策略来计算平滑度估计，并使用[2.x.5612]中的实现 在参数结构中，我们将最小多项式度数设置为2，因为似乎平滑度估计算法在处理线性元素时有问题。
//
[0.x.46685] 
[0.x.46686] 
[0.x.46687] 
[0.x.46688] 
//
[0.x.46689] 
[0.x.46690] 
[0.x.46691] 
[0.x.46692] 
[0.x.46693] 
[0.x.46694] 
[0.x.46695] 
//
// /component_mask= [2.x.5613] ComponentMask(), // /coefficients= [2.x.5614] nullptr, [2.x.5615] 。
//[2.x.5616] 
//[2.x.5617] /*策略= [2.x.5618] 。
[0.x.46696] 
//
[0.x.46697] 
[0.x.46698] 
[0.x.46699] 
[0.x.46700] 
[0.x.46701] 
[0.x.46702] 
//
// [2.x.5619] 
//
// 有了之前计算出的指标，我们最终将标记所有单元进行适应，同时在这个函数中执行细化。和以前的教程一样，我们将使用 "固定数字 "策略，但现在是针对hp-adaptation。
//
[0.x.46703] 
[0.x.46704] 
[0.x.46705] 
[0.x.46706] 
//
// 首先，我们将根据每个单元的误差估计值来设置细化和粗化标志。这里没有什么新东西。
//
// 我们将使用在其他deal.II教程中阐述过的一般细化和粗化比例：使用固定数字策略，我们将标记所有单元中的30%进行细化，3%进行粗化，如参数结构中提供的。
//
[0.x.46707] 
[0.x.46708] 
[0.x.46709] 
[0.x.46710] 
[0.x.46711] 
//
// 接下来，我们将对hp-adaptation进行所有调整。我们想细化和粗化那些在上一步中被标记的单元，但需要决定是通过调整网格分辨率还是调整多项式程度来实现。
//
// 下一个函数调用根据之前计算的平滑度指标设置未来的FE指数，作为p-adaptation指标。这些指数将只设置在那些分配了细化或粗化标志的单元上。
//
// 对于p-adaptation分数，我们将采取一个有根据的猜测。由于我们只期望在我们的方案中出现一个单一的奇点，即在域的原点，而在其他任何地方都有一个平滑的解决方案，所以我们希望强烈倾向于使用p-adaptation而不是h-adaptation。这反映在我们对p-精简和p-粗化都选择了90%的分数。
//
[0.x.46712] 
[0.x.46713] 
[0.x.46714] 
[0.x.46715] 
//
// 在这个阶段，我们既有未来的FE指数，也有经典的细化和粗化标志，后者将由[2.x.5620]解释为h-适应性。我们希望只对细胞施加一种适应，这就是下一个函数将为我们解决的问题。简而言之，在分配有两种类型指标的单元格上，我们将倾向于p-适应的那一种，并删除h-适应的那一种。
//
[0.x.46716] 
//
// 设置完所有指标后，我们将删除那些超过参数结构中提供的水平范围的指定限制的指标。由于提供的有限元数量有限，这种限制自然会出现在p-adaptation中。此外，我们在构造函数中为p-adaptation注册了一个自定义层次结构。现在，我们需要像 [2.x.5621] 中那样，在h-adaptive的上下文中手动完成。
//
// 我们将遍历指定的最小和最大层次上的所有单元格，并删除相应的标志。作为一种选择，我们也可以通过相应地设置未来的FE指数来标记这些单元的p适应性，而不是简单地清除细化和粗化的标志。
//
[0.x.46717] 
[0.x.46718] 
[0.x.46719] 
//
[0.x.46720] 
[0.x.46721] 
[0.x.46722] 
[0.x.46723] 
//
[0.x.46724] 
[0.x.46725] 
[0.x.46726] 
//
// 最后，我们就剩下执行粗化和细化了。在这里，不仅网格会被更新，而且所有以前的未来FE指数也会变得活跃。
//
// 记得我们在构造函数中为三角化信号附加了函数，将在这个函数调用中被触发。所以会有更多的事情发生：加权重新分区将被执行以确保负载平衡，以及我们将限制相邻单元之间的p级差。
//
[0.x.46727] 
[0.x.46728] 
//
// [2.x.5622] 
//
// 在并行应用中向文件系统写入结果的工作方式与 [2.x.5623] 中完全相同。除了我们在整个教程中准备的数据容器外，我们还想写出网格上每个有限元的多项式程度，以及每个单元所属的子域。我们在这个函数的范围内为此准备必要的容器。
//
[0.x.46729] 
[0.x.46730] 
[0.x.46731] 
[0.x.46732] 
//
[0.x.46733] 
[0.x.46734] 
[0.x.46735] 
[0.x.46736] 
//
[0.x.46737] 
[0.x.46738] 
[0.x.46739] 
//
[0.x.46740] 
[0.x.46741] 
[0.x.46742] 
[0.x.46743] 
[0.x.46744] 
[0.x.46745] 
[0.x.46746] 
[0.x.46747] 
//
[0.x.46748] 
[0.x.46749] 
[0.x.46750] 
//
// [2.x.5624] 
//
// 实际的运行函数看起来又和 [2.x.5625] 非常相似。唯一增加的是实际循环之前的括号内的部分。在这里，我们将预先计算Legendre变换矩阵。一般来说，每当需要某个矩阵时，这些矩阵将通过懒惰分配的方式进行实时计算。然而，出于计时的目的，我们希望在实际的时间测量开始之前，一次性地计算它们。因此，我们将把它们的计算指定为自己的范围。
//
[0.x.46751] 
[0.x.46752] 
[0.x.46753] 
[0.x.46754] 
[0.x.46755] 
[0.x.46756] 
//
[0.x.46757] 
[0.x.46758] 
[0.x.46759] 
[0.x.46760] 
[0.x.46761] 
//
[0.x.46762] 
[0.x.46763] 
[0.x.46764] 
//
[0.x.46765] 
[0.x.46766] 
[0.x.46767] 
[0.x.46768] 
//
[0.x.46769] 
//
[0.x.46770] 
//
[0.x.46771] 
//
[0.x.46772] 
//
[0.x.46773] 
[0.x.46774] 
//
[0.x.46775] 
[0.x.46776] 
//
[0.x.46777] 
[0.x.46778] 
[0.x.46779] 
[0.x.46780] 
//
// [2.x.5626] 
//
// 最后一个函数是[2.x.5627]函数，它将最终创建并运行一个LaplaceOperator实例。它的结构与其他大多数教程程序相似。
//
[0.x.46781] 
[0.x.46782] 
[0.x.46783] 
[0.x.46784] 
[0.x.46785] 
[0.x.46786] 
//
[0.x.46787] 
//
[0.x.46788] 
[0.x.46789] 
[0.x.46790] 
[0.x.46791] 
[0.x.46792] 
[0.x.46793] 
[0.x.46794] 
[0.x.46795] 
[0.x.46796] 
[0.x.46797] 
[0.x.46798] 
[0.x.46799] 
[0.x.46800] 
[0.x.46801] 
[0.x.46802] 
//
[0.x.46803] 
[0.x.46804] 
[0.x.46805] 
[0.x.46806] 
[0.x.46807] 
[0.x.46808] 
[0.x.46809] 
[0.x.46810] 
[0.x.46811] 
[0.x.46812] 
[0.x.46813] 
[0.x.46814] 
[0.x.46815] 
[0.x.46816] 
//
[0.x.46817] 
[0.x.46818] 
[0.x.46819] 
[0.x.46820] 
[0.x.46821] 
[0.x.46822] 
[0.x.46823] 
[0.x.46824] 
[0.x.46825] 
[0.x.46826] 
[0.x.46827] 
[0.x.46828] 
[0.x.46829] 
[0.x.46830] 
[0.x.46831] 
[0.x.46832] 
//
[0.x.46833] 
[0.x.46834] 
[0.x.46835] 
//[2.x.5628] 
//
//包括与[2.x.5629]中相同的内容。
//
[0.x.46836] 
[0.x.46837] 
[0.x.46838] 
[0.x.46839] 
[0.x.46840] 
[0.x.46841] 
[0.x.46842] 
//
[0.x.46843] 
//
[0.x.46844] 
//
 
[0.x.46846] 
//
[0.x.46847] 
[0.x.46848] 
[0.x.46849] 
[0.x.46850] 
//
[0.x.46851] 
[0.x.46852] 
//
[0.x.46853] 
[0.x.46854] 
[0.x.46855] 
//
[0.x.46856] 
//
[0.x.46857] 
[0.x.46858] 
[0.x.46859] 
//
// 一个新的包含，用于根据其边界ID对单元格进行分类。
//
[0.x.46860] 
//
[0.x.46861] 
[0.x.46862] 
[0.x.46863] 
//
// 与 [2.x.5630] 中的输入参数相同。
//
[0.x.46864] 
[0.x.46865] 
[0.x.46866] 
[0.x.46867] 
[0.x.46868] 
//
// 这个参数指定共享内存组的大小。目前，只有1和[2.x.5631]的值是可能的，这导致了内存功能可以被关闭，或者所有访问同一共享内存域的进程被分组。
//
[0.x.46869] 
//
[0.x.46870] 
//
// 这里，数据结构的类型被选择为矢量化。在默认情况下，使用VectorizedArray<Number>，也就是说，在给定的硬件上使用最高的指令集架构扩展，具有最大数量的向量通道。然而，人们可能会减少填充通道的数量，例如，通过编写[2.x.5632]，只处理4个单元。
//
[0.x.46871] 
//
// 以下参数没有改变。
//
[0.x.46872] 
[0.x.46873] 
[0.x.46874] 
//
[0.x.46875] 
//
// 指定对性能研究有用的最大时间步骤数。
//
[0.x.46876] 
//
// 与Runge-Kutta有关的函数从[2.x.5633]复制过来，并稍作修改，以尽量减少全局矢量访问。
//
[0.x.46877] 
[0.x.46878] 
[0.x.46879] 
[0.x.46880] 
[0.x.46881] 
[0.x.46882] 
[0.x.46883] 
[0.x.46884] 
//
[0.x.46885] 
[0.x.46886] 
[0.x.46887] 
[0.x.46888] 
[0.x.46889] 
[0.x.46890] 
[0.x.46891] 
[0.x.46892] 
[0.x.46893] 
[0.x.46894] 
[0.x.46895] 
[0.x.46896] 
[0.x.46897] 
[0.x.46898] 
[0.x.46899] 
[0.x.46900] 
[0.x.46901] 
[0.x.46902] 
[0.x.46903] 
[0.x.46904] 
//
[0.x.46905] 
[0.x.46906] 
[0.x.46907] 
[0.x.46908] 
[0.x.46909] 
[0.x.46910] 
[0.x.46911] 
[0.x.46912] 
[0.x.46913] 
//
[0.x.46914] 
[0.x.46915] 
[0.x.46916] 
[0.x.46917] 
//
[0.x.46918] 
[0.x.46919] 
[0.x.46920] 
[0.x.46921] 
[0.x.46922] 
[0.x.46923] 
[0.x.46924] 
[0.x.46925] 
[0.x.46926] 
//
[0.x.46927] 
//
[0.x.46928] 
[0.x.46929] 
[0.x.46930] 
[0.x.46931] 
//
[0.x.46932] 
[0.x.46933] 
[0.x.46934] 
[0.x.46935] 
[0.x.46936] 
[0.x.46937] 
[0.x.46938] 
[0.x.46939] 
[0.x.46940] 
//
[0.x.46941] 
[0.x.46942] 
[0.x.46943] 
[0.x.46944] 
//
[0.x.46945] 
[0.x.46946] 
[0.x.46947] 
[0.x.46948] 
//
// 来自 [2.x.5634] 的欧拉特定实用函数。
//
[0.x.46949] 
[0.x.46950] 
[0.x.46951] 
[0.x.46952] 
[0.x.46953] 
[0.x.46954] 
//
[0.x.46955] 
[0.x.46956] 
[0.x.46957] 
[0.x.46958] 
[0.x.46959] 
[0.x.46960] 
[0.x.46961] 
//
[0.x.46962] 
[0.x.46963] 
[0.x.46964] 
//
[0.x.46965] 
[0.x.46966] 
[0.x.46967] 
[0.x.46968] 
[0.x.46969] 
//
[0.x.46970] 
[0.x.46971] 
[0.x.46972] 
[0.x.46973] 
[0.x.46974] 
[0.x.46975] 
//
[0.x.46976] 
[0.x.46977] 
[0.x.46978] 
[0.x.46979] 
[0.x.46980] 
[0.x.46981] 
[0.x.46982] 
[0.x.46983] 
[0.x.46984] 
[0.x.46985] 
[0.x.46986] 
//
[0.x.46987] 
[0.x.46988] 
[0.x.46989] 
[0.x.46990] 
[0.x.46991] 
[0.x.46992] 
[0.x.46993] 
[0.x.46994] 
[0.x.46995] 
[0.x.46996] 
[0.x.46997] 
[0.x.46998] 
[0.x.46999] 
[0.x.47000] 
//
[0.x.47001] 
[0.x.47002] 
[0.x.47003] 
[0.x.47004] 
[0.x.47005] 
[0.x.47006] 
[0.x.47007] 
[0.x.47008] 
[0.x.47009] 
[0.x.47010] 
[0.x.47011] 
//
[0.x.47012] 
[0.x.47013] 
[0.x.47014] 
[0.x.47015] 
[0.x.47016] 
//
[0.x.47017] 
[0.x.47018] 
[0.x.47019] 
[0.x.47020] 
[0.x.47021] 
[0.x.47022] 
//
[0.x.47023] 
[0.x.47024] 
[0.x.47025] 
//
[0.x.47026] 
[0.x.47027] 
//
[0.x.47028] 
[0.x.47029] 
[0.x.47030] 
[0.x.47031] 
[0.x.47032] 
[0.x.47033] 
[0.x.47034] 
//
[0.x.47035] 
[0.x.47036] 
[0.x.47037] 
//
[0.x.47038] 
[0.x.47039] 
//
[0.x.47040] 
[0.x.47041] 
[0.x.47042] 
[0.x.47043] 
[0.x.47044] 
[0.x.47045] 
[0.x.47046] 
[0.x.47047] 
//
[0.x.47048] 
[0.x.47049] 
[0.x.47050] 
[0.x.47051] 
[0.x.47052] 
[0.x.47053] 
[0.x.47054] 
[0.x.47055] 
[0.x.47056] 
[0.x.47057] 
//
[0.x.47058] 
[0.x.47059] 
//
[0.x.47060] 
[0.x.47061] 
[0.x.47062] 
[0.x.47063] 
[0.x.47064] 
[0.x.47065] 
[0.x.47066] 
[0.x.47067] 
[0.x.47068] 
[0.x.47069] 
[0.x.47070] 
//
[0.x.47071] 
[0.x.47072] 
[0.x.47073] 
[0.x.47074] 
[0.x.47075] 
[0.x.47076] 
[0.x.47077] 
[0.x.47078] 
[0.x.47079] 
//
[0.x.47080] 
[0.x.47081] 
//
[0.x.47082] 
[0.x.47083] 
//
[0.x.47084] 
[0.x.47085] 
[0.x.47086] 
[0.x.47087] 
[0.x.47088] 
[0.x.47089] 
[0.x.47090] 
[0.x.47091] 
[0.x.47092] 
//
[0.x.47093] 
[0.x.47094] 
[0.x.47095] 
//
[0.x.47096] 
[0.x.47097] 
[0.x.47098] 
[0.x.47099] 
[0.x.47100] 
[0.x.47101] 
[0.x.47102] 
[0.x.47103] 
[0.x.47104] 
[0.x.47105] 
[0.x.47106] 
[0.x.47107] 
//
[0.x.47108] 
[0.x.47109] 
[0.x.47110] 
[0.x.47111] 
//
[0.x.47112] 
[0.x.47113] 
[0.x.47114] 
[0.x.47115] 
[0.x.47116] 
[0.x.47117] 
[0.x.47118] 
//
// 来自 [2.x.5635] 的通用实用函数。
//
[0.x.47119] 
[0.x.47120] 
[0.x.47121] 
[0.x.47122] 
[0.x.47123] 
[0.x.47124] 
[0.x.47125] 
[0.x.47126] 
[0.x.47127] 
[0.x.47128] 
[0.x.47129] 
[0.x.47130] 
[0.x.47131] 
[0.x.47132] 
[0.x.47133] 
[0.x.47134] 
//
[0.x.47135] 
[0.x.47136] 
[0.x.47137] 
[0.x.47138] 
[0.x.47139] 
[0.x.47140] 
[0.x.47141] 
[0.x.47142] 
[0.x.47143] 
[0.x.47144] 
[0.x.47145] 
[0.x.47146] 
[0.x.47147] 
[0.x.47148] 
[0.x.47149] 
[0.x.47150] 
[0.x.47151] 
//[2.x.5636] 
//
//来自[2.x.5637]的欧拉算子，有一些变化，详见下文。
//
[0.x.47152] 
[0.x.47153] 
[0.x.47154] 
[0.x.47155] 
[0.x.47156] 
//
[0.x.47157] 
//
[0.x.47158] 
//
[0.x.47159] 
[0.x.47160] 
//
[0.x.47161] 
[0.x.47162] 
//
[0.x.47163] 
[0.x.47164] 
[0.x.47165] 
//
[0.x.47166] 
//
[0.x.47167] 
//
[0.x.47168] 
[0.x.47169] 
[0.x.47170] 
[0.x.47171] 
[0.x.47172] 
[0.x.47173] 
[0.x.47174] 
[0.x.47175] 
//
[0.x.47176] 
[0.x.47177] 
//
[0.x.47178] 
[0.x.47179] 
[0.x.47180] 
//
[0.x.47181] 
[0.x.47182] 
//
[0.x.47183] 
[0.x.47184] 
//
[0.x.47185] 
//
// 包含子通信器的SubCommunicatorWrapper实例，我们需要将其传递给[2.x.5638]，以便能够利用MPI-3.0的共享内存功能。
//
[0.x.47186] 
//
[0.x.47187] 
//
[0.x.47188] 
//
[0.x.47189] 
[0.x.47190] 
[0.x.47191] 
[0.x.47192] 
[0.x.47193] 
[0.x.47194] 
[0.x.47195] 
//
// 新的构造函数，可以创建一个子通信器。用户可以通过全局参数group_size指定子通信器的大小。如果大小被设置为-1，一个共享内存域的所有MPI进程将被合并为一个组。指定的大小对于MatrixFree的共享内存能力的好处是决定性的，因此，设置为[2.x.5639]是一个合理的选择。通过设置[2.x.5640]，用户明确地禁用了MatrixFree的MPI-3.0共享内存功能，而完全依赖MPI-2.0功能，如[2.x.5641]和[2.x.5642] 。
//
[0.x.47196] 
[0.x.47197] 
[0.x.47198] 
[0.x.47199] 
[0.x.47200] 
[0.x.47201] 
[0.x.47202] 
[0.x.47203] 
[0.x.47204] 
[0.x.47205] 
[0.x.47206] 
[0.x.47207] 
//
[0.x.47208] 
[0.x.47209] 
[0.x.47210] 
[0.x.47211] 
[0.x.47212] 
[0.x.47213] 
[0.x.47214] 
[0.x.47215] 
[0.x.47216] 
[0.x.47217] 
[0.x.47218] 
[0.x.47219] 
[0.x.47220] 
[0.x.47221] 
[0.x.47222] 
[0.x.47223] 
//
// 新增负责释放子通信器的析构器。
//
[0.x.47224] 
[0.x.47225] 
[0.x.47226] 
[0.x.47227] 
[0.x.47228] 
[0.x.47229] 
[0.x.47230] 
[0.x.47231] 
//
// 修改了 reinit() 函数，以设置 MatrixFree 中的内部数据结构，使其可以被以单元为中心的循环使用，并使用 MPI-3.0 的共享内存功能。
//
[0.x.47232] 
[0.x.47233] 
[0.x.47234] 
[0.x.47235] 
[0.x.47236] 
[0.x.47237] 
[0.x.47238] 
[0.x.47239] 
[0.x.47240] 
[0.x.47241] 
//
[0.x.47242] 
[0.x.47243] 
[0.x.47244] 
[0.x.47245] 
[0.x.47246] 
[0.x.47247] 
[0.x.47248] 
[0.x.47249] 
[0.x.47250] 
[0.x.47251] 
[0.x.47252] 
[0.x.47253] 
[0.x.47254] 
//
// 对单元格进行分类，使所有车道的每个面都有相同的边界ID。这在严格意义上是没有必要的，但是，可以在[2.x.5643]中写出更简单的代码，不需要屏蔽，因为可以保证所有分组的单元格（在一个VectorizedArray中）也要对面进行完全相同的操作。
//
[0.x.47255] 
[0.x.47256] 
//
// 通过提供子通信器在MatrixFree中启用MPI-3.0共享内存功能。
//
[0.x.47257] 
//
[0.x.47258] 
[0.x.47259] 
[0.x.47260] 
//
// 下面这个函数是做Runge--Kutta更新的整个阶段，并且是
//
// - 旁边的设置稍作修改
//
与[2.x.5644]相比，本教程的核心内容是// --。
//
// 与[2.x.5645]相比，我们没有依次执行平流步骤（使用[2.x.5646]和反质量矩阵步骤（使用[2.x.5647]），而是在[2.x.5648]中一次性评估所有内容。 这个函数期望在每个本地拥有的（宏）单元上执行一个单独的函数作为参数，这样我们就需要在该单元的所有面上循环，自行执行需要的积分步骤。
//
// 以下函数在很大程度上包含了[2.x.5649]中的以下函数的副本，所以这里跳过了与弱形式的评估有关的评论。
//
// - [2.x.5650] 
//
// - [2.x.5651] 
//
// - [2.x.5652] 
//
// - [2.x.5653] 
[0.x.47261] 
[0.x.47262] 
[0.x.47263] 
[0.x.47264] 
[0.x.47265] 
[0.x.47266] 
[0.x.47267] 
[0.x.47268] 
[0.x.47269] 
[0.x.47270] 
[0.x.47271] 
[0.x.47272] 
[0.x.47273] 
[0.x.47274] 
//
// 通过调用[2.x.5654]并提供一个包含单元、面和边界-面积分效果的lambda来运行以单元为中心的循环。
//
[0.x.47275] 
[0.x.47276] 
[0.x.47277] 
[0.x.47278] 
[0.x.47279] 
[0.x.47280] 
[0.x.47281] 
[0.x.47282] 
[0.x.47283] 
[0.x.47284] 
[0.x.47285] 
[0.x.47286] 
[0.x.47287] 
[0.x.47288] 
[0.x.47289] 
//
[0.x.47290] 
[0.x.47291] 
[0.x.47292] 
[0.x.47293] 
//
[0.x.47294] 
[0.x.47295] 
[0.x.47296] 
//
[0.x.47297] 
[0.x.47298] 
[0.x.47299] 
[0.x.47300] 
//
[0.x.47301] 
[0.x.47302] 
[0.x.47303] 
[0.x.47304] 
[0.x.47305] 
[0.x.47306] 
[0.x.47307] 
[0.x.47308] 
[0.x.47309] 
//
[0.x.47310] 
[0.x.47311] 
//
// 在所有单元格批次上循环。
//
[0.x.47312] 
[0.x.47313] 
[0.x.47314] 
[0.x.47315] 
//
[0.x.47316] 
[0.x.47317] 
//
// 从全局矢量中读取数值并计算正交点的数值。
//
[0.x.47318] 
[0.x.47319] 
[0.x.47320] 
//
[0.x.47321] 
[0.x.47322] 
[0.x.47323] 
[0.x.47324] 
//
[0.x.47325] 
[0.x.47326] 
[0.x.47327] 
[0.x.47328] 
[0.x.47329] 
[0.x.47330] 
//
// 缓冲正交点的计算值，因为这些值在下一步被[2.x.5655]所覆盖，但是，在后面的面积分中需要。
//
[0.x.47331] 
[0.x.47332] 
//
// 在单元格正交点上应用单元格积分。也可参见来自 [2.x.5657] 的函数 [2.x.5656] 。
//
[0.x.47333] 
[0.x.47334] 
[0.x.47335] 
[0.x.47336] 
[0.x.47337] 
[0.x.47338] 
[0.x.47339] 
[0.x.47340] 
[0.x.47341] 
[0.x.47342] 
[0.x.47343] 
//
[0.x.47344] 
[0.x.47345] 
[0.x.47346] 
[0.x.47347] 
[0.x.47348] 
//
[0.x.47349] 
[0.x.47350] 
[0.x.47351] 
//
// 用正交点中的测试函数的梯度进行测试。我们跳过插值回到元素的支持点，因为我们首先收集单元格正交点的所有贡献，只在最后一步进行插值。
//
[0.x.47352] 
[0.x.47353] 
[0.x.47354] 
//
[0.x.47355] 
[0.x.47356] 
[0.x.47357] 
[0.x.47358] 
[0.x.47359] 
[0.x.47360] 
[0.x.47361] 
[0.x.47362] 
[0.x.47363] 
[0.x.47364] 
[0.x.47365] 
[0.x.47366] 
[0.x.47367] 
[0.x.47368] 
//
[0.x.47369] 
[0.x.47370] 
[0.x.47371] 
[0.x.47372] 
//
// 在当前单元格的所有面上进行循环。
//
[0.x.47373] 
[0.x.47374] 
[0.x.47375] 
[0.x.47376] 
//
// 确定当前面的边界ID。由于我们在设置MatrixFree时，保证了所有填充的车道都有相同的边界ID，我们可以选择第一个车道的边界ID。
//
[0.x.47377] 
[0.x.47378] 
//
[0.x.47379] 
[0.x.47380] 
[0.x.47381] 
[0.x.47382] 
[0.x.47383] 
//
[0.x.47384] 
//
[0.x.47385] 
//
// 通过简单的一维插值，将单元格正交点的值插到当前面的正交点上。
//
[0.x.47386] 
[0.x.47387] 
[0.x.47388] 
[0.x.47389] 
[0.x.47390] 
[0.x.47391] 
[0.x.47392] 
[0.x.47393] 
[0.x.47394] 
[0.x.47395] 
//
// 检查该面是内部面还是边界面，并根据这一信息选择不同的代码路径。
//
[0.x.47396] 
[0.x.47397] 
//
// 处理和内部面。以下几行代码是对[2.x.5659]中[2.x.5658]函数的复制。
//
[0.x.47398] 
[0.x.47399] 
//
[0.x.47400] 
[0.x.47401] 
[0.x.47402] 
[0.x.47403] 
[0.x.47404] 
[0.x.47405] 
[0.x.47406] 
[0.x.47407] 
[0.x.47408] 
[0.x.47409] 
[0.x.47410] 
//
// 处理一个边界面。下面这几行代码是对[2.x.5661]中[2.x.5660]函数的复制。
//
[0.x.47411] 
[0.x.47412] 
[0.x.47413] 
[0.x.47414] 
//
[0.x.47415] 
[0.x.47416] 
[0.x.47417] 
//
[0.x.47418] 
//
[0.x.47419] 
//
[0.x.47420] 
[0.x.47421] 
[0.x.47422] 
[0.x.47423] 
[0.x.47424] 
[0.x.47425] 
[0.x.47426] 
[0.x.47427] 
[0.x.47428] 
[0.x.47429] 
[0.x.47430] 
[0.x.47431] 
[0.x.47432] 
[0.x.47433] 
[0.x.47434] 
[0.x.47435] 
[0.x.47436] 
[0.x.47437] 
[0.x.47438] 
[0.x.47439] 
[0.x.47440] 
[0.x.47441] 
[0.x.47442] 
[0.x.47443] 
[0.x.47444] 
[0.x.47445] 
[0.x.47446] 
[0.x.47447] 
[0.x.47448] 
[0.x.47449] 
[0.x.47450] 
[0.x.47451] 
[0.x.47452] 
//
[0.x.47453] 
//
[0.x.47454] 
[0.x.47455] 
[0.x.47456] 
[0.x.47457] 
[0.x.47458] 
[0.x.47459] 
[0.x.47460] 
[0.x.47461] 
[0.x.47462] 
//
[0.x.47463] 
[0.x.47464] 
[0.x.47465] 
//
// 通过正交评估与单元相关的局部积分，并通过简单的一维插值加入到单元贡献中。
//
[0.x.47466] 
[0.x.47467] 
[0.x.47468] 
[0.x.47469] 
[0.x.47470] 
[0.x.47471] 
[0.x.47472] 
[0.x.47473] 
[0.x.47474] 
[0.x.47475] 
[0.x.47476] 
//
//在单元格正交点中应用反质量矩阵。也请参见来自 [2.x.5662] 的函数 [2.x.5663] 。
//
[0.x.47477] 
[0.x.47478] 
[0.x.47479] 
[0.x.47480] 
[0.x.47481] 
[0.x.47482] 
[0.x.47483] 
//
// 将数值从配位空间转换到原始高斯-洛巴托空间。
//
[0.x.47484] 
[0.x.47485] 
[0.x.47486] 
[0.x.47487] 
[0.x.47488] 
[0.x.47489] 
[0.x.47490] 
[0.x.47491] 
[0.x.47492] 
[0.x.47493] 
[0.x.47494] 
[0.x.47495] 
[0.x.47496] 
[0.x.47497] 
//
// 执行Runge-Kutta更新并将结果写回全局向量。
//
[0.x.47498] 
[0.x.47499] 
[0.x.47500] 
[0.x.47501] 
[0.x.47502] 
[0.x.47503] 
[0.x.47504] 
[0.x.47505] 
[0.x.47506] 
[0.x.47507] 
//
[0.x.47508] 
[0.x.47509] 
[0.x.47510] 
//
[0.x.47511] 
[0.x.47512] 
//
[0.x.47513] 
[0.x.47514] 
[0.x.47515] 
[0.x.47516] 
[0.x.47517] 
[0.x.47518] 
[0.x.47519] 
[0.x.47520] 
[0.x.47521] 
[0.x.47522] 
[0.x.47523] 
[0.x.47524] 
//
// 从这里开始，[2.x.5664]的代码没有改变。
//
[0.x.47525] 
[0.x.47526] 
[0.x.47527] 
[0.x.47528] 
[0.x.47529] 
[0.x.47530] 
//
[0.x.47531] 
[0.x.47532] 
[0.x.47533] 
[0.x.47534] 
[0.x.47535] 
[0.x.47536] 
[0.x.47537] 
[0.x.47538] 
[0.x.47539] 
[0.x.47540] 
[0.x.47541] 
[0.x.47542] 
[0.x.47543] 
[0.x.47544] 
//
[0.x.47545] 
[0.x.47546] 
//
[0.x.47547] 
[0.x.47548] 
[0.x.47549] 
[0.x.47550] 
[0.x.47551] 
[0.x.47552] 
[0.x.47553] 
[0.x.47554] 
[0.x.47555] 
[0.x.47556] 
[0.x.47557] 
[0.x.47558] 
[0.x.47559] 
[0.x.47560] 
//
[0.x.47561] 
[0.x.47562] 
//
[0.x.47563] 
[0.x.47564] 
[0.x.47565] 
[0.x.47566] 
[0.x.47567] 
[0.x.47568] 
[0.x.47569] 
[0.x.47570] 
[0.x.47571] 
[0.x.47572] 
[0.x.47573] 
[0.x.47574] 
//
[0.x.47575] 
[0.x.47576] 
//
[0.x.47577] 
[0.x.47578] 
[0.x.47579] 
[0.x.47580] 
[0.x.47581] 
//
[0.x.47582] 
[0.x.47583] 
//
[0.x.47584] 
[0.x.47585] 
[0.x.47586] 
[0.x.47587] 
[0.x.47588] 
[0.x.47589] 
[0.x.47590] 
[0.x.47591] 
[0.x.47592] 
[0.x.47593] 
[0.x.47594] 
[0.x.47595] 
[0.x.47596] 
[0.x.47597] 
[0.x.47598] 
[0.x.47599] 
[0.x.47600] 
[0.x.47601] 
[0.x.47602] 
[0.x.47603] 
[0.x.47604] 
[0.x.47605] 
[0.x.47606] 
[0.x.47607] 
[0.x.47608] 
[0.x.47609] 
[0.x.47610] 
//
[0.x.47611] 
[0.x.47612] 
[0.x.47613] 
[0.x.47614] 
[0.x.47615] 
[0.x.47616] 
[0.x.47617] 
[0.x.47618] 
[0.x.47619] 
//
[0.x.47620] 
[0.x.47621] 
[0.x.47622] 
[0.x.47623] 
[0.x.47624] 
[0.x.47625] 
[0.x.47626] 
[0.x.47627] 
[0.x.47628] 
[0.x.47629] 
[0.x.47630] 
//
[0.x.47631] 
[0.x.47632] 
[0.x.47633] 
[0.x.47634] 
[0.x.47635] 
[0.x.47636] 
[0.x.47637] 
[0.x.47638] 
[0.x.47639] 
[0.x.47640] 
//
[0.x.47641] 
//
[0.x.47642] 
[0.x.47643] 
[0.x.47644] 
//
[0.x.47645] 
[0.x.47646] 
//
[0.x.47647] 
[0.x.47648] 
[0.x.47649] 
[0.x.47650] 
[0.x.47651] 
[0.x.47652] 
[0.x.47653] 
[0.x.47654] 
//
[0.x.47655] 
[0.x.47656] 
[0.x.47657] 
[0.x.47658] 
[0.x.47659] 
[0.x.47660] 
[0.x.47661] 
[0.x.47662] 
[0.x.47663] 
[0.x.47664] 
//
[0.x.47665] 
[0.x.47666] 
[0.x.47667] 
[0.x.47668] 
[0.x.47669] 
[0.x.47670] 
//
[0.x.47671] 
[0.x.47672] 
//
[0.x.47673] 
[0.x.47674] 
[0.x.47675] 
[0.x.47676] 
[0.x.47677] 
[0.x.47678] 
[0.x.47679] 
[0.x.47680] 
[0.x.47681] 
[0.x.47682] 
[0.x.47683] 
[0.x.47684] 
[0.x.47685] 
[0.x.47686] 
[0.x.47687] 
[0.x.47688] 
[0.x.47689] 
[0.x.47690] 
[0.x.47691] 
[0.x.47692] 
//
[0.x.47693] 
[0.x.47694] 
[0.x.47695] 
[0.x.47696] 
[0.x.47697] 
//
[0.x.47698] 
//
[0.x.47699] 
[0.x.47700] 
//
 
[0.x.47702] 
[0.x.47703] 
[0.x.47704] 
[0.x.47705] 
//
[0.x.47706] 
//
[0.x.47707] 
[0.x.47708] 
//
[0.x.47709] 
//
[0.x.47710] 
//
 
//
[0.x.47712] 
[0.x.47713] 
[0.x.47714] 
[0.x.47715] 
[0.x.47716] 
//
[0.x.47717] 
[0.x.47718] 
[0.x.47719] 
//
[0.x.47720] 
//
[0.x.47721] 
//
[0.x.47722] 
//
[0.x.47723] 
[0.x.47724] 
[0.x.47725] 
[0.x.47726] 
//
[0.x.47727] 
[0.x.47728] 
[0.x.47729] 
//
[0.x.47730] 
//
[0.x.47731] 
[0.x.47732] 
[0.x.47733] 
//
[0.x.47734] 
//
[0.x.47735] 
[0.x.47736] 
[0.x.47737] 
[0.x.47738] 
//
[0.x.47739] 
[0.x.47740] 
[0.x.47741] 
[0.x.47742] 
//
[0.x.47743] 
[0.x.47744] 
[0.x.47745] 
[0.x.47746] 
[0.x.47747] 
[0.x.47748] 
//
[0.x.47749] 
[0.x.47750] 
[0.x.47751] 
//
[0.x.47752] 
[0.x.47753] 
[0.x.47754] 
[0.x.47755] 
[0.x.47756] 
[0.x.47757] 
//
[0.x.47758] 
[0.x.47759] 
[0.x.47760] 
[0.x.47761] 
[0.x.47762] 
//
[0.x.47763] 
[0.x.47764] 
[0.x.47765] 
//
[0.x.47766] 
[0.x.47767] 
[0.x.47768] 
[0.x.47769] 
//
[0.x.47770] 
[0.x.47771] 
[0.x.47772] 
[0.x.47773] 
[0.x.47774] 
//
[0.x.47775] 
[0.x.47776] 
[0.x.47777] 
[0.x.47778] 
[0.x.47779] 
[0.x.47780] 
[0.x.47781] 
[0.x.47782] 
//
[0.x.47783] 
[0.x.47784] 
//
[0.x.47785] 
[0.x.47786] 
//
[0.x.47787] 
[0.x.47788] 
[0.x.47789] 
[0.x.47790] 
[0.x.47791] 
[0.x.47792] 
[0.x.47793] 
[0.x.47794] 
[0.x.47795] 
[0.x.47796] 
[0.x.47797] 
//
[0.x.47798] 
[0.x.47799] 
[0.x.47800] 
//
[0.x.47801] 
[0.x.47802] 
//
[0.x.47803] 
[0.x.47804] 
[0.x.47805] 
[0.x.47806] 
[0.x.47807] 
[0.x.47808] 
[0.x.47809] 
[0.x.47810] 
//
[0.x.47811] 
[0.x.47812] 
[0.x.47813] 
[0.x.47814] 
[0.x.47815] 
[0.x.47816] 
[0.x.47817] 
[0.x.47818] 
[0.x.47819] 
[0.x.47820] 
[0.x.47821] 
[0.x.47822] 
[0.x.47823] 
[0.x.47824] 
//
[0.x.47825] 
[0.x.47826] 
[0.x.47827] 
[0.x.47828] 
[0.x.47829] 
[0.x.47830] 
[0.x.47831] 
[0.x.47832] 
[0.x.47833] 
[0.x.47834] 
//
[0.x.47835] 
[0.x.47836] 
[0.x.47837] 
[0.x.47838] 
//
[0.x.47839] 
[0.x.47840] 
[0.x.47841] 
[0.x.47842] 
//
[0.x.47843] 
[0.x.47844] 
//
[0.x.47845] 
[0.x.47846] 
//
[0.x.47847] 
[0.x.47848] 
[0.x.47849] 
[0.x.47850] 
//
[0.x.47851] 
[0.x.47852] 
[0.x.47853] 
[0.x.47854] 
//
[0.x.47855] 
[0.x.47856] 
//
[0.x.47857] 
[0.x.47858] 
[0.x.47859] 
[0.x.47860] 
//
[0.x.47861] 
[0.x.47862] 
//
[0.x.47863] 
[0.x.47864] 
[0.x.47865] 
//
[0.x.47866] 
//
[0.x.47867] 
//
[0.x.47868] 
[0.x.47869] 
//
[0.x.47870] 
[0.x.47871] 
[0.x.47872] 
[0.x.47873] 
[0.x.47874] 
[0.x.47875] 
[0.x.47876] 
[0.x.47877] 
[0.x.47878] 
//
[0.x.47879] 
[0.x.47880] 
[0.x.47881] 
[0.x.47882] 
[0.x.47883] 
[0.x.47884] 
//
[0.x.47885] 
[0.x.47886] 
[0.x.47887] 
[0.x.47888] 
[0.x.47889] 
[0.x.47890] 
//
[0.x.47891] 
[0.x.47892] 
//
[0.x.47893] 
[0.x.47894] 
//
[0.x.47895] 
[0.x.47896] 
[0.x.47897] 
//
[0.x.47898] 
[0.x.47899] 
[0.x.47900] 
[0.x.47901] 
[0.x.47902] 
[0.x.47903] 
[0.x.47904] 
//
[0.x.47905] 
[0.x.47906] 
[0.x.47907] 
[0.x.47908] 
[0.x.47909] 
[0.x.47910] 
[0.x.47911] 
[0.x.47912] 
[0.x.47913] 
//
[0.x.47914] 
[0.x.47915] 
[0.x.47916] 
//
[0.x.47917] 
[0.x.47918] 
[0.x.47919] 
[0.x.47920] 
[0.x.47921] 
[0.x.47922] 
[0.x.47923] 
[0.x.47924] 
[0.x.47925] 
[0.x.47926] 
[0.x.47927] 
//
[0.x.47928] 
[0.x.47929] 
[0.x.47930] 
[0.x.47931] 
[0.x.47932] 
[0.x.47933] 
[0.x.47934] 
[0.x.47935] 
[0.x.47936] 
//
[0.x.47937] 
[0.x.47938] 
[0.x.47939] 
[0.x.47940] 
[0.x.47941] 
//
[0.x.47942] 
[0.x.47943] 
[0.x.47944] 
//
[0.x.47945] 
[0.x.47946] 
[0.x.47947] 
//
[0.x.47948] 
[0.x.47949] 
[0.x.47950] 
[0.x.47951] 
[0.x.47952] 
//
[0.x.47953] 
[0.x.47954] 
[0.x.47955] 
[0.x.47956] 
[0.x.47957] 
[0.x.47958] 
//
[0.x.47959] 
[0.x.47960] 
[0.x.47961] 
[0.x.47962] 
[0.x.47963] 
[0.x.47964] 
[0.x.47965] 
[0.x.47966] 
[0.x.47967] 
//
[0.x.47968] 
//
[0.x.47969] 
//
[0.x.47970] 
[0.x.47971] 
[0.x.47972] 
[0.x.47973] 
//
[0.x.47974] 
//
[0.x.47975] 
[0.x.47976] 
[0.x.47977] 
[0.x.47978] 
[0.x.47979] 
[0.x.47980] 
[0.x.47981] 
//
[0.x.47982] 
[0.x.47983] 
[0.x.47984] 
[0.x.47985] 
[0.x.47986] 
[0.x.47987] 
[0.x.47988] 
[0.x.47989] 
//
[0.x.47990] 
//
[0.x.47991] 
//
[0.x.47992] 
[0.x.47993] 
[0.x.47994] 
[0.x.47995] 
[0.x.47996] 
[0.x.47997] 
[0.x.47998] 
[0.x.47999] 
//
[0.x.48000] 
[0.x.48001] 
[0.x.48002] 
[0.x.48003] 
[0.x.48004] 
[0.x.48005] 
[0.x.48006] 
[0.x.48007] 
[0.x.48008] 
//
[0.x.48009] 
//
[0.x.48010] 
[0.x.48011] 
[0.x.48012] 
[0.x.48013] 
[0.x.48014] 
[0.x.48015] 
//
[0.x.48016] 
[0.x.48017] 
[0.x.48018] 
//
[0.x.48019] 
//
[0.x.48020] 
[0.x.48021] 
[0.x.48022] 
[0.x.48023] 
//
[0.x.48024] 
//
[0.x.48025] 
[0.x.48026] 
[0.x.48027] 
//
[0.x.48028] 
[0.x.48029] 
[0.x.48030] 
[0.x.48031] 
[0.x.48032] 
[0.x.48033] 
[0.x.48034] 
[0.x.48035] 
[0.x.48036] 
[0.x.48037] 
[0.x.48038] 
[0.x.48039] 
[0.x.48040] 
[0.x.48041] 
//
[0.x.48042] 
[0.x.48043] 
[0.x.48044] 
[0.x.48045] 
[0.x.48046] 
[0.x.48047] 
[0.x.48048] 
[0.x.48049] 
[0.x.48050] 
[0.x.48051] 
[0.x.48052] 
[0.x.48053] 
[0.x.48054] 
[0.x.48055] 
//
[0.x.48056] 
[0.x.48057] 
[0.x.48058] 
[0.x.48059] 
[0.x.48060] 
[0.x.48061] 
[0.x.48062] 
[0.x.48063] 
[0.x.48064] 
[0.x.48065] 
[0.x.48066] 
[0.x.48067] 
[0.x.48068] 
[0.x.48069] 
[0.x.48070] 
[0.x.48071] 
//
[0.x.48072] 
[0.x.48073] 
[0.x.48074] 
[0.x.48075] 
//[2.x.5665] 
//
// 这个程序开始时和其他大多数程序一样，有众所周知的包含文件。与[2.x.5666]程序相比，我们在这里所做的大部分工作都是从该程序中复制的，唯一不同的是包括头文件，我们从该文件中导入了SparseDirectUMFPACK类和KINSOL的实际接口。
//
[0.x.48076] 
[0.x.48077] 
[0.x.48078] 
[0.x.48079] 
//
[0.x.48080] 
[0.x.48081] 
[0.x.48082] 
[0.x.48083] 
[0.x.48084] 
[0.x.48085] 
//
[0.x.48086] 
[0.x.48087] 
[0.x.48088] 
//
[0.x.48089] 
[0.x.48090] 
[0.x.48091] 
//
[0.x.48092] 
[0.x.48093] 
//
[0.x.48094] 
[0.x.48095] 
[0.x.48096] 
[0.x.48097] 
[0.x.48098] 
//
[0.x.48099] 
//
[0.x.48100] 
[0.x.48101] 
//
[0.x.48102] 
[0.x.48103] 
[0.x.48104] 
//[2.x.5667] 
//
// 同样地，这个程序的主类基本上是 [2.x.5668] 中的一个副本。然而，该类确实将雅各布（系统）矩阵（以及使用直接求解器对其进行因式分解）和残差的计算分成了不同的函数，原因已在介绍中列出。出于同样的原因，该类也有一个指向雅各布矩阵因式分解的指针，该指针在我们每次更新雅各布矩阵时被重置。
//
// （如果你想知道为什么程序对雅各布矩阵使用直接对象，而对因式分解使用指针。每次KINSOL要求更新雅各布矩阵时，我们可以简单地写`jacobian_matrix=0;`将其重置为一个空矩阵，然后我们可以再次填充。另一方面，SparseDirectUMFPACK类没有办法扔掉它的内容或用新的因式分解来替换它，所以我们使用一个指针。我们只是扔掉整个对象，并在我们有新的雅各布矩阵需要分解时创建一个新的对象。)
//
// 最后，该类有一个定时器变量，我们将用它来评估程序的不同部分需要多长时间，这样我们就可以评估KINSOL的不重建矩阵及其因式分解的倾向是否合理。我们将在下面的 "结果 "部分讨论这个问题。
//
[0.x.48105] 
[0.x.48106] 
[0.x.48107] 
[0.x.48108] 
[0.x.48109] 
[0.x.48110] 
//
[0.x.48111] 
[0.x.48112] 
[0.x.48113] 
[0.x.48114] 
[0.x.48115] 
[0.x.48116] 
[0.x.48117] 
[0.x.48118] 
[0.x.48119] 
[0.x.48120] 
[0.x.48121] 
//
[0.x.48122] 
//
[0.x.48123] 
[0.x.48124] 
//
[0.x.48125] 
//
[0.x.48126] 
[0.x.48127] 
[0.x.48128] 
//
[0.x.48129] 
//
[0.x.48130] 
[0.x.48131] 
//
// [2.x.5669] 
//
// 实现边界值的类是对 [2.x.5670] 的复制。
//
[0.x.48132] 
[0.x.48133] 
[0.x.48134] 
[0.x.48135] 
[0.x.48136] 
[0.x.48137] 
[0.x.48138] 
//
[0.x.48139] 
[0.x.48140] 
[0.x.48141] 
[0.x.48142] 
[0.x.48143] 
[0.x.48144] 
//[2.x.5671] 
//[2.x.5672] 
//
// 下面的几个函数也基本上是复制了[2.x.5673]已经做的事情，所以没有什么可讨论的。
//
[0.x.48145] 
[0.x.48146] 
[0.x.48147] 
[0.x.48148] 
[0.x.48149] 
[0.x.48150] 
//
[0.x.48151] 
[0.x.48152] 
[0.x.48153] 
[0.x.48154] 
//
[0.x.48155] 
[0.x.48156] 
[0.x.48157] 
[0.x.48158] 
//
[0.x.48159] 
[0.x.48160] 
[0.x.48161] 
[0.x.48162] 
[0.x.48163] 
//
[0.x.48164] 
[0.x.48165] 
//
[0.x.48166] 
//
[0.x.48167] 
[0.x.48168] 
[0.x.48169] 
[0.x.48170] 
//
// [2.x.5674] 
//
// 然后，下面的函数负责对雅各布矩阵进行组装和因子化。该函数的前半部分实质上是[2.x.5675]的`assemble_system()`函数，只是它没有处理同时形成右手边的向量（即残差），因为我们并不总是要同时做这些操作。
//
// 我们把整个装配功能放在一个由大括号包围的代码块中，这样我们就可以用一个[2.x.5676]变量来衡量在这个代码块中花费了多少时间，不包括在这个函数中发生在匹配的闭合括号`}`之后的一切。
//
[0.x.48171] 
[0.x.48172] 
[0.x.48173] 
[0.x.48174] 
[0.x.48175] 
[0.x.48176] 
//
[0.x.48177] 
//
[0.x.48178] 
//
[0.x.48179] 
//
[0.x.48180] 
[0.x.48181] 
[0.x.48182] 
[0.x.48183] 
//
[0.x.48184] 
[0.x.48185] 
//
[0.x.48186] 
//
[0.x.48187] 
//
[0.x.48188] 
//
[0.x.48189] 
[0.x.48190] 
[0.x.48191] 
//
[0.x.48192] 
//
[0.x.48193] 
[0.x.48194] 
//
[0.x.48195] 
[0.x.48196] 
[0.x.48197] 
[0.x.48198] 
[0.x.48199] 
//
[0.x.48200] 
[0.x.48201] 
[0.x.48202] 
[0.x.48203] 
[0.x.48204] 
[0.x.48205] 
[0.x.48206] 
[0.x.48207] 
[0.x.48208] 
[0.x.48209] 
[0.x.48210] 
[0.x.48211] 
[0.x.48212] 
[0.x.48213] 
[0.x.48214] 
[0.x.48215] 
[0.x.48216] 
//
[0.x.48217] 
[0.x.48218] 
[0.x.48219] 
[0.x.48220] 
[0.x.48221] 
//
[0.x.48222] 
[0.x.48223] 
[0.x.48224] 
[0.x.48225] 
[0.x.48226] 
[0.x.48227] 
[0.x.48228] 
[0.x.48229] 
[0.x.48230] 
[0.x.48231] 
[0.x.48232] 
[0.x.48233] 
//
// 该函数的后半部分是对计算出的矩阵进行因数分解。为此，我们首先创建一个新的SparseDirectUMFPACK对象，并将其分配给成员变量`jacobian_matrix_factorization`，同时销毁该指针之前指向的任何对象（如果有）。然后我们告诉该对象对雅各布系数进行分解。
//
// 如上所述，我们把这段代码放在大括号里，用一个计时器来评估这部分程序所需的时间。
//
// (严格来说，我们在这里完成后实际上不再需要矩阵了，我们可以把矩阵对象扔掉。一个旨在提高内存效率的代码会这样做，并且只在这个函数中创建矩阵对象，而不是作为周围类的成员变量。我们在这里省略了这一步，因为使用与以前的教程程序相同的编码风格可以培养对通用风格的熟悉，并有助于使这些教程程序更容易阅读)。
//
[0.x.48234] 
[0.x.48235] 
//
[0.x.48236] 
//
[0.x.48237] 
[0.x.48238] 
[0.x.48239] 
[0.x.48240] 
//
// [2.x.5677] 
//
// `assemble_system()`在[2.x.5678]中用来做的第二部分是计算残差向量，也就是牛顿线性系统的右手向量。我们把这一点从前面的函数中分解出来，但如果你理解了[2.x.5679]中`assemble_system()`的作用，下面的函数就会很容易理解。然而，重要的是，我们需要计算的残差不是围绕当前解向量线性化的，而是我们从KINSOL得到的任何东西。这对于诸如直线搜索这样的操作是必要的，我们想知道在不同的[2.x.5681]值下，残差[2.x.5680]是多少；在这些情况下，KINSOL只是给我们函数[2.x.5682]的参数，然后我们在这时计算残差[2.x.5683]。
//
// 该函数在最后打印出如此计算的残差的规范，作为我们跟踪程序进展的一种方式。
//
[0.x.48241] 
[0.x.48242] 
[0.x.48243] 
[0.x.48244] 
[0.x.48245] 
[0.x.48246] 
//
[0.x.48247] 
//
[0.x.48248] 
[0.x.48249] 
[0.x.48250] 
[0.x.48251] 
[0.x.48252] 
//
[0.x.48253] 
[0.x.48254] 
//
[0.x.48255] 
[0.x.48256] 
//
[0.x.48257] 
//
[0.x.48258] 
[0.x.48259] 
[0.x.48260] 
[0.x.48261] 
//
[0.x.48262] 
[0.x.48263] 
//
[0.x.48264] 
[0.x.48265] 
[0.x.48266] 
[0.x.48267] 
[0.x.48268] 
//
[0.x.48269] 
[0.x.48270] 
[0.x.48271] 
[0.x.48272] 
[0.x.48273] 
[0.x.48274] 
//
[0.x.48275] 
[0.x.48276] 
[0.x.48277] 
[0.x.48278] 
//
[0.x.48279] 
//
[0.x.48280] 
[0.x.48281] 
[0.x.48282] 
//
[0.x.48283] 
[0.x.48284] 
[0.x.48285] 
//
[0.x.48286] 
[0.x.48287] 
//
// [2.x.5684] 
//
// 接下来是实现用雅各布矩阵解线性系统的函数。由于我们在建立矩阵时已经对矩阵进行了因式分解，所以解决线性系统的方法就是将逆矩阵应用于给定的右侧向量。这就是我们在这里使用的[2.x.5685]函数的作用。在这之后，我们必须确保我们也能解决解向量中的悬空节点的值，而这是用[2.x.5686]来完成的。
//
// 该函数需要一个额外的，但未使用的参数`tolerance`，它表示我们必须解决线性系统的精确程度。这个参数的含义在介绍中结合 "Eisenstat Walker技巧 "进行了讨论，但由于我们使用的是直接求解器而不是迭代求解器，所以我们并没有利用这个机会只求解线性系统的不精确性。
//
[0.x.48288] 
[0.x.48289] 
[0.x.48290] 
[0.x.48291] 
[0.x.48292] 
[0.x.48293] 
//
[0.x.48294] 
//
[0.x.48295] 
//
[0.x.48296] 
[0.x.48297] 
//
// [2.x.5687] 
//
// 以下三个函数又是对 [2.x.5688] 中的函数的简单复制。
//
[0.x.48298] 
[0.x.48299] 
[0.x.48300] 
[0.x.48301] 
//
[0.x.48302] 
[0.x.48303] 
[0.x.48304] 
[0.x.48305] 
[0.x.48306] 
[0.x.48307] 
//
[0.x.48308] 
[0.x.48309] 
[0.x.48310] 
[0.x.48311] 
//
[0.x.48312] 
//
[0.x.48313] 
[0.x.48314] 
//
[0.x.48315] 
//
[0.x.48316] 
//
[0.x.48317] 
[0.x.48318] 
[0.x.48319] 
//
[0.x.48320] 
//
[0.x.48321] 
[0.x.48322] 
[0.x.48323] 
//
[0.x.48324] 
//
[0.x.48325] 
//
[0.x.48326] 
[0.x.48327] 
//
[0.x.48328] 
[0.x.48329] 
[0.x.48330] 
[0.x.48331] 
[0.x.48332] 
[0.x.48333] 
[0.x.48334] 
[0.x.48335] 
[0.x.48336] 
[0.x.48337] 
//
[0.x.48338] 
[0.x.48339] 
//
[0.x.48340] 
[0.x.48341] 
[0.x.48342] 
[0.x.48343] 
[0.x.48344] 
//
[0.x.48345] 
//
 
[0.x.48347] 
[0.x.48348] 
//
[0.x.48349] 
[0.x.48350] 
[0.x.48351] 
[0.x.48352] 
[0.x.48353] 
//
// [2.x.5689] 
//
// 这个程序中唯一**有趣的函数是驱动整个算法的函数，即从一个粗大的网格开始，做一些网格细化循环，并在每个网格上使用KINSOL来寻找我们从这个网格上离散化得到的非线性代数方程的解。上面的`refine_mesh()`函数可以确保一个网格上的解被用作下一个网格的起始猜测。我们还使用一个TimerOutput对象来测量每个网格上的每一次操作所花费的时间，并在每个周期开始时重置该计时器。
//
// 正如在介绍中所讨论的，没有必要特别精确地解决粗略网格上的问题，因为这些问题只能作为下一个网格的起始猜测来解决。因此，我们将在[2.x.5691]个网格细化周期中使用[2.x.5690]的目标公差。
//
// 所有这些都在这个函数的第一部分进行了编码。
//
[0.x.48354] 
[0.x.48355] 
[0.x.48356] 
[0.x.48357] 
[0.x.48358] 
//
[0.x.48359] 
[0.x.48360] 
//
[0.x.48361] 
[0.x.48362] 
[0.x.48363] 
[0.x.48364] 
[0.x.48365] 
//
[0.x.48366] 
[0.x.48367] 
//
[0.x.48368] 
[0.x.48369] 
[0.x.48370] 
//
// 这就是有趣的开始。在顶部，我们创建了KINSOL求解器对象，并给它提供了一个对象，该对象编码了一些额外的具体情况（其中我们只改变了我们想要达到的非线性容忍度；但你可能想看看[2.x.5692]类有哪些其他成员，并与它们一起玩）。
//
[0.x.48371] 
[0.x.48372] 
[0.x.48373] 
[0.x.48374] 
//
[0.x.48375] 
//
// 然后，我们必须描述在介绍中已经提到的操作。从本质上讲，我们必须教KINSOL如何(i)将一个向量调整到正确的大小，(ii)计算残差向量，(iii)计算雅各布矩阵（在这期间我们也计算其因式分解），以及(iv)用雅各布矩阵解一个线性系统。
//
// 所有这四种操作都由[2.x.5693]类的成员变量表示，这些成员变量的类型是[2.x.5694]，即它们是我们可以分配给一个函数的指针的对象，或者像我们在这里做的那样，一个 "lambda函数"，它接受相应的参数并返回相应的信息。按照惯例，KINSOL希望做一些不重要的事情的函数返回一个整数，其中0表示成功。事实证明，我们只需用25行代码就可以完成所有这些工作。
//
// 如果你不知道什么是 "lambda函数"，可以看看[2.x.5695]或[wikipedia页面](https:en.wikipedia.org/wiki/Anonymous_function)关于这个问题。lambda函数的想法是，人们想用一组参数来定义一个函数，但(i)不使它成为一个命名的函数，因为通常情况下，该函数只在一个地方使用，似乎没有必要给它一个全局名称；(ii)该函数可以访问存在于定义它的地方的一些变量，包括成员变量。lambda函数的语法很笨拙，但最终还是很有用的）。)
//
// 在代码块的最后，我们告诉KINSOL去工作，解决我们的问题。从'residual'、'setup_jacobian'和'solve_jacobian_system'函数中调用的成员函数将向屏幕打印输出，使我们能够跟踪程序的进展情况。
//
[0.x.48376] 
[0.x.48377] 
[0.x.48378] 
//
[0.x.48379] 
[0.x.48380] 
[0.x.48381] 
[0.x.48382] 
//
[0.x.48383] 
[0.x.48384] 
//
[0.x.48385] 
[0.x.48386] 
[0.x.48387] 
[0.x.48388] 
//
[0.x.48389] 
[0.x.48390] 
//
[0.x.48391] 
[0.x.48392] 
[0.x.48393] 
[0.x.48394] 
//
[0.x.48395] 
[0.x.48396] 
//
[0.x.48397] 
[0.x.48398] 
//
// 剩下的就只是内务整理了。将数据写入文件，以便进行可视化，并显示收集到的时间摘要，以便我们可以解释每个操作花了多长时间，执行的频率如何，等等。
//
[0.x.48399] 
//
[0.x.48400] 
//
[0.x.48401] 
[0.x.48402] 
[0.x.48403] 
[0.x.48404] 
//
[0.x.48405] 
[0.x.48406] 
[0.x.48407] 
[0.x.48408] 
[0.x.48409] 
//
[0.x.48410] 
[0.x.48411] 
[0.x.48412] 
[0.x.48413] 
[0.x.48414] 
[0.x.48415] 
[0.x.48416] 
[0.x.48417] 
[0.x.48418] 
[0.x.48419] 
[0.x.48420] 
[0.x.48421] 
[0.x.48422] 
[0.x.48423] 
//
[0.x.48424] 
[0.x.48425] 
[0.x.48426] 
[0.x.48427] 
[0.x.48428] 
[0.x.48429] 
[0.x.48430] 
[0.x.48431] 
[0.x.48432] 
[0.x.48433] 
[0.x.48434] 
[0.x.48435] 
[0.x.48436] 
[0.x.48437] 
[0.x.48438] 
[0.x.48439] 
[0.x.48440] 
[0.x.48441] 
[0.x.48442] 
[0.x.48443] 
[0.x.48444] 
[0.x.48445] 
[0.x.48446] 
[0.x.48447] 
[0.x.48448] 
[0.x.48449] 
[0.x.48450] 
[0.x.48451] 
[0.x.48452] 
[0.x.48453] 
//
[0.x.48454] 
[0.x.48455] 
[0.x.48456] 
//[2.x.5696] 
//
// 程序以通常的包含文件开始，所有这些文件你现在应该都见过了。
//
[0.x.48457] 
[0.x.48458] 
[0.x.48459] 
[0.x.48460] 
[0.x.48461] 
[0.x.48462] 
[0.x.48463] 
[0.x.48464] 
[0.x.48465] 
[0.x.48466] 
[0.x.48467] 
[0.x.48468] 
[0.x.48469] 
[0.x.48470] 
[0.x.48471] 
[0.x.48472] 
[0.x.48473] 
[0.x.48474] 
[0.x.48475] 
[0.x.48476] 
[0.x.48477] 
[0.x.48478] 
[0.x.48479] 
[0.x.48480] 
[0.x.48481] 
[0.x.48482] 
[0.x.48483] 
[0.x.48484] 
[0.x.48485] 
//
[0.x.48486] 
[0.x.48487] 
//
// 然后照例将这个程序的所有内容放入一个命名空间，并将deal.II命名空间导入到我们将要工作的命名空间中。我们还定义了一个标识符，以便在[2.x.5697]被定义时可以运行MMS代码。否则，该程序就会解决原来的问题。
//
[0.x.48488] 
[0.x.48489] 
[0.x.48490] 
//
[0.x.48491] 
//[2.x.5698] 
//
// 在使用MMS进行测试时，这部分为已知的解决方案创建一个类。这里我们使用[2.x.5699]作为解决方案。我们需要包括求解方程和梯度，以便进行H1半规范计算。
//
[0.x.48492] 
[0.x.48493] 
[0.x.48494] 
[0.x.48495] 
[0.x.48496] 
//
[0.x.48497] 
[0.x.48498] 
//
[0.x.48499] 
[0.x.48500] 
[0.x.48501] 
//
[0.x.48502] 
[0.x.48503] 
[0.x.48504] 
//
[0.x.48505] 
[0.x.48506] 
[0.x.48507] 
[0.x.48508] 
[0.x.48509] 
[0.x.48510] 
//
[0.x.48511] 
[0.x.48512] 
[0.x.48513] 
[0.x.48514] 
[0.x.48515] 
[0.x.48516] 
[0.x.48517] 
//
[0.x.48518] 
[0.x.48519] 
[0.x.48520] 
[0.x.48521] 
[0.x.48522] 
[0.x.48523] 
//
// [2.x.5700] 
//
// 在下面的类和函数中，我们实现了定义这个问题的右手边和边界值，为此我们需要函数对象。右手边的选择是在介绍的最后讨论的。
//
// 首先，我们处理初始条件。
//
[0.x.48524] 
[0.x.48525] 
[0.x.48526] 
[0.x.48527] 
[0.x.48528] 
//
[0.x.48529] 
[0.x.48530] 
//
[0.x.48531] 
[0.x.48532] 
[0.x.48533] 
//
[0.x.48534] 
[0.x.48535] 
[0.x.48536] 
[0.x.48537] 
//
[0.x.48538] 
[0.x.48539] 
[0.x.48540] 
[0.x.48541] 
[0.x.48542] 
[0.x.48543] 
[0.x.48544] 
[0.x.48545] 
[0.x.48546] 
[0.x.48547] 
//
// 接下来，我们处理左边的边界条件。
//
[0.x.48548] 
[0.x.48549] 
[0.x.48550] 
[0.x.48551] 
[0.x.48552] 
[0.x.48553] 
[0.x.48554] 
//
[0.x.48555] 
[0.x.48556] 
[0.x.48557] 
[0.x.48558] 
[0.x.48559] 
[0.x.48560] 
[0.x.48561] 
[0.x.48562] 
[0.x.48563] 
[0.x.48564] 
//
// 然后，我们处理右边的边界条件。
//
[0.x.48565] 
[0.x.48566] 
[0.x.48567] 
[0.x.48568] 
[0.x.48569] 
//
[0.x.48570] 
[0.x.48571] 
//
[0.x.48572] 
[0.x.48573] 
[0.x.48574] 
[0.x.48575] 
//
[0.x.48576] 
[0.x.48577] 
[0.x.48578] 
[0.x.48579] 
[0.x.48580] 
[0.x.48581] 
//
[0.x.48582] 
[0.x.48583] 
[0.x.48584] 
[0.x.48585] 
[0.x.48586] 
[0.x.48587] 
[0.x.48588] 
[0.x.48589] 
[0.x.48590] 
[0.x.48591] 
[0.x.48592] 
[0.x.48593] 
//
// 最后，我们处理右边的问题。
//
[0.x.48594] 
[0.x.48595] 
[0.x.48596] 
[0.x.48597] 
[0.x.48598] 
//
[0.x.48599] 
[0.x.48600] 
//
[0.x.48601] 
[0.x.48602] 
[0.x.48603] 
[0.x.48604] 
//
[0.x.48605] 
[0.x.48606] 
[0.x.48607] 
[0.x.48608] 
[0.x.48609] 
[0.x.48610] 
//
[0.x.48611] 
[0.x.48612] 
[0.x.48613] 
[0.x.48614] 
[0.x.48615] 
[0.x.48616] 
[0.x.48617] 
[0.x.48618] 
[0.x.48619] 
[0.x.48620] 
[0.x.48621] 
[0.x.48622] 
[0.x.48623] 
[0.x.48624] 
[0.x.48625] 
[0.x.48626] 
[0.x.48627] 
//
// [2.x.5701] 
//
// 下一块是这个程序的主类的声明。这与[2.x.5702]的教程非常相似，只是做了一些修改。必须添加新的矩阵来计算A和B矩阵，以及介绍中提到的[2.x.5703]向量。我们还定义了问题中使用的参数。
//
//
//
// - [2.x.5704] ：空间域的强加上限。这是允许的最大股票价格。
//
// - [2.x.5705] ：时间域的上限。这是期权到期的时间。
//
// - [2.x.5706] ：股票价格的波动率。
//
// - [2.x.5707] : 无风险利率。
//
// - [2.x.5708] ：买方在到期时可以选择购买股票的约定价格。
//
// 本程序与[2.x.5709]之间的一些细微差别是创建了[2.x.5710] ，这在介绍中已经说明。然后，我们还需要存储当前时间、时间步长和当前时间步长的数字。接下来，我们将把输出存储到一个[2.x.5711]的变量中，因为我们将把每个时间的解分层在上面，以创建解流形。然后，我们有一个变量来存储当前的周期和我们在计算解决方案时将运行的周期数。循环是给定一个网格的一个完整的解决方案计算。我们在每个周期之间细化一次网格，以展示我们程序的收敛特性。最后，我们将收敛数据存储到一个收敛表中。
//
// 就成员函数而言，我们有一个函数可以计算每个周期的收敛信息，称为 [2.x.5712] 。这就像在 [2.x.5713] 中所做的那样。
//
[0.x.48628] 
[0.x.48629] 
[0.x.48630] 
[0.x.48631] 
[0.x.48632] 
//
[0.x.48633] 
//
[0.x.48634] 
[0.x.48635] 
[0.x.48636] 
[0.x.48637] 
[0.x.48638] 
[0.x.48639] 
[0.x.48640] 
//
[0.x.48641] 
[0.x.48642] 
[0.x.48643] 
[0.x.48644] 
[0.x.48645] 
//
[0.x.48646] 
[0.x.48647] 
[0.x.48648] 
//
[0.x.48649] 
//
[0.x.48650] 
[0.x.48651] 
[0.x.48652] 
[0.x.48653] 
[0.x.48654] 
[0.x.48655] 
//
[0.x.48656] 
[0.x.48657] 
//
[0.x.48658] 
[0.x.48659] 
//
 
 
[0.x.48662] 
//
[0.x.48663] 
[0.x.48664] 
//
[0.x.48665] 
[0.x.48666] 
//[2.x.5714] 
//
// 现在，我们进入主类的实现阶段。我们将为问题中使用的各种参数设置数值。选择这些是因为它们是这些参数的相当正常的值。尽管股票价格在现实中没有上限（事实上是无限的），但我们规定了一个上限，即行权价格的两倍。两倍于行权价的选择有些武断，但它足够大，可以看到解决方案的有趣部分。
//
[0.x.48667] 
[0.x.48668] 
[0.x.48669] 
[0.x.48670] 
[0.x.48671] 
[0.x.48672] 
[0.x.48673] 
[0.x.48674] 
[0.x.48675] 
[0.x.48676] 
[0.x.48677] 
[0.x.48678] 
[0.x.48679] 
[0.x.48680] 
[0.x.48681] 
[0.x.48682] 
//[2.x.5715] 
//
// 下一个函数设置了DoFHandler对象，计算了约束条件，并将线性代数对象设置为正确的大小。我们还在这里通过调用库中的一个函数来计算质量矩阵。接下来我们将计算其他三个矩阵，因为这些矩阵需要 "手工 "计算。
//
// 注意，时间步长在这里被初始化，因为计算时间步长需要成熟的时间。
//
[0.x.48683] 
[0.x.48684] 
[0.x.48685] 
[0.x.48686] 
//
[0.x.48687] 
//
[0.x.48688] 
[0.x.48689] 
[0.x.48690] 
[0.x.48691] 
[0.x.48692] 
[0.x.48693] 
[0.x.48694] 
//
//keep_constrained_dofs = [2.x.5716] true）。)
//
[0.x.48695] 
//
[0.x.48696] 
[0.x.48697] 
[0.x.48698] 
[0.x.48699] 
[0.x.48700] 
//
[0.x.48701] 
[0.x.48702] 
[0.x.48703] 
//
// 下面是创建非恒定系数的拉普拉斯矩阵的代码。这与介绍中的矩阵D相对应。这个非恒定系数在[2.x.5717]变量中表示。
//
[0.x.48704] 
[0.x.48705] 
[0.x.48706] 
[0.x.48707] 
[0.x.48708] 
[0.x.48709] 
[0.x.48710] 
[0.x.48711] 
[0.x.48712] 
[0.x.48713] 
[0.x.48714] 
[0.x.48715] 
[0.x.48716] 
[0.x.48717] 
[0.x.48718] 
[0.x.48719] 
[0.x.48720] 
[0.x.48721] 
[0.x.48722] 
[0.x.48723] 
[0.x.48724] 
[0.x.48725] 
[0.x.48726] 
[0.x.48727] 
[0.x.48728] 
[0.x.48729] 
[0.x.48730] 
[0.x.48731] 
[0.x.48732] 
[0.x.48733] 
[0.x.48734] 
[0.x.48735] 
[0.x.48736] 
[0.x.48737] 
[0.x.48738] 
//
// 现在我们将创建A矩阵。下面是创建矩阵A的代码，在介绍中已经讨论过。非恒定系数再次用[2.x.5718]这个变量表示。
//
[0.x.48739] 
[0.x.48740] 
[0.x.48741] 
[0.x.48742] 
[0.x.48743] 
[0.x.48744] 
[0.x.48745] 
[0.x.48746] 
[0.x.48747] 
[0.x.48748] 
[0.x.48749] 
[0.x.48750] 
[0.x.48751] 
[0.x.48752] 
[0.x.48753] 
[0.x.48754] 
[0.x.48755] 
[0.x.48756] 
[0.x.48757] 
[0.x.48758] 
[0.x.48759] 
[0.x.48760] 
[0.x.48761] 
[0.x.48762] 
[0.x.48763] 
[0.x.48764] 
[0.x.48765] 
[0.x.48766] 
[0.x.48767] 
//
// 最后我们将创建矩阵B。下面是创建矩阵B的代码，在介绍中已经讨论过。非恒定系数再次用[2.x.5719]这个变量表示。
//
[0.x.48768] 
[0.x.48769] 
[0.x.48770] 
[0.x.48771] 
[0.x.48772] 
[0.x.48773] 
[0.x.48774] 
[0.x.48775] 
[0.x.48776] 
[0.x.48777] 
[0.x.48778] 
[0.x.48779] 
[0.x.48780] 
[0.x.48781] 
[0.x.48782] 
[0.x.48783] 
[0.x.48784] 
[0.x.48785] 
[0.x.48786] 
[0.x.48787] 
[0.x.48788] 
[0.x.48789] 
[0.x.48790] 
[0.x.48791] 
[0.x.48792] 
[0.x.48793] 
[0.x.48794] 
//
[0.x.48795] 
[0.x.48796] 
[0.x.48797] 
//[2.x.5720] 
//
// 下一个函数是解决单个时间步长的实际线性系统的函数。这里唯一有趣的是，我们建立的矩阵是对称正定的，所以我们可以使用共轭梯度法。
//
[0.x.48798] 
[0.x.48799] 
[0.x.48800] 
[0.x.48801] 
[0.x.48802] 
[0.x.48803] 
[0.x.48804] 
[0.x.48805] 
[0.x.48806] 
[0.x.48807] 
//[2.x.5721] 
//
// 这是简单地将解决方案的碎片拼接起来的功能。为此，我们在每个时间段创建一个新的层，然后添加该时间段的解决方案向量。然后，该函数使用'build_patches'将其与旧的解决方案缝合在一起。
//
[0.x.48808] 
[0.x.48809] 
[0.x.48810] 
[0.x.48811] 
[0.x.48812] 
[0.x.48813] 
[0.x.48814] 
[0.x.48815] 
[0.x.48816] 
//[2.x.5722] 

// 对于我们所做的全局细化来说，有一个函数是有些不必要的。之所以有这个函数，是为了允许以后有可能进行适应性细化。
//
[0.x.48817] 
[0.x.48818] 
[0.x.48819] 
[0.x.48820] 
[0.x.48821] 
//[2.x.5723] 
//
// 这就是我们计算收敛和误差数据的地方，以评估程序的有效性。在这里，我们计算[2.x.5724] 、[2.x.5725] 和[2.x.5726]的准则。
//
[0.x.48822] 
[0.x.48823] 
[0.x.48824] 
[0.x.48825] 
[0.x.48826] 
[0.x.48827] 
[0.x.48828] 
[0.x.48829] 
[0.x.48830] 
[0.x.48831] 
[0.x.48832] 
[0.x.48833] 
[0.x.48834] 
[0.x.48835] 
[0.x.48836] 
[0.x.48837] 
[0.x.48838] 
[0.x.48839] 
[0.x.48840] 
[0.x.48841] 
[0.x.48842] 
[0.x.48843] 
[0.x.48844] 
[0.x.48845] 
[0.x.48846] 
[0.x.48847] 
[0.x.48848] 
[0.x.48849] 
[0.x.48850] 
[0.x.48851] 
[0.x.48852] 
[0.x.48853] 
[0.x.48854] 
[0.x.48855] 
[0.x.48856] 
[0.x.48857] 
[0.x.48858] 
[0.x.48859] 
[0.x.48860] 
[0.x.48861] 
[0.x.48862] 
[0.x.48863] 
[0.x.48864] 
[0.x.48865] 
[0.x.48866] 
[0.x.48867] 
//[2.x.5727] 
//
// 接下来的部分是建立收敛和误差表。通过这个，我们需要设置如何输出在 [2.x.5728] 期间计算的数据。首先，我们将创建标题并正确设置单元格。在这期间，我们还将规定结果的精度。然后，我们将根据 [2.x.5729] 、 [2.x.5730] 和 [2.x.5731] 规范把计算出来的误差写到控制台和错误的LaTeX文件中。
//
[0.x.48868] 
[0.x.48869] 
[0.x.48870] 
[0.x.48871] 
[0.x.48872] 
[0.x.48873] 
[0.x.48874] 
[0.x.48875] 
[0.x.48876] 
[0.x.48877] 
[0.x.48878] 
[0.x.48879] 
[0.x.48880] 
[0.x.48881] 
[0.x.48882] 
[0.x.48883] 
[0.x.48884] 
[0.x.48885] 
[0.x.48886] 
[0.x.48887] 
[0.x.48888] 
[0.x.48889] 
[0.x.48890] 
//
// 接下来，我们将制作收敛表。我们将再次把它写到控制台和收敛LaTeX文件中。
//
[0.x.48891] 
[0.x.48892] 
[0.x.48893] 
[0.x.48894] 
[0.x.48895] 
[0.x.48896] 
[0.x.48897] 
[0.x.48898] 
[0.x.48899] 
[0.x.48900] 
[0.x.48901] 
[0.x.48902] 
[0.x.48903] 
[0.x.48904] 
[0.x.48905] 
[0.x.48906] 
[0.x.48907] 
[0.x.48908] 
[0.x.48909] 
[0.x.48910] 
[0.x.48911] 
[0.x.48912] 
[0.x.48913] 
[0.x.48914] 
[0.x.48915] 
[0.x.48916] 
[0.x.48917] 
[0.x.48918] 
[0.x.48919] 
[0.x.48920] 
[0.x.48921] 
[0.x.48922] 
[0.x.48923] 
//[2.x.5732] 
//
// 现在我们进入了程序的主要驱动部分。在这里我们要做的是在时间步数中循环往复，并在每次计算解向量的工作。在这里的顶部，我们设置初始细化值，然后创建一个网格。然后我们对这个网格进行一次细化。接下来，我们设置了data_out_stack对象来存储我们的解决方案。最后，我们启动一个for循环来循环处理这些循环。这让我们为每一个连续的网格细化重新计算出一个解决方案。在每次迭代开始时，我们需要重新设置时间和时间步长。我们引入一个if语句来完成这个任务，因为我们不想在第一次迭代时就这样做。
//
[0.x.48924] 
[0.x.48925] 
[0.x.48926] 
[0.x.48927] 
[0.x.48928] 
//
[0.x.48929] 
[0.x.48930] 
[0.x.48931] 
//
[0.x.48932] 
[0.x.48933] 
//
[0.x.48934] 
[0.x.48935] 
[0.x.48936] 
[0.x.48937] 
[0.x.48938] 
[0.x.48939] 
[0.x.48940] 
//
[0.x.48941] 
//
[0.x.48942] 
[0.x.48943] 
[0.x.48944] 
[0.x.48945] 
[0.x.48946] 
[0.x.48947] 
[0.x.48948] 
[0.x.48949] 
//
[0.x.48950] 
[0.x.48951] 
[0.x.48952] 
//
[0.x.48953] 
[0.x.48954] 
[0.x.48955] 
[0.x.48956] 
//
// 接下来，我们运行主循环，该循环一直运行到超过成熟时间。我们首先计算方程的右侧，这在介绍中有所描述。回顾一下，它包含术语[2.x.5733] 。我们把这些项放到变量system_rhs中，借助于一个临时向量。
//
[0.x.48957] 
[0.x.48958] 
[0.x.48959] 
[0.x.48960] 
[0.x.48961] 
[0.x.48962] 
//
[0.x.48963] 
[0.x.48964] 
[0.x.48965] 
//
[0.x.48966] 
//
[0.x.48967] 
[0.x.48968] 
[0.x.48969] 
[0.x.48970] 
[0.x.48971] 
[0.x.48972] 
//
[0.x.48973] 
[0.x.48974] 
//
[0.x.48975] 
[0.x.48976] 
//
[0.x.48977] 
[0.x.48978] 
[0.x.48979] 
[0.x.48980] 
[0.x.48981] 
//
// 第二块是计算源项的贡献。这与术语 [2.x.5734] 相对应。下面的代码调用 [2.x.5735] 来计算向量 [2.x.5736] ，在这里我们在评估之前设置了右侧（源）函数的时间。这一切的结果最终都在forcing_terms变量中。
//
[0.x.48982] 
[0.x.48983] 
[0.x.48984] 
[0.x.48985] 
[0.x.48986] 
[0.x.48987] 
[0.x.48988] 
[0.x.48989] 
//
[0.x.48990] 
[0.x.48991] 
[0.x.48992] 
[0.x.48993] 
[0.x.48994] 
[0.x.48995] 
[0.x.48996] 
//
// 接下来，我们将强迫项添加到来自时间步长的强迫项中，同时建立矩阵[2.x.5737]，我们必须在每个时间步长中进行反转。这些操作的最后一块是消除线性系统中悬挂的节点约束自由度。
//
[0.x.48997] 
[0.x.48998] 
[0.x.48999] 
[0.x.49000] 
[0.x.49001] 
[0.x.49002] 
[0.x.49003] 
//
[0.x.49004] 
//
// 在解决这个问题之前，我们还需要做一个操作：边界值。为此，我们创建一个边界值对象，将适当的时间设置为当前时间步长的时间，并像以前多次那样对其进行评估。其结果也被用来在线性系统中设置正确的边界值。
//
[0.x.49005] 
[0.x.49006] 
[0.x.49007] 
[0.x.49008] 
[0.x.49009] 
[0.x.49010] 
[0.x.49011] 
[0.x.49012] 
[0.x.49013] 
[0.x.49014] 
[0.x.49015] 
[0.x.49016] 
[0.x.49017] 
[0.x.49018] 
[0.x.49019] 
[0.x.49020] 
[0.x.49021] 
[0.x.49022] 
[0.x.49023] 
[0.x.49024] 
//
// 解决了这个问题，我们要做的就是求解系统，生成最后一个周期的图形数据，并创建收敛表数据。
//
[0.x.49025] 
//
[0.x.49026] 
[0.x.49027] 
[0.x.49028] 
[0.x.49029] 
[0.x.49030] 
[0.x.49031] 
[0.x.49032] 
[0.x.49033] 
[0.x.49034] 
//
[0.x.49035] 
[0.x.49036] 
[0.x.49037] 
//
[0.x.49038] 
[0.x.49039] 
[0.x.49040] 
[0.x.49041] 
//
[0.x.49042] 
//[2.x.5738] 
//
// 走到这一步，这个程序的主函数又没有什么好讨论的了：看起来自[2.x.5739]以来的所有此类函数。
//
[0.x.49043] 
[0.x.49044] 
[0.x.49045] 
[0.x.49046] 
[0.x.49047] 
//
[0.x.49048] 
[0.x.49049] 
[0.x.49050] 
[0.x.49051] 
[0.x.49052] 
[0.x.49053] 
[0.x.49054] 
[0.x.49055] 
[0.x.49056] 
[0.x.49057] 
[0.x.49058] 
[0.x.49059] 
[0.x.49060] 
[0.x.49061] 
[0.x.49062] 
[0.x.49063] 
[0.x.49064] 
[0.x.49065] 
[0.x.49066] 
[0.x.49067] 
[0.x.49068] 
[0.x.49069] 
[0.x.49070] 
[0.x.49071] 
[0.x.49072] 
[0.x.49073] 
[0.x.49074] 
[0.x.49075] 
[0.x.49076] 
[0.x.49077] 
[0.x.49078] 
[0.x.49079] 
[0.x.49080] 
[0.x.49081] 
[0.x.49082] 
[0.x.49083] 
[0.x.49084] 
[0.x.49085] 
[0.x.49086] 
[0.x.49087] 
[0.x.49088] 
[0.x.49089] 
[0.x.49090] 
[0.x.49091] 
//
[0.x.49092] 
[0.x.49093] 
[0.x.49094] 
//[2.x.5740] 
[0.x.49095] 
[0.x.49096] 
[0.x.49097] 
[0.x.49098] 
[0.x.49099] 
//
[0.x.49100] 
[0.x.49101] 
[0.x.49102] 
[0.x.49103] 
[0.x.49104] 
[0.x.49105] 
[0.x.49106] 
//
[0.x.49107] 
[0.x.49108] 
[0.x.49109] 
//
[0.x.49110] 
[0.x.49111] 
[0.x.49112] 
//
[0.x.49113] 
[0.x.49114] 
[0.x.49115] 
[0.x.49116] 
//
[0.x.49117] 
[0.x.49118] 
[0.x.49119] 
//
[0.x.49120] 
[0.x.49121] 
[0.x.49122] 
//
// 以上是相当常见的包含文件。这些文件还包括稀疏直接类的文件 SparseDirectUMFPACK。这不是解决大型线性问题的最有效的方法，但现在可以了。
//
// 像往常一样，我们把所有的东西都放到一个共同的命名空间里。然后，我们开始声明一些常数的符号名称，这些常数将在本教程中使用。具体来说，我们在这个程序中有*多的变量（当然是密度和位移，但也有未过滤的密度和相当多的拉格朗日乘数）。我们很容易忘记这些变量在求解向量中的哪个位置，而且试图用数字来表示这些向量分量是一个错误的处方。相反，我们定义的静态变量可以在所有这些地方使用，而且只需初始化一次。在实践中，这将导致一些冗长的表达式，但它们更具可读性，而且不太可能出错。
//
// 一个类似的问题出现在系统矩阵和向量中块的排序上。矩阵中有[2.x.5741]块，而且很难记住哪个是哪个。对这些块也使用符号名称要容易得多。
//
// 最后，我们为我们将要使用的边界指标引入符号名称，与 [2.x.5742] 中的精神相同。
//
// 在所有这些情况下，我们将这些变量声明为命名空间中的成员。在求解组件的情况下，这些变量的具体数值取决于空间维度，因此我们使用[模板变量](https:en.cppreference.com/w/cpp/language/variable_template)来使变量的数值取决于模板参数，就像我们经常使用模板函数一样。
//
[0.x.49123] 
[0.x.49124] 
[0.x.49125] 
//
// 这个命名空间记录了我们的有限元系统中与每个变量相对应的第一个组件。
//
[0.x.49126] 
[0.x.49127] 
[0.x.49128] 
[0.x.49129] 
[0.x.49130] 
[0.x.49131] 
[0.x.49132] 
[0.x.49133] 
[0.x.49134] 
[0.x.49135] 
[0.x.49136] 
[0.x.49137] 
[0.x.49138] 
[0.x.49139] 
[0.x.49140] 
[0.x.49141] 
[0.x.49142] 
[0.x.49143] 
[0.x.49144] 
[0.x.49145] 
[0.x.49146] 
//
// 这是一个命名空间，它记录了哪个区块对应于哪个变量。
//
[0.x.49147] 
[0.x.49148] 
[0.x.49149] 
[0.x.49150] 
[0.x.49151] 
[0.x.49152] 
[0.x.49153] 
[0.x.49154] 
[0.x.49155] 
[0.x.49156] 
[0.x.49157] 
[0.x.49158] 
//
[0.x.49159] 
[0.x.49160] 
[0.x.49161] 
[0.x.49162] 
[0.x.49163] 
//
[0.x.49164] 
[0.x.49165] 
[0.x.49166] 
[0.x.49167] 
[0.x.49168] 
[0.x.49169] 
[0.x.49170] 
[0.x.49171] 
[0.x.49172] 
[0.x.49173] 
[0.x.49174] 
[0.x.49175] 
[0.x.49176] 
[0.x.49177] 
[0.x.49178] 
[0.x.49179] 
[0.x.49180] 
[0.x.49181] 
[0.x.49182] 
[0.x.49183] 
[0.x.49184] 
[0.x.49185] 
[0.x.49186] 
[0.x.49187] 
[0.x.49188] 
[0.x.49189] 
[0.x.49190] 
[0.x.49191] 
[0.x.49192] 
[0.x.49193] 
//[2.x.5743] 
//
// 接下来是这个问题的主类。大多数函数都遵循教程程序的常规命名方式，不过有几个函数因为长度问题被从通常称为`setup_system()`的函数中分离出来，还有一些函数是处理优化算法的各个方面的。
//
// 作为额外的奖励，该程序将计算出的设计写成STL文件，例如，可以将其发送给3D打印机。
//
[0.x.49194] 
[0.x.49195] 
[0.x.49196] 
[0.x.49197] 
[0.x.49198] 
//
[0.x.49199] 
//
[0.x.49200] 
[0.x.49201] 
//
[0.x.49202] 
//
[0.x.49203] 
//
[0.x.49204] 
//
[0.x.49205] 
//
[0.x.49206] 
//
[0.x.49207] 
[0.x.49208] 
[0.x.49209] 
//
[0.x.49210] 
[0.x.49211] 
//
[0.x.49212] 
//
[0.x.49213] 
//
[0.x.49214] 
[0.x.49215] 
[0.x.49216] 
//
[0.x.49217] 
//
[0.x.49218] 
//
[0.x.49219] 
//
[0.x.49220] 
[0.x.49221] 
[0.x.49222] 
//
// 大部分的成员变量也是标准的。但是，有一些变量是专门与优化算法有关的（比如下面的各种标量因子），以及过滤器矩阵，以确保设计保持平稳。
//
[0.x.49223] 
[0.x.49224] 
[0.x.49225] 
[0.x.49226] 
//
[0.x.49227] 
//
[0.x.49228] 
[0.x.49229] 
//
[0.x.49230] 
[0.x.49231] 
//
[0.x.49232] 
[0.x.49233] 
//
[0.x.49234] 
[0.x.49235] 
[0.x.49236] 
[0.x.49237] 
[0.x.49238] 
//
[0.x.49239] 
[0.x.49240] 
//[2.x.5744] 
//
// 我们初始化一个由2 [2.x.5745] dim `FE_Q(1)`元素组成的FES系统，用于位移变量及其拉格朗日乘数，以及7 `FE_DGQ(0)`元素。 这些片状常数函数用于与密度相关的变量：密度本身、未过滤的密度、用于未过滤的密度的下限和上限的松弛变量，然后是用于过滤和未过滤的密度之间的连接以及不等式约束的拉格朗日乘子。
//
// 这些元素出现的顺序在上面有记载。
//
[0.x.49241] 
[0.x.49242] 
[0.x.49243] 
[0.x.49244] 
[0.x.49245] 
[0.x.49246] 
[0.x.49247] 
[0.x.49248] 
[0.x.49249] 
[0.x.49250] 
[0.x.49251] 
[0.x.49252] 
[0.x.49253] 
[0.x.49254] 
[0.x.49255] 
[0.x.49256] 
[0.x.49257] 
[0.x.49258] 
[0.x.49259] 
[0.x.49260] 
[0.x.49261] 
//
// 然后，第一步是创建与介绍中的问题描述相匹配的三角形--一个6乘1的矩形（或者一个6乘1乘1的3D盒子），在这个盒子的顶部中心将施加一个力。然后，这个三角形被均匀地细化若干次。
//
// 与本程序的其他部分相比，这个函数特别假定我们是在2D中，如果我们想转到3D模拟，就需要进行修改。我们通过函数顶部的断言来确保没有人试图不经修改就意外地在三维中运行。
//
[0.x.49262] 
[0.x.49263] 
[0.x.49264] 
[0.x.49265] 
[0.x.49266] 
[0.x.49267] 
[0.x.49268] 
[0.x.49269] 
//
[0.x.49270] 
//
// 第二步是将边界指标应用于边界的一部分。下面的代码分别为盒子的底部、顶部、左侧和右侧的边界分配了边界指示器。顶部边界的中心区域被赋予一个单独的边界指示器。这就是我们要施加向下力的地方。
//
[0.x.49271] 
[0.x.49272] 
[0.x.49273] 
[0.x.49274] 
[0.x.49275] 
[0.x.49276] 
[0.x.49277] 
[0.x.49278] 
[0.x.49279] 
[0.x.49280] 
[0.x.49281] 
[0.x.49282] 
[0.x.49283] 
[0.x.49284] 
[0.x.49285] 
[0.x.49286] 
[0.x.49287] 
[0.x.49288] 
[0.x.49289] 
[0.x.49290] 
//
// 接下来，确定由于边界值而产生的约束。 域的底角在[2.x.5746]方向保持不变--左下角也在[2.x.5747]方向。deal.II通常认为边界值是附着在边界的片段上的，即面，而不是单个顶点。的确，从数学上讲，对于无穷大的偏微分方程，我们不能把边界值分配给单个点。但是，由于我们试图重现一个广泛使用的基准，我们还是要这样做，并牢记我们有一个有限维的问题，在单个节点上施加边界条件是有效的。
//
[0.x.49291] 
[0.x.49292] 
[0.x.49293] 
[0.x.49294] 
[0.x.49295] 
[0.x.49296] 
[0.x.49297] 
[0.x.49298] 
[0.x.49299] 
[0.x.49300] 
[0.x.49301] 
//
// 检查当前面是否在底层边界上，如果是，则检查其顶点之一是否可能是左底层或右底层顶点。
//
[0.x.49302] 
[0.x.49303] 
[0.x.49304] 
[0.x.49305] 
[0.x.49306] 
//
[0.x.49307] 
[0.x.49308] 
[0.x.49309] 
[0.x.49310] 
[0.x.49311] 
[0.x.49312] 
[0.x.49313] 
[0.x.49314] 
[0.x.49315] 
[0.x.49316] 
[0.x.49317] 
//
[0.x.49318] 
[0.x.49319] 
[0.x.49320] 
[0.x.49321] 
[0.x.49322] 
//
[0.x.49323] 
[0.x.49324] 
[0.x.49325] 
[0.x.49326] 
[0.x.49327] 
[0.x.49328] 
[0.x.49329] 
//
[0.x.49330] 
[0.x.49331] 
[0.x.49332] 
[0.x.49333] 
[0.x.49334] 
[0.x.49335] 
[0.x.49336] 
[0.x.49337] 
[0.x.49338] 
//[2.x.5748] 
//
// 下一个函数制作了一个巨大的9乘9的块状矩阵，并且还设置了必要的块状向量。 这个矩阵的稀疏度模式包括滤波矩阵的稀疏度模式。它还初始化了我们将使用的任何块向量。
//
// 设置块本身并不复杂，并且遵循诸如 [2.x.5749] 等程序中已经完成的工作，例如。
//
[0.x.49339] 
[0.x.49340] 
[0.x.49341] 
[0.x.49342] 
[0.x.49343] 
[0.x.49344] 
[0.x.49345] 
[0.x.49346] 
//
[0.x.49347] 
[0.x.49348] 
[0.x.49349] 
[0.x.49350] 
//
[0.x.49351] 
[0.x.49352] 
[0.x.49353] 
[0.x.49354] 
[0.x.49355] 
//
// 该函数的大部分内容是设置这些块中哪些将实际包含任何内容，即哪些变量与哪些其他变量相耦合。这很麻烦，但也是必要的，以确保我们不会为我们的矩阵分配大量的条目，而这些条目最终会变成零。
//
// 你在下面看到的具体模式可能需要在纸上画一次，但是从我们在每次非线性迭代中必须组装的双线性形式的许多项来看，它是相对直接的方式。
//
// 使用命名空间 "SolutionComponents "中定义的符号名称有助于理解下面每个项所对应的内容，但它也使表达式变得冗长而不流畅。像[2.x.5750]这样的术语读起来就不太顺口，要么必须分成几行，要么几乎跑到每个屏幕的右边缘。因此，我们打开了一个大括号封闭的代码块，在这个代码块中，我们通过说 "使用命名空间SolutionComponents"，暂时使命名空间`SolutionComponents'中的名字可用，而不需要命名空间修饰语。
//
[0.x.49356] 
[0.x.49357] 
[0.x.49358] 
//
[0.x.49359] 
//
[0.x.49360] 
[0.x.49361] 
[0.x.49362] 
[0.x.49363] 
[0.x.49364] 
//
[0.x.49365] 
[0.x.49366] 
[0.x.49367] 
[0.x.49368] 
[0.x.49369] 
[0.x.49370] 
[0.x.49371] 
//
[0.x.49372] 
[0.x.49373] 
[0.x.49374] 
[0.x.49375] 
//
// /*位移的联结 [2.x.5751] 。
[0.x.49376] 
[0.x.49377] 
[0.x.49378] 
[0.x.49379] 
[0.x.49380] 
[0.x.49381] 
[0.x.49382] 
[0.x.49383] 
[0.x.49384] 
[0.x.49385] 
//
// /*松弛变量的耦合[2.x.5752] 
[0.x.49386] 
[0.x.49387] 
[0.x.49388] 
[0.x.49389] 
[0.x.49390] 
[0.x.49391] 
//
[0.x.49392] 
[0.x.49393] 
[0.x.49394] 
[0.x.49395] 
[0.x.49396] 
[0.x.49397] 
[0.x.49398] 
//
// 在创建稀疏模式之前，我们还必须设置约束。由于这个程序没有自适应地细化网格，我们唯一的约束是将所有的密度变量耦合在一起，强制执行体积约束。这将最终导致矩阵的密集子块，但我们对此没有什么办法。
//
[0.x.49399] 
[0.x.49400] 
[0.x.49401] 
[0.x.49402] 
//
[0.x.49403] 
[0.x.49404] 
[0.x.49405] 
[0.x.49406] 
[0.x.49407] 
[0.x.49408] 
[0.x.49409] 
[0.x.49410] 
[0.x.49411] 
//
[0.x.49412] 
//
// 现在我们终于可以为矩阵创建稀疏模式了，考虑到哪些变量与哪些其他变量耦合，以及我们对密度的约束。
//
[0.x.49413] 
//
// 矩阵中唯一没有处理的部分是过滤矩阵和它的转置。这些都是非局部（积分）运算符，目前deal.II还没有相关的函数。我们最终需要做的是遍历所有单元，并将此单元上的未过滤密度与小于阈值距离的相邻单元的所有过滤密度联系起来，反之亦然；目前，我们只关心建立与这种矩阵相对应的稀疏模式，所以我们执行等效循环，以后我们将写进矩阵的一个条目，现在我们只需向稀疏矩阵添加一个条目。
//
[0.x.49414] 
[0.x.49415] 
[0.x.49416] 
[0.x.49417] 
[0.x.49418] 
[0.x.49419] 
[0.x.49420] 
[0.x.49421] 
[0.x.49422] 
[0.x.49423] 
[0.x.49424] 
[0.x.49425] 
[0.x.49426] 
[0.x.49427] 
[0.x.49428] 
[0.x.49429] 
[0.x.49430] 
[0.x.49431] 
[0.x.49432] 
[0.x.49433] 
//
// 在生成了 "动态 "稀疏度模式之后，我们终于可以将其复制到用于将矩阵与稀疏度模式联系起来的结构中。由于稀疏模式很大很复杂，我们还将其输出到一个自己的文件中，以达到可视化的目的--换句话说，是为了 "可视化调试"。
//
[0.x.49434] 
//
[0.x.49435] 
[0.x.49436] 
//
[0.x.49437] 
//
// 剩下的就是正确确定各种向量及其块的大小，以及为（非线性）解向量的一些分量设置初始猜测。我们在这里使用解向量各个区块的符号分量名称，为了简洁起见，使用与上面的 "使用命名空间 "相同的技巧。
//
[0.x.49438] 
[0.x.49439] 
//
[0.x.49440] 
[0.x.49441] 
[0.x.49442] 
[0.x.49443] 
[0.x.49444] 
[0.x.49445] 
[0.x.49446] 
[0.x.49447] 
[0.x.49448] 
[0.x.49449] 
[0.x.49450] 
[0.x.49451] 
//[2.x.5753] 
//
// 接下来是一个在程序开始时使用一次的函数。它创建了一个矩阵[2.x.5754]，使过滤后的密度向量等于[2.x.5755]乘以未过滤的密度。 这个矩阵的创建是非同小可的，它在每次迭代中都会被使用，因此，与其像我们对牛顿矩阵那样对其进行改造，不如只做一次并单独存储。
//
// 这个矩阵的计算方式遵循上面已经使用过的大纲，以形成其稀疏模式。我们在这里对这个单独形成的矩阵的稀疏性模式重复这个过程，然后实际建立矩阵本身。你可能想看看本程序介绍中关于这个矩阵的定义。
//
[0.x.49452] 
[0.x.49453] 
[0.x.49454] 
//
// 滤波器的稀疏模式已经在setup_system()函数中确定并实现。我们从相应的块中复制该结构，并在这里再次使用它。
//
[0.x.49455] 
[0.x.49456] 
[0.x.49457] 
[0.x.49458] 
//
// 在建立了稀疏模式之后，现在我们重新做所有这些循环，以实际计算矩阵项的必要值。
//
[0.x.49459] 
[0.x.49460] 
[0.x.49461] 
[0.x.49462] 
[0.x.49463] 
[0.x.49464] 
[0.x.49465] 
[0.x.49466] 
[0.x.49467] 
[0.x.49468] 
[0.x.49469] 
[0.x.49470] 
//
//      
//
[0.x.49471] 
[0.x.49472] 
[0.x.49473] 
//
// 最后一步是对矩阵进行标准化处理，使每一行的条目之和等于1。
//
[0.x.49474] 
[0.x.49475] 
[0.x.49476] 
[0.x.49477] 
[0.x.49478] 
[0.x.49479] 
[0.x.49480] 
[0.x.49481] 
[0.x.49482] 
[0.x.49483] 
[0.x.49484] 
[0.x.49485] 
[0.x.49486] 
//
// 这个函数用于建立过滤矩阵。我们创建一个输入单元的一定半径内的所有单元迭代器的集合。这些是与过滤器有关的邻近单元。
//
[0.x.49487] 
[0.x.49488] 
[0.x.49489] 
[0.x.49490] 
[0.x.49491] 
[0.x.49492] 
[0.x.49493] 
//
[0.x.49494] 
[0.x.49495] 
//
[0.x.49496] 
[0.x.49497] 
[0.x.49498] 
[0.x.49499] 
[0.x.49500] 
[0.x.49501] 
[0.x.49502] 
[0.x.49503] 
[0.x.49504] 
[0.x.49505] 
[0.x.49506] 
[0.x.49507] 
[0.x.49508] 
[0.x.49509] 
[0.x.49510] 
[0.x.49511] 
[0.x.49512] 
[0.x.49513] 
[0.x.49514] 
[0.x.49515] 
[0.x.49516] 
[0.x.49517] 
[0.x.49518] 
[0.x.49519] 
[0.x.49520] 
[0.x.49521] 
[0.x.49522] 
[0.x.49523] 
[0.x.49524] 
//[2.x.5756] 
//
// setup_filter_matrix函数建立了一个只要网格不改变就不变的矩阵（在这个程序中我们反正不改变），而下一个函数建立了每次迭代都要解决的矩阵。这就是奇迹发生的地方。描述牛顿求解KKT条件的方法的线性方程组的组成部分在这里实现。
//
// 这个函数的顶部与大多数此类函数一样，只是设置了实际装配所需的各种变量，包括一大堆提取器。如果你以前看过 [2.x.5757] ，整个设置应该看起来很熟悉，尽管有些冗长。
//
[0.x.49525] 
[0.x.49526] 
[0.x.49527] 
[0.x.49528] 
//
[0.x.49529] 
[0.x.49530] 
//
[0.x.49531] 
[0.x.49532] 
[0.x.49533] 
[0.x.49534] 
[0.x.49535] 
[0.x.49536] 
[0.x.49537] 
[0.x.49538] 
[0.x.49539] 
[0.x.49540] 
[0.x.49541] 
[0.x.49542] 
[0.x.49543] 
[0.x.49544] 
//
[0.x.49545] 
[0.x.49546] 
//
[0.x.49547] 
[0.x.49548] 
//
[0.x.49549] 
//
[0.x.49550] 
[0.x.49551] 
[0.x.49552] 
[0.x.49553] 
[0.x.49554] 
//
// 在这一点上，我们对未过滤的密度进行过滤，并对未过滤的密度乘法器进行邻接（转置）操作，都是对当前非线性解决方案的最佳猜测。后来我们用它来告诉我们，我们过滤的密度与应用于未过滤密度的过滤器有多大的偏差。这是因为在非线性问题的解中，我们有[2.x.5758]，但在中间迭代中，我们一般有[2.x.5759]，然后 "残差"[2.x.5760]将出现在我们下面计算的牛顿更新方程中的右边。
//
[0.x.49555] 
[0.x.49556] 
[0.x.49557] 
[0.x.49558] 
//
[0.x.49559] 
[0.x.49560] 
[0.x.49561] 
[0.x.49562] 
[0.x.49563] 
[0.x.49564] 
[0.x.49565] 
[0.x.49566] 
//
[0.x.49567] 
[0.x.49568] 
[0.x.49569] 
[0.x.49570] 
[0.x.49571] 
[0.x.49572] 
[0.x.49573] 
[0.x.49574] 
[0.x.49575] 
[0.x.49576] 
[0.x.49577] 
[0.x.49578] 
[0.x.49579] 
[0.x.49580] 
[0.x.49581] 
[0.x.49582] 
[0.x.49583] 
//
[0.x.49584] 
[0.x.49585] 
[0.x.49586] 
[0.x.49587] 
//
[0.x.49588] 
//
[0.x.49589] 
//
[0.x.49590] 
[0.x.49591] 
//
// 作为构建系统矩阵的一部分，我们需要从我们目前对解决方案的猜测中获取数值。以下几行代码将检索出所需的值。
//
[0.x.49592] 
[0.x.49593] 
[0.x.49594] 
[0.x.49595] 
[0.x.49596] 
[0.x.49597] 
[0.x.49598] 
[0.x.49599] 
[0.x.49600] 
[0.x.49601] 
[0.x.49602] 
[0.x.49603] 
[0.x.49604] 
[0.x.49605] 
[0.x.49606] 
[0.x.49607] 
[0.x.49608] 
[0.x.49609] 
[0.x.49610] 
[0.x.49611] 
[0.x.49612] 
[0.x.49613] 
[0.x.49614] 
[0.x.49615] 
[0.x.49616] 
[0.x.49617] 
[0.x.49618] 
[0.x.49619] 
[0.x.49620] 
[0.x.49621] 
[0.x.49622] 
[0.x.49623] 
[0.x.49624] 
//
[0.x.49625] 
[0.x.49626] 
//
// 我们还需要几个与来自拉格朗日的第一导数的测试函数相对应的数值，也就是[2.x.5761]函数。这些都是在这里计算的。
//
[0.x.49627] 
[0.x.49628] 
[0.x.49629] 
[0.x.49630] 
[0.x.49631] 
[0.x.49632] 
//
[0.x.49633] 
[0.x.49634] 
[0.x.49635] 
[0.x.49636] 
[0.x.49637] 
[0.x.49638] 
[0.x.49639] 
//
[0.x.49640] 
[0.x.49641] 
[0.x.49642] 
[0.x.49643] 
[0.x.49644] 
[0.x.49645] 
[0.x.49646] 
//
[0.x.49647] 
[0.x.49648] 
[0.x.49649] 
//
[0.x.49650] 
[0.x.49651] 
//
[0.x.49652] 
[0.x.49653] 
//
[0.x.49654] 
[0.x.49655] 
[0.x.49656] 
//
[0.x.49657] 
[0.x.49658] 
//
// 最后，我们需要来自拉格朗日的第二轮导数的数值，即[2.x.5762]函数。这些是在这里计算的。
//
[0.x.49659] 
[0.x.49660] 
[0.x.49661] 
[0.x.49662] 
[0.x.49663] 
//
[0.x.49664] 
[0.x.49665] 
[0.x.49666] 
[0.x.49667] 
[0.x.49668] 
[0.x.49669] 
[0.x.49670] 
//
[0.x.49671] 
[0.x.49672] 
//
[0.x.49673] 
[0.x.49674] 
[0.x.49675] 
[0.x.49676] 
[0.x.49677] 
//
[0.x.49678] 
[0.x.49679] 
//
[0.x.49680] 
[0.x.49681] 
//
[0.x.49682] 
[0.x.49683] 
[0.x.49684] 
//
[0.x.49685] 
[0.x.49686] 
[0.x.49687] 
//
// 这就是实际工作的开始。在下文中，我们将建立矩阵的所有项--它们数量众多，而且不完全是不言自明的，也取决于之前的解和它的导数（我们已经在上面评估了这些导数，并将其放入名为`old_*`的变量中）。为了理解这些条款的每一个对应的内容，你要看一下上面介绍中这些条款的明确形式。                    被驱动到0的方程的右边给出了寻找局部最小值的所有KKT条件--每个单独方程的描述都是随着右边的计算给出的。
//
// /* 方程1 [2.x.5763] 。
[0.x.49688] 
[0.x.49689] 
[0.x.49690] 
//
[0.x.49691] 
//
[0.x.49692] 
[0.x.49693] 
[0.x.49694] 
[0.x.49695] 
[0.x.49696] 
[0.x.49697] 
[0.x.49698] 
[0.x.49699] 
[0.x.49700] 
[0.x.49701] 
[0.x.49702] 
//
[0.x.49703] 
[0.x.49704] 
[0.x.49705] 
[0.x.49706] 
[0.x.49707] 
[0.x.49708] 
[0.x.49709] 
[0.x.49710] 
[0.x.49711] 
[0.x.49712] 
//
[0.x.49713] 
[0.x.49714] 
[0.x.49715] 
[0.x.49716] 
[0.x.49717] 
[0.x.49718] 
[0.x.49719] 
[0.x.49720] 
[0.x.49721] 
[0.x.49722] 
//
// /* 方程2 [2.x.5764] 
[0.x.49723] 
[0.x.49724] 
[0.x.49725] 
[0.x.49726] 
[0.x.49727] 
[0.x.49728] 
[0.x.49729] 
[0.x.49730] 
[0.x.49731] 
[0.x.49732] 
[0.x.49733] 
//
[0.x.49734] 
[0.x.49735] 
[0.x.49736] 
[0.x.49737] 
[0.x.49738] 
[0.x.49739] 
[0.x.49740] 
//
[0.x.49741] 
//
// /方程3，这与过滤器有关，其内容是
//
[0.x.49742] 
[0.x.49743] 
[0.x.49744] 
[0.x.49745] 
[0.x.49746] 
[0.x.49747] 
//
// /* 方程4：原始可行性 [2.x.5765] 
[0.x.49748] 
[0.x.49749] 
[0.x.49750] 
//
[0.x.49751] 
[0.x.49752] 
[0.x.49753] 
[0.x.49754] 
[0.x.49755] 
[0.x.49756] 
[0.x.49757] 
[0.x.49758] 
[0.x.49759] 
[0.x.49760] 
//
[0.x.49761] 
[0.x.49762] 
[0.x.49763] 
[0.x.49764] 
[0.x.49765] 
[0.x.49766] 
[0.x.49767] 
[0.x.49768] 
//
// /等式5：原始可行性 [2.x.5766] 
[0.x.49769] 
[0.x.49770] 
[0.x.49771] 
[0.x.49772] 
//
// /等式6：原始可行性 [2.x.5767] [0.x.5767] // /等式6：原始可行性 
[0.x.49773] 
[0.x.49774] 
[0.x.49775] 
[0.x.49776] 
//
// /等式7：原始可行性
//
// - 带有过滤器的部分
//
[0.x.49777] 
[0.x.49778] 
[0.x.49779] 
[0.x.49780] 
//
// /* 方程8：互补的松弛 [2.x.5768] 。
[0.x.49781] 
[0.x.49782] 
[0.x.49783] 
//
[0.x.49784] 
[0.x.49785] 
[0.x.49786] 
//
// /* 方程9：互补的松弛 [2.x.5769] // /* 补足的松弛 
[0.x.49787] 
[0.x.49788] 
[0.x.49789] 
//
[0.x.49790] 
[0.x.49791] 
[0.x.49792] 
[0.x.49793] 
[0.x.49794] 
[0.x.49795] 
//
// 现在我们已经把所有的东西都组装好了，我们要做的就是处理（Dirichlet）边界条件的影响和其他约束。我们将前者与当前单元的贡献结合在一起，然后让AffineConstraint类来处理后者，同时将当前单元的贡献复制到全局线性系统中。
//
[0.x.49796] 
[0.x.49797] 
[0.x.49798] 
[0.x.49799] 
[0.x.49800] 
//
[0.x.49801] 
[0.x.49802] 
[0.x.49803] 
[0.x.49804] 
//
// 在积累了所有属于牛顿矩阵的项之后，我们现在还必须计算右手边的项（即负残差）。我们已经在另一个函数中做了这个工作，所以我们在这里调用它。
//
[0.x.49805] 
//
// 这里我们使用我们已经构建好的过滤器矩阵。我们只需要整合这个应用于测试函数的过滤器，它是片状常数，所以整合变成了简单的乘以单元格的度量。 遍历预制的过滤器矩阵可以让我们使用哪些单元格在过滤器中或不在过滤器中的信息，而不需要再次重复检查邻居单元格。
//
[0.x.49806] 
[0.x.49807] 
[0.x.49808] 
[0.x.49809] 
[0.x.49810] 
[0.x.49811] 
[0.x.49812] 
[0.x.49813] 
[0.x.49814] 
[0.x.49815] 
//
[0.x.49816] 
[0.x.49817] 
[0.x.49818] 
[0.x.49819] 
[0.x.49820] 
[0.x.49821] 
[0.x.49822] 
[0.x.49823] 
[0.x.49824] 
[0.x.49825] 
[0.x.49826] 
//[2.x.5770] 
//
// 我们将需要在每次迭代中解决一个线性系统。我们暂时使用一个直接求解器--对于一个有这么多非零值的矩阵来说，这显然不是一个有效的选择，而且它不会扩展到任何有趣的地方。对于 "真正的 "应用，我们将需要一个迭代求解器，但系统的复杂性意味着一个迭代求解器的算法将需要大量的工作。因为这不是当前程序的重点，所以我们简单地坚持使用我们在这里的直接求解器--该函数遵循与[2.x.5771]中使用的相同结构。
//
[0.x.49827] 
[0.x.49828] 
[0.x.49829] 
[0.x.49830] 
//
[0.x.49831] 
[0.x.49832] 
//
[0.x.49833] 
[0.x.49834] 
[0.x.49835] 
//
[0.x.49836] 
//
[0.x.49837] 
[0.x.49838] 
//[2.x.5772] 
//
// 接下来的几个函数处理优化算法的具体部分，最主要的是决定通过求解线性化（牛顿）系统计算出的方向是否可行，如果可行，我们要在这个方向上走多远。
//
// [2.x.5773] 
//
// 我们先用一个函数进行二进制搜索，找出符合对偶可行性的最大步骤--也就是说，我们能走多远，使 [2.x.5774] 和 [2.x.5775] 。该函数返回一对数值，分别代表[2.x.5776]和[2.x.5777]的松弛变量。
//
[0.x.49839] 
[0.x.49840] 
[0.x.49841] 
[0.x.49842] 
[0.x.49843] 
[0.x.49844] 
[0.x.49845] 
[0.x.49846] 
//
[0.x.49847] 
[0.x.49848] 
[0.x.49849] 
[0.x.49850] 
[0.x.49851] 
[0.x.49852] 
[0.x.49853] 
[0.x.49854] 
[0.x.49855] 
//
[0.x.49856] 
[0.x.49857] 
[0.x.49858] 
[0.x.49859] 
[0.x.49860] 
//
[0.x.49861] 
[0.x.49862] 
[0.x.49863] 
[0.x.49864] 
[0.x.49865] 
//
[0.x.49866] 
[0.x.49867] 
//
[0.x.49868] 
[0.x.49869] 
//
[0.x.49870] 
[0.x.49871] 
[0.x.49872] 
[0.x.49873] 
[0.x.49874] 
[0.x.49875] 
[0.x.49876] 
[0.x.49877] 
[0.x.49878] 
[0.x.49879] 
//
[0.x.49880] 
[0.x.49881] 
[0.x.49882] 
[0.x.49883] 
//
[0.x.49884] 
[0.x.49885] 
[0.x.49886] 
[0.x.49887] 
[0.x.49888] 
//
[0.x.49889] 
[0.x.49890] 
//[2.x.5778] 
//
// 下一个函数计算一个围绕 "测试解向量 "线性化的右手向量，我们可以用它来观察KKT条件的大小。 然后，这将用于在缩小障碍大小之前测试收敛性，以及计算[2.x.5779]的优点。
//
// 这个函数冗长而复杂，但它实际上只是复制了上面`assemble_system()`函数的右侧部分的内容。
//
[0.x.49891] 
[0.x.49892] 
[0.x.49893] 
[0.x.49894] 
//
// 我们首先创建一个零向量，其大小和阻塞为system_rhs
//
[0.x.49895] 
[0.x.49896] 
//
[0.x.49897] 
[0.x.49898] 
[0.x.49899] 
[0.x.49900] 
[0.x.49901] 
[0.x.49902] 
[0.x.49903] 
[0.x.49904] 
[0.x.49905] 
[0.x.49906] 
[0.x.49907] 
[0.x.49908] 
[0.x.49909] 
[0.x.49910] 
//
[0.x.49911] 
[0.x.49912] 
//
[0.x.49913] 
[0.x.49914] 
//
[0.x.49915] 
//
[0.x.49916] 
[0.x.49917] 
//
[0.x.49918] 
[0.x.49919] 
//
[0.x.49920] 
[0.x.49921] 
[0.x.49922] 
[0.x.49923] 
[0.x.49924] 
[0.x.49925] 
[0.x.49926] 
//
[0.x.49927] 
[0.x.49928] 
[0.x.49929] 
[0.x.49930] 
[0.x.49931] 
[0.x.49932] 
[0.x.49933] 
[0.x.49934] 
//
[0.x.49935] 
[0.x.49936] 
[0.x.49937] 
[0.x.49938] 
[0.x.49939] 
[0.x.49940] 
[0.x.49941] 
[0.x.49942] 
[0.x.49943] 
[0.x.49944] 
[0.x.49945] 
[0.x.49946] 
[0.x.49947] 
[0.x.49948] 
[0.x.49949] 
[0.x.49950] 
[0.x.49951] 
//
[0.x.49952] 
[0.x.49953] 
[0.x.49954] 
[0.x.49955] 
//
[0.x.49956] 
//
[0.x.49957] 
//
 
[0.x.49959] 
//
[0.x.49960] 
[0.x.49961] 
[0.x.49962] 
[0.x.49963] 
[0.x.49964] 
[0.x.49965] 
[0.x.49966] 
[0.x.49967] 
[0.x.49968] 
[0.x.49969] 
[0.x.49970] 
[0.x.49971] 
[0.x.49972] 
[0.x.49973] 
[0.x.49974] 
[0.x.49975] 
[0.x.49976] 
[0.x.49977] 
[0.x.49978] 
[0.x.49979] 
[0.x.49980] 
[0.x.49981] 
[0.x.49982] 
[0.x.49983] 
[0.x.49984] 
[0.x.49985] 
[0.x.49986] 
[0.x.49987] 
[0.x.49988] 
[0.x.49989] 
[0.x.49990] 
[0.x.49991] 
[0.x.49992] 
//
[0.x.49993] 
[0.x.49994] 
[0.x.49995] 
[0.x.49996] 
[0.x.49997] 
[0.x.49998] 
[0.x.49999] 
[0.x.50000] 
//
[0.x.50001] 
[0.x.50002] 
[0.x.50003] 
[0.x.50004] 
[0.x.50005] 
[0.x.50006] 
[0.x.50007] 
//
[0.x.50008] 
[0.x.50009] 
[0.x.50010] 
[0.x.50011] 
[0.x.50012] 
[0.x.50013] 
[0.x.50014] 
//
[0.x.50015] 
[0.x.50016] 
[0.x.50017] 
//
[0.x.50018] 
[0.x.50019] 
//
[0.x.50020] 
[0.x.50021] 
//
[0.x.50022] 
[0.x.50023] 
[0.x.50024] 
//
// 方程1：这个方程以及方程
//
[0.x.50025] 
[0.x.50026] 
[0.x.50027] 
[0.x.50028] 
[0.x.50029] 
[0.x.50030] 
[0.x.50031] 
[0.x.50032] 
[0.x.50033] 
[0.x.50034] 
[0.x.50035] 
[0.x.50036] 
[0.x.50037] 
[0.x.50038] 
[0.x.50039] 
[0.x.50040] 
[0.x.50041] 
[0.x.50042] 
//
// /方程2；边界项将被进一步添加。
//
[0.x.50043] 
[0.x.50044] 
[0.x.50045] 
[0.x.50046] 
[0.x.50047] 
[0.x.50048] 
[0.x.50049] 
[0.x.50050] 
[0.x.50051] 
[0.x.50052] 
//
// /* 方程3 [2.x.5780] 
[0.x.50053] 
[0.x.50054] 
[0.x.50055] 
[0.x.50056] 
[0.x.50057] 
[0.x.50058] 
[0.x.50059] 
[0.x.50060] 
[0.x.50061] 
//
//* 方程4；边界项将再次被处理。
//
[0.x.50062] 
[0.x.50063] 
[0.x.50064] 
[0.x.50065] 
[0.x.50066] 
[0.x.50067] 
[0.x.50068] 
[0.x.50069] 
[0.x.50070] 
[0.x.50071] 
[0.x.50072] 
[0.x.50073] 
//
// 方程5：该方程设定了下限的松弛量。
//
 
[0.x.50075] 
[0.x.50076] 
[0.x.50077] 
[0.x.50078] 
[0.x.50079] 
//
// 方程6：该方程设定了上层松弛量
//
[0.x.50080] 
[0.x.50081] 
[0.x.50082] 
[0.x.50083] 
[0.x.50084] 
[0.x.50085] 
//
// 等式7：这是在
//
[0.x.50086] 
[0.x.50087] 
[0.x.50088] 
[0.x.50089] 
[0.x.50090] 
[0.x.50091] 
[0.x.50092] 
[0.x.50093] 
//
// /方程8：这与方程9一起给出了
//
[0.x.50094] 
[0.x.50095] 
[0.x.50096] 
[0.x.50097] 
[0.x.50098] 
[0.x.50099] 
[0.x.50100] 
[0.x.50101] 
//
// /方程9 [2.x.5781] [0.x.50102] // // //方程9。
[0.x.50102] 
[0.x.50103] 
[0.x.50104] 
[0.x.50105] 
[0.x.50106] 
[0.x.50107] 
[0.x.50108] 
//
[0.x.50109] 
[0.x.50110] 
[0.x.50111] 
[0.x.50112] 
[0.x.50113] 
[0.x.50114] 
//
[0.x.50115] 
[0.x.50116] 
[0.x.50117] 
[0.x.50118] 
[0.x.50119] 
[0.x.50120] 
[0.x.50121] 
//
[0.x.50122] 
[0.x.50123] 
[0.x.50124] 
[0.x.50125] 
[0.x.50126] 
//
[0.x.50127] 
[0.x.50128] 
[0.x.50129] 
[0.x.50130] 
[0.x.50131] 
[0.x.50132] 
[0.x.50133] 
[0.x.50134] 
[0.x.50135] 
//
[0.x.50136] 
[0.x.50137] 
[0.x.50138] 
[0.x.50139] 
[0.x.50140] 
//
[0.x.50141] 
[0.x.50142] 
[0.x.50143] 
[0.x.50144] 
//
[0.x.50145] 
[0.x.50146] 
//[2.x.5782] 
//
// 我们在这里使用的算法使用一个 "看门狗 "策略来确定从当前迭代的位置和程度。 我们将看门狗策略建立在一个精确的[2.x.5783]功绩函数上。这个函数计算一个给定的、假定的、下一个迭代的精确[2.x.5784]功绩。
//
//优点函数由目标函数的总和（简单来说就是外力的积分（在域的边界上）乘以测试解的位移值（通常是当前解加上牛顿更新的某个倍数），以及残差向量的拉格朗日乘数分量的[2.x.5785]准则组成。下面的代码依次计算这些部分。
//
[0.x.50147] 
[0.x.50148] 
[0.x.50149] 
[0.x.50150] 
[0.x.50151] 
//
// 从计算目标函数开始。
//
[0.x.50152] 
[0.x.50153] 
[0.x.50154] 
[0.x.50155] 
[0.x.50156] 
[0.x.50157] 
[0.x.50158] 
[0.x.50159] 
[0.x.50160] 
[0.x.50161] 
[0.x.50162] 
[0.x.50163] 
[0.x.50164] 
[0.x.50165] 
[0.x.50166] 
[0.x.50167] 
[0.x.50168] 
//
[0.x.50169] 
//
[0.x.50170] 
//
[0.x.50171] 
[0.x.50172] 
[0.x.50173] 
[0.x.50174] 
[0.x.50175] 
[0.x.50176] 
[0.x.50177] 
[0.x.50178] 
[0.x.50179] 
[0.x.50180] 
[0.x.50181] 
[0.x.50182] 
[0.x.50183] 
[0.x.50184] 
[0.x.50185] 
[0.x.50186] 
[0.x.50187] 
//
[0.x.50188] 
[0.x.50189] 
[0.x.50190] 
[0.x.50191] 
[0.x.50192] 
[0.x.50193] 
[0.x.50194] 
[0.x.50195] 
//
[0.x.50196] 
[0.x.50197] 
[0.x.50198] 
[0.x.50199] 
[0.x.50200] 
[0.x.50201] 
[0.x.50202] 
[0.x.50203] 
[0.x.50204] 
[0.x.50205] 
[0.x.50206] 
[0.x.50207] 
[0.x.50208] 
//然后
//计算残差，并取对应于拉格朗日多边形的组件的[2.x.5786]准则。我们把这些加到上面计算的目标函数中，并在底部返回总和。
//
[0.x.50209] 
//
[0.x.50210] 
[0.x.50211] 
[0.x.50212] 
[0.x.50213] 
[0.x.50214] 
[0.x.50215] 
[0.x.50216] 
[0.x.50217] 
[0.x.50218] 
[0.x.50219] 
[0.x.50220] 
[0.x.50221] 
//
[0.x.50222] 
[0.x.50223] 
[0.x.50224] 
[0.x.50225] 
[0.x.50226] 
//
// [2.x.5787] 
//
// 接下来是实际计算从当前状态（作为第一个参数传递）开始的搜索方向并返回结果向量的函数。为此，该函数首先调用与牛顿系统相对应的线性系统的组合函数，并对其进行求解。
//
// 这个函数还更新了优点函数中的惩罚乘数，然后返回最大比例的可行步骤。它使用`calculate_max_step_sizes()`函数来找到满足 [2.x.5788] 和 [2.x.5789] 的最大可行步骤。
//
[0.x.50227] 
[0.x.50228] 
[0.x.50229] 
[0.x.50230] 
[0.x.50231] 
//
// 接下来我们要更新punice_multiplier。 从本质上讲，更大的惩罚乘数使我们更多考虑约束条件。 观察与我们的决策变量有关的Hessian和梯度，并将其与我们的约束误差的规范相比较，可以确保我们的优点函数是 "精确的"
//
// 也就是说，它在与目标函数相同的位置有一个最小值。 由于我们的优点函数对任何超过某个最小值的惩罚乘数都是精确的，所以我们只保留计算值，如果它增加了惩罚乘数。
//
[0.x.50232] 
[0.x.50233] 
[0.x.50234] 
[0.x.50235] 
[0.x.50236] 
[0.x.50237] 
[0.x.50238] 
[0.x.50239] 
[0.x.50240] 
[0.x.50241] 
[0.x.50242] 
[0.x.50243] 
[0.x.50244] 
[0.x.50245] 
[0.x.50246] 
[0.x.50247] 
[0.x.50248] 
[0.x.50249] 
[0.x.50250] 
[0.x.50251] 
//
[0.x.50252] 
[0.x.50253] 
[0.x.50254] 
[0.x.50255] 
[0.x.50256] 
[0.x.50257] 
[0.x.50258] 
[0.x.50259] 
//
[0.x.50260] 
[0.x.50261] 
[0.x.50262] 
[0.x.50263] 
[0.x.50264] 
[0.x.50265] 
//
[0.x.50266] 
//
// 基于所有这些，我们现在可以计算出原始变量和对偶变量（拉格朗日乘数）的步长。一旦我们有了这些，我们就可以对解向量的分量进行缩放，这就是这个函数的回报。
//
[0.x.50267] 
[0.x.50268] 
[0.x.50269] 
[0.x.50270] 
//
[0.x.50271] 
[0.x.50272] 
[0.x.50273] 
[0.x.50274] 
[0.x.50275] 
[0.x.50276] 
[0.x.50277] 
[0.x.50278] 
[0.x.50279] 
//
[0.x.50280] 
[0.x.50281] 
//
// [2.x.5790] 
//
// 下一个函数接着实现了直线搜索的反向跟踪算法。它不断缩小步长，直到找到一个优点减少的步长，然后根据当前的状态向量，以及要进入的方向，乘以步长，返回新的位置。
//
[0.x.50282] 
[0.x.50283] 
[0.x.50284] 
[0.x.50285] 
[0.x.50286] 
[0.x.50287] 
[0.x.50288] 
[0.x.50289] 
[0.x.50290] 
[0.x.50291] 
[0.x.50292] 
[0.x.50293] 
[0.x.50294] 
[0.x.50295] 
[0.x.50296] 
[0.x.50297] 
[0.x.50298] 
[0.x.50299] 
[0.x.50300] 
[0.x.50301] 
[0.x.50302] 
[0.x.50303] 
[0.x.50304] 
//[2.x.5791] 
//
// 本块中的最后一个辅助函数是检查是否充分满足KKT条件，以便整个算法可以降低障碍物的大小。它通过计算残差的[2.x.5792]准则来实现，这就是`calculate_test_rhs()`的计算。
//
[0.x.50305] 
[0.x.50306] 
[0.x.50307] 
[0.x.50308] 
[0.x.50309] 
//
[0.x.50310] 
[0.x.50311] 
//
[0.x.50312] 
[0.x.50313] 
//
[0.x.50314] 
[0.x.50315] 
//[2.x.5793] 
//
// 后处理函数中的第一个函数在VTU文件中输出信息，用于可视化。它看起来很长，但实际上与 [2.x.5794] 中所做的一样，例如，只是增加了（很多）解决方案的变量。
//
[0.x.50316] 
[0.x.50317] 
[0.x.50318] 
[0.x.50319] 
[0.x.50320] 
[0.x.50321] 
[0.x.50322] 
[0.x.50323] 
[0.x.50324] 
[0.x.50325] 
[0.x.50326] 
[0.x.50327] 
[0.x.50328] 
[0.x.50329] 
[0.x.50330] 
[0.x.50331] 
[0.x.50332] 
[0.x.50333] 
[0.x.50334] 
[0.x.50335] 
[0.x.50336] 
[0.x.50337] 
[0.x.50338] 
[0.x.50339] 
[0.x.50340] 
[0.x.50341] 
[0.x.50342] 
[0.x.50343] 
[0.x.50344] 
[0.x.50345] 
[0.x.50346] 
[0.x.50347] 
[0.x.50348] 
[0.x.50349] 
[0.x.50350] 
[0.x.50351] 
[0.x.50352] 
//
[0.x.50353] 
[0.x.50354] 
[0.x.50355] 
[0.x.50356] 
[0.x.50357] 
[0.x.50358] 
[0.x.50359] 
//
[0.x.50360] 
[0.x.50361] 
[0.x.50362] 
//
// 其中第二个函数将解决方案输出为`.stl`文件，用于3D打印。STL](https:en.wikipedia.org/wiki/STL_(file_format))文件是由三角形和法线向量组成的，我们将用它来显示所有那些密度值大于0的单元，首先将网格从[2.x.5795]值挤出到[2.x.5796] ，然后为密度值足够大的单元的每个面生成两个三角形。当从外面看时，三角形节点必须逆时针走，法向量必须是指向外部的单位向量，这需要进行一些检查。
//
[0.x.50363] 
[0.x.50364] 
[0.x.50365] 
[0.x.50366] 
[0.x.50367] 
[0.x.50368] 
//
[0.x.50369] 
[0.x.50370] 
//
[0.x.50371] 
[0.x.50372] 
//
[0.x.50373] 
[0.x.50374] 
[0.x.50375] 
[0.x.50376] 
[0.x.50377] 
//
// 我们现在已经找到了一个密度值大于0的单元。让我们先写出底部和顶部的面。由于上面提到的排序问题，我们必须确保了解一个单元的坐标系是右旋的还是左旋的。我们通过询问从顶点0开始的两条边的方向以及它们是否形成一个右手坐标系来做到这一点。
//
[0.x.50378] 
[0.x.50379] 
[0.x.50380] 
[0.x.50381] 
[0.x.50382] 
[0.x.50383] 
[0.x.50384] 
[0.x.50385] 
//
[0.x.50386] 
[0.x.50387] 
//
// /*在z=0处写出一个边。 [2.x.5797] // /*写出一个边。
[0.x.50388] 
[0.x.50389] 
[0.x.50390] 
[0.x.50391] 
[0.x.50392] 
[0.x.50393] 
[0.x.50394] 
[0.x.50395] 
[0.x.50396] 
[0.x.50397] 
[0.x.50398] 
[0.x.50399] 
[0.x.50400] 
[0.x.50401] 
[0.x.50402] 
[0.x.50403] 
[0.x.50404] 
[0.x.50405] 
[0.x.50406] 
[0.x.50407] 
[0.x.50408] 
[0.x.50409] 
//
// /*在z=高度处写下一个边。 [2.x.5798] 
[0.x.50410] 
[0.x.50411] 
[0.x.50412] 
[0.x.50413] 
[0.x.50414] 
[0.x.50415] 
[0.x.50416] 
[0.x.50417] 
[0.x.50418] 
[0.x.50419] 
[0.x.50420] 
[0.x.50421] 
[0.x.50422] 
[0.x.50423] 
[0.x.50424] 
[0.x.50425] 
[0.x.50426] 
[0.x.50427] 
[0.x.50428] 
[0.x.50429] 
[0.x.50430] 
[0.x.50431] 
[0.x.50432] 
[0.x.50433] 
[0.x.50434] 
//
// /*在z=0处写出一边。 [2.x.5799] 
 
[0.x.50436] 
[0.x.50437] 
[0.x.50438] 
[0.x.50439] 
[0.x.50440] 
[0.x.50441] 
[0.x.50442] 
[0.x.50443] 
[0.x.50444] 
[0.x.50445] 
[0.x.50446] 
[0.x.50447] 
[0.x.50448] 
[0.x.50449] 
[0.x.50450] 
[0.x.50451] 
[0.x.50452] 
[0.x.50453] 
[0.x.50454] 
[0.x.50455] 
[0.x.50456] 
//
// /*在z=高度处写出一个边。 [2.x.5800] 
[0.x.50457] 
[0.x.50458] 
[0.x.50459] 
[0.x.50460] 
[0.x.50461] 
[0.x.50462] 
[0.x.50463] 
[0.x.50464] 
[0.x.50465] 
[0.x.50466] 
[0.x.50467] 
[0.x.50468] 
[0.x.50469] 
[0.x.50470] 
[0.x.50471] 
[0.x.50472] 
[0.x.50473] 
[0.x.50474] 
[0.x.50475] 
[0.x.50476] 
[0.x.50477] 
[0.x.50478] 
[0.x.50479] 
//
// 接下来我们需要处理单元格的四个面，扩展到[2.x.5801]方向。然而，我们只需要写这些面，如果该面在域的边界上，或者它是密度大于0.5的单元和密度小于0.5的单元之间的界面。
//
[0.x.50480] 
[0.x.50481] 
[0.x.50482] 
[0.x.50483] 
[0.x.50484] 
[0.x.50485] 
//
[0.x.50486] 
[0.x.50487] 
[0.x.50488] 
[0.x.50489] 
[0.x.50490] 
[0.x.50491] 
[0.x.50492] 
[0.x.50493] 
[0.x.50494] 
[0.x.50495] 
[0.x.50496] 
[0.x.50497] 
[0.x.50498] 
[0.x.50499] 
[0.x.50500] 
[0.x.50501] 
[0.x.50502] 
[0.x.50503] 
[0.x.50504] 
[0.x.50505] 
[0.x.50506] 
[0.x.50507] 
[0.x.50508] 
[0.x.50509] 
[0.x.50510] 
[0.x.50511] 
[0.x.50512] 
[0.x.50513] 
[0.x.50514] 
[0.x.50515] 
[0.x.50516] 
[0.x.50517] 
[0.x.50518] 
[0.x.50519] 
[0.x.50520] 
[0.x.50521] 
[0.x.50522] 
[0.x.50523] 
[0.x.50524] 
[0.x.50525] 
[0.x.50526] 
[0.x.50527] 
[0.x.50528] 
[0.x.50529] 
[0.x.50530] 
[0.x.50531] 
[0.x.50532] 
[0.x.50533] 
[0.x.50534] 
[0.x.50535] 
[0.x.50536] 
[0.x.50537] 
[0.x.50538] 
[0.x.50539] 
[0.x.50540] 
[0.x.50541] 
[0.x.50542] 
[0.x.50543] 
[0.x.50544] 
[0.x.50545] 
[0.x.50546] 
[0.x.50547] 
[0.x.50548] 
[0.x.50549] 
[0.x.50550] 
[0.x.50551] 
[0.x.50552] 
[0.x.50553] 
[0.x.50554] 
[0.x.50555] 
[0.x.50556] 
[0.x.50557] 
[0.x.50558] 
[0.x.50559] 
[0.x.50560] 
[0.x.50561] 
[0.x.50562] 
[0.x.50563] 
[0.x.50564] 
[0.x.50565] 
[0.x.50566] 
[0.x.50567] 
[0.x.50568] 
[0.x.50569] 
[0.x.50570] 
[0.x.50571] 
[0.x.50572] 
[0.x.50573] 
[0.x.50574] 
[0.x.50575] 
[0.x.50576] 
[0.x.50577] 
[0.x.50578] 
[0.x.50579] 
[0.x.50580] 
[0.x.50581] 
[0.x.50582] 
[0.x.50583] 
[0.x.50584] 
[0.x.50585] 
//
// [2.x.5802] 
//
// 这个函数最终提供了整体的驱动逻辑。从总体上看，这是一个相当复杂的函数，主要是因为优化算法很困难：它不仅仅是像[2.x.5803]中那样找到一个牛顿方向，然后在这个方向上再走一个固定的距离，而是要（i）确定当前步骤中的最佳对数障碍惩罚参数应该是什么，（ii）通过复杂的算法来确定我们要走多远，还有其他成分。让我们看看如何在下面的文件中把它分解成小块。
//
// 该函数一开始就很简单，首先设置了网格、DoFHandler，然后是下面所需的各种线性代数对象。
//
[0.x.50586] 
[0.x.50587] 
[0.x.50588] 
[0.x.50589] 
//
[0.x.50590] 
[0.x.50591] 
//
[0.x.50592] 
//
[0.x.50593] 
[0.x.50594] 
//
[0.x.50595] 
[0.x.50596] 
[0.x.50597] 
[0.x.50598] 
//
// 然后，我们设置一些影响优化算法的对数屏障和直线搜索部分的参数。
//
[0.x.50599] 
[0.x.50600] 
//
[0.x.50601] 
[0.x.50602] 
//
// 现在开始进行主迭代。整个算法通过使用一个外循环来工作，在这个外循环中，我们一直循环到（i）对数障碍参数变得足够小，或者（ii）我们已经达到收敛。在任何情况下，如果最终的迭代次数过多，我们就会终止。这个整体结构被编码为一个 "do { ... } while (...)`循环，其中收敛条件在底部。
//
[0.x.50603] 
[0.x.50604] 
//
[0.x.50605] 
[0.x.50606] 
[0.x.50607] 
[0.x.50608] 
//
// 在这个外循环中，我们有一个内循环，在这个内循环中，我们试图使用介绍中描述的看门狗算法找到一个更新方向。
//
// 看门狗算法本身的总体思路是这样的。对于最大的`max_uphill_steps`（即上述 "内循环 "中的一个循环）的尝试，我们使用`find_max_step()`来计算牛顿更新步骤，并在`nonlinear_solution`向量中加上这些。 在每一次尝试中（从上一次尝试结束时到达的地方开始），我们检查我们是否已经达到了上述优点函数的目标值。目标值是根据本算法的起始位置（看门狗循环开始时的`nonlinear_solution'，保存为`看门狗_state'）和本循环第一个回合中`find_max_step()'提供的第一个建议方向（`k=0'情况）计算的。
//
[0.x.50609] 
[0.x.50610] 
[0.x.50611] 
[0.x.50612] 
[0.x.50613] 
[0.x.50614] 
//
[0.x.50615] 
//
[0.x.50616] 
[0.x.50617] 
[0.x.50618] 
[0.x.50619] 
//
[0.x.50620] 
[0.x.50621] 
[0.x.50622] 
[0.x.50623] 
//
[0.x.50624] 
[0.x.50625] 
[0.x.50626] 
[0.x.50627] 
[0.x.50628] 
[0.x.50629] 
[0.x.50630] 
[0.x.50631] 
[0.x.50632] 
[0.x.50633] 
[0.x.50634] 
//
[0.x.50635] 
[0.x.50636] 
[0.x.50637] 
//
[0.x.50638] 
[0.x.50639] 
[0.x.50640] 
//
[0.x.50641] 
[0.x.50642] 
[0.x.50643] 
[0.x.50644] 
[0.x.50645] 
[0.x.50646] 
[0.x.50647] 
[0.x.50648] 
//然后
//算法的下一部分取决于上面的看门狗循环是否成功。如果成功了，那么我们就满意了，不需要进一步的行动。我们只是停留在原地。然而，如果我们在上面的循环中采取了最大数量的不成功的步骤，那么我们就需要做一些别的事情，这就是下面的代码块所做的。    具体来说，从上述循环的最后（不成功的）状态开始，我们再寻找一个更新方向，并采取所谓的 "伸展步骤"。如果该拉伸状态满足涉及优点函数的条件，那么我们就去那里。另一方面，如果拉伸状态也是不可接受的（就像上面所有的看门狗步骤一样），那么我们就放弃上面所有的看门狗步骤，在我们开始看门狗迭代的地方重新开始--那个地方被存储在上面的`看门狗_状态`变量中。更具体地说，下面的条件首先测试我们是否从`看门狗_state`方向的`first_step`走了一步，或者我们是否可以从拉伸状态再做一次更新来找到一个新的地方。有可能这两种情况实际上都不比我们在看门狗算法开始时的状态好，但即使是这样，那个地方显然是个困难的地方，离开后从另一个地方开始下一次迭代可能是一个有用的策略，最终收敛。    我们不断重复上面的看门狗步骤以及下面的逻辑，直到这个内部迭代最终收敛（或者如果我们遇到最大的迭代次数--在这里我们把线性求解的次数算作迭代次数，并在每次调用`find_max_step()`时增加计数器，因为这就是线性求解实际发生的地方）。在任何情况下，在这些内部迭代的每一次结束时，我们也会以适合可视化的形式输出解决方案。
//
[0.x.50649] 
[0.x.50650] 
[0.x.50651] 
[0.x.50652] 
[0.x.50653] 
[0.x.50654] 
[0.x.50655] 
[0.x.50656] 
//
// 如果我们没有得到一个成功的看门狗步骤，我们现在需要决定是回到我们开始的地方，还是使用最终状态。 我们比较这两个位置的优劣，然后从哪个位置取一个按比例的步长。 由于按比例的步长可以保证降低优点，所以我们最终会保留这两个位置中的一个。
//
[0.x.50657] 
[0.x.50658] 
[0.x.50659] 
[0.x.50660] 
[0.x.50661] 
[0.x.50662] 
[0.x.50663] 
[0.x.50664] 
[0.x.50665] 
[0.x.50666] 
[0.x.50667] 
[0.x.50668] 
[0.x.50669] 
[0.x.50670] 
[0.x.50671] 
[0.x.50672] 
[0.x.50673] 
[0.x.50674] 
[0.x.50675] 
[0.x.50676] 
[0.x.50677] 
[0.x.50678] 
[0.x.50679] 
[0.x.50680] 
[0.x.50681] 
[0.x.50682] 
[0.x.50683] 
[0.x.50684] 
[0.x.50685] 
[0.x.50686] 
[0.x.50687] 
[0.x.50688] 
[0.x.50689] 
[0.x.50690] 
//
[0.x.50691] 
[0.x.50692] 
[0.x.50693] 
[0.x.50694] 
//
// 在外循环结束时，我们必须更新屏障参数，为此我们使用以下公式。该函数的其余部分只是检查外循环的收敛条件，如果我们决定终止计算，就把最终的 "设计 "写成STL文件，用于3D打印，并输出一些时间信息。
//
[0.x.50695] 
[0.x.50696] 
//
[0.x.50697] 
[0.x.50698] 
[0.x.50699] 
[0.x.50700] 
//
[0.x.50701] 
[0.x.50702] 
[0.x.50703] 
[0.x.50704] 
[0.x.50705] 
//
[0.x.50706] 
[0.x.50707] 
[0.x.50708] 
[0.x.50709] 
//[2.x.5804] 
//
// 余下的代码，即`main()`函数，和平常一样。
//
[0.x.50710] 
[0.x.50711] 
[0.x.50712] 
[0.x.50713] 
[0.x.50714] 
[0.x.50715] 
[0.x.50716] 
[0.x.50717] 
[0.x.50718] 
[0.x.50719] 
[0.x.50720] 
[0.x.50721] 
[0.x.50722] 
[0.x.50723] 
[0.x.50724] 
[0.x.50725] 
[0.x.50726] 
[0.x.50727] 
//
[0.x.50728] 
[0.x.50729] 
[0.x.50730] 
[0.x.50731] 
[0.x.50732] 
[0.x.50733] 
[0.x.50734] 
[0.x.50735] 
[0.x.50736] 
[0.x.50737] 
 
 
 
 
 
[0.x.50743] 
[0.x.50744] 
[0.x.50745] 
[0.x.50746] 
[0.x.50747] 
[0.x.50748] 
[0.x.50749] 
[0.x.50750] 
[0.x.50751] 
[0.x.50752] 
[0.x.50753] 
[0.x.50754] 
[0.x.50755] 
[0.x.50756] 
[0.x.50757] 
//
[0.x.50758] 
[0.x.50759] 
[0.x.50760] 
//[2.x.5805] 
//
// 像往常一样，前几个include文件已经知道了，所以我们将不再评论它们。
//
[0.x.50761] 
[0.x.50762] 
[0.x.50763] 
//
[0.x.50764] 
[0.x.50765] 
[0.x.50766] 
[0.x.50767] 
[0.x.50768] 
[0.x.50769] 
[0.x.50770] 
//
[0.x.50771] 
[0.x.50772] 
[0.x.50773] 
//
[0.x.50774] 
[0.x.50775] 
//
[0.x.50776] 
//
[0.x.50777] 
[0.x.50778] 
[0.x.50779] 
[0.x.50780] 
//
// 在这个例子中，我们需要矢量值的有限元。对这些的支持可以在下面的include文件中找到。
//
[0.x.50781] 
//
// 我们将用常规的Q1元素组成矢量值的有限元素，这些元素可以在这里找到，像往常一样。
//
[0.x.50782] 
//
// 这又是C++语言。
//
[0.x.50783] 
[0.x.50784] 
//
// 最后一步和以前的程序一样。特别是，就像在[2.x.5806]中一样，我们把这个程序所特有的一切都打包到一个自己的命名空间中。
//
[0.x.50785] 
[0.x.50786] 
[0.x.50787] 
//[2.x.5807] 
//
// 主类除了名称外，与[2.x.5808]的例子相比几乎没有变化。
//
// 唯一的变化是为[2.x.5809]变量使用了一个不同的类。我们现在使用的不是FE_Q这样具体的有限元类，而是一个更通用的类，FESystem。事实上，FESystem本身并不是一个真正的有限元，因为它没有实现自己的形状函数。相反，它是一个可以用来将其他几个元素堆叠在一起形成一个矢量值的有限元的类。在我们的例子中，我们将组成[2.x.5810]对象的矢量值元素，如下所示，在这个类的构造函数中。
//
[0.x.50788] 
[0.x.50789] 
[0.x.50790] 
[0.x.50791] 
[0.x.50792] 
[0.x.50793] 
//
[0.x.50794] 
[0.x.50795] 
[0.x.50796] 
[0.x.50797] 
[0.x.50798] 
[0.x.50799] 
//
[0.x.50800] 
[0.x.50801] 
//
[0.x.50802] 
//
[0.x.50803] 
//
[0.x.50804] 
[0.x.50805] 
//
[0.x.50806] 
[0.x.50807] 
[0.x.50808] 
//[2.x.5811] 
//
// 在进入主类的实现之前，我们声明并定义描述右手边的函数。这一次，右手边是向量值，解决方案也是如此，所以我们将更详细地描述为此所需的变化。
//
// 为了防止出现返回向量没有被设置成正确大小的情况，我们对这种情况进行了测试，否则将在函数的开始部分抛出一个异常。请注意，强制输出参数已经具有正确的大小是deal.II中的一个惯例，并且几乎在所有地方都强制执行。原因是，否则我们将不得不在函数开始时检查，并可能改变输出向量的大小。这很昂贵，而且几乎总是不必要的（对函数的第一次调用会将向量设置为正确的大小，随后的调用只需要做多余的检查）。此外，如果我们不能依赖向量已经具有正确大小的假设，那么检查和可能调整向量大小的操作是不能被删除的；这与Assert调用是一个契约，如果程序在优化模式下编译，Assert调用将被完全删除。
//
// 同样，如果由于某种意外，有人试图在只有一个空间维度的情况下编译和运行程序（在这种情况下，弹性方程没有什么意义，因为它们还原为普通的拉普拉斯方程），我们在第二个断言中终止程序。然而，该程序在三维空间中也能正常工作。
//
[0.x.50809] 
[0.x.50810] 
[0.x.50811] 
[0.x.50812] 
[0.x.50813] 
[0.x.50814] 
[0.x.50815] 
//
// 该函数的其余部分实现了计算力值。我们将使用一个位于(0.5,0)和(-0.5,0)点周围的两个小圆圈（或球体，在3D中）的X方向的恒定（单位）力，以及位于原点周围的Y方向的力；在3D中，这些中心的Z分量也是零。
//
// 为此，让我们首先定义两个对象，表示这些区域的中心。请注意，在构建点对象时，所有的分量都被设置为零。
//
[0.x.50816] 
[0.x.50817] 
[0.x.50818] 
//
[0.x.50819] 
[0.x.50820] 
//
// 如果[2.x.5812]处于围绕这些点之一的半径为0.2的圆（球）中，那么将X方向的力设置为1，否则为0。
//
[0.x.50821] 
[0.x.50822] 
[0.x.50823] 
[0.x.50824] 
[0.x.50825] 
//
// 同样地，如果[2.x.5813]在原点附近，那么将y力设置为1，否则为0。
//
[0.x.50826] 
[0.x.50827] 
[0.x.50828] 
[0.x.50829] 
[0.x.50830] 
[0.x.50831] 
//
// [2.x.5814] 
//[2.x.5815] 
//
// 下面是主类的构造函数。如前所述，我们想构造一个由多个标量有限元组成的矢量值有限元（即，我们想构造矢量值元素，使其每个矢量成分都由一个标量元素的形状函数组成）。当然，我们想堆叠在一起的标量有限元的数量等于解函数的分量数量，由于我们考虑每个空间方向上的位移，所以是[2.x.5816]。FESystem类可以处理这个问题：我们传递给它我们想组成系统的有限元，以及它的重复频率。
//
[0.x.50832] 
[0.x.50833] 
[0.x.50834] 
[0.x.50835] 
[0.x.50836] 
//
// 事实上，FESystem类还有几个构造函数，可以进行更复杂的操作，而不仅仅是将几个相同类型的标量有限元堆叠在一起；我们将在后面的例子中了解这些可能性。
//
// [2.x.5817] 
//
// 设置方程组与[2.x.5818]例子中使用的函数相同。DoFHandler类和这里使用的所有其他类都完全知道我们要使用的有限元是矢量值的，并且照顾到了有限元本身的矢量值。(事实上，它们不知道，但这不需要困扰你：因为它们只需要知道每个顶点、直线和单元有多少个自由度，它们不问它们代表什么，也就是说，考虑的有限元是矢量值的，还是例如在每个顶点上有几个自由度的标量Hermite元)。
//
[0.x.50837] 
[0.x.50838] 
[0.x.50839] 
[0.x.50840] 
[0.x.50841] 
[0.x.50842] 
//
[0.x.50843] 
[0.x.50844] 
[0.x.50845] 
[0.x.50846] 
[0.x.50847] 
[0.x.50848] 
[0.x.50849] 
//
[0.x.50850] 
[0.x.50851] 
[0.x.50852] 
[0.x.50853] 

//keep_constrained_dofs = [2.x.5819] false）。)
//
[0.x.50854] 

[0.x.50855] 
[0.x.50856] 
//[2.x.5820] 
//
// 这个程序中最大的变化是创建矩阵和右手边，因为它们是取决于问题的。我们将一步一步地完成这个过程 [2.x.5821] ，因为它比以前的例子要复杂一些。
//
// 然而，这个函数的前几部分和以前一样：设置一个合适的正交公式，为我们使用的（矢量值）有限元以及正交对象初始化一个FEValues对象，并声明了一些辅助数组。此外，我们还声明了永远相同的两个缩写。 [2.x.5822] 和 [2.x.5823] 。每个单元的自由度数量，我们现在显然是从组成的有限元中询问，而不是从底层的标量Q1元中询问。在这里，它是[2.x.5824]乘以Q1元素的每个单元的自由度数，尽管这不是我们需要关心的明确知识。
//
[0.x.50857] 
[0.x.50858] 
[0.x.50859] 
[0.x.50860] 
//
[0.x.50861] 
[0.x.50862] 
[0.x.50863] 
[0.x.50864] 
//
[0.x.50865] 
[0.x.50866] 
//
[0.x.50867] 
[0.x.50868] 
//
[0.x.50869] 
//
// 正如前面的例子所示，我们需要一个地方来存储单元格上所有正交点的系数值。在目前的情况下，我们有两个系数，lambda和mu。
//
[0.x.50870] 
[0.x.50871] 
//
// 好吧，我们也可以省略上面的两个数组，因为我们将对lambda和mu使用常数系数，可以这样声明。它们都代表函数总是返回常量值1.0。尽管我们可以在矩阵的组合中省略各自的系数，但为了演示，我们在这里使用它们。
//
[0.x.50872] 
//
// 和上面的两个常量函数一样，我们将在每个单元格中只调用一次函数right_hand_side，以使事情更简单。
//
[0.x.50873] 
//
// 现在我们可以开始对所有单元格进行循环。
//
[0.x.50874] 
[0.x.50875] 
[0.x.50876] 
[0.x.50877] 
//
[0.x.50878] 
//
// 接下来我们得到正交点的系数值。同样，对于右手边也是如此。
//
[0.x.50879] 
[0.x.50880] 
[0.x.50881] 
//
// 然后将局部刚度矩阵的条目和右手边的向量组合起来。这几乎是一对一地遵循本例介绍中描述的模式。 在位的几个评论之一是，我们可以计算数字 [2.x.5825] ，即使用下面的 [2.x.5827] 函数调用形状函数 [2.x.5826] 的唯一非零向量成分的索引。
//
//（通过访问[2.x.5829]函数返回值的[2.x.5828]变量，你可能已经猜到其中还有更多的内容。事实上，该函数返回一个[2.x.5830]int，无符号int[2.x.5831]，其中第一个元素是[2.x.5832]，第二个元素是介绍中也指出的值[2.x.5833]，即这个形状函数在这个组件中所有非零的形状函数中的索引，即介绍中的字典[2.x.5834]。不过，这不是我们通常感兴趣的数字）。)
//
// 有了这些知识，我们就可以把局部矩阵的贡献集合起来。
//
[0.x.50882] 
[0.x.50883] 
[0.x.50884] 
[0.x.50885] 
//
[0.x.50886] 
[0.x.50887] 
[0.x.50888] 
[0.x.50889] 
//
[0.x.50890] 
[0.x.50891] 
[0.x.50892] 
[0.x.50893] 
//
// 第一个项是 [2.x.5835] 。注意，[2.x.5836]返回正交点q_point处第i个形状函数的唯一非零分量的梯度。梯度的分量[2.x.5837]是第i个形状函数的唯一非零矢量分量相对于comp(i)th坐标的导数，由附加的括号访问。
//
[0.x.50894] 
[0.x.50895] 
[0.x.50896] 
[0.x.50897] 
[0.x.50898] 
[0.x.50899] 
[0.x.50900] 
[0.x.50901] 
[0.x.50902] 
//
// 第二个项是 [2.x.5838] 。我们不需要访问梯度的具体分量，因为我们只需要计算两个梯度的标量乘积，这个问题由<tt>operator*</tt>的重载版本来负责，就像前面的例子一样。                            注意，通过使用<tt>?:</tt>操作符，我们只在<tt>component_i</tt>等于<tt>component_j</tt>时才这样做，否则会加上一个零（编译器会将其优化掉）。
//
[0.x.50903] 
[0.x.50904] 
[0.x.50905] 
[0.x.50906] 
[0.x.50907] 
[0.x.50908] 
[0.x.50909] 
[0.x.50910] 
[0.x.50911] 
[0.x.50912] 
//
// 组装右手边也和介绍中讨论的一样。
//
[0.x.50913] 
[0.x.50914] 
[0.x.50915] 
[0.x.50916] 
//
[0.x.50917] 
[0.x.50918] 
[0.x.50919] 
[0.x.50920] 
[0.x.50921] 
[0.x.50922] 
//
// 从局部自由度到全局矩阵和右手向量的转移不取决于所考虑的方程，因此与之前所有的例子相同。
//
[0.x.50923] 
[0.x.50924] 
[0.x.50925] 
[0.x.50926] 
[0.x.50927] 
//
// [2.x.5839] 
//
// 解算器并不关心方程组的来源，只要它保持正定和对称（这是使用CG解算器的要求），而这个方程组确实是这样。因此，我们不需要改变任何东西。
//
[0.x.50928] 
[0.x.50929] 
[0.x.50930] 
[0.x.50931] 
[0.x.50932] 
//
[0.x.50933] 
[0.x.50934] 
//
[0.x.50935] 
//
[0.x.50936] 
[0.x.50937] 
//[2.x.5840] 
//
// 对网格进行细化的函数与[2.x.5841]的例子相同。正交公式再次适应了线性元素。请注意，误差估计器默认情况下是将从有限元解的所有分量中得到的估计值相加，也就是说，它使用所有方向的位移，权重相同。如果我们希望网格只适应x方向的位移，我们可以给函数传递一个额外的参数，告诉它这样做，而不考虑其他所有方向的位移作为误差指标。然而，对于目前的问题，似乎应该考虑所有的位移分量，而且权重相同。
//
[0.x.50938] 
[0.x.50939] 
[0.x.50940] 
[0.x.50941] 
//
[0.x.50942] 
[0.x.50943] 
[0.x.50944] 
[0.x.50945] 
[0.x.50946] 
//
[0.x.50947] 
[0.x.50948] 
[0.x.50949] 
[0.x.50950] 
//
[0.x.50951] 
[0.x.50952] 
//[2.x.5842] 
//
// 输出的情况与之前的例子中已经显示过的差不多了。唯一的区别是，求解函数是矢量值的。DataOut类会自动处理这个问题，但我们必须给求解向量的每个分量一个不同的名字。
//
// 为了做到这一点，[2.x.5843]函数想要一个字符串的向量。由于分量的数量与我们工作的维数相同，我们使用下面的[2.x.5844]语句。
//
// 我们注意到，一些图形程序对变量名称中允许的字符有限制。因此，deal.II只支持所有程序都支持的这些字符的最小子集。基本上，这些字符是字母、数字、下划线和其他一些字符，但特别是没有空格和减号/横线。否则该库将抛出一个异常，至少在调试模式下是这样。
//
// 在列出了1d、2d和3d的情况后，如果我们遇到一个我们没有考虑到的情况，让程序死亡是一种很好的风格。请记住，如果第一个参数中的条件没有得到满足，Assert宏会产生一个异常。当然，条件[2.x.5845]永远不可能被满足，所以只要程序运行到默认语句，就会中止。
//
[0.x.50953] 
[0.x.50954] 
[0.x.50955] 
[0.x.50956] 
[0.x.50957] 
//
[0.x.50958] 
[0.x.50959] 
[0.x.50960] 
[0.x.50961] 
[0.x.50962] 
[0.x.50963] 
[0.x.50964] 
[0.x.50965] 
[0.x.50966] 
[0.x.50967] 
[0.x.50968] 
[0.x.50969] 
[0.x.50970] 
[0.x.50971] 
[0.x.50972] 
[0.x.50973] 
[0.x.50974] 
[0.x.50975] 
//
// 在为解向量的不同组成部分设置了名称之后，我们可以将解向量添加到计划输出的数据向量列表中。请注意，下面的函数需要一个字符串向量作为第二个参数，而我们在以前所有例子中使用的函数在那里接受一个字符串。(事实上，我们之前使用的函数会将单个字符串转换成只有一个元素的向量，并将其转发给另一个函数)。
//
[0.x.50976] 
[0.x.50977] 
//
[0.x.50978] 
[0.x.50979] 
[0.x.50980] 
//
// [2.x.5846] 
//
// [2.x.5847]函数所做的事情与[2.x.5848]中的相同，比如说。这一次，我们使用平方[-1,1]^d作为域，在开始第一次迭代之前，我们在全局上对其进行了四次细化。
//
// 细化的原因有点意外：我们使用QGauss正交公式，在每个方向上有两个点用于整合右手边；这意味着每个单元上有四个正交点（在二维）。如果我们只对初始网格进行一次全局细化，那么在域上每个方向上就只有四个正交点。然而，右侧函数被选择为相当局部的，在这种情况下，纯属偶然，恰好所有的正交点都位于右侧函数为零的点上（用数学术语来说，正交点恰好在右侧函数的[1.x.227]之外的点上）。这样一来，用正交计算的右手向量将只包含零（尽管如果我们完全用积分计算右手向量的话，它当然会是非零的），方程组的解就是零向量，也就是一个处处为零的有限元函数。从某种意义上说，我们不应该对这种情况的发生感到惊讶，因为我们选择了一个完全不适合手头问题的初始网格。
//
// 不幸的是，如果离散解是常数，那么KellyErrorEstimator类计算的误差指标对每个单元来说也是零，对[2.x.5849]的调用将不会标记任何单元进行细化（如果每个单元的指示误差是零，为什么要这样做？因此，下一次迭代中的网格也将只由四个单元组成，同样的问题再次发生。
//
// 结论是：虽然我们当然不会把初始网格选择得非常适合问题的精确解决，但我们至少必须选择它，使它有机会捕捉到解决方案的重要特征。在这种情况下，它需要能够看到右手边的情况。因此，我们进行了四次全局细化。(任何更大的全局细化步骤当然也可以。)
//
[0.x.50981] 
[0.x.50982] 
[0.x.50983] 
[0.x.50984] 
[0.x.50985] 
[0.x.50986] 
//
[0.x.50987] 
[0.x.50988] 
[0.x.50989] 
[0.x.50990] 
[0.x.50991] 
[0.x.50992] 
[0.x.50993] 
//
[0.x.50994] 
[0.x.50995] 
//
[0.x.50996] 
//
[0.x.50997] 
[0.x.50998] 
//
[0.x.50999] 
[0.x.51000] 
[0.x.51001] 
[0.x.51002] 
[0.x.51003] 
[0.x.51004] 
//[2.x.5850] 
//
// 在上面最后一行关闭了[2.x.5851]命名空间后，下面是程序的主要功能，又和[2.x.5852]中一模一样（当然，除了改变了类名）。
//
[0.x.51005] 
[0.x.51006] 
[0.x.51007] 
[0.x.51008] 
[0.x.51009] 
[0.x.51010] 
[0.x.51011] 
[0.x.51012] 
[0.x.51013] 
[0.x.51014] 
[0.x.51015] 
[0.x.51016] 
[0.x.51017] 
[0.x.51018] 
[0.x.51019] 
[0.x.51020] 
[0.x.51021] 
[0.x.51022] 
//
[0.x.51023] 
[0.x.51024] 
[0.x.51025] 
[0.x.51026] 
[0.x.51027] 
[0.x.51028] 
[0.x.51029] 
[0.x.51030] 
[0.x.51031] 
[0.x.51032] 
[0.x.51033] 
[0.x.51034] 
[0.x.51035] 
[0.x.51036] 
//
[0.x.51037] 
[0.x.51038] 
[0.x.51039] 
[0.x.51040] 
[0.x.51041] 
[0.x.51042] 
[0.x.51043] 
[0.x.51044] 
[0.x.51045] 
[0.x.51046] 
[0.x.51047] 
[0.x.51048] 
[0.x.51049] 
[0.x.51050] 
[0.x.51051] 
[0.x.51052] 
//
[0.x.51053] 
[0.x.51054] 
[0.x.51055] 
//
// 就像以前的例子一样，我们必须包括几个文件，其中的含义已经讨论过了。
//
[0.x.51056] 
[0.x.51057] 
[0.x.51058] 
[0.x.51059] 
[0.x.51060] 
[0.x.51061] 
[0.x.51062] 
[0.x.51063] 
[0.x.51064] 
[0.x.51065] 
[0.x.51066] 
[0.x.51067] 
[0.x.51068] 
[0.x.51069] 
[0.x.51070] 
[0.x.51071] 
[0.x.51072] 
[0.x.51073] 
[0.x.51074] 
[0.x.51075] 
[0.x.51076] 
//
// 下面两个文件提供了多线程程序的类和信息。在第一个文件中，声明了我们需要做并行装配的类和函数（即[2.x.5853]命名空间）。第二个文件有一个类MultithreadInfo，可以用来查询系统中的处理器数量，这在决定启动多少个并行线程时通常很有用。
//
[0.x.51077] 
[0.x.51078] 
//
// 下一个新的include文件声明了一个基类[2.x.5854]，与[2.x.5855]类不一样，但不同的是[2.x.5856]返回一个张量而不是一个标量。
//
[0.x.51079] 
//
[0.x.51080] 
//
// 这是C++，因为我们想把一些输出写入磁盘。
//
[0.x.51081] 
[0.x.51082] 
//
// 最后一步和以前的程序一样。
//
[0.x.51083] 
[0.x.51084] 
[0.x.51085] 
//[2.x.5857] 
//
// 接下来我们声明一个描述平流场的类。当然，这是一个矢量场，有多少分量就有多少空间维度。现在我们可以使用一个从[2.x.5858]基类派生出来的类，就像我们在前面的例子中对边界值和系数所做的那样，但是在库中还有另一种可能性，即一个描述张量值函数的基类。这比重写[2.x.5859]知道多个函数成分的方法更方便：最后我们需要一个张量，所以我们不妨直接使用一个返回张量的类。
//
[0.x.51086] 
[0.x.51087] 
[0.x.51088] 
[0.x.51089] 
[0.x.51090] 
//
// 在前面的例子中，我们已经在多个地方使用了抛出异常的断言。但是，我们还没有看到如何声明这种异常。这可以这样做。
//
[0.x.51091] 
[0.x.51092] 
[0.x.51093] 
[0.x.51094] 
[0.x.51095] 
//
// 语法可能看起来有点奇怪，但很合理。其格式基本如下：使用其中一个宏的名称 [2.x.5860] 表示异常对象应采取的附加参数的数量。在本例中，由于我们想在两个向量的大小不同时抛出异常，我们需要两个参数，所以我们使用 [2.x.5861] 。第一个参数描述了异常的名称，而下面的参数则声明了参数的数据类型。最后一个参数是一连串的输出指令，这些指令将被输送到 [2.x.5862] 对象中，因此出现了奇怪的格式，前面是 [2.x.5863] 操作符之类的。注意，我们可以通过使用名称 [2.x.5865] 来访问在构造时（即在 [2.x.5864] 调用中）传递给异常的参数，其中 [2.x.5866] 是通过使用各自的宏 [2.x.5867] 来定义的参数数。
//
// 要了解预处理器如何将这个宏扩展为实际代码，请参考异常类的文档。简而言之，这个宏调用声明并定义了一个继承自 ExceptionBase 的类 [2.x.5868] ，它实现了所有必要的错误输出功能。
//
[0.x.51096] 
//
// 下面的两个函数实现了上述的接口。第一个简单地实现了介绍中所描述的函数，而第二个使用了同样的技巧来避免调用虚拟函数，在前面的例子程序中已经介绍过了。注意第二个函数中对参数的正确大小的检查，这种检查应该始终存在于这类函数中；根据我们的经验，许多甚至大多数编程错误都是由不正确的初始化数组、不兼容的函数参数等造成的；像本例中那样使用断言可以消除许多这样的问题。
//
[0.x.51097] 
[0.x.51098] 
[0.x.51099] 
[0.x.51100] 
[0.x.51101] 
[0.x.51102] 
[0.x.51103] 
//
[0.x.51104] 
[0.x.51105] 
//
// 除了平流场，我们还需要两个描述源项（ [2.x.5869] ）和边界值的函数。如介绍中所述，源是一个源点附近的常数函数，我们用常数静态变量 [2.x.5870] 表示。我们使用与我们在[2.x.5871]示例程序中所示相同的模板技巧来设置这个中心的值。剩下的就很简单了，之前已经展示过了。
//
[0.x.51106] 
[0.x.51107] 
[0.x.51108] 
[0.x.51109] 
[0.x.51110] 
[0.x.51111] 
//
[0.x.51112] 
[0.x.51113] 
[0.x.51114] 
//
[0.x.51115] 
[0.x.51116] 
//
[0.x.51117] 
[0.x.51118] 
//
[0.x.51119] 
[0.x.51120] 
//
// 这里唯一的新东西是我们检查[2.x.5872]参数的值。由于这是一个标量函数，很明显，只有当所需分量的索引为0时才有意义，所以我们断言这确实是这样的。 [2.x.5873]是一个全局预定义的异常（可能是最经常使用的异常，因此我们让它成为全局的，而不是某个类的局部），它需要三个参数：超出允许范围的索引，有效范围的第一个元素和超过最后一个的元素（即又是C++标准库中经常使用的半开放区间）。
//
[0.x.51121] 
[0.x.51122] 
[0.x.51123] 
[0.x.51124] 
[0.x.51125] 
[0.x.51126] 
[0.x.51127] 
[0.x.51128] 
[0.x.51129] 
[0.x.51130] 
[0.x.51131] 
//
// 最后是边界值，这只是从[2.x.5874]基类派生的另一个类。
//
[0.x.51132] 
[0.x.51133] 
[0.x.51134] 
[0.x.51135] 
[0.x.51136] 
[0.x.51137] 
[0.x.51138] 
//
[0.x.51139] 
[0.x.51140] 
[0.x.51141] 
[0.x.51142] 
[0.x.51143] 
[0.x.51144] 
//
[0.x.51145] 
[0.x.51146] 
[0.x.51147] 
[0.x.51148] 
//[2.x.5875] 
//
// 这里是这个程序的主类。它和前面的例子中的主类非常相似，所以我们再次只对其不同之处进行评论。
//
[0.x.51149] 
[0.x.51150] 
[0.x.51151] 
[0.x.51152] 
[0.x.51153] 
[0.x.51154] 
//
[0.x.51155] 
[0.x.51156] 
//
// 下一组函数将被用来组装矩阵。然而，与前面的例子不同，[2.x.5876]函数不会自己做这些工作，而是将实际的装配工作委托给辅助函数 [2.x.5877] 和 [2.x.5878] 。其原理是，矩阵组装可以很好地并行化，因为每个单元的局部贡献的计算完全独立于其他单元，我们只需要在将一个单元的贡献添加到全局矩阵中时进行同步。
//
// 我们在这里选择的并行化策略是文档中[2.x.5879]模块中详细提及的可能性之一。具体来说，我们将使用那里讨论的WorkStream方法。由于这个模块有很多文档，我们不会在这里重复设计选择的理由（例如，如果你读完上面提到的模块，你会明白[2.x.5880]和[2.x.5881]结构的目的是什么）。相反，我们将只讨论具体的实现。
//
// 如果你阅读了上面提到的页面，你会发现为了使汇编并行化，我们需要两个数据结构--一个对应于我们在局部集成过程中需要的数据（"scratch data"，即我们只需要作为临时存储的东西），另一个是将信息从局部集成携带到函数中，然后将局部贡献添加到全局矩阵的相应元素中。其中前者通常包含FEValues和FEFaceValues对象，而后者则有局部矩阵、局部右手边，以及关于哪些自由度生活在我们正在组装局部贡献的单元上的信息。有了这些信息，下面的内容应该是相对不言自明的。
//
[0.x.51157] 
[0.x.51158] 
[0.x.51159] 
[0.x.51160] 
//
// FEValues和FEFaceValues是很昂贵的设置对象，所以我们把它们包含在scratch对象中，以便尽可能多的数据在单元格之间被重复使用。
//
[0.x.51161] 
[0.x.51162] 
//
// 我们还存储了一些向量，我们将在每个单元格上填充数值。在通常情况下，设置这些对象是很便宜的；但是，它们需要内存分配，这在多线程应用程序中可能很昂贵。因此，我们把它们保存在这里，这样在一个单元格上的计算就不需要新的分配。
//
[0.x.51163] 
[0.x.51164] 
[0.x.51165] 
[0.x.51166] 
//
// 最后，我们需要描述该问题数据的对象。
//
[0.x.51167] 
[0.x.51168] 
[0.x.51169] 
[0.x.51170] 
//
[0.x.51171] 
[0.x.51172] 
[0.x.51173] 
[0.x.51174] 
[0.x.51175] 
[0.x.51176] 
//
[0.x.51177] 
[0.x.51178] 
[0.x.51179] 
[0.x.51180] 
[0.x.51181] 
[0.x.51182] 
//
// 下面的函数又和前面的例子一样，后面的变量也是一样的。
//
[0.x.51183] 
[0.x.51184] 
[0.x.51185] 
//
[0.x.51186] 
[0.x.51187] 
//
[0.x.51188] 
//
[0.x.51189] 
//
[0.x.51190] 
[0.x.51191] 
//
[0.x.51192] 
[0.x.51193] 
[0.x.51194] 
//
// [2.x.5882] 
//
// 现在，最后，这里有一个类，它将计算每个单元上梯度的差分近似值，并以网格大小的幂数进行权衡，如介绍中所述。这个类是库中[2.x.5883]类的一个简单版本，它使用类似的技术来获得有限元场的梯度的有限差分近似值，或者更高导数。
//
// 该类有一个公共静态函数[2.x.5884]，被调用来计算误差指标的向量，还有一些私有函数，在所有活动单元上做实际工作。在库的其他部分，我们遵循一个非正式的惯例，使用浮点数向量作为误差指标，而不是常见的双数向量，因为对于估计值来说，额外的精度是没有必要的。
//
// 除了这两个函数，该类还声明了两个异常，当一个单元在每个空间方向上都没有邻居时（在这种情况下，介绍中描述的矩阵将是奇异的，不能被倒置），而另一个异常用于更常见的函数参数无效的情况，即一个大小错误的向量。
//
// 还有两点意见：首先，这个类没有非静态成员函数或变量，所以这不是一个真正的类，而是起到了C++中[2.x.5885]的作用。我们选择类而不是命名空间的原因是，这种方式我们可以声明私有的函数。如果在命名空间的头文件中声明一些函数，并在实现文件中实现这些函数和其他函数，这也可以用命名空间来实现。没有在头文件中声明的函数仍然在名字空间中，但不能从外部调用。然而，由于我们这里只有一个文件，在目前的情况下不可能隐藏函数。
//
// 第二个意见是，维度模板参数被附在函数上，而不是附在类本身。这样，你就不必像其他大多数情况下那样自己指定模板参数，而是编译器可以从作为第一个参数传递的DoFHandler对象的尺寸中自行计算出其值。
//
// 在开始实施之前，让我们也来评论一下并行化策略。我们已经在上面这个程序的主类的声明中介绍了使用WorkStream概念的必要框架。我们将在这里再次使用它。在目前的情况下，这意味着我们必须定义[2.x.5886] 。
//[2.x.5887]类，用于抓取和复制对象，[2.x.5888] 。
//[2.x.5889] 一个在一个单元上进行局部计算的函数，以及[2.x.5890] 
//[2.x.5891] 一个将本地结果复制到全局对象的函数。[2.x.5892] 
//[2.x.5893] 鉴于这个总体框架，我们将稍微偏离它。特别是，WorkStream一般是为这样的情况而发明的，即每个单元上的局部计算[1.x.228]到一个全局对象--例如，在组装线性系统时，我们将局部贡献添加到全局矩阵和右手边中。WorkStream的设计是为了处理多个线程试图同时进行这种添加的潜在冲突，因此必须提供一些方法来确保每次只有一个线程可以做这个。然而，这里的情况略有不同：我们单独计算每个单元的贡献，但随后我们需要做的是将它们放入每个单元独有的输出向量中的一个元素。因此，不存在来自两个单元的写操作可能发生冲突的风险，也没有必要使用WorkStream的复杂机制来避免冲突的写操作。因此，我们要做的就是这样。我们仍然需要一个持有例如 FEValues 对象的 scratch 对象。但是，我们只创建一个假的、空的拷贝数据结构。同样，我们确实需要计算本地贡献的函数，但由于它已经可以把结果放到最终位置，我们不需要一个从本地到全球的拷贝函数，而是给[2.x.5894]函数一个空函数对象--相当于一个NULL函数指针。
//
[0.x.51195] 
[0.x.51196] 
[0.x.51197] 
[0.x.51198] 
[0.x.51199] 
[0.x.51200] 
[0.x.51201] 
//
[0.x.51202] 
[0.x.51203] 
[0.x.51204] 
[0.x.51205] 
[0.x.51206] 
[0.x.51207] 
//
[0.x.51208] 
[0.x.51209] 
[0.x.51210] 
[0.x.51211] 
[0.x.51212] 
[0.x.51213] 
[0.x.51214] 
[0.x.51215] 
//
[0.x.51216] 
[0.x.51217] 
[0.x.51218] 
//
[0.x.51219] 
[0.x.51220] 
//
[0.x.51221] 
[0.x.51222] 
[0.x.51223] 
//
[0.x.51224] 
[0.x.51225] 
//
[0.x.51226] 
[0.x.51227] 
[0.x.51228] 
[0.x.51229] 
[0.x.51230] 
[0.x.51231] 
//
// [2.x.5895] 
//
// 现在是主类的实现。构造器、析构器和函数[2.x.5896]遵循之前使用的模式，所以我们不需要对这三个函数进行评论。
//
[0.x.51232] 
[0.x.51233] 
[0.x.51234] 
[0.x.51235] 
[0.x.51236] 
//
[0.x.51237] 
[0.x.51238] 
[0.x.51239] 
[0.x.51240] 
[0.x.51241] 
[0.x.51242] 
[0.x.51243] 
[0.x.51244] 
//
[0.x.51245] 
[0.x.51246] 
[0.x.51247] 
[0.x.51248] 
//
//keep_constrained_dofs = [2.x.5897] false）。)
//
[0.x.51249] 
//
[0.x.51250] 
//
[0.x.51251] 
[0.x.51252] 
[0.x.51253] 
//
// 在下面的函数中，矩阵和右手被组装起来。正如上面main类的文档所述，它本身并不做这个，而是委托给接下来的函数，利用[2.x.5898]中讨论的WorkStream概念。
//
// 如果你看了[2.x.5899]模块，你会发现并行装配并不需要大量的额外代码，只要你认真地描述什么是从头开始和复制数据对象，如果你为本地装配和从本地贡献到全局对象的复制操作定义了合适的函数。完成这些工作后，下面将完成所有繁重的工作，使这些操作在多个线程上完成，只要你的系统有多少个内核。
//
[0.x.51254] 
[0.x.51255] 
[0.x.51256] 
[0.x.51257] 
[0.x.51258] 
[0.x.51259] 
[0.x.51260] 
[0.x.51261] 
[0.x.51262] 
[0.x.51263] 
[0.x.51264] 
//
// 正如上面已经提到的，我们需要有抓取对象来进行局部贡献的并行计算。这些对象包含FEValues和FEFaceValues对象（以及一些数组），因此我们需要有构造函数和复制构造函数，以便我们能够创建它们。对于单元项，我们需要形状函数的值和梯度、正交点以确定给定点的源密度和平流场，以及正交点的权重乘以这些点的雅各布系数的行列式。相反，对于边界积分，我们不需要梯度，而是需要单元的法向量。这决定了我们必须将哪些更新标志传递给类的成员的构造函数。
//
[0.x.51265] 
[0.x.51266] 
[0.x.51267] 
[0.x.51268] 
[0.x.51269] 
[0.x.51270] 
[0.x.51271] 
[0.x.51272] 
[0.x.51273] 
[0.x.51274] 
[0.x.51275] 
[0.x.51276] 
[0.x.51277] 
[0.x.51278] 
[0.x.51279] 
[0.x.51280] 
//
[0.x.51281] 
[0.x.51282] 
[0.x.51283] 
[0.x.51284] 
[0.x.51285] 
[0.x.51286] 
[0.x.51287] 
[0.x.51288] 
[0.x.51289] 
[0.x.51290] 
[0.x.51291] 
[0.x.51292] 
[0.x.51293] 
[0.x.51294] 
[0.x.51295] 
[0.x.51296] 
//
// 现在，这就是做实际工作的函数。它与前面例子程序中的[2.x.5900]函数没有什么不同，所以我们将再次只对其不同之处进行评论。数学上的东西紧跟我们在介绍中所说的。
//
// 不过，这里有一些值得一提的地方。首先，我们把FEValues和FEFaceValues对象移到了ScratchData对象中。我们这样做是因为我们每次进入这个函数时都要简单地创建一个，也就是在每个单元格上。现在发现，FEValues类的编写目标很明确，就是将所有从单元格到单元格保持不变的东西都移到对象的构造中，每当我们移到一个新单元格时，只在[2.x.5901]做尽可能少的工作。这意味着在这个函数中创建一个这样的新对象是非常昂贵的，因为我们必须为每一个单元格都这样做--这正是我们想通过FEValues类来避免的事情。相反，我们所做的是在抓取对象中只创建一次（或少数几次），然后尽可能多地重复使用它。
//
// 这就引出了一个问题：我们在这个函数中创建的其他对象，与它的使用相比，其创建成本很高。事实上，在函数的顶部，我们声明了各种各样的对象。[2.x.5902] , [2.x.5903]的创建成本并不高，所以这里没有什么危害。然而，在创建[2.x.5904]和下面类似的变量时，分配内存通常要花费大量的时间，而只是访问我们存储在其中的（临时）值。因此，这些将是移入[2.x.5905]类的候选者。我们将把这作为一个练习。
//
[0.x.51297] 
[0.x.51298] 
[0.x.51299] 
[0.x.51300] 
[0.x.51301] 
[0.x.51302] 
//
// 我们定义一些缩写，以避免不必要的长行。
//
[0.x.51303] 
[0.x.51304] 
[0.x.51305] 
[0.x.51306] 
[0.x.51307] 
//
// 我们声明单元格矩阵和单元格右侧...
//
[0.x.51308] 
[0.x.51309] 
//
// ...一个数组，用于保存我们目前正在处理的单元格的自由度的全局索引...
//
[0.x.51310] 
//
// ...然后初始化[2.x.5906]对象...
//
[0.x.51311] 
//
// ... 获得正交点的右手边和平流方向的数值...
//
[0.x.51312] 
[0.x.51313] 
[0.x.51314] 
[0.x.51315] 
[0.x.51316] 
//
// ... 设置流线扩散参数的值，如介绍中所述...
//
[0.x.51317] 
//
// ...... 并按照上面的讨论，集合对系统矩阵和右手边的局部贡献。
//
[0.x.51318] 
[0.x.51319] 
[0.x.51320] 
//
// 别名AssemblyScratchData对象，以防止行数过长。
//
[0.x.51321] 
[0.x.51322] 
[0.x.51323] 
[0.x.51324] 
[0.x.51325] 
[0.x.51326] 
[0.x.51327] 
[0.x.51328] 
[0.x.51329] 
//
[0.x.51330] 
[0.x.51331] 
[0.x.51332] 
[0.x.51333] 
[0.x.51334] 
[0.x.51335] 
[0.x.51336] 
//
// 除了我们现在建立的单元项，本问题的双线性形式还包含域的边界上的项。因此，我们必须检查这个单元的任何一个面是否在域的边界上，如果是的话，也要把这个面的贡献集合起来。当然，双线性形式只包含来自边界[2.x.5907]部分的贡献，但要找出本单元的某个面是否属于流入边界的一部分，我们必须有关于正交点的确切位置和该点的流动方向的信息；我们使用FEFaceValues对象获得这些信息，并只在主循环中决定某个正交点是否在流入边界上。
//
[0.x.51337] 
[0.x.51338] 
[0.x.51339] 
//
// 好的，当前单元格的这个面是在域的边界上。就像我们在前面的例子和上面的例子中使用的通常的FEValues对象一样，我们必须重新初始化当前面的FEFaceValues对象。
//
[0.x.51340] 
//
// 对于手头的正交点，我们要求提供流入函数的值和流动方向。
//
[0.x.51341] 
[0.x.51342] 
[0.x.51343] 
[0.x.51344] 
[0.x.51345] 
[0.x.51346] 
//
// 现在循环所有正交点，看看这个面是在边界的流入还是流出部分。法向量指向单元外：由于该面处于边界，法向量指向域外，所以如果平流方向指向域内，其与法向量的标量乘积一定是负的（要知道为什么会这样，请考虑使用余弦的标量乘积定义）。
//
[0.x.51347] 
[0.x.51348] 
[0.x.51349] 
[0.x.51350] 
//
// 如果该面是流入边界的一部分，则使用从FEFaceValues对象中获得的值和介绍中讨论的公式，计算该面对全局矩阵和右侧的贡献。
//
[0.x.51351] 
[0.x.51352] 
[0.x.51353] 
[0.x.51354] 
[0.x.51355] 
[0.x.51356] 
[0.x.51357] 
[0.x.51358] 
[0.x.51359] 
//
[0.x.51360] 
[0.x.51361] 
[0.x.51362] 
[0.x.51363] 
[0.x.51364] 
[0.x.51365] 
[0.x.51366] 
[0.x.51367] 
//
// 复制程序需要的最后一条信息是这个单元上自由度的全局索引，所以我们最后把它们写到本地数组中。
//
[0.x.51368] 
[0.x.51369] 
//
// 我们需要写的第二个函数是将前一个函数计算出的本地贡献（并放入AssemblyCopyData对象）复制到全局矩阵和右侧向量对象。这基本上就是我们在每个单元上装配东西时，一直作为最后一块代码的内容。因此，下面的内容应该是很明显的。
//
[0.x.51370] 
[0.x.51371] 
[0.x.51372] 
[0.x.51373] 
[0.x.51374] 
[0.x.51375] 
[0.x.51376] 
[0.x.51377] 
[0.x.51378] 
[0.x.51379] 
[0.x.51380] 
//
// 这里是线性求解程序。由于系统不再像以前的例子那样是对称正定的，我们不能再使用共轭梯度法。相反，我们使用一个更通用的，不依赖矩阵的任何特殊属性的求解器：GMRES方法。GMRES和共轭梯度法一样，需要一个合适的预处理程序：我们在这里使用一个雅可比预处理程序，它对这个问题来说足够好。
//
[0.x.51381] 
[0.x.51382] 
[0.x.51383] 
[0.x.51384] 
[0.x.51385] 
[0.x.51386] 
[0.x.51387] 
[0.x.51388] 
[0.x.51389] 
[0.x.51390] 
//
[0.x.51391] 
//
[0.x.51392] 
[0.x.51393] 
[0.x.51394] 
[0.x.51395] 
[0.x.51396] 
[0.x.51397] 
//
[0.x.51398] 
[0.x.51399] 
//
// 下面的函数根据介绍中描述的数量来细化网格。各自的计算是在类 [2.x.5908] 中进行的。
//
[0.x.51400] 
[0.x.51401] 
[0.x.51402] 
[0.x.51403] 
//
[0.x.51404] 
[0.x.51405] 
[0.x.51406] 
//
[0.x.51407] 
[0.x.51408] 
[0.x.51409] 
[0.x.51410] 
//
[0.x.51411] 
[0.x.51412] 
//
// 这个函数与第6步中的函数类似，但由于我们使用的是高阶有限元，所以我们以不同的方式保存解决方案。像VisIt和Paraview这样的可视化程序通常只能理解与节点相关的数据：它们不能绘制五度基函数，这导致我们计算的解的图片非常不准确。为了解决这个问题，我们为每个单元保存了多个[2.x.5909]补丁[2.x.5910]：在二维中，我们为每个单元在VTU文件中保存64个双线性 "单元"，在三维中，我们保存512个。最终的结果是，可视化程序将使用立方体基础函数的片状线性插值：这捕捉到了解决方案的细节，并且在大多数屏幕分辨率下，看起来很平滑。我们在一个单独的步骤中保存网格，没有额外的补丁，这样我们就有了细胞面的视觉表现。
//
//9.1版本的deal.II获得了编写更高程度多项式（即为我们的片状二项式解决方案编写片状二项式可视化数据）VTK和VTU输出的能力：然而，并非所有最新版本的ParaView和Viscit（截至2018年）都能读取这种格式，所以我们在这里使用更古老、更通用（但效率较低）的方法。
//
[0.x.51413] 
[0.x.51414] 
[0.x.51415] 
[0.x.51416] 
[0.x.51417] 
[0.x.51418] 
[0.x.51419] 
[0.x.51420] 
//
[0.x.51421] 
[0.x.51422] 
[0.x.51423] 
[0.x.51424] 
[0.x.51425] 
//
// VTU输出可能很昂贵，无论是计算还是写入磁盘。这里我们要求ZLib，一个压缩库，以最大限度地提高吞吐量的方式来压缩数据。
//
[0.x.51426] 
[0.x.51427] 
[0.x.51428] 
[0.x.51429] 
//
[0.x.51430] 
[0.x.51431] 
[0.x.51432] 
[0.x.51433] 
//
// ... 如同主循环（设置-求解-细化）一样，除了循环次数和初始网格之外。
//
[0.x.51434] 
[0.x.51435] 
[0.x.51436] 
[0.x.51437] 
[0.x.51438] 
[0.x.51439] 
//
[0.x.51440] 
[0.x.51441] 
[0.x.51442] 
[0.x.51443] 
[0.x.51444] 
[0.x.51445] 
[0.x.51446] 
[0.x.51447] 
[0.x.51448] 
//
[0.x.51449] 
[0.x.51450] 
//
[0.x.51451] 
//
[0.x.51452] 
[0.x.51453] 
//
[0.x.51454] 
[0.x.51455] 
[0.x.51456] 
[0.x.51457] 
[0.x.51458] 
//
// [2.x.5911] 
//
// 现在是[2.x.5912]类的实现。让我们先为[2.x.5914]函数所使用的[2.x.5913]类定义构造函数。
//
[0.x.51459] 
[0.x.51460] 
[0.x.51461] 
[0.x.51462] 
[0.x.51463] 
[0.x.51464] 
[0.x.51465] 
[0.x.51466] 
[0.x.51467] 
[0.x.51468] 
 
 
 
//
// 我们分配一个向量来保存一个单元的所有活动邻居的迭代器。我们保留活动邻居的最大数量，以避免以后的重新分配。注意这个最大的活动邻居数是如何计算出来的。
//
[0.x.51472] 
[0.x.51473] 
[0.x.51474] 
//
[0.x.51475] 
[0.x.51476] 
[0.x.51477] 
[0.x.51478] 
[0.x.51479] 
[0.x.51480] 
[0.x.51481] 
[0.x.51482] 
[0.x.51483] 
[0.x.51484] 
[0.x.51485] 
//
// 接下来是对[2.x.5915]类的实现。第一个函数除了将工作委托给另一个函数外，并没有做什么，但在顶部有一点设置。
//
// 在开始工作之前，我们要检查写入结果的向量是否有正确的大小。在编程中，忘记在调用处正确确定参数大小的错误是很常见的。因为没有发现这种错误所造成的损失往往是微妙的（例如，内存中某个地方的数据损坏，或者是无法重现的结果），所以非常值得努力去检查这些东西。
//
[0.x.51486] 
[0.x.51487] 
[0.x.51488] 
[0.x.51489] 
[0.x.51490] 
[0.x.51491] 
[0.x.51492] 
[0.x.51493] 
[0.x.51494] 
//
[0.x.51495] 
[0.x.51496] 
[0.x.51497] 
[0.x.51498] 
[0.x.51499] 
[0.x.51500] 
[0.x.51501] 
[0.x.51502] 
[0.x.51503] 
//
// 这里是通过计算梯度的有限差分近似值来估计局部误差的函数。该函数首先计算当前单元的活动邻居列表，然后为每个邻居计算介绍中描述的数量。之所以有这样的顺序，是因为在局部细化网格的情况下，要找到一个给定的邻居并不是一蹴而就的事情。原则上，一个优化的实现可以在一个步骤中找到邻域和取决于它们的量，而不是先建立一个邻域列表，然后在第二步中找到它们的贡献，但是我们很乐意将此作为一个练习。正如之前所讨论的，传递给[2.x.5916]的工作者函数是在保留所有临时对象的 "scratch "对象上工作。这样，我们就不需要在每次为给定单元调用工作的函数内创建和初始化那些昂贵的对象了。这样的参数被作为第二个参数传递。第三个参数是一个 "copy-data "对象（更多信息见[2.x.5917]），但我们在这里实际上没有使用这些对象。由于[2.x.5918]坚持传递三个参数，我们声明这个函数有三个参数，但简单地忽略了最后一个参数。
//
// （从美学角度看，这是不令人满意的。它可以通过使用一个匿名（lambda）函数来避免。如果你允许的话，让我们在这里展示一下如何做。首先，假设我们已经声明这个函数只接受两个参数，省略了未使用的最后一个参数。现在，[2.x.5919]仍然想用三个参数来调用这个函数，所以我们需要找到一种方法来 "忘记 "调用中的第三个参数。简单地像上面那样把指针传给[2.x.5920]这个函数是做不到的--编译器会抱怨一个声明为有两个参数的函数在调用时有三个参数。然而，我们可以通过将以下内容作为第三个参数传递给[2.x.5921]来做到这一点 
//[1.x.229] 这并不比下面实现的解决方案好多少：要么例程本身必须带三个参数，要么它必须被带三个参数的东西包起来。我们不使用这种方法，因为在开始时添加未使用的参数更简单。
//
// 现在来看看细节。
//
[0.x.51504] 
[0.x.51505] 
[0.x.51506] 
[0.x.51507] 
[0.x.51508] 
[0.x.51509] 
//
// 我们需要为张量[2.x.5922]提供空间，它是Y向量的外积之和。
//
[0.x.51510] 
//
// 首先初始化 [2.x.5923] 对象，以及 [2.x.5924] 张量。
//
[0.x.51511] 
//
// 现在，在我们继续之前，我们首先计算当前单元的所有活动邻居的列表。我们首先在所有面上进行循环，看那里的邻居是否处于活动状态，如果它与本单元在同一级别或更粗一级，就会出现这种情况（注意，一个邻居只能比本单元粗一次，因为我们在deal.II中只允许在一个面上有一个最大的细化差）。另外，邻居也可能在同一级别，并被进一步细化；那么我们必须找到它的哪些子单元与当前单元相邻，并选择这些子单元（注意，如果一个活动单元的邻居的一个子单元与这个活动单元相邻，那么它本身就必须是活动的，这是由于上面提到的一个细化规则）。
//
// 在一个空间维度上，情况略有不同，因为在那里不存在单一细化规则：相邻的活动单元可以在任意多的细化级别上有所不同。在这种情况下，计算变得有点困难，但我们将在下面解释。
//
// 在开始对当前单元的所有邻域进行循环之前，我们当然要清除存储活动邻域的迭代器的数组。
//
[0.x.51512] 
[0.x.51513] 
[0.x.51514] 
[0.x.51515] 
//
// 首先定义面的迭代器和邻居的缩写
//
[0.x.51516] 
[0.x.51517] 
//
// 然后检查邻居是否是活动的。如果是，那么它就在同一层或更粗的一层（如果我们不是在1D中），而且我们在任何情况下都会对它感兴趣。
//
[0.x.51518] 
[0.x.51519] 
[0.x.51520] 
[0.x.51521] 
//
// 如果邻居没有活动，则检查其子女。
//
[0.x.51522] 
[0.x.51523] 
//
// 要找到与本单元相邻的子单元，如果我们在本单元的左边（n==0），则依次去找其右边的子单元，如果我们在右边（n==1），则依次去找左边的子单元，直到找到一个活动单元。
//
[0.x.51524] 
[0.x.51525] 
[0.x.51526] 
//
// 由于这使用了一些非微妙的几何直觉，我们可能想检查一下我们是否做对了，也就是说，检查我们找到的单元格的邻居是否确实是我们目前正在处理的单元。像这样的检查通常是有用的，并且经常发现像上面这一行的算法（不由自主地交换[2.x.5925]或类似的算法是很简单的）和库中的错误（上面的算法所依据的假设可能是错误的，记录错误，或者由于库中的错误而被违反）。原则上，我们可以在程序运行一段时间后删除这样的检查，但是无论如何留下它来检查库中或上述算法中的变化可能是一件好事。                请注意，如果这个检查失败了，那么这肯定是一个无法恢复的错误，而且很可能被称为内部错误。因此我们在这里使用一个预定义的异常类来抛出。
//
[0.x.51527] 
[0.x.51528] 
//
// 如果检查成功，我们就把刚刚发现的活动邻居推到我们保留的堆栈中。
//
[0.x.51529] 
[0.x.51530] 
[0.x.51531] 
//
// 如果我们不在1d中，我们收集所有 "在 "当前面的子面后面的邻居孩子，然后继续前进。
//
[0.x.51532] 
[0.x.51533] 
[0.x.51534] 
[0.x.51535] 
[0.x.51536] 
[0.x.51537] 
//
// 好了，现在我们有了所有的邻居，让我们开始对他们每个人进行计算。首先，我们做一些预备工作：找出当前单元格的中心和该点的解决方案。后者是以正交点的函数值向量的形式得到的，当然，正交点只有一个。同样地，中心的位置是实空间中第一个（也是唯一的）正交点的位置。
//
[0.x.51538] 
[0.x.51539] 
//
[0.x.51540] 
[0.x.51541] 
//
// 现在在所有活动邻居上循环，收集我们需要的数据。
//
[0.x.51542] 
[0.x.51543] 
[0.x.51544] 
//
// 然后得到邻近单元的中心和该点的有限元函数值。注意，为了获得这些信息，我们必须重新初始化相邻单元的[2.x.5926]对象。
//
[0.x.51545] 
[0.x.51546] 
[0.x.51547] 
//
[0.x.51548] 
[0.x.51549] 
//
// 计算连接两个单元格中心的向量[2.x.5927]。注意，与介绍不同，我们用[2.x.5928]表示归一化的差分向量，因为这是在计算中随处可见的数量。
//
[0.x.51550] 
[0.x.51551] 
[0.x.51552] 
//
// 然后把这个单元格对Y矩阵的贡献加起来...
//
[0.x.51553] 
[0.x.51554] 
[0.x.51555] 
//
// ...并更新差额商数之和。
//
[0.x.51556] 
[0.x.51557] 
[0.x.51558] 
[0.x.51559] 
//
// 如果现在，在收集了来自邻居的所有信息后，我们可以确定当前单元的梯度的近似值，那么我们需要经过跨越整个空间的向量[2.x.5929]，否则我们就不会有梯度的所有成分。这可以通过矩阵的可逆性来说明。
//
// 如果矩阵不可逆，那么当前单元的活动邻居数量不足。与之前所有的情况（我们提出了异常）相比，这不是一个编程错误：这是一个运行时错误，即使在调试模式下运行良好，也可能在优化模式下发生，所以在优化模式下尝试捕捉这个错误是合理的。对于这种情况，有一个[2.x.5930]宏：它像[2.x.5931]宏一样检查条件，但不仅仅是在调试模式下；然后输出一个错误信息，但不是像[2.x.5932]宏那样中止程序，而是使用C++的[2.x.5933]命令抛出异常。这样，人们就有可能捕捉到这个错误，并采取合理的应对措施。其中一个措施是在全局范围内细化网格，因为如果初始网格的每个单元都至少被细化过一次，就不会出现方向不足的情况。
//
[0.x.51560] 
//
// 如果另一方面，矩阵是可反转的，那么就反转它，用它乘以其他数量，然后用这个数量和正确的网格宽度的幂来计算估计误差。
//
[0.x.51561] 
//
[0.x.51562] 
//
// 这个函数的最后一部分是将我们刚刚计算出来的内容写入输出向量的元素中。这个向量的地址已经存储在Scratch数据对象中，我们所要做的就是知道如何在这个向量中获得正确的元素--但我们可以问一下我们所在的单元格是第多少个活动单元。
//
[0.x.51563] 
[0.x.51564] 
[0.x.51565] 
[0.x.51566] 
//[2.x.5934] 
//
// [2.x.5935]函数与前面的例子类似。主要区别是我们使用MultithreadInfo来设置最大的线程数（更多信息请参见文档模块 [2.x.5936] "多处理器访问共享内存的并行计算"）。使用的线程数是环境变量DEAL_II_NUM_THREADS和 [2.x.5937] 的参数的最小值。如果没有给 [2.x.5938] 的值，则使用英特尔线程构建块（TBB）库的默认值。如果省略了对 [2.x.5939] 的调用，线程的数量将由 TBB 选择，与 DEAL_II_NUM_THREADS无关。
//
[0.x.51567] 
[0.x.51568] 
[0.x.51569] 
[0.x.51570] 
[0.x.51571]
[0.x.51572] 
//
[0.x.51573] 
[0.x.51574] 
[0.x.51575] 
[0.x.51576] 
[0.x.51577] 
[0.x.51578] 
[0.x.51579] 
[0.x.51580] 
[0.x.51581] 
[0.x.51582] 
[0.x.51583] 
[0.x.51584] 
[0.x.51585] 
[0.x.51586] 
[0.x.51587] 
[0.x.51588] 
[0.x.51589] 
[0.x.51590] 
[0.x.51591] 
[0.x.51592] 
[0.x.51593] 
[0.x.51594] 
[0.x.51595] 
[0.x.51596] 
[0.x.51597] 
[0.x.51598] 
[0.x.51599] 
[0.x.51600] 
//
[0.x.51601] 
[0.x.51602] 
//
//