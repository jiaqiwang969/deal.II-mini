\title{
A stabilized edge-based implicit incompressible
flow formulation
}

\author{
O.Soto, R. Löhner, J. Cebral, F. Camelli
翻译： Jiaqi-2021-8-16
}

\begin{abstract}
本文介绍了一种`edge-based`的`implicit`、`monolithic`的有限元（FE）方案，用于解决不可压缩的Navier-Stokes（NS）方程。最初的`element formulation`是基于`implicit`二阶时间`fractional step`（FS）方法的压力稳定特性，它是有条件的稳定。最终的`monolithic`方案保留了FS方法的二阶精度，并且是无条件稳定的。此外，可以证明最终的压力稳定项实际上是一些作者为获得高阶精确结果而添加的四阶压力项（但遵循不同的论点），而最终离散的对流项在形式上是各自连续项的二阶离散化。

`Edge implementation`的发展由两个标准支持：一个是基于`element`的属性，它已经被广泛地测试过，并且已经提出了收敛性和稳定性分析；另一个是在离散水平上执行`global conservation`和`symmetry`。我们制定并测试了一个单调性保护条款，该条款在尖锐的梯度区域减少离散化顺序，以避免局部振荡（过冲和欠冲）。本文介绍了一些数值例子和实验对比。
\end{abstract}

关键词:不可压缩流；稳定化方法；`edge-based`的方案

\section{Introduction}

在过去十年中开发的用于解决不可压缩NS方程的方案中（`monolithic`方案[^13] [^16] ，`projection or fractional step`（FS）方案[^3] [^8] [^18] [^20] [^21] [^22] [^25] ，`artificial compressibility` [^17] [^23] [^24] [^28] ，可压缩NS方程的`pre-conditioning`[^6] [^34] [^35] 等。FS方案通过对NS方程的平流项进行明确积分，产生高度准确、压力稳定的结果。然而，最小的`element`所强加的时间步长可能比获得时间精确的结果所需的时间步长小几个数量级。对于许多类别的问题，如生物流（血液和空气流动）和环境流（污染物释放），这意味着每次模拟需要数万个时间步长，使这些方案不切实际。大多数人工可压缩性和预设条件的方案都存在同样的缺陷。

另一方面，一般来说，`monolithic`方案以隐含方式处理平流项，从而避免了这些缺点。然而，从计算的角度来看，这些方法非常昂贵：速度和压力离散方程是耦合的。为此，开发了一个`implicit monolithic`但不耦合的方案，它是无条件稳定的，并保留了二阶FS方法的精度和稳定性 [^11] [^32] 。

这种方法是通过`element-based`的离散化实现的，这涉及到`element`的循环，`element`贡献的计算（对系统矩阵和力矢量的贡献），以及将这些`element`装配到全局阵列中。这种程序意味着在每个时间段的每个迭代中都要重新计算质量、拉普拉斯和梯度矩阵，这是非常耗时的。在这里提出的实施方案中，质量、梯度和拉普拉斯矩阵只在运行开始时计算和存储一次（或每次重新扫描时）。所有参与最终代数系统的左手边（LHS）和右手边（RHS）项都是通过循环计算网格中的各点，然后再循环计算与给定点相连的各点。最终的方程组以及不同的`edge-based`的数组（质量、拉普拉斯和梯度）的存储是通过使用标准的压缩稀疏行（CSR）格式完成的 [^29] 。通过这种方式，不同项的计算可以直接并行化，因为只有当点上的循环经过点$i$时才会触及网格边缘$i j$（在这项工作中，边缘$j i$与边缘$i j$不同）。

本文的其余部分组织如下。在第2节中，简要地总结了`element`的标准稳定化表述。在第3节中介绍了`edge-based`的实现，并讨论了其发展的一些方面。第4节专门展示了一些$2 \mathrm{D}$和三维数值例子，以及与`element-based`方案的一些比较。最后，在第5节中得出一些结论。

\section{Element-based scheme}


要解决的连续不可压缩的NS方程可以写成：

\begin{align}
&\frac{\partial \boldsymbol{u}}{\partial t}+(\boldsymbol{u} \cdot \nabla) \boldsymbol{u}-v \Delta \boldsymbol{u}+\nabla p=\boldsymbol{f} \quad \text { in } \Omega \times\left(0, t_{f}\right) \\
&\nabla \cdot \boldsymbol{u}=0 \quad \text { in } \Omega \times\left(0, t_{f}\right)
\end{align}
其中$\Omega$为流域，$t$为时间变量，$\left(0, t_{f}\right)$为模拟的时间间隔，$\boldsymbol{u}$为速度场，$\nabla$为梯度算子，$v$为运动粘度，$\Delta$为拉普拉斯算子，$p$为压力，$f$为体外力（即重力和Boussinesq力）。

让$\sigma$为粘性应力张量，$\boldsymbol{u}$为边界的单位外向法线$\partial \Omega .$用大括号表示规定值，这里要考虑的（2）的边界条件是

\begin{equation}
\begin{aligned}
&\boldsymbol{u}=\overline{\boldsymbol{u}} \text { on } \Gamma_{\mathrm{du}}, \quad p=\bar{p} \quad \text { and } \boldsymbol{n} \cdot \boldsymbol{\sigma}=\overline{\boldsymbol{t}} \text { on } \Gamma_{\mathrm{nu}} \\
&\boldsymbol{u} \cdot \boldsymbol{n}=\bar{u}_{n}, \quad \boldsymbol{n} \cdot \boldsymbol{\sigma} \cdot \boldsymbol{g}_{1}=\overline{t_{1}} \quad \text { and } \boldsymbol{n} \cdot \boldsymbol{\sigma} \cdot \boldsymbol{g}_{2}=\overline{t_{2}} \text { on } \Gamma_{\mathrm{mu}}
\end{aligned}
\end{equation}
为$t \in\left(t_{0}, t_{f}\right)$。边界$\partial \Omega$被认为分成三组不相交的部分$\Gamma_{\mathrm{du}}, \Gamma_{\mathrm{nu}}$和$\Gamma_{\mathrm{mu}}$，后者是规定混合条件的部分（即法向速度和切向应力）。矢量$g_{1}$和$g_{2}$（对于三维情况）跨越了与 $\Gamma_{\mathrm{mu}}$ 相切的空间。最后，$\Gamma_{\mathrm{du}}$和$\Gamma_{\mathrm{nu}}$是$\partial \Omega$的两个不相连的分量，其中规定了速度的`Dirichlet`和`Neumann`边界条件。初始条件必须附加到问题（2）和（3）中。如果上述方程在时间上使用`implicit`梯形规则($\theta=1.0$ Backward-Euler或 $\theta=0.5$ Crank-Nicholson )进行离散，在空间上使用[^12][^14][^32][^33]中提出的`orthogonal subscales stabilization`（OSS）类型方案，并使用Picard线性化来处理非线性项，可得到以下表达式。给出$\boldsymbol{u}_{h}^{n}$，在$\boldsymbol{V}_{h} \times Q_{h} \times \tilde{\boldsymbol{V}}_{h} \times \tilde{\boldsymbol{V}}_{h}$中找到$\left(\boldsymbol{u}_{h}^{n+1}, p_{h}^{n+1}, \boldsymbol{\pi}_{h}^{n+1}, \boldsymbol{\xi}_{h}^{n+1}\right)$，使得

\begin{equation}
\begin{aligned}
&\frac{1}{\theta \delta t}\left(\boldsymbol{u}_{h}^{n+\theta, i}-\boldsymbol{u}_{h}^{n}, \boldsymbol{v}_{h}\right)+\left(\boldsymbol{u}_{h}^{n+\theta, i-1} \cdot \nabla \boldsymbol{u}_{h}^{n+\theta, i}, \boldsymbol{v}_{h}\right)+\left(v \nabla \boldsymbol{u}_{h}^{n+\theta, i}, \nabla \boldsymbol{v}_{h}\right)-\left(p_{h}^{n+1, i-1}, \nabla \cdot \boldsymbol{v}_{h}\right) \\
&\quad+\left(\tau\left(\boldsymbol{u}_{h}^{n+\theta, i-1} \cdot \nabla \boldsymbol{u}_{h}^{n+\theta, i}-\beta^{n+1, i-1} \pi_{h}^{n+\theta, i-1}\right), \boldsymbol{u}_{h}^{n+\theta, i-1} \cdot \nabla \boldsymbol{v}_{h}\right) \\
&\quad=\left(\boldsymbol{f}^{n+\theta}, \boldsymbol{v}_{h}\right)+\left(\boldsymbol{\sigma}^{n+\theta, i-1} \cdot \boldsymbol{u}, \boldsymbol{v}_{h}\right)_{\Gamma_{\mathrm{nu}}} \label{2}\\
\end{aligned}
\end{equation}


\begin{equation}
\delta t\left(\nabla p_{h}^{n+1, i}-\nabla p_{h}^{n+1, i-1}, \nabla q_{h}\right)+\left(\tau\left(\nabla p_{h}^{n+1, i}-\beta^{n+1, i-1} \xi^{n+1, i-1}\right), \nabla q_{h}\right)=-\left(\nabla \cdot \boldsymbol{u}_{h}^{n+1, i}, q_{h}\right) 
\end{equation}

\begin{equation}
\left(\boldsymbol{\pi}_{h}^{n+\theta, i}, \tilde{\boldsymbol{v}}_{h}\right)=\left(\boldsymbol{u}_{h}^{n+\theta, i} \cdot \nabla \boldsymbol{u}_{h}^{n+\theta, i}, \tilde{\boldsymbol{v}}_{h}\right) 
\end{equation}

\begin{equation}
\left(\xi_{h}^{n+1, i}, \tilde{\boldsymbol{v}}_{h}\right)=\left(\nabla p_{h}^{n+1, i}, \tilde{\boldsymbol{v}}_{h}\right)
\end{equation}


$\forall\left(\boldsymbol{v}_{h}, q_{h}, \tilde{\boldsymbol{v}}_{h}, \tilde{\boldsymbol{v}}_{h}\right) \in \boldsymbol{V}_{h} \times Q_{h} \times \tilde{\boldsymbol{V}}_{h} \times \tilde{\boldsymbol{V}}_{h} .$ 上标$n$和$i$分别代表时间段和进入每个时间段的迭代计数器，下标$h$是指离散问题，$\delta t$是时间段大小，$\beta$是下面给出的数值开关（见第四节）。函数空间是标准的有限元空间，函数形式$(\because)$定义为。

$$
(\boldsymbol{a}, \boldsymbol{b})=\int_{\Omega} \boldsymbol{a} \cdot \boldsymbol{b} \mathrm{d} \Omega, \quad(\boldsymbol{a}, \boldsymbol{b})_{\Gamma}=\int_{\Gamma} \boldsymbol{a} \cdot \boldsymbol{b} \mathrm{d} \Gamma
$$

本征时间$\tau$已被引入到离散形式中，以表明它必须被逐个`element`计算。稳定性和收敛性分析决定了它必须被计算为[^2] [^9] [^16] 。

\begin{equation}
\tau=\frac{h^{2}}{4 v+2|u| h}
\end{equation}
其中$h$和$|u|$分别为典型的`element`尺寸和速度。

如果使用Crank-Nicholson时间离散化，方案(4)-(7)在时间上是二阶精确的，如果使用标准线性`element`，在空间上也是二阶精确的（见[^11] [^32] ）。每个时间步的求解是使用staggered迭代方案进行的。首先，非对称离散动量方程(4)使用标准的GMRES方法进行求解，并进行对角线预处理。然后，压力方程（5）是通过使用各向同性网格的共轭梯度与不完全LU预设条件（CG-ILU）求解器，或高度拉伸网格的CG-Linelet求解器来计算的（详见[^33]）。公式(6)和(7)使用了标准的块状质量矩阵。

对流和压力（不可压缩性）稳定性分别由（4）的第五项和（5）的第二项强制执行。可以注意到，对流稳定项是经典SUPG项[^4][^25]与它在有限元空间上的投影之间的减法。在这个意义上，稳定项是经典SUPG项在有限元空间上的正交投影，它与Galerkin对应项（（4）的第二项），变成了原始对流算子的二阶流线上风离散化。这一点可以通过在统一尺寸的网格$h$上用线性`element`写下此类项（公式（4）LHS的第二项和第五项）的节点点$k$的一维模版而轻易证实。

\begin{equation}
\mathscr{L}_{k}=\frac{1}{8} a\left(u_{k-2}-8 u_{k-1}+6 u_{k}+u_{k+2}\right)=a \frac{\mathrm{d} u_{k}}{\mathrm{~d} x}+\frac{h^{2}}{6} \frac{\mathrm{d}^{3} u_{k}}{\mathrm{~d} x^{3}}+\mathrm{O}\left(h^{3}\right)
\end{equation}
其中$a$是平流速度($\boldsymbol{u}_{h}^{n+\theta, i-1}$，用于公式（4）的情况）。同样，压力稳定项（公式（5）的第二项）是压力梯度对有限元空间的正交投影乘以固有时间 $\tau$ 。如果像对待对流项那样，用统一尺寸的网格写下这种项的一维模板 $h$ ，就可以得到以下表达式。

\begin{equation}
\mathscr{S}_{k}=\frac{\tau}{h}\left(\frac{1}{4} p_{k-2}-p_{k-1}+\frac{3}{2} p_{k}-p_{k+1}+\frac{1}{4} p_{k+2}\right)=\frac{\tau}{h} \frac{3}{12} h^{4} \frac{\mathrm{d}^{4} p_{k}}{\mathrm{~d} x^{4}}+\mathrm{O}\left(h^{6}\right)
\end{equation}
考虑到$\tau$分别与$h$或$h^{2}$的对流或粘性主导流成正比（见（8）），压力稳定项至少是四阶的。其他作者也使用了完全相同的压力稳定项，但根据不同的论点，获得了高度精确的稳定结果（即见[^19][^20][^21]）.

此外，必须注意的是，当每个时间步实现收敛时（当$ \boldsymbol{u}_{h}^{n+\theta, i-1}\approx \nabla \boldsymbol{u}_{h}^{n+\theta, i} $ 和$  p_{h}^{n+1, i-1}\approx p_{h}^{n+1, i} $)（5）的第一项必须是零（或非常接近），整个系统会收敛到monolithic方案的解。因此，在最终方案中保留这样一个项的唯一目的是对整个系统(4)-(7)进行预处理，并以这种方式来强制执行块迭代方案的收敛。大量的数值经验表明，如果放弃这个项，系统（4）-（7）会变得条件极差，因此，在大多数情况下不可能实现收敛。在最终方案中加入上述项是基于原始稳定monolithic系统的标准分步拆分，在参考文献中已经详细介绍过。[^11][^32].

作为最后一句话，必须提到staggered方案和monolithic方案的稳定性是一样的：staggered方案是由无条件稳定的隐式FS公式推导出来的（详见[^11][^32]）。此外，我们的数值经验表明，对于许多问题，非耦合方案允许使用更大的时间步长。这不是因为稳定性问题，而是因为耦合系统（速度-压力）在大的时间步长时变得非常僵硬（在某些情况下库朗数约为10）。因此，用于获得离散monolithic方程组解决方案的迭代求解器（预设条件的GMRES）经常停顿。另一方面，如果不同类型的求解器是不耦合的，它们可以用于不同的方程组。这样的特点允许利用每个系统的内在特性。例如，预设条件的GMRES求解器非常适用于非对称双曲动量方程，而CG-ILU或CG-Linelet则适用于对称的椭圆连续性（压力）方程。

\section{Edge-based implementation}

基于`Element`的实现已经在许多复杂的应用中进行了测试，获得了准确的结果。 [^5][^14][^31][^32][^33] . 对于大多数实际情况，由于对流和稳定项的非线性，系统的全局矩阵（LHS）及其全局力向量（RHS）必须在每个时间步骤的每个迭代中重新计算。如果使用标准的`element`实现，大部分离散项必须通过`element`间的循环来重新计算，进行所需的数值积分，进行大量的聚集和散射操作，并在`element`数据结构中进行许多冗余信息 [^19] 。这对cpu时间的要求很高：`element-based`的实现和`edge-based`的实现之间的flops开销比约为 $2.5$ [^19] 。此外，`element`循环的标准共享内存并行化也很复杂，因为不同矩阵的项$i j$的贡献来自不止一个`element`。那么，必须实现某种类型的着色算法，以强制边缘 $i j$ 不被不同处理器中的`element`同时访问 [^19] 。另一方面，在`edge-based`的实现中，大多数离散项和所有的数值积分在运行开始时就被计算了，只有少数操作必须被实现以重新计算不同的LHS和RHS非线性项。此外，消除了散点操作，由于本工作中提出的实现类型，并行化是直接的：执行两个嵌套循环，主循环（这是一个并行化的循环）是在网格点$i$上进行的，而内部循环是在点$i$周围的点（连接到点$i$的边）上进行的。边$i j$的贡献只在访问节点$i$时计算，因此，不需要着色算法。在这项工作中，边$j i$（只在访问节点$j$时访问）被认为与边$i j$不同。然而，正如后面将显示的那样，拉普拉斯类项的`symmetry`被保留了。

在`edge-based`的实施中，我们的想法是用以下方式表达所有的贡献

\begin{equation}
\int_{\Omega} N_{i} N_{j} \mathrm{~d} \Omega, \quad \int_{\Omega} \partial_{l} N_{i} \partial_{k} N_{j} \mathrm{~d} \Omega, \quad \int_{\Omega} N_{i} \partial_{l} N_{j} \mathrm{~d} \Omega \quad \text { and } \quad \int_{\Omega} \partial_{l} N_{i} N_{j} \mathrm{~d} \Omega
\end{equation}
以下$i, j=1, \ldots, n_{\mathrm{pts}}$和$l, k=1, \ldots, n_{\mathrm{dof}} .$为计算网格的节点数，$n_{\text {dof }}$为每个节点的自由度数（$3 \mathrm{D}$情况下的三个动量分量$), l$和$k$是指矢量或张量场的笛卡尔分量 $l$和$k$的矢量或张量场，$i$和$j$指节点$i$和$j$，积分（11）将分别被称为质量$(\boldsymbol{M})$、拉普拉斯$(\boldsymbol{L})$、梯度$(\boldsymbol{G})$和换位梯度$\left(\boldsymbol{G}^{\mathrm{T}}\right)$矩阵。对于固定域，（11）中的所有积分都可以在运行开始时计算，并以标准CSR格式存储。在上述条款中，$N_{i}$是与节点$i$相关的标准形状或测试函数，以及$\partial_{l} N_{i}=\partial N_{i} / \partial x_{l}$ 。值得注意的是，对于内部点（不是网格的边界点的点），$\int_{\Omega} N_{i} \mathrm{\partial}_{l} N_{j} \mathrm{~d} \Omega=-\int_{\Omega} \mathrm{\partial}_{l} N_{i} N_{j}$ 。一些作者使用这样的属性来节省计算机内存 [^19] ，然而，为了简化代码的实现和并行化，并考虑到目前计算机内存非常便宜，在这项工作中，两个矩阵都被存储。这样做的另一个副作用是减少了高速缓存的失误，这意味着CPU时间的大幅减少。

在下面的小节中，我们展示了为计算$(4)-(7)$的不同项所必须做的不同假设和假定，只使用（11）中提出的积分。

\subsection{Viscous term}

经典的粘性Galerkin项（(4)的第三项），对于恒定粘性问题是线性的。因此，使用标准的拉普拉斯矩阵（(11)的第二个积分）来计算它是直接的，不涉及任何近似。对于可变粘度问题，即湍流问题，与温度或压力有关的粘度等，必须做一些近似。在这项工作中，以下两个属性，对于`element-based`的实现来说是自动成立的，在离散水平上被强制执行：守恒和`symmetry`。

不仅对粘性项，而且对$(4)-(7) .$的所有静止项，都必须在离散水平上验证守恒特性，这可以通过将公式（4）的系统写成：

\begin{equation}
\frac{1}{\theta \delta t} \boldsymbol{M}\left(\boldsymbol{U}^{n+\theta}-\boldsymbol{U}^{n}\right)+\boldsymbol{C} \boldsymbol{U}^{n+\theta}=\boldsymbol{F}
\end{equation}
其中$U$是整个网格的节点速度阵列，$C$包含对全局系统矩阵（LHS）的所有静止贡献，$\boldsymbol{F}$是力矢量（重力，Boussinesq，等等）。然后，守恒特性可以在离散水平上表示为。

\begin{equation}
\sum_{j=1}^{n_{\mathrm{pts}}}\left(\sum_{k=1}^{n_{\mathrm{dof}}} C_{l i, k j}\right)=0
\end{equation}
为$i=1, \ldots, n_{\mathrm{pts}}$和$l=1, \ldots, n_{\text {dof }} \cdot C_{l i, k j}$是矩阵$l i$的行条目和列$k j$。基本上（13）意味着$C$的任何行$l i$之和必须为零。这个属性强制执行了正确的动量平衡（即没有动量是由数值方案产生的）。其结果是，如果没有源项的存在，恒定的解决方案在不同的时间保持不变。

粘性项必须满足的另一个重要属性是`symmetry`（粘性项$\left.C_{l i, k j}^{v}=C_{k j, l i}^{v} \forall l i, k j\right) .$从物理学角度来看，它意味着从点$i$到点$j$的扩散传输等于从点$j$到点$i$的扩散传输。这对斯托克斯问题来说是一个非常重要的属性（当对流项可以被忽略时），因为它允许使用廉价的对称求解器（即共轭梯度）来处理最终的方程组。`symmetry`是通过计算粘性贡献而在离散水平上强制执行的。

\begin{equation}
C_{l i, l j}^{v} \approx \frac{1}{2}\left(v_{i}+v_{j}\right) \sum_{l=1}^{n_{\mathrm{dof}}} \int_{\Omega} \partial_{l} N_{i} \mathrm{\partial}_{l} N_{j} \mathrm{~d} \Omega
\end{equation}
其中$v_{i}$指的是在结点$i .$评估的粘度。注意，如果粘度不是常数，（14）可能会违反守恒特性（13）。通过只计算非对角线项$C_{l i, l j}^{v}$，并通过计算同行非对角线项的减法来避免这一缺陷。

\begin{equation}
C_{l i, l i}^{v}=-\sum_{k j \neq l i} C_{l i, k j}^{v}
\end{equation}
$l i$和$k j=1, \ldots, n_{\text {dof }} * n_{\text {pts }} .$ 然后，在离散水平上强制执行守恒（13）。公式（15）可以被重新解释为选择一个满足守恒特性的系数$C_{l i, l i}^{v}$的粘度。这将是本工作中的标准程序，以执行公式（13）。(13)的其余静止项（Galerkin和稳定项）。

\subsection{Pressure Galerkin term}

(4)中的压力项是利用梯度矩阵$\boldsymbol{G}$在最后一次迭代中计算出的节点压力，并被置于RHS处，即。

\begin{equation}
F_{l i}^{p}=-G_{l, i j} p_{j}=\sum_{j \neq i} \int_{\Omega} N_{i} \partial_{l} N_{j} \mathrm{~d} \Omega\left(p_{i}-p_{j}\right)
\end{equation}
请注意，（16）正好满足了守恒属性（13）。对角线 "项被自动计算为同行非对角线项的减法。

\subsection{Convective Galerkin term}

对流Galerkin项的$(l i, l j)$贡献（（4）的第二项），在`element-based`的实施中计算为：

\begin{equation}
C_{l i, l j}^{c}=\sum_{k=1}^{n_{\text {dof }}} \int_{\Omega} N_{i} a_{k} \partial_{k} N_{j} \mathrm{~d} \Omega
\end{equation}
其中$\boldsymbol{a}_{k}$是平流速度的$k$分量（（4）中的$\boldsymbol{a}=\boldsymbol{u}_{h}^{n+\theta, i-1}$）。在这一点上，必须使用预先计算的梯度矩阵$\boldsymbol{G}$做一些近似来表达（17）。这可以通过计算$C_{l i, l j}^{c}$来实现。

\begin{equation}
C_{l i, l j}^{c} \approx \sum_{k=1}^{n_{\mathrm{dof}}} a_{k, i j} \int_{\Omega} N_{i} \mathrm{o}_{k} N_{j} \mathrm{~d} \Omega
\end{equation}
其中$a_{k, i j}$是与边$i j$相关的平流速度的$k$分量。第一个想法是遵循用于粘性项的相同程序，即把$\boldsymbol{a}_{i j}$作为节点$i$和$j$的平均速度，并通过计算对角线作为同行非对角线项的减法来执行保存属性。然而，这个过程会破坏对流项的二阶Galerkin或中心差分近似（假设使用的是线性`element`）。这样的二阶近似在离散水平上体现为$C_{l i, l i}^{c}=0$为内部节点的事实。在使用线性`element`的标准有限元近似中（或在使用中心方案的有限差分中）自然产生的东西。

满足二阶离散化条件的唯一方法是将$\boldsymbol{a}_{i j}$作为只有结点$i\left(\boldsymbol{a}_{i j}=\boldsymbol{a}_{i}\right) .$的函数 在这种情况下，对于内部点很容易验证

\begin{equation}
C_{l i, l i}^{c}=-\sum_{k j \neq l i} a_{k, i} \int_{\Omega} N_{i} \partial_{k} N_{j}=0
\end{equation}
意味着近似是二阶的，并且守恒性质（13）成立。现在的问题是如何计算 $\boldsymbol{a}_{i}$ 。第一个选择是节点处的速度 $i, \boldsymbol{u}_{i}$ 。然而，在这项工作中，对内部点实施了以下平均。

\begin{equation}
a_{k, i}=\frac{m_{i j} u_{k, j}}{\sum_{j \neq i} m_{i j} u_{k, j}} \quad \forall j \neq i
\end{equation}
其中$a_{k, i}$是$\boldsymbol{a}_{i}, m_{i j}$的$k$分量，是一致质量矩阵的$i j$项（见（11）），$u_{k, j}$是节点$j$处的速度$k$分量。注意，如果$i$与$j$不相连，则只需对与$j$相连的点进行计算即可）。

对于边界点，使用相同的公式。(20)被使用，但包括节点$i$的加权平均。

\begin{equation}
a_{k, i}=\frac{m_{i j} u_{k, j}}{\sum_{j=1}^{n_{p t s}} m_{i j} u_{k, j}} \quad \forall j
\end{equation}
数值经验表明，与节点$i$相关的对流速度的公式(20)和(21)比只取$\boldsymbol{a}_{i}=\boldsymbol{u}_{i} .$产生更好的收敛率和更准确的结果。此外，可以检查出，给定一个离散速度场$\boldsymbol{u}$，使用`element-based`的标准实现得到的对流RHS

\begin{equation}
f_{l i}^{\text {element }}=\sum_{j=1}^{n_{\mathrm{pts}}}\left(\sum_{k=1}^{n_{\text {dof }}} \int_{\Omega} N_{i} u_{k} \partial_{k} N_{j} \mathrm{~d} \Omega u_{l j}\right)
\end{equation}
与$\boldsymbol{a}_{i}=\boldsymbol{u}_{i}$相比，使用公式(20)和(21)对平流速度进行近似要好得多。此外，必须指出，（20）和（21）自然产生于对流NS项的中心有限差分（或中心有限体积）离散化。

\subsection{Convective stabilization terms}

动量方程的高阶SUPG项（(4)的最后一个LHS项）可以用两部分来表示。低阶项的表达方式为

\begin{equation}
C_{l i, l j}^{\mathrm{low}}=\int_{\Omega} \tau \sum_{k=1}^{n_{\mathrm{dof}}}\left(a_{k} \mathrm{\partial}_{k} N_{i}\right) \sum_{m=1}^{n_{\mathrm{dof}}}\left(a_{m} \partial_{m} N_{j}\right) \mathrm{d} \Omega
\end{equation}
和投影，或高阶项，放在RHS上，作为。

\begin{equation}
F_{l i}^{\mathrm{high}}=\sum_{j=1}^{n_{\mathrm{pts}}}\left(\int_{\Omega} \tau \sum_{k=1}^{n_{\mathrm{dof}}}\left(a_{k} \partial_{k} N_{i}\right) N_{j} \mathrm{~d} \Omega \pi_{l j}\right)
\end{equation}
为了用积分（11）来表示$(23)$和$(24)$，必须实现两个近似。平流速度$\boldsymbol{a}$和固有时间$\tau$必须从积分中取出。

对于平流速度，自然选择由（20）和（21）给出。这不仅与Galerkin的对流对应物一致，而且更接近于`element-based`的条款。以同样的方式，内在时间$\tau$在节点$i$处被评估为。

\begin{equation}
\tau_{i}=\frac{h_{i}^{2}}{4 v_{i}+2\left|\boldsymbol{a}_{i}\right| h_{i}}
\end{equation}
其中$h_{i}$是围绕结点$i$的所有边的最小长度。$\tau$只依赖于节点$i$是出于一致性的原因：如果$\tau$也依赖于节点$j$，速度的确切节点值将不满足离散方程[^10]的要求。原因是，如果$j$的偏导数乘以一个取决于节点$j$的系数，那么$j$的和将不会产生对流项。这可以通过写出`edge-based`的项乘以速度矢量的方程$l i$来澄清。

\begin{equation}
C_{l i, l j}^{\text {low }} u_{l j} \approx \sum_{k, m=1}^{n_{\text {dof }}} \tau_{i} a_{k, i} a_{m, i} \int_{\Omega} \partial_{k} N_{i} \partial_{m} N_{j} \mathrm{~d} \Omega u_{l j}
\end{equation}
请注意，如果$\boldsymbol{a}$或$\tau$取决于$j$，那么对流项$a_{m} \partial_{m} N_{j} u_{l j}$将不会被恢复。每个贡献将被乘以一个不同的系数。低阶SUPG项的计算方法是：

\begin{equation}
C_{l i, l j}^{\text {low }} \approx \sum_{k, m=1}^{n_{\text {dof }}} \tau_{i} a_{k, i} a_{m, i} \int_{\Omega} \partial_{k} N_{i} \partial_{m} N_{j} \mathrm{~d} \Omega
\end{equation}
对于非对角线项$i \neq j$，按照粘性Galerkin项的相同程序，对角线是通过在离散水平上执行守恒而计算的。

\begin{equation}
C_{l i, i i}^{\mathrm{low}}=-\sum_{k j \neq l i} C_{l i, k j}^{\text {low }}
\end{equation}
高阶项（24）也是通过使用$\tau_{i}$和$\boldsymbol{a}_{i}$以及转置的梯度矩阵$\boldsymbol{G}^{\mathrm{T}}$在离散水平上执行守恒特性来计算的。

\begin{equation}
F_{l i}^{\text {high }}=-\tau_{i} \sum_{j \neq i}\left(\sum_{k=1}^{n_{\text {dof }}} \int_{\Omega} \partial_{k} N_{i} N_{j} \mathrm{~d} \Omega\left(\pi_{l j}-\pi_{l i}\right)\right)
\end{equation}
最后，对流项$\pi$的投影是使用（6）的近似值计算的，并且再次强制执行守恒特性。

\begin{equation}
m_{i i}^{l} \pi_{l i}=\sum_{j \neq i}\left(\sum_{k=1}^{n_{\mathrm{dof}}} a_{k, i} \int_{\Omega} N_{i} \mathrm{\partial}_{k} N_{j} \mathrm{~d} \Omega\left(u_{l j}-u_{l i}\right)\right)
\end{equation}
其中$m_{i i}^{l}$是标准块状质量矩阵的$i i$部分。

\subsection{Incompressibility equation}

(5)的离散项是按照与上述类似的程序进行逼近的。LHS的Laplacian项（方程（5）的第一项和第三项的一部分）被近似为：

\begin{equation}
L_{i, j}=\sum_{l=1}^{n_{\mathrm{dof}}} \int_{\Omega}(\delta t+\tau) \mathrm{\partial}_{l} N_{i} \partial_{l} N_{j} \mathrm{~d} \Omega \approx\left(\delta t+\tau_{i j}\right) \sum_{l=1}^{n_{\mathrm{dof}}} \int_{\Omega} \partial_{l} N_{i} \mathrm{O}_{l} N_{j} \mathrm{~d} \Omega
\end{equation}
$\forall j \neq i$ ，对角线项的计算也是通过执行守恒特性（13）进行的。这就是。

\begin{equation}
L_{i, i}=-\sum_{j \neq i} L_{i, j}
\end{equation}
本质时间$\tau_{i j}$取为。

\begin{equation}
\tau_{i j}=\frac{h_{i}+h_{j}}{4\left(v_{i}+v_{j}\right)+2\left(\left|\boldsymbol{a}_{i}\right|+\left|\boldsymbol{a}_{j}\right|\right)}
\end{equation}
其中$h_{i}$是围绕结点$i$的边的最小长度。请注意，即使项$\boldsymbol{L}$是保守的（在离散水平上强制执行守恒），它也不是上面表达的低阶稳定对流项意义上的一致。这是因为，$\tau$取决于节点点$j$，因此，压力的精确节点值将不满足离散方程。可以通过使$\tau$只取决于节点$i$来保持一致性。然而，这个过程会破坏系统（5）的`symmetry`。此外，已经证明压力稳定项在形式上是四阶的（见第2节），这意味着它们对最终精度的影响非常小。做出了这样的选择。为了保持`symmetry`和守恒性，以失去一些一致性为代价。

高阶稳定项（（5）第二项的另一部分）的近似是通过在离散水平上施加全局守恒来进行的。

\begin{equation}
F_{i}^{p}=\sum_{j \neq i}\left(\tau_{i j} \sum_{l=1}^{n_{\mathrm{dof}}} \int_{\Omega} \partial_{l} N_{i} N_{j} \mathrm{~d} \Omega\left(\xi_{l j}-\xi_{l i}\right)\right)
\end{equation}
以及用(7)计算的压力梯度在有限元空间上的投影为。

\begin{equation}
m_{i i}^{l} \xi_{l i}=\sum_{j \neq i} \int_{\Omega} N_{i} \partial_{l} N_{j} \mathrm{~d} \Omega\left(p_{j}-p_{i}\right)
\end{equation}
其中强加了全局守恒，并再次使用了对$M$的凑合近似值。

最后一个LHS项$-\delta t\left(\nabla p_{h}^{n+1, i-1}, \nabla q_{h}\right)$的计算是直接的，不需要做任何近似计算。这表示为$-\delta t \sum_{l=1}^{n_{\text {dof }}} \int_{\Omega} \partial_{l} N_{i} \partial_{l} N_{j} \mathrm{~d} \Omega\left(p_{j}-p_{i}\right)$（为简单起见省略了下标/上标）。

最后，发散项（(5)的最后一项）的计算方法是。

\begin{equation}
F_{i}^{\mathrm{div}}=-\sum_{j \neq i}\left(\sum_{l=1}^{n_{\mathrm{dof}}} \int_{\Omega} N_{i} \partial_{l} N_{j} \mathrm{~d} \Omega\left(u_{l j}-u_{l i}\right)\right)
\end{equation}
同样，保护工作也是在离散层面上实施的。

备注1.请注意，对于所有的静止项，只有对角线以外的贡献需要计算。计算这些项的主循环先经过节点，然后再经过节点周围的点（利用CSR存储的优势）。LHS的对角线入口在第二个循环中通过使用保护属性（13）进行计算。在一个标准的`edge-based`的实现中[^19]，保存属性反映在这样一个事实上，即无论向边的某一点添加什么，都会从另一点中减去。

备注2。动量方程中的时间项是在构建$\boldsymbol{C}$之后集合的（见(12)）。可以使用一致的质量矩阵或其块状近似值。一般来说，作者利用第一种方法来获得时间上的精确结果，而第二种方法用于稳态解。

\section{Monotonicity preserving term}

(4)-(7)中提出的高阶公式不能避免局部振荡（过冲和欠冲），这些振荡会恶化公式的收敛性。尽管迄今为止已解决的大多数数值问题都没有出现这种异常，但必须为其中一些问题设计一种非线性数值开关，以避免局部虚假振荡。

其想法是通过压力项和其投影之间的差异来识别具有强压力梯度的流动区域。然后，在每次迭代中，在边缘$\beta$处计算一个变量$i j$为。

\begin{equation}
\beta=1-\frac{\left|p_{i}-p_{j}\right|+0.5 l_{k, i j}\left(\xi_{k, i}+\xi_{k, j}\right)}{\left|p_{i}-p_{j}\right|+\left|0.5 l_{k, i j}\left(\xi_{k, i}+\xi_{k, j}\right)\right|}
\end{equation}
其中 $p_{i}$ 是节点的压力 $i, l_{k, i j}=x_{k, i}-x_{k, j}$ 是边缘 $i j$ 在 $k$ 方向的尺寸， $\xi_{k, i}$ 是节点 $i$ 的投影压力梯度的 $k$ 部分。很容易看出，$0 \leqslant \beta \leqslant 1$，在压力场平滑的地方取值接近1，在压力梯度大的流动区域取值接近0。通过将高阶SUPG和压力稳定项乘以$\beta$（见(4)和(5)），可以得到在这种尖锐梯度区域降低离散化阶数的数值转换。值得注意的是，一些作者利用非常类似的压力传感器，以避免在使用Riemann求解器处理对流主导的流动时出现昂贵的限制程序（详见[^19]）。

\section{Numerical examples}

\subsection{Backward-facing step}

考虑的第一个例子是不同$R e$数下的层流后向台阶。它是为了验证`edge-based`的公式(4)-(7)在处理低和高$R e$的NS稳态问题时的有效性。问题的几何形状和网格显示在图1中。后向台阶 $H$ 与整体截面宽度的长宽比为 $1: 2$ ，水平方向的总长度为 $40 \mathrm{H}$ 。在流入边界规定了一个充分发展的抛物线速度曲线。在流出处，压力和粘性应力被设置为零。网格由16472个线性三角形和8542个结点组成。

根据Armaly等人[^1]，Re数将基于入口速度曲线的平均值和整个域的横截面宽度。对于$R e<500$，台阶后面只存在一个再循环区。对于更高的$R e$值，另一个再循环区出现在通道的顶壁。实验结果表明，对于$\operatorname{Re}>1000$的值，第三个再循环区出现在壁的底部。

![](https://cdn.mathpix.com/cropped/95c9e49282e4ba31009c49db66a10614-11.jpg?height=168&width=725&top_left_y=181&top_left_x=196)

图1.从上到下。由16472个线性`element`和8542个结点组成的网格。流线模式。压力等值线；峰值$\left(-1.012 \times 10^{-1}, 3.067 \times 10^{-4}\right) .$ 。

对于$R e<600$，使用`edge-based`的实现的数值结果与上述参考文献中的结果非常一致。为了简洁起见，这里不包括这些结果，只包括$R e=1000$的结果。在图1中展示了流线模式。阶梯后面的涡流长度大约为13.0。实验结果是14.3。考虑到在这个$R e$数字下，由于实验流动的三维性，应该有一些差异，结果是好的。在图1中显示了压力场。请注意，在外流处没有压力反射。压力梯度是平行于水平方向的。最后，必须提到的是，用`element-based`的代码得到了同样的结果，但使用的cpu时间几乎是`edge-based`的代码的三倍。

![](https://cdn.mathpix.com/cropped/95c9e49282e4ba31009c49db66a10614-11.jpg?height=593&width=613&top_left_y=739&top_left_x=252)

图2.从上到下。369,713个线性`element`68,491个结点的网格和速度场。压力等值线；峰值$\left(-4.205 \times 10^{-1}, 3.804 \times 10^{-1}\right)$ 。

\subsection{NACA0012 wing}

这个例子是为了观察`edge-based`的公式是否能够处理$3 \mathrm{D}$几何形状中不可压缩的欧拉流。体积网格由369,713个`element`和68,491个节点组成。流动的攻角被固定为5度，速度场在流入处被规定，压力在流出处被设置为零。

在图2中展示了一些使用`edge-based`的公式的结果。可以看出，这些结果没有虚假的震荡。在奔腾Intel386处理器上，将$L 2$的残余规范降低五个数量级的cpu时间约为$6000 \mathrm{~s}$。`element-based`的代码和边缘代码之间的cpu时间比约为$3 .$ 主要的差异是在计算全局LHS和RHS系数时发现的。`element-based`的方案在此类操作中花费的cpu时间几乎是`edge-based`的方案的7倍。

\subsection{Air flow through the respiratory ways}

这个瞬态的真实$3 \mathrm{D}$案例包括计算气流通过呼吸道的一部分（网格为992,354个线性四面体和184,395个点）。`implicit`方案使用的时间步长为$0.0625 \mathrm{~s}$，相当于每个呼吸周期64个时间步长。这个问题也是用显式二阶精确分步（FS）`edge-based`的代码计算的。这种求解器必须使用的时间步长比`implicit`方法使用的时间步长至少要小三个数量级。因此，`implicit`方案比显式方案快10倍左右，而数值结果实际上是一样的。此外，如图3所示，重要的流动特征被准确地捕捉到。
![](https://cdn.mathpix.com/cropped/95c9e49282e4ba31009c49db66a10614-12.jpg?height=542&width=736&top_left_y=794&top_left_x=202)

图3.狭窄区域的整体压降、压力和速度细节。注意从吸气到呼气的压降和速度的反转。从上到下。  $t=1.0 \mathrm{~s}$ 和 $t=3.0 \mathrm{~s}$ 。

\section{Ship topside flow study}

这个例子的目的是比较`edge-based`的公式的数值结果和一个真实的三维问题的实验数据。图4（左上）显示了船舶（LPD17）的几何形状。其尺寸为。  长度为$200 \mathrm{~m}$，宽度为$30 \mathrm{~m}$，水线以上高度为$50 \mathrm{~m}$ 。计算网格由$5,640,000$个四面体和99万个点组成。

流入条件被设定为均匀流动，速度为30节$(15.43 \mathrm{~m} / \mathrm{s}$），假设最大船速。流入的方向是$x$。时间步长为$0.01 \mathrm{~s}$，密度为$1.225 \mathrm{~kg} / \mathrm{m}^{3}$，粘度为$1.789 \times 10^{-5} \mathrm{~kg} / \mathrm{m} / \mathrm{s}$ 。基于船舶高度的雷诺数为 $5 \times 10^{7}$ 。在这个雷诺数下，流动处于湍流状态。因此，用[^30]中描述的Smagorinsky湍流模型进行LES模拟。边界条件使用对数墙法，压力被设置为流出口的静水压力。

在运行的第一部分，建立了一个伪稳定流。在达到这种状态后，流动被整合为$90 \mathrm{~s}$的实际时间。在模拟中使用Boussinesq近似法考虑了浮力效应。

![](https://cdn.mathpix.com/cropped/95c9e49282e4ba31009c49db66a10614-13.jpg?height=732&width=731&top_left_y=603&top_left_x=193)

图4.从上到下，从左到右。LPD17的几何形状。空间站数据时间历史的位置：飞行甲板的侧视图；实验测量是在（1）、（2）和（3）线获得。带状物以速度的绝对值着色。流动的一些瞬时流线（带状）显示在图中。 $4 .$ 这种技术有助于捕捉有再循环的区域。图4（左下）显示了着陆甲板上方的大量再循环。图4（右下）显示了一个特别有趣的特征。这些带子表明在船的中部附近有一个明显的从左舷到右舷的交叉流。

风洞LDV测量的实验速度数据可在图4（右上角）所示位置获得。实验速度被平均化，并与$90 \mathrm{~s}$期间的平均数值数据进行比较。图$5-7$显示了比较结果。图中的速度是在$x$方向$(u)$，在$y$方向的速度。
![](https://cdn.mathpix.com/cropped/95c9e49282e4ba31009c49db66a10614-14.jpg?height=274&width=958&top_left_y=402&top_left_x=94)

图5.从左到右。LPD17 $u$ 平均速度（1），$v$ 平均速度（2），$w$ 平均速度（3）。

![](https://cdn.mathpix.com/cropped/95c9e49282e4ba31009c49db66a10614-14.jpg?height=268&width=312&top_left_y=749&top_left_x=97)

![](https://cdn.mathpix.com/cropped/95c9e49282e4ba31009c49db66a10614-14.jpg?height=261&width=307&top_left_y=754&top_left_x=427)
![](https://cdn.mathpix.com/cropped/95c9e49282e4ba31009c49db66a10614-14.jpg?height=268&width=946&top_left_y=749&top_left_x=97)

![](https://cdn.mathpix.com/cropped/95c9e49282e4ba31009c49db66a10614-14.jpg?height=273&width=315&top_left_y=1079&top_left_x=97)

![](https://cdn.mathpix.com/cropped/95c9e49282e4ba31009c49db66a10614-14.jpg?height=273&width=311&top_left_y=1079&top_left_x=418)

![](https://cdn.mathpix.com/cropped/95c9e49282e4ba31009c49db66a10614-14.jpg?height=273&width=314&top_left_y=1079&top_left_x=729)
![](https://cdn.mathpix.com/cropped/95c9e49282e4ba31009c49db66a10614-14.jpg?height=274&width=946&top_left_y=1078&top_left_x=97)方向 $(v)$ ，以及在$z$方向 $(w)$ 。横线是实验数据，星星是数值结果的平均值，虚线是数值结果的标准偏差。在大多数的图中，数值结果与实验数据相当吻合。线站（2）中$x$方向的数值速度（见图6）显示在中心位置与实验数据有明显偏差。一个可能的解释是实验仪器的分辨率不够。这在早期的计算中也可以看到 [^26] [^27] 。没有提供LDV数据的实验误差。

\section{Conclusions}

提出了一个`implicit`二阶精确的基于`monolithic`的方案来解决不可压缩的流动问题。它是从`element-based`的公式发展而来的，该公式已经过广泛的测试。`element-based`的方案和`edge-based`的方案之间的主要区别是构建最终的LHS和RHS系统条款的速度。`edge-based`的求解器比`element`求解器的操作要少，这意味着总的CPU时间大大减少。

配方中的其他成分是：不可压缩项和对流项使用OSS方案进行稳定。对于不可压缩性方程，已经证明这种方法减少到与一些作者为获得高阶精确结果而添加的四阶压力项相同。对于对流项，已经证明了OSS的稳定化只不过是各自对流算子的二阶近似。数值经验表明，该方案对所有雷诺数都非常有效，其时间精度也非常好。当问题的关键时间步长比获得时间精确结果所需的时间步长（物理时间步长）小几个数量级时，这种方案似乎对瞬态情况非常有效。

\section{References}

[^1]: B. Armaly, F. Durst, J. Pereira, B. Schonung, Experimental and theoritical investigation of backward-facing step flow, J. Fluid Mech. 127 (1983) 473-476.

[^2]: M. Behr, T. Tezduyar, Finite element solution strategies for large-scale flow simulations, Comput. Methods Appl. Mech. Engrg. $112(1994)$ 3-24.

[^3]: J. Bell, P. Colella, H. Glaz, A second order projection method for the Navier-Stokes equations, J. Comput. Phys. 85 (1989) 257$283 .$

[^4]: A. Brooks, T. Hughes, Streamline upwind/Petrov-Galerkin formulations for convection dominated flows with particular emphasis on the incompressible Navier-Stokes equation, Comput. Methods Appl. Mech. Engrg. $32(1982)$ 199-259.

[^5]: J. Cebral, P. Yim, R. Löhner, O. Soto, H. Marcos, P. Choyke, New methods for computational fluid dynamics of carotid artery from magnetic resonance angiography, in: Proceedings of SPIE Medical Imaging, vol. 4321 , paper No. 22, San Diego, California, February, 2001 .

[^6]: Y.H. Choi, C.L. Merkle, The application of preconditioning in viscous flows, J. Comput. Phys. 105 (1993) 207-233.

[^7]: A. Chorin, A numerical method for solving incompressible viscous problems, J. Comput. Phys. $2(1967) 12-26 .$

[^8]: A. Chorin, On the convergence of discrete approximation to the Navier-Stokes equations, Math. Comput. 23 (1969).

[^9]: R. Codina, A stabilized finite element method for generalized stationary incompressible flows, Comput. Methods Appl. Mech. Engrg. 190 (2001) 2681-2706.

[^10]: R. Codina, A nodal-based implementation of a stabilized finite element method for incompressible flow problems, Int. J. Numer. Methods Fluids 33 (2000) 737-766.

[^11]: R. Codina, Pressure stability in fractional step finite element methods for incompressible flows, J. Comput. Phys. 170 (2001) 112 $140 .$

[^12]: R. Codina, Stabilization of incompressibility and convection through orthogonal sub-scales in finite element methods, Comput. Methods Appl. Mech. Engrg. 190 (2000) 1579-1599.

[^13]: R. Codina, O. Soto, Finite element solution of the Stokes problem with dominating Coriolis force, Comput. Meth. Appl. Mech. Engrg. 142 (1997) 215-234.

[^14]: R. Codina, O. Soto, A numerical model to track two-fluid interfaces based on a stabilized finite element method and the level set technique, Int. J. Numer. Methods Fluids 4 (2002) 293-301. [^15] G. Cowles, L. Martinelly, Fully non-linear hydrodynamic calculations for ship design on parallel computing platforms, in: Proceedings of 21 st Symposium on Naval Hydrodynamics, Trondheim, Norway, 1996 .

[^16]: L. Franca, S. Frey, Stabilized finite element methods: II. The incompressible Navier-Stokes equations, Comput. Methods Appl. Mech. Engrg. 99 (1992) 209-233.

[^17]: T. Hino, A unstructured grid method for incompressible viscous flows with a free surface, AIAA-97-0862, $1997 .$

[^18]: J. Kim, P. Moin, Application of a fractional-step method to incompressible Navier-Stokes equations, J. Comput. Phys. 59 (1985) $308-323$

[^19]: R. Löhner, Applied CFD Techniques, John Wiley \& Sons, 2001 .

[^20]: R. Löhner, C. Yang, E. Oñate, S. Idelsohn, An unstructured grid-based, parallel free surface solver, AIAA-97-1830, $1997 .$

[^21]: R. Löhner, C. Yang, E. Oñate, S. Idelsohn, An unstructured grid-based, parallel free surface solver, Appl. Numer. Math. 31 (1999) $271-293$

[^22]: D. Martin, R. Löhner, An implicit Linelet-based solver for incompressible flows, AIAA-92-0668, 1992 .

[^23]: L. Martinelli, J.R. Farmer, Sailing through the nineties: computational fluid dynamics for ship performance analysis and design, in: D.A. Caughey, M.M. Hafez (Eds.), Frontiers of Computational Fluid Dynamics, J. Wiley, 1994 (Chapter 27).

[^24]: J. Peraire, K. Morgan, J. Peiro, The simulation of 3D incompressible flows using unstructured grids, in: D.A. Caughey, M.M. Hafez (Eds.), Frontiers of Computational Fluid Dynamics, J. Wiley, 1994 (Chapter 16).

[^25]: R. Ramamurti, R. Löhner, A parallel implicit incompressible flow solver using unstructured meshes, Comput. Fluids 5 (1996) $119-132$

[^26]: R. Ramamurti, W.C. Sandberg, Lpd-17 topside aerodynamic study: FEFLO, NRL Memorandum Report NRL/MR/6410-008498 , Center for Reactive Flow and Dynamical Systems, Laboratory for Computational Physics and Fluid Dynamics, Naval Research Laboratory, October 2000 .

[^27]: R. Ramamurti, W.C. Sandberg, Unstructured grids for unsteady ship airwakes: a successful validation, Naval Eng. J. 114 (2002), Fall Technical Paper.

[^28]: A. Rizzi, L. Eriksson, Computation of inviscid incompressible flow with rotation, J. Fluid Mech. 153 (1985) 275-312.

[^29]: Y. Saad, Iterative Methods for Sparse Linear Systems, PWS Publishers, Boston, $1996 .$

[^30]: J. Smagorinsky, General circulation experiments with the primitive equations. I. The basic experiment, Monthly Weather Rev. 91 (1963) 99-164.

[^31]: O. Soto, R. Löhner, CFD shape optimization using an incomplete-gradient adjoint formulation, Int. J. Numer. Methods Engrg. $51(2001) 735-753 .$

[^32]: O. Soto and R. Löhner, An implicit monolithic time accurate finite element scheme for incompressible flow problems, AIAA-20012616,2001

[^33]: O. Soto, R. Löhner, F. Camelli, A Linelet preconditioner for incompressible flow solvers, Int. J. Numer. Methods Heat Fluid Flow $13(2003) 133-147$

[^34]: T. Turkel, Preconditioned methods for solving the incompressible and low speed compressible equations, J. Comput. Phys. 72 (1987) $277-298$

[^35]: J.M. Weiss, W.A. Smith, Preconditioning applied to variable and constant density time-accurate flows on unstructured grids, AIAA J. $33(1995)$