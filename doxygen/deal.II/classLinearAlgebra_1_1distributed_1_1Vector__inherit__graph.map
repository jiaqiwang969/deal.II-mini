<map id="LinearAlgebra::distributed::Vector&lt; Number, MemorySpace &gt;" name="LinearAlgebra::distributed::Vector&lt; Number, MemorySpace &gt;">
<area shape="rect" id="node4" href="$classLinearAlgebra_1_1distributed_1_1Vector.html" title="{LinearAlgebra::distributed\l::Vector\&lt; double \&gt;\n|&#45; partitioner\l&#45; allocated_size\l&#45; data\l&#45; thread_loop_partitioner\l&#45; import_data\l&#45; vector_is_ghosted\l&#45; compress_requests\l&#45; update_ghost_values\l_requests\l&#45; mutex\l&#45; comm_sm\l|+ operator=()\l+ DeclException0()\l+ DeclException0()\l+ DeclException3()\l+ DeclException4()\l+ Vector()\l+ Vector()\l+ Vector()\l+ Vector()\l+ Vector()\l+ Vector()\l+ ~Vector()\l+ reinit()\l+ reinit()\l+ reinit()\land 6 more...\l+ reinit()\l+ import()\l+ operator*=()\l+ operator/=()\l+ operator+=()\l+ operator&#45;=()\l+ operator*()\l+ add()\l+ add()\l+ add()\land 13 more...\l+ operator=()\l+ add()\l+ add()\l+ sadd()\l+ compress()\l+ update_ghost_values()\l+ compress_start()\l+ compress_finish()\l+ update_ghost_values\l_start()\l+ update_ghost_values\l_finish()\l+ zero_out_ghosts()\l+ zero_out_ghost_values()\l+ has_ghost_elements()\l+ copy_locally_owned\l_data_from()\l+ import()\l+ local_size()\l+ locally_owned_size()\l+ in_local_range()\l+ begin()\l+ begin()\l+ end()\l+ end()\l+ operator()()\l+ operator()()\l+ operator[]()\land 9 more...\l+ get_mpi_communicator()\l+ get_partitioner()\l+ partitioners_are_compatible()\l+ partitioners_are_globally\l_compatible()\l+ set_ghost_state()\l+ shared_vector_data()\l&#45; add_local()\l&#45; sadd_local()\l&#45; inner_product_local()\l&#45; norm_sqr_local()\l&#45; mean_value_local()\l&#45; l1_norm_local()\l&#45; lp_norm_local()\l&#45; linfty_norm_local()\l&#45; add_and_dot_local()\l&#45; clear_mpi_requests()\l&#45; resize_val()\l* Vector()\l* Vector()\l* Vector()\l* Vector()\l* Vector()\l* Vector()\l* ~Vector()\l* reinit()\l* reinit()\l* reinit()\land 6 more...\l* reinit()\l* import()\l* operator*=()\l* operator/=()\l* operator+=()\l* operator&#45;=()\l* operator*()\l* add()\l* add()\l* add()\land 13 more...\l* operator=()\l* add()\l* add()\l* sadd()\l* compress()\l* update_ghost_values()\l* compress_start()\l* compress_finish()\l* update_ghost_values\l_start()\l* update_ghost_values\l_finish()\l* zero_out_ghosts()\l* zero_out_ghost_values()\l* has_ghost_elements()\l* copy_locally_owned\l_data_from()\l* import()\l* local_size()\l* locally_owned_size()\l* in_local_range()\l* begin()\l* begin()\l* end()\l* end()\l* operator()()\l* operator()()\l* operator[]()\land 9 more...\l* get_mpi_communicator()\l* get_partitioner()\l* partitioners_are_compatible()\l* partitioners_are_globally\l_compatible()\l* set_ghost_state()\l* shared_vector_data()\l}" alt="" coords="5,2692,207,4852"/>
<area shape="rect" id="node5" href="$classLinearAlgebra_1_1distributed_1_1Vector.html" title="{LinearAlgebra::distributed\l::Vector\&lt; Number \&gt;\n|&#45; partitioner\l&#45; allocated_size\l&#45; data\l&#45; thread_loop_partitioner\l&#45; import_data\l&#45; vector_is_ghosted\l&#45; compress_requests\l&#45; update_ghost_values\l_requests\l&#45; mutex\l&#45; comm_sm\l|+ operator=()\l+ DeclException0()\l+ DeclException0()\l+ DeclException3()\l+ DeclException4()\l+ Vector()\l+ Vector()\l+ Vector()\l+ Vector()\l+ Vector()\l+ Vector()\l+ ~Vector()\l+ reinit()\l+ reinit()\l+ reinit()\land 6 more...\l+ reinit()\l+ import()\l+ operator*=()\l+ operator/=()\l+ operator+=()\l+ operator&#45;=()\l+ operator*()\l+ add()\l+ add()\l+ add()\land 13 more...\l+ operator=()\l+ add()\l+ add()\l+ sadd()\l+ compress()\l+ update_ghost_values()\l+ compress_start()\l+ compress_finish()\l+ update_ghost_values\l_start()\l+ update_ghost_values\l_finish()\l+ zero_out_ghosts()\l+ zero_out_ghost_values()\l+ has_ghost_elements()\l+ copy_locally_owned\l_data_from()\l+ import()\l+ local_size()\l+ locally_owned_size()\l+ in_local_range()\l+ begin()\l+ begin()\l+ end()\l+ end()\l+ operator()()\l+ operator()()\l+ operator[]()\land 9 more...\l+ get_mpi_communicator()\l+ get_partitioner()\l+ partitioners_are_compatible()\l+ partitioners_are_globally\l_compatible()\l+ set_ghost_state()\l+ shared_vector_data()\l&#45; add_local()\l&#45; sadd_local()\l&#45; inner_product_local()\l&#45; norm_sqr_local()\l&#45; mean_value_local()\l&#45; l1_norm_local()\l&#45; lp_norm_local()\l&#45; linfty_norm_local()\l&#45; add_and_dot_local()\l&#45; clear_mpi_requests()\l&#45; resize_val()\l* Vector()\l* Vector()\l* Vector()\l* Vector()\l* Vector()\l* Vector()\l* ~Vector()\l* reinit()\l* reinit()\l* reinit()\land 6 more...\l* reinit()\l* import()\l* operator*=()\l* operator/=()\l* operator+=()\l* operator&#45;=()\l* operator*()\l* add()\l* add()\l* add()\land 13 more...\l* operator=()\l* add()\l* add()\l* sadd()\l* compress()\l* update_ghost_values()\l* compress_start()\l* compress_finish()\l* update_ghost_values\l_start()\l* update_ghost_values\l_finish()\l* zero_out_ghosts()\l* zero_out_ghost_values()\l* has_ghost_elements()\l* copy_locally_owned\l_data_from()\l* import()\l* local_size()\l* locally_owned_size()\l* in_local_range()\l* begin()\l* begin()\l* end()\l* end()\l* operator()()\l* operator()()\l* operator[]()\land 9 more...\l* get_mpi_communicator()\l* get_partitioner()\l* partitioners_are_compatible()\l* partitioners_are_globally\l_compatible()\l* set_ghost_state()\l* shared_vector_data()\l}" alt="" coords="231,2692,432,4852"/>
<area shape="rect" id="node2" href="$classLinearAlgebra_1_1VectorSpaceVector.html" title="{LinearAlgebra::VectorSpace\lVector\&lt; Number \&gt;\n||+ reinit()\l+ operator=()\l+ operator*=()\l+ operator/=()\l+ operator+=()\l+ operator&#45;=()\l+ import()\l+ operator*()\l+ add()\l+ add()\land 16 more...\l}" alt="" coords="26,93,210,332"/>
<area shape="rect" id="node3" href="$classSubscriptor.html" title="{Subscriptor\n|&#45; counter\l&#45; counter_map\l&#45; validity_pointers\l&#45; object_info\l&#45; mutex\l|+ Subscriptor()\l+ Subscriptor()\l+ Subscriptor()\l+ ~Subscriptor()\l+ operator=()\l+ operator=()\l+ serialize()\l+ subscribe()\l+ unsubscribe()\l+ n_subscriptions()\l+ list_subscribers()\l+ list_subscribers()\l+ ExcInUse()\l+ ExcNoSubscriber()\l&#45; check_no_subscribers()\l* subscribe()\l* unsubscribe()\l* n_subscriptions()\l* list_subscribers()\l* list_subscribers()\l}" alt="" coords="234,5,402,420"/>
</map>
