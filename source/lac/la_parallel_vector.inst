// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
namespace LinearAlgebra
 {
 namespace distributed
 {
 template class Vector< double , ::dealii::MemorySpace::Host>;
 template void
 Vector< double , ::dealii::MemorySpace::Host>::import<
 ::dealii::MemorySpace::Host>(
 const Vector< double , ::dealii::MemorySpace::Host> &,
 VectorOperation::values);
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
namespace LinearAlgebra
 {
 namespace distributed
 {
 template class Vector< float , ::dealii::MemorySpace::Host>;
 template void
 Vector< float , ::dealii::MemorySpace::Host>::import<
 ::dealii::MemorySpace::Host>(
 const Vector< float , ::dealii::MemorySpace::Host> &,
 VectorOperation::values);
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
namespace LinearAlgebra
 {
 namespace distributed
 {
 template class Vector< std::complex<double> , ::dealii::MemorySpace::Host>;
 template void
 Vector< std::complex<double> , ::dealii::MemorySpace::Host>::import<
 ::dealii::MemorySpace::Host>(
 const Vector< std::complex<double> , ::dealii::MemorySpace::Host> &,
 VectorOperation::values);
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
namespace LinearAlgebra
 {
 namespace distributed
 {
 template class Vector< std::complex<float> , ::dealii::MemorySpace::Host>;
 template void
 Vector< std::complex<float> , ::dealii::MemorySpace::Host>::import<
 ::dealii::MemorySpace::Host>(
 const Vector< std::complex<float> , ::dealii::MemorySpace::Host> &,
 VectorOperation::values);
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
namespace LinearAlgebra
 {
 namespace distributed
 {
 template void
 Vector< double , ::dealii::MemorySpace::Host>::reinit< double >(
 const Vector< double , ::dealii::MemorySpace::Host> &,
 const bool);
 template  double 
 Vector< double , ::dealii::MemorySpace::Host>::inner_product_local< double >(
 const Vector< double , ::dealii::MemorySpace::Host> &) const;
 template void
 Vector< double , ::dealii::MemorySpace::Host>::copy_locally_owned_data_from<
  double >(const Vector< double , ::dealii::MemorySpace::Host> &);
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
namespace LinearAlgebra
 {
 namespace distributed
 {
 template void
 Vector< double , ::dealii::MemorySpace::Host>::reinit< float >(
 const Vector< float , ::dealii::MemorySpace::Host> &,
 const bool);
 template  double 
 Vector< double , ::dealii::MemorySpace::Host>::inner_product_local< float >(
 const Vector< float , ::dealii::MemorySpace::Host> &) const;
 template void
 Vector< double , ::dealii::MemorySpace::Host>::copy_locally_owned_data_from<
  float >(const Vector< float , ::dealii::MemorySpace::Host> &);
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
namespace LinearAlgebra
 {
 namespace distributed
 {
 template void
 Vector< float , ::dealii::MemorySpace::Host>::reinit< double >(
 const Vector< double , ::dealii::MemorySpace::Host> &,
 const bool);
 template  float 
 Vector< float , ::dealii::MemorySpace::Host>::inner_product_local< double >(
 const Vector< double , ::dealii::MemorySpace::Host> &) const;
 template void
 Vector< float , ::dealii::MemorySpace::Host>::copy_locally_owned_data_from<
  double >(const Vector< double , ::dealii::MemorySpace::Host> &);
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
namespace LinearAlgebra
 {
 namespace distributed
 {
 template void
 Vector< float , ::dealii::MemorySpace::Host>::reinit< float >(
 const Vector< float , ::dealii::MemorySpace::Host> &,
 const bool);
 template  float 
 Vector< float , ::dealii::MemorySpace::Host>::inner_product_local< float >(
 const Vector< float , ::dealii::MemorySpace::Host> &) const;
 template void
 Vector< float , ::dealii::MemorySpace::Host>::copy_locally_owned_data_from<
  float >(const Vector< float , ::dealii::MemorySpace::Host> &);
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
namespace LinearAlgebra
 {
 namespace distributed
 {
 template void
 Vector< std::complex<double> , ::dealii::MemorySpace::Host>::reinit< double >(
 const Vector< double , ::dealii::MemorySpace::Host> &,
 const bool);
 template  std::complex<double> 
 Vector< std::complex<double> , ::dealii::MemorySpace::Host>::inner_product_local< double >(
 const Vector< double , ::dealii::MemorySpace::Host> &) const;
 template void
 Vector< std::complex<double> , ::dealii::MemorySpace::Host>::copy_locally_owned_data_from<
  double >(const Vector< double , ::dealii::MemorySpace::Host> &);
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
namespace LinearAlgebra
 {
 namespace distributed
 {
 template void
 Vector< std::complex<double> , ::dealii::MemorySpace::Host>::reinit< float >(
 const Vector< float , ::dealii::MemorySpace::Host> &,
 const bool);
 template  std::complex<double> 
 Vector< std::complex<double> , ::dealii::MemorySpace::Host>::inner_product_local< float >(
 const Vector< float , ::dealii::MemorySpace::Host> &) const;
 template void
 Vector< std::complex<double> , ::dealii::MemorySpace::Host>::copy_locally_owned_data_from<
  float >(const Vector< float , ::dealii::MemorySpace::Host> &);
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
namespace LinearAlgebra
 {
 namespace distributed
 {
 template void
 Vector< std::complex<float> , ::dealii::MemorySpace::Host>::reinit< double >(
 const Vector< double , ::dealii::MemorySpace::Host> &,
 const bool);
 template  std::complex<float> 
 Vector< std::complex<float> , ::dealii::MemorySpace::Host>::inner_product_local< double >(
 const Vector< double , ::dealii::MemorySpace::Host> &) const;
 template void
 Vector< std::complex<float> , ::dealii::MemorySpace::Host>::copy_locally_owned_data_from<
  double >(const Vector< double , ::dealii::MemorySpace::Host> &);
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
namespace LinearAlgebra
 {
 namespace distributed
 {
 template void
 Vector< std::complex<float> , ::dealii::MemorySpace::Host>::reinit< float >(
 const Vector< float , ::dealii::MemorySpace::Host> &,
 const bool);
 template  std::complex<float> 
 Vector< std::complex<float> , ::dealii::MemorySpace::Host>::inner_product_local< float >(
 const Vector< float , ::dealii::MemorySpace::Host> &) const;
 template void
 Vector< std::complex<float> , ::dealii::MemorySpace::Host>::copy_locally_owned_data_from<
  float >(const Vector< float , ::dealii::MemorySpace::Host> &);
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(12))
namespace LinearAlgebra
 {
 namespace distributed
 {
 template void
 Vector< std::complex<double> , ::dealii::MemorySpace::Host>::reinit< std::complex<double> >(
 const Vector< std::complex<double> , ::dealii::MemorySpace::Host> &,
 const bool);
 template  std::complex<double> 
 Vector< std::complex<double> , ::dealii::MemorySpace::Host>::inner_product_local< std::complex<double> >(
 const Vector< std::complex<double> , ::dealii::MemorySpace::Host> &) const;
 template void
 Vector< std::complex<double> , ::dealii::MemorySpace::Host>::copy_locally_owned_data_from<
  std::complex<double> >(const Vector< std::complex<double> , ::dealii::MemorySpace::Host> &);
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(13))
namespace LinearAlgebra
 {
 namespace distributed
 {
 template void
 Vector< std::complex<double> , ::dealii::MemorySpace::Host>::reinit< std::complex<float> >(
 const Vector< std::complex<float> , ::dealii::MemorySpace::Host> &,
 const bool);
 template  std::complex<double> 
 Vector< std::complex<double> , ::dealii::MemorySpace::Host>::inner_product_local< std::complex<float> >(
 const Vector< std::complex<float> , ::dealii::MemorySpace::Host> &) const;
 template void
 Vector< std::complex<double> , ::dealii::MemorySpace::Host>::copy_locally_owned_data_from<
  std::complex<float> >(const Vector< std::complex<float> , ::dealii::MemorySpace::Host> &);
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(14))
namespace LinearAlgebra
 {
 namespace distributed
 {
 template void
 Vector< std::complex<float> , ::dealii::MemorySpace::Host>::reinit< std::complex<double> >(
 const Vector< std::complex<double> , ::dealii::MemorySpace::Host> &,
 const bool);
 template  std::complex<float> 
 Vector< std::complex<float> , ::dealii::MemorySpace::Host>::inner_product_local< std::complex<double> >(
 const Vector< std::complex<double> , ::dealii::MemorySpace::Host> &) const;
 template void
 Vector< std::complex<float> , ::dealii::MemorySpace::Host>::copy_locally_owned_data_from<
  std::complex<double> >(const Vector< std::complex<double> , ::dealii::MemorySpace::Host> &);
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(15))
namespace LinearAlgebra
 {
 namespace distributed
 {
 template void
 Vector< std::complex<float> , ::dealii::MemorySpace::Host>::reinit< std::complex<float> >(
 const Vector< std::complex<float> , ::dealii::MemorySpace::Host> &,
 const bool);
 template  std::complex<float> 
 Vector< std::complex<float> , ::dealii::MemorySpace::Host>::inner_product_local< std::complex<float> >(
 const Vector< std::complex<float> , ::dealii::MemorySpace::Host> &) const;
 template void
 Vector< std::complex<float> , ::dealii::MemorySpace::Host>::copy_locally_owned_data_from<
  std::complex<float> >(const Vector< std::complex<float> , ::dealii::MemorySpace::Host> &);
 }
 }
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
