// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
template class SparseMatrix< double >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
template class SparseMatrix< float >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
template SparseMatrix< double > &SparseMatrix< double >::copy_from< double >(
 const SparseMatrix< double > &);

 template void SparseMatrix< double >::copy_from< double >(const FullMatrix< double > &);

 template void SparseMatrix< double >::add< double >(const  double , const SparseMatrix< double > &);

 template void SparseMatrix< double >::add< double >(const size_type,
 const size_type,
 const size_type *,
 const  double  *,
 const bool,
 const bool);

 template void SparseMatrix< double >::set< double >(const size_type,
 const size_type,
 const size_type *,
 const  double  *,
 const bool);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
template SparseMatrix< double > &SparseMatrix< double >::copy_from< float >(
 const SparseMatrix< float > &);

 template void SparseMatrix< double >::copy_from< float >(const FullMatrix< float > &);

 template void SparseMatrix< double >::add< float >(const  double , const SparseMatrix< float > &);

 template void SparseMatrix< double >::add< float >(const size_type,
 const size_type,
 const size_type *,
 const  float  *,
 const bool,
 const bool);

 template void SparseMatrix< double >::set< float >(const size_type,
 const size_type,
 const size_type *,
 const  float  *,
 const bool);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
template SparseMatrix< float > &SparseMatrix< float >::copy_from< double >(
 const SparseMatrix< double > &);

 template void SparseMatrix< float >::copy_from< double >(const FullMatrix< double > &);

 template void SparseMatrix< float >::add< double >(const  float , const SparseMatrix< double > &);

 template void SparseMatrix< float >::add< double >(const size_type,
 const size_type,
 const size_type *,
 const  double  *,
 const bool,
 const bool);

 template void SparseMatrix< float >::set< double >(const size_type,
 const size_type,
 const size_type *,
 const  double  *,
 const bool);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
template SparseMatrix< float > &SparseMatrix< float >::copy_from< float >(
 const SparseMatrix< float > &);

 template void SparseMatrix< float >::copy_from< float >(const FullMatrix< float > &);

 template void SparseMatrix< float >::add< float >(const  float , const SparseMatrix< float > &);

 template void SparseMatrix< float >::add< float >(const size_type,
 const size_type,
 const size_type *,
 const  float  *,
 const bool,
 const bool);

 template void SparseMatrix< float >::set< float >(const size_type,
 const size_type,
 const size_type *,
 const  float  *,
 const bool);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
template  double  SparseMatrix< double >::matrix_norm_square< double >(const Vector< double > &)
 const;

 template  double  SparseMatrix< double >::matrix_scalar_product< double >(const Vector< double > &,
 const Vector< double > &)
 const;

 template  double  SparseMatrix< double >::residual< double >(Vector< double > &,
 const Vector< double > &,
 const Vector< double > &) const;

 template void SparseMatrix< double >::precondition_SSOR< double >(
 Vector< double > &,
 const Vector< double > &,
 const  double ,
 const std::vector<std::size_t> &) const;

 template void SparseMatrix< double >::precondition_SOR< double >(Vector< double > &,
 const Vector< double > &,
 const  double ) const;

 template void SparseMatrix< double >::precondition_TSOR< double >(Vector< double > &,
 const Vector< double > &,
 const  double ) const;

 template void SparseMatrix< double >::precondition_Jacobi< double >(Vector< double > &,
 const Vector< double > &,
 const  double ) const;

 template void SparseMatrix< double >::SOR< double >(Vector< double > &, const  double ) const;
 template void SparseMatrix< double >::TSOR< double >(Vector< double > &, const  double ) const;
 template void SparseMatrix< double >::SSOR< double >(Vector< double > &, const  double ) const;
 template void SparseMatrix< double >::PSOR< double >(Vector< double > &,
 const std::vector<size_type> &,
 const std::vector<size_type> &,
 const  double ) const;
 template void SparseMatrix< double >::TPSOR< double >(Vector< double > &,
 const std::vector<size_type> &,
 const std::vector<size_type> &,
 const  double ) const;
 template void SparseMatrix< double >::Jacobi_step< double >(Vector< double > &,
 const Vector< double > &,
 const  double ) const;
 template void SparseMatrix< double >::SOR_step< double >(Vector< double > &,
 const Vector< double > &,
 const  double ) const;
 template void SparseMatrix< double >::TSOR_step< double >(Vector< double > &,
 const Vector< double > &,
 const  double ) const;
 template void SparseMatrix< double >::SSOR_step< double >(Vector< double > &,
 const Vector< double > &,
 const  double ) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
template  float  SparseMatrix< double >::matrix_norm_square< float >(const Vector< float > &)
 const;

 template  float  SparseMatrix< double >::matrix_scalar_product< float >(const Vector< float > &,
 const Vector< float > &)
 const;

 template  float  SparseMatrix< double >::residual< float >(Vector< float > &,
 const Vector< float > &,
 const Vector< float > &) const;

 template void SparseMatrix< double >::precondition_SSOR< float >(
 Vector< float > &,
 const Vector< float > &,
 const  double ,
 const std::vector<std::size_t> &) const;

 template void SparseMatrix< double >::precondition_SOR< float >(Vector< float > &,
 const Vector< float > &,
 const  double ) const;

 template void SparseMatrix< double >::precondition_TSOR< float >(Vector< float > &,
 const Vector< float > &,
 const  double ) const;

 template void SparseMatrix< double >::precondition_Jacobi< float >(Vector< float > &,
 const Vector< float > &,
 const  double ) const;

 template void SparseMatrix< double >::SOR< float >(Vector< float > &, const  double ) const;
 template void SparseMatrix< double >::TSOR< float >(Vector< float > &, const  double ) const;
 template void SparseMatrix< double >::SSOR< float >(Vector< float > &, const  double ) const;
 template void SparseMatrix< double >::PSOR< float >(Vector< float > &,
 const std::vector<size_type> &,
 const std::vector<size_type> &,
 const  double ) const;
 template void SparseMatrix< double >::TPSOR< float >(Vector< float > &,
 const std::vector<size_type> &,
 const std::vector<size_type> &,
 const  double ) const;
 template void SparseMatrix< double >::Jacobi_step< float >(Vector< float > &,
 const Vector< float > &,
 const  double ) const;
 template void SparseMatrix< double >::SOR_step< float >(Vector< float > &,
 const Vector< float > &,
 const  double ) const;
 template void SparseMatrix< double >::TSOR_step< float >(Vector< float > &,
 const Vector< float > &,
 const  double ) const;
 template void SparseMatrix< double >::SSOR_step< float >(Vector< float > &,
 const Vector< float > &,
 const  double ) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
template  double  SparseMatrix< float >::matrix_norm_square< double >(const Vector< double > &)
 const;

 template  double  SparseMatrix< float >::matrix_scalar_product< double >(const Vector< double > &,
 const Vector< double > &)
 const;

 template  double  SparseMatrix< float >::residual< double >(Vector< double > &,
 const Vector< double > &,
 const Vector< double > &) const;

 template void SparseMatrix< float >::precondition_SSOR< double >(
 Vector< double > &,
 const Vector< double > &,
 const  float ,
 const std::vector<std::size_t> &) const;

 template void SparseMatrix< float >::precondition_SOR< double >(Vector< double > &,
 const Vector< double > &,
 const  float ) const;

 template void SparseMatrix< float >::precondition_TSOR< double >(Vector< double > &,
 const Vector< double > &,
 const  float ) const;

 template void SparseMatrix< float >::precondition_Jacobi< double >(Vector< double > &,
 const Vector< double > &,
 const  float ) const;

 template void SparseMatrix< float >::SOR< double >(Vector< double > &, const  float ) const;
 template void SparseMatrix< float >::TSOR< double >(Vector< double > &, const  float ) const;
 template void SparseMatrix< float >::SSOR< double >(Vector< double > &, const  float ) const;
 template void SparseMatrix< float >::PSOR< double >(Vector< double > &,
 const std::vector<size_type> &,
 const std::vector<size_type> &,
 const  float ) const;
 template void SparseMatrix< float >::TPSOR< double >(Vector< double > &,
 const std::vector<size_type> &,
 const std::vector<size_type> &,
 const  float ) const;
 template void SparseMatrix< float >::Jacobi_step< double >(Vector< double > &,
 const Vector< double > &,
 const  float ) const;
 template void SparseMatrix< float >::SOR_step< double >(Vector< double > &,
 const Vector< double > &,
 const  float ) const;
 template void SparseMatrix< float >::TSOR_step< double >(Vector< double > &,
 const Vector< double > &,
 const  float ) const;
 template void SparseMatrix< float >::SSOR_step< double >(Vector< double > &,
 const Vector< double > &,
 const  float ) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
template  float  SparseMatrix< float >::matrix_norm_square< float >(const Vector< float > &)
 const;

 template  float  SparseMatrix< float >::matrix_scalar_product< float >(const Vector< float > &,
 const Vector< float > &)
 const;

 template  float  SparseMatrix< float >::residual< float >(Vector< float > &,
 const Vector< float > &,
 const Vector< float > &) const;

 template void SparseMatrix< float >::precondition_SSOR< float >(
 Vector< float > &,
 const Vector< float > &,
 const  float ,
 const std::vector<std::size_t> &) const;

 template void SparseMatrix< float >::precondition_SOR< float >(Vector< float > &,
 const Vector< float > &,
 const  float ) const;

 template void SparseMatrix< float >::precondition_TSOR< float >(Vector< float > &,
 const Vector< float > &,
 const  float ) const;

 template void SparseMatrix< float >::precondition_Jacobi< float >(Vector< float > &,
 const Vector< float > &,
 const  float ) const;

 template void SparseMatrix< float >::SOR< float >(Vector< float > &, const  float ) const;
 template void SparseMatrix< float >::TSOR< float >(Vector< float > &, const  float ) const;
 template void SparseMatrix< float >::SSOR< float >(Vector< float > &, const  float ) const;
 template void SparseMatrix< float >::PSOR< float >(Vector< float > &,
 const std::vector<size_type> &,
 const std::vector<size_type> &,
 const  float ) const;
 template void SparseMatrix< float >::TPSOR< float >(Vector< float > &,
 const std::vector<size_type> &,
 const std::vector<size_type> &,
 const  float ) const;
 template void SparseMatrix< float >::Jacobi_step< float >(Vector< float > &,
 const Vector< float > &,
 const  float ) const;
 template void SparseMatrix< float >::SOR_step< float >(Vector< float > &,
 const Vector< float > &,
 const  float ) const;
 template void SparseMatrix< float >::TSOR_step< float >(Vector< float > &,
 const Vector< float > &,
 const  float ) const;
 template void SparseMatrix< float >::SSOR_step< float >(Vector< float > &,
 const Vector< float > &,
 const  float ) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
template void SparseMatrix< double >::vmult( Vector < double > &, const  Vector < double > &) const;
 template void SparseMatrix< double >::Tvmult( Vector < double > &, const  Vector < double > &) const;
 template void SparseMatrix< double >::vmult_add( Vector < double > &, const  Vector < double > &) const;
 template void SparseMatrix< double >::Tvmult_add( Vector < double > &, const  Vector < double > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
template void SparseMatrix< double >::vmult( Vector < double > &, const  BlockVector < double > &) const;
 template void SparseMatrix< double >::Tvmult( Vector < double > &, const  BlockVector < double > &) const;
 template void SparseMatrix< double >::vmult_add( Vector < double > &, const  BlockVector < double > &) const;
 template void SparseMatrix< double >::Tvmult_add( Vector < double > &, const  BlockVector < double > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(12))
template void SparseMatrix< double >::vmult( BlockVector < double > &, const  Vector < double > &) const;
 template void SparseMatrix< double >::Tvmult( BlockVector < double > &, const  Vector < double > &) const;
 template void SparseMatrix< double >::vmult_add( BlockVector < double > &, const  Vector < double > &) const;
 template void SparseMatrix< double >::Tvmult_add( BlockVector < double > &, const  Vector < double > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(13))
template void SparseMatrix< double >::vmult( BlockVector < double > &, const  BlockVector < double > &) const;
 template void SparseMatrix< double >::Tvmult( BlockVector < double > &, const  BlockVector < double > &) const;
 template void SparseMatrix< double >::vmult_add( BlockVector < double > &, const  BlockVector < double > &) const;
 template void SparseMatrix< double >::Tvmult_add( BlockVector < double > &, const  BlockVector < double > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(14))
template void SparseMatrix< double >::vmult( Vector < double > &, const  Vector < float > &) const;
 template void SparseMatrix< double >::Tvmult( Vector < double > &, const  Vector < float > &) const;
 template void SparseMatrix< double >::vmult_add( Vector < double > &, const  Vector < float > &) const;
 template void SparseMatrix< double >::Tvmult_add( Vector < double > &, const  Vector < float > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(15))
template void SparseMatrix< double >::vmult( Vector < double > &, const  BlockVector < float > &) const;
 template void SparseMatrix< double >::Tvmult( Vector < double > &, const  BlockVector < float > &) const;
 template void SparseMatrix< double >::vmult_add( Vector < double > &, const  BlockVector < float > &) const;
 template void SparseMatrix< double >::Tvmult_add( Vector < double > &, const  BlockVector < float > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(16))
template void SparseMatrix< double >::vmult( BlockVector < double > &, const  Vector < float > &) const;
 template void SparseMatrix< double >::Tvmult( BlockVector < double > &, const  Vector < float > &) const;
 template void SparseMatrix< double >::vmult_add( BlockVector < double > &, const  Vector < float > &) const;
 template void SparseMatrix< double >::Tvmult_add( BlockVector < double > &, const  Vector < float > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(17))
template void SparseMatrix< double >::vmult( BlockVector < double > &, const  BlockVector < float > &) const;
 template void SparseMatrix< double >::Tvmult( BlockVector < double > &, const  BlockVector < float > &) const;
 template void SparseMatrix< double >::vmult_add( BlockVector < double > &, const  BlockVector < float > &) const;
 template void SparseMatrix< double >::Tvmult_add( BlockVector < double > &, const  BlockVector < float > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(18))
template void SparseMatrix< double >::vmult( Vector < float > &, const  Vector < double > &) const;
 template void SparseMatrix< double >::Tvmult( Vector < float > &, const  Vector < double > &) const;
 template void SparseMatrix< double >::vmult_add( Vector < float > &, const  Vector < double > &) const;
 template void SparseMatrix< double >::Tvmult_add( Vector < float > &, const  Vector < double > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(19))
template void SparseMatrix< double >::vmult( Vector < float > &, const  BlockVector < double > &) const;
 template void SparseMatrix< double >::Tvmult( Vector < float > &, const  BlockVector < double > &) const;
 template void SparseMatrix< double >::vmult_add( Vector < float > &, const  BlockVector < double > &) const;
 template void SparseMatrix< double >::Tvmult_add( Vector < float > &, const  BlockVector < double > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(20))
template void SparseMatrix< double >::vmult( BlockVector < float > &, const  Vector < double > &) const;
 template void SparseMatrix< double >::Tvmult( BlockVector < float > &, const  Vector < double > &) const;
 template void SparseMatrix< double >::vmult_add( BlockVector < float > &, const  Vector < double > &) const;
 template void SparseMatrix< double >::Tvmult_add( BlockVector < float > &, const  Vector < double > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(21))
template void SparseMatrix< double >::vmult( BlockVector < float > &, const  BlockVector < double > &) const;
 template void SparseMatrix< double >::Tvmult( BlockVector < float > &, const  BlockVector < double > &) const;
 template void SparseMatrix< double >::vmult_add( BlockVector < float > &, const  BlockVector < double > &) const;
 template void SparseMatrix< double >::Tvmult_add( BlockVector < float > &, const  BlockVector < double > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(22))
template void SparseMatrix< double >::vmult( Vector < float > &, const  Vector < float > &) const;
 template void SparseMatrix< double >::Tvmult( Vector < float > &, const  Vector < float > &) const;
 template void SparseMatrix< double >::vmult_add( Vector < float > &, const  Vector < float > &) const;
 template void SparseMatrix< double >::Tvmult_add( Vector < float > &, const  Vector < float > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(23))
template void SparseMatrix< double >::vmult( Vector < float > &, const  BlockVector < float > &) const;
 template void SparseMatrix< double >::Tvmult( Vector < float > &, const  BlockVector < float > &) const;
 template void SparseMatrix< double >::vmult_add( Vector < float > &, const  BlockVector < float > &) const;
 template void SparseMatrix< double >::Tvmult_add( Vector < float > &, const  BlockVector < float > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(24))
template void SparseMatrix< double >::vmult( BlockVector < float > &, const  Vector < float > &) const;
 template void SparseMatrix< double >::Tvmult( BlockVector < float > &, const  Vector < float > &) const;
 template void SparseMatrix< double >::vmult_add( BlockVector < float > &, const  Vector < float > &) const;
 template void SparseMatrix< double >::Tvmult_add( BlockVector < float > &, const  Vector < float > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(25))
template void SparseMatrix< double >::vmult( BlockVector < float > &, const  BlockVector < float > &) const;
 template void SparseMatrix< double >::Tvmult( BlockVector < float > &, const  BlockVector < float > &) const;
 template void SparseMatrix< double >::vmult_add( BlockVector < float > &, const  BlockVector < float > &) const;
 template void SparseMatrix< double >::Tvmult_add( BlockVector < float > &, const  BlockVector < float > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(26))
template void SparseMatrix< float >::vmult( Vector < double > &, const  Vector < double > &) const;
 template void SparseMatrix< float >::Tvmult( Vector < double > &, const  Vector < double > &) const;
 template void SparseMatrix< float >::vmult_add( Vector < double > &, const  Vector < double > &) const;
 template void SparseMatrix< float >::Tvmult_add( Vector < double > &, const  Vector < double > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(27))
template void SparseMatrix< float >::vmult( Vector < double > &, const  BlockVector < double > &) const;
 template void SparseMatrix< float >::Tvmult( Vector < double > &, const  BlockVector < double > &) const;
 template void SparseMatrix< float >::vmult_add( Vector < double > &, const  BlockVector < double > &) const;
 template void SparseMatrix< float >::Tvmult_add( Vector < double > &, const  BlockVector < double > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(28))
template void SparseMatrix< float >::vmult( BlockVector < double > &, const  Vector < double > &) const;
 template void SparseMatrix< float >::Tvmult( BlockVector < double > &, const  Vector < double > &) const;
 template void SparseMatrix< float >::vmult_add( BlockVector < double > &, const  Vector < double > &) const;
 template void SparseMatrix< float >::Tvmult_add( BlockVector < double > &, const  Vector < double > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(29))
template void SparseMatrix< float >::vmult( BlockVector < double > &, const  BlockVector < double > &) const;
 template void SparseMatrix< float >::Tvmult( BlockVector < double > &, const  BlockVector < double > &) const;
 template void SparseMatrix< float >::vmult_add( BlockVector < double > &, const  BlockVector < double > &) const;
 template void SparseMatrix< float >::Tvmult_add( BlockVector < double > &, const  BlockVector < double > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(30))
template void SparseMatrix< float >::vmult( Vector < double > &, const  Vector < float > &) const;
 template void SparseMatrix< float >::Tvmult( Vector < double > &, const  Vector < float > &) const;
 template void SparseMatrix< float >::vmult_add( Vector < double > &, const  Vector < float > &) const;
 template void SparseMatrix< float >::Tvmult_add( Vector < double > &, const  Vector < float > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(31))
template void SparseMatrix< float >::vmult( Vector < double > &, const  BlockVector < float > &) const;
 template void SparseMatrix< float >::Tvmult( Vector < double > &, const  BlockVector < float > &) const;
 template void SparseMatrix< float >::vmult_add( Vector < double > &, const  BlockVector < float > &) const;
 template void SparseMatrix< float >::Tvmult_add( Vector < double > &, const  BlockVector < float > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(32))
template void SparseMatrix< float >::vmult( BlockVector < double > &, const  Vector < float > &) const;
 template void SparseMatrix< float >::Tvmult( BlockVector < double > &, const  Vector < float > &) const;
 template void SparseMatrix< float >::vmult_add( BlockVector < double > &, const  Vector < float > &) const;
 template void SparseMatrix< float >::Tvmult_add( BlockVector < double > &, const  Vector < float > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(33))
template void SparseMatrix< float >::vmult( BlockVector < double > &, const  BlockVector < float > &) const;
 template void SparseMatrix< float >::Tvmult( BlockVector < double > &, const  BlockVector < float > &) const;
 template void SparseMatrix< float >::vmult_add( BlockVector < double > &, const  BlockVector < float > &) const;
 template void SparseMatrix< float >::Tvmult_add( BlockVector < double > &, const  BlockVector < float > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(34))
template void SparseMatrix< float >::vmult( Vector < float > &, const  Vector < double > &) const;
 template void SparseMatrix< float >::Tvmult( Vector < float > &, const  Vector < double > &) const;
 template void SparseMatrix< float >::vmult_add( Vector < float > &, const  Vector < double > &) const;
 template void SparseMatrix< float >::Tvmult_add( Vector < float > &, const  Vector < double > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(35))
template void SparseMatrix< float >::vmult( Vector < float > &, const  BlockVector < double > &) const;
 template void SparseMatrix< float >::Tvmult( Vector < float > &, const  BlockVector < double > &) const;
 template void SparseMatrix< float >::vmult_add( Vector < float > &, const  BlockVector < double > &) const;
 template void SparseMatrix< float >::Tvmult_add( Vector < float > &, const  BlockVector < double > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(36))
template void SparseMatrix< float >::vmult( BlockVector < float > &, const  Vector < double > &) const;
 template void SparseMatrix< float >::Tvmult( BlockVector < float > &, const  Vector < double > &) const;
 template void SparseMatrix< float >::vmult_add( BlockVector < float > &, const  Vector < double > &) const;
 template void SparseMatrix< float >::Tvmult_add( BlockVector < float > &, const  Vector < double > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(37))
template void SparseMatrix< float >::vmult( BlockVector < float > &, const  BlockVector < double > &) const;
 template void SparseMatrix< float >::Tvmult( BlockVector < float > &, const  BlockVector < double > &) const;
 template void SparseMatrix< float >::vmult_add( BlockVector < float > &, const  BlockVector < double > &) const;
 template void SparseMatrix< float >::Tvmult_add( BlockVector < float > &, const  BlockVector < double > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(38))
template void SparseMatrix< float >::vmult( Vector < float > &, const  Vector < float > &) const;
 template void SparseMatrix< float >::Tvmult( Vector < float > &, const  Vector < float > &) const;
 template void SparseMatrix< float >::vmult_add( Vector < float > &, const  Vector < float > &) const;
 template void SparseMatrix< float >::Tvmult_add( Vector < float > &, const  Vector < float > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(39))
template void SparseMatrix< float >::vmult( Vector < float > &, const  BlockVector < float > &) const;
 template void SparseMatrix< float >::Tvmult( Vector < float > &, const  BlockVector < float > &) const;
 template void SparseMatrix< float >::vmult_add( Vector < float > &, const  BlockVector < float > &) const;
 template void SparseMatrix< float >::Tvmult_add( Vector < float > &, const  BlockVector < float > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(40))
template void SparseMatrix< float >::vmult( BlockVector < float > &, const  Vector < float > &) const;
 template void SparseMatrix< float >::Tvmult( BlockVector < float > &, const  Vector < float > &) const;
 template void SparseMatrix< float >::vmult_add( BlockVector < float > &, const  Vector < float > &) const;
 template void SparseMatrix< float >::Tvmult_add( BlockVector < float > &, const  Vector < float > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(41))
template void SparseMatrix< float >::vmult( BlockVector < float > &, const  BlockVector < float > &) const;
 template void SparseMatrix< float >::Tvmult( BlockVector < float > &, const  BlockVector < float > &) const;
 template void SparseMatrix< float >::vmult_add( BlockVector < float > &, const  BlockVector < float > &) const;
 template void SparseMatrix< float >::Tvmult_add( BlockVector < float > &, const  BlockVector < float > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(42))
template void SparseMatrix< double >::vmult( Vector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< double >::Tvmult( Vector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< double >::vmult_add( Vector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< double >::Tvmult_add( Vector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(43))
template void SparseMatrix< double >::vmult( Vector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< double >::Tvmult( Vector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< double >::vmult_add( Vector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< double >::Tvmult_add( Vector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(44))
template void SparseMatrix< double >::vmult( BlockVector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< double >::Tvmult( BlockVector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< double >::vmult_add( BlockVector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< double >::Tvmult_add( BlockVector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(45))
template void SparseMatrix< double >::vmult( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< double >::Tvmult( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< double >::vmult_add( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< double >::Tvmult_add( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(46))
template void SparseMatrix< double >::vmult( Vector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< double >::Tvmult( Vector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< double >::vmult_add( Vector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< double >::Tvmult_add( Vector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(47))
template void SparseMatrix< double >::vmult( Vector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< double >::Tvmult( Vector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< double >::vmult_add( Vector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< double >::Tvmult_add( Vector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(48))
template void SparseMatrix< double >::vmult( BlockVector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< double >::Tvmult( BlockVector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< double >::vmult_add( BlockVector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< double >::Tvmult_add( BlockVector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(49))
template void SparseMatrix< double >::vmult( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< double >::Tvmult( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< double >::vmult_add( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< double >::Tvmult_add( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(50))
template void SparseMatrix< double >::vmult( Vector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< double >::Tvmult( Vector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< double >::vmult_add( Vector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< double >::Tvmult_add( Vector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(51))
template void SparseMatrix< double >::vmult( Vector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< double >::Tvmult( Vector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< double >::vmult_add( Vector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< double >::Tvmult_add( Vector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(52))
template void SparseMatrix< double >::vmult( BlockVector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< double >::Tvmult( BlockVector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< double >::vmult_add( BlockVector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< double >::Tvmult_add( BlockVector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(53))
template void SparseMatrix< double >::vmult( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< double >::Tvmult( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< double >::vmult_add( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< double >::Tvmult_add( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(54))
template void SparseMatrix< double >::vmult( Vector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< double >::Tvmult( Vector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< double >::vmult_add( Vector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< double >::Tvmult_add( Vector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(55))
template void SparseMatrix< double >::vmult( Vector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< double >::Tvmult( Vector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< double >::vmult_add( Vector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< double >::Tvmult_add( Vector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(56))
template void SparseMatrix< double >::vmult( BlockVector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< double >::Tvmult( BlockVector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< double >::vmult_add( BlockVector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< double >::Tvmult_add( BlockVector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(57))
template void SparseMatrix< double >::vmult( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< double >::Tvmult( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< double >::vmult_add( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< double >::Tvmult_add( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(58))
template void SparseMatrix< float >::vmult( Vector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< float >::Tvmult( Vector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< float >::vmult_add( Vector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< float >::Tvmult_add( Vector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(59))
template void SparseMatrix< float >::vmult( Vector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< float >::Tvmult( Vector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< float >::vmult_add( Vector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< float >::Tvmult_add( Vector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(60))
template void SparseMatrix< float >::vmult( BlockVector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< float >::Tvmult( BlockVector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< float >::vmult_add( BlockVector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< float >::Tvmult_add( BlockVector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(61))
template void SparseMatrix< float >::vmult( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< float >::Tvmult( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< float >::vmult_add( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< float >::Tvmult_add( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(62))
template void SparseMatrix< float >::vmult( Vector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< float >::Tvmult( Vector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< float >::vmult_add( Vector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< float >::Tvmult_add( Vector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(63))
template void SparseMatrix< float >::vmult( Vector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< float >::Tvmult( Vector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< float >::vmult_add( Vector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< float >::Tvmult_add( Vector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(64))
template void SparseMatrix< float >::vmult( BlockVector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< float >::Tvmult( BlockVector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< float >::vmult_add( BlockVector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< float >::Tvmult_add( BlockVector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(65))
template void SparseMatrix< float >::vmult( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< float >::Tvmult( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< float >::vmult_add( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< float >::Tvmult_add( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(66))
template void SparseMatrix< float >::vmult( Vector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< float >::Tvmult( Vector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< float >::vmult_add( Vector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< float >::Tvmult_add( Vector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(67))
template void SparseMatrix< float >::vmult( Vector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< float >::Tvmult( Vector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< float >::vmult_add( Vector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< float >::Tvmult_add( Vector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(68))
template void SparseMatrix< float >::vmult( BlockVector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< float >::Tvmult( BlockVector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< float >::vmult_add( BlockVector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< float >::Tvmult_add( BlockVector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(69))
template void SparseMatrix< float >::vmult( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< float >::Tvmult( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< float >::vmult_add( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< float >::Tvmult_add( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(70))
template void SparseMatrix< float >::vmult( Vector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< float >::Tvmult( Vector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< float >::vmult_add( Vector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< float >::Tvmult_add( Vector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(71))
template void SparseMatrix< float >::vmult( Vector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< float >::Tvmult( Vector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< float >::vmult_add( Vector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< float >::Tvmult_add( Vector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(72))
template void SparseMatrix< float >::vmult( BlockVector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< float >::Tvmult( BlockVector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< float >::vmult_add( BlockVector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< float >::Tvmult_add( BlockVector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(73))
template void SparseMatrix< float >::vmult( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< float >::Tvmult( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< float >::vmult_add( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< float >::Tvmult_add( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(74))
template void SparseMatrix< double >::vmult(
 LinearAlgebra::distributed::Vector< double > &,
 const LinearAlgebra::distributed::Vector< double > &) const;
 template void SparseMatrix< double >::Tvmult(
 LinearAlgebra::distributed::Vector< double > &,
 const LinearAlgebra::distributed::Vector< double > &) const;
 template void SparseMatrix< double >::vmult_add(
 LinearAlgebra::distributed::Vector< double > &,
 const LinearAlgebra::distributed::Vector< double > &) const;
 template void SparseMatrix< double >::Tvmult_add(
 LinearAlgebra::distributed::Vector< double > &,
 const LinearAlgebra::distributed::Vector< double > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(75))
template void SparseMatrix< float >::vmult(
 LinearAlgebra::distributed::Vector< float > &,
 const LinearAlgebra::distributed::Vector< float > &) const;
 template void SparseMatrix< float >::Tvmult(
 LinearAlgebra::distributed::Vector< float > &,
 const LinearAlgebra::distributed::Vector< float > &) const;
 template void SparseMatrix< float >::vmult_add(
 LinearAlgebra::distributed::Vector< float > &,
 const LinearAlgebra::distributed::Vector< float > &) const;
 template void SparseMatrix< float >::Tvmult_add(
 LinearAlgebra::distributed::Vector< float > &,
 const LinearAlgebra::distributed::Vector< float > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(76))
template void SparseMatrix< double >::mmult(SparseMatrix< double > &,
 const SparseMatrix< double > &,
 const Vector< double > &,
 const bool) const;
 template void SparseMatrix< double >::Tmmult(SparseMatrix< double > &,
 const SparseMatrix< double > &,
 const Vector< double > &,
 const bool) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(77))
template void SparseMatrix< double >::mmult(SparseMatrix< double > &,
 const SparseMatrix< float > &,
 const Vector< double > &,
 const bool) const;
 template void SparseMatrix< double >::Tmmult(SparseMatrix< double > &,
 const SparseMatrix< float > &,
 const Vector< double > &,
 const bool) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(78))
template void SparseMatrix< double >::mmult(SparseMatrix< float > &,
 const SparseMatrix< double > &,
 const Vector< double > &,
 const bool) const;
 template void SparseMatrix< double >::Tmmult(SparseMatrix< float > &,
 const SparseMatrix< double > &,
 const Vector< double > &,
 const bool) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(79))
template void SparseMatrix< double >::mmult(SparseMatrix< float > &,
 const SparseMatrix< float > &,
 const Vector< double > &,
 const bool) const;
 template void SparseMatrix< double >::Tmmult(SparseMatrix< float > &,
 const SparseMatrix< float > &,
 const Vector< double > &,
 const bool) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(80))
template void SparseMatrix< float >::mmult(SparseMatrix< double > &,
 const SparseMatrix< double > &,
 const Vector< float > &,
 const bool) const;
 template void SparseMatrix< float >::Tmmult(SparseMatrix< double > &,
 const SparseMatrix< double > &,
 const Vector< float > &,
 const bool) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(81))
template void SparseMatrix< float >::mmult(SparseMatrix< double > &,
 const SparseMatrix< float > &,
 const Vector< float > &,
 const bool) const;
 template void SparseMatrix< float >::Tmmult(SparseMatrix< double > &,
 const SparseMatrix< float > &,
 const Vector< float > &,
 const bool) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(82))
template void SparseMatrix< float >::mmult(SparseMatrix< float > &,
 const SparseMatrix< double > &,
 const Vector< float > &,
 const bool) const;
 template void SparseMatrix< float >::Tmmult(SparseMatrix< float > &,
 const SparseMatrix< double > &,
 const Vector< float > &,
 const bool) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(83))
template void SparseMatrix< float >::mmult(SparseMatrix< float > &,
 const SparseMatrix< float > &,
 const Vector< float > &,
 const bool) const;
 template void SparseMatrix< float >::Tmmult(SparseMatrix< float > &,
 const SparseMatrix< float > &,
 const Vector< float > &,
 const bool) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(84))
template class SparseMatrix< std::complex<double> >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(85))
template class SparseMatrix< std::complex<float> >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(86))
template SparseMatrix< std::complex<double> > &SparseMatrix< std::complex<double> >::copy_from< std::complex<double> >(
 const SparseMatrix< std::complex<double> > &);

 template void SparseMatrix< std::complex<double> >::copy_from< std::complex<double> >(const FullMatrix< std::complex<double> > &);

 template void SparseMatrix< std::complex<double> >::add< std::complex<double> >(const  std::complex<double> , const SparseMatrix< std::complex<double> > &);

 template void SparseMatrix< std::complex<double> >::add< std::complex<double> >(const size_type,
 const size_type,
 const size_type *,
 const  std::complex<double>  *,
 const bool,
 const bool);

 template void SparseMatrix< std::complex<double> >::set< std::complex<double> >(const size_type,
 const size_type,
 const size_type *,
 const  std::complex<double>  *,
 const bool);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(87))
template SparseMatrix< std::complex<double> > &SparseMatrix< std::complex<double> >::copy_from< std::complex<float> >(
 const SparseMatrix< std::complex<float> > &);

 template void SparseMatrix< std::complex<double> >::copy_from< std::complex<float> >(const FullMatrix< std::complex<float> > &);

 template void SparseMatrix< std::complex<double> >::add< std::complex<float> >(const  std::complex<double> , const SparseMatrix< std::complex<float> > &);

 template void SparseMatrix< std::complex<double> >::add< std::complex<float> >(const size_type,
 const size_type,
 const size_type *,
 const  std::complex<float>  *,
 const bool,
 const bool);

 template void SparseMatrix< std::complex<double> >::set< std::complex<float> >(const size_type,
 const size_type,
 const size_type *,
 const  std::complex<float>  *,
 const bool);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(88))
template SparseMatrix< std::complex<float> > &SparseMatrix< std::complex<float> >::copy_from< std::complex<double> >(
 const SparseMatrix< std::complex<double> > &);

 template void SparseMatrix< std::complex<float> >::copy_from< std::complex<double> >(const FullMatrix< std::complex<double> > &);

 template void SparseMatrix< std::complex<float> >::add< std::complex<double> >(const  std::complex<float> , const SparseMatrix< std::complex<double> > &);

 template void SparseMatrix< std::complex<float> >::add< std::complex<double> >(const size_type,
 const size_type,
 const size_type *,
 const  std::complex<double>  *,
 const bool,
 const bool);

 template void SparseMatrix< std::complex<float> >::set< std::complex<double> >(const size_type,
 const size_type,
 const size_type *,
 const  std::complex<double>  *,
 const bool);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(89))
template SparseMatrix< std::complex<float> > &SparseMatrix< std::complex<float> >::copy_from< std::complex<float> >(
 const SparseMatrix< std::complex<float> > &);

 template void SparseMatrix< std::complex<float> >::copy_from< std::complex<float> >(const FullMatrix< std::complex<float> > &);

 template void SparseMatrix< std::complex<float> >::add< std::complex<float> >(const  std::complex<float> , const SparseMatrix< std::complex<float> > &);

 template void SparseMatrix< std::complex<float> >::add< std::complex<float> >(const size_type,
 const size_type,
 const size_type *,
 const  std::complex<float>  *,
 const bool,
 const bool);

 template void SparseMatrix< std::complex<float> >::set< std::complex<float> >(const size_type,
 const size_type,
 const size_type *,
 const  std::complex<float>  *,
 const bool);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(90))
template  std::complex<double>  SparseMatrix< std::complex<double> >::matrix_norm_square< std::complex<double> >(const Vector< std::complex<double> > &)
 const;

 template  std::complex<double>  SparseMatrix< std::complex<double> >::matrix_scalar_product< std::complex<double> >(const Vector< std::complex<double> > &,
 const Vector< std::complex<double> > &)
 const;

 template  std::complex<double>  SparseMatrix< std::complex<double> >::residual< std::complex<double> >(Vector< std::complex<double> > &,
 const Vector< std::complex<double> > &,
 const Vector< std::complex<double> > &) const;

 template void SparseMatrix< std::complex<double> >::precondition_SSOR< std::complex<double> >(
 Vector< std::complex<double> > &,
 const Vector< std::complex<double> > &,
 const  std::complex<double> ,
 const std::vector<std::size_t> &) const;

 template void SparseMatrix< std::complex<double> >::precondition_SOR< std::complex<double> >(Vector< std::complex<double> > &,
 const Vector< std::complex<double> > &,
 const  std::complex<double> ) const;

 template void SparseMatrix< std::complex<double> >::precondition_TSOR< std::complex<double> >(Vector< std::complex<double> > &,
 const Vector< std::complex<double> > &,
 const  std::complex<double> ) const;

 template void SparseMatrix< std::complex<double> >::precondition_Jacobi< std::complex<double> >(Vector< std::complex<double> > &,
 const Vector< std::complex<double> > &,
 const  std::complex<double> ) const;

 template void SparseMatrix< std::complex<double> >::SOR< std::complex<double> >(Vector< std::complex<double> > &, const  std::complex<double> ) const;
 template void SparseMatrix< std::complex<double> >::TSOR< std::complex<double> >(Vector< std::complex<double> > &, const  std::complex<double> ) const;
 template void SparseMatrix< std::complex<double> >::SSOR< std::complex<double> >(Vector< std::complex<double> > &, const  std::complex<double> ) const;
 template void SparseMatrix< std::complex<double> >::PSOR< std::complex<double> >(Vector< std::complex<double> > &,
 const std::vector<size_type> &,
 const std::vector<size_type> &,
 const  std::complex<double> ) const;
 template void SparseMatrix< std::complex<double> >::TPSOR< std::complex<double> >(Vector< std::complex<double> > &,
 const std::vector<size_type> &,
 const std::vector<size_type> &,
 const  std::complex<double> ) const;
 template void SparseMatrix< std::complex<double> >::Jacobi_step< std::complex<double> >(Vector< std::complex<double> > &,
 const Vector< std::complex<double> > &,
 const  std::complex<double> ) const;
 template void SparseMatrix< std::complex<double> >::SOR_step< std::complex<double> >(Vector< std::complex<double> > &,
 const Vector< std::complex<double> > &,
 const  std::complex<double> ) const;
 template void SparseMatrix< std::complex<double> >::TSOR_step< std::complex<double> >(Vector< std::complex<double> > &,
 const Vector< std::complex<double> > &,
 const  std::complex<double> ) const;
 template void SparseMatrix< std::complex<double> >::SSOR_step< std::complex<double> >(Vector< std::complex<double> > &,
 const Vector< std::complex<double> > &,
 const  std::complex<double> ) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(91))
template  std::complex<float>  SparseMatrix< std::complex<double> >::matrix_norm_square< std::complex<float> >(const Vector< std::complex<float> > &)
 const;

 template  std::complex<float>  SparseMatrix< std::complex<double> >::matrix_scalar_product< std::complex<float> >(const Vector< std::complex<float> > &,
 const Vector< std::complex<float> > &)
 const;

 template  std::complex<float>  SparseMatrix< std::complex<double> >::residual< std::complex<float> >(Vector< std::complex<float> > &,
 const Vector< std::complex<float> > &,
 const Vector< std::complex<float> > &) const;

 template void SparseMatrix< std::complex<double> >::precondition_SSOR< std::complex<float> >(
 Vector< std::complex<float> > &,
 const Vector< std::complex<float> > &,
 const  std::complex<double> ,
 const std::vector<std::size_t> &) const;

 template void SparseMatrix< std::complex<double> >::precondition_SOR< std::complex<float> >(Vector< std::complex<float> > &,
 const Vector< std::complex<float> > &,
 const  std::complex<double> ) const;

 template void SparseMatrix< std::complex<double> >::precondition_TSOR< std::complex<float> >(Vector< std::complex<float> > &,
 const Vector< std::complex<float> > &,
 const  std::complex<double> ) const;

 template void SparseMatrix< std::complex<double> >::precondition_Jacobi< std::complex<float> >(Vector< std::complex<float> > &,
 const Vector< std::complex<float> > &,
 const  std::complex<double> ) const;

 template void SparseMatrix< std::complex<double> >::SOR< std::complex<float> >(Vector< std::complex<float> > &, const  std::complex<double> ) const;
 template void SparseMatrix< std::complex<double> >::TSOR< std::complex<float> >(Vector< std::complex<float> > &, const  std::complex<double> ) const;
 template void SparseMatrix< std::complex<double> >::SSOR< std::complex<float> >(Vector< std::complex<float> > &, const  std::complex<double> ) const;
 template void SparseMatrix< std::complex<double> >::PSOR< std::complex<float> >(Vector< std::complex<float> > &,
 const std::vector<size_type> &,
 const std::vector<size_type> &,
 const  std::complex<double> ) const;
 template void SparseMatrix< std::complex<double> >::TPSOR< std::complex<float> >(Vector< std::complex<float> > &,
 const std::vector<size_type> &,
 const std::vector<size_type> &,
 const  std::complex<double> ) const;
 template void SparseMatrix< std::complex<double> >::Jacobi_step< std::complex<float> >(Vector< std::complex<float> > &,
 const Vector< std::complex<float> > &,
 const  std::complex<double> ) const;
 template void SparseMatrix< std::complex<double> >::SOR_step< std::complex<float> >(Vector< std::complex<float> > &,
 const Vector< std::complex<float> > &,
 const  std::complex<double> ) const;
 template void SparseMatrix< std::complex<double> >::TSOR_step< std::complex<float> >(Vector< std::complex<float> > &,
 const Vector< std::complex<float> > &,
 const  std::complex<double> ) const;
 template void SparseMatrix< std::complex<double> >::SSOR_step< std::complex<float> >(Vector< std::complex<float> > &,
 const Vector< std::complex<float> > &,
 const  std::complex<double> ) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(92))
template  std::complex<double>  SparseMatrix< std::complex<float> >::matrix_norm_square< std::complex<double> >(const Vector< std::complex<double> > &)
 const;

 template  std::complex<double>  SparseMatrix< std::complex<float> >::matrix_scalar_product< std::complex<double> >(const Vector< std::complex<double> > &,
 const Vector< std::complex<double> > &)
 const;

 template  std::complex<double>  SparseMatrix< std::complex<float> >::residual< std::complex<double> >(Vector< std::complex<double> > &,
 const Vector< std::complex<double> > &,
 const Vector< std::complex<double> > &) const;

 template void SparseMatrix< std::complex<float> >::precondition_SSOR< std::complex<double> >(
 Vector< std::complex<double> > &,
 const Vector< std::complex<double> > &,
 const  std::complex<float> ,
 const std::vector<std::size_t> &) const;

 template void SparseMatrix< std::complex<float> >::precondition_SOR< std::complex<double> >(Vector< std::complex<double> > &,
 const Vector< std::complex<double> > &,
 const  std::complex<float> ) const;

 template void SparseMatrix< std::complex<float> >::precondition_TSOR< std::complex<double> >(Vector< std::complex<double> > &,
 const Vector< std::complex<double> > &,
 const  std::complex<float> ) const;

 template void SparseMatrix< std::complex<float> >::precondition_Jacobi< std::complex<double> >(Vector< std::complex<double> > &,
 const Vector< std::complex<double> > &,
 const  std::complex<float> ) const;

 template void SparseMatrix< std::complex<float> >::SOR< std::complex<double> >(Vector< std::complex<double> > &, const  std::complex<float> ) const;
 template void SparseMatrix< std::complex<float> >::TSOR< std::complex<double> >(Vector< std::complex<double> > &, const  std::complex<float> ) const;
 template void SparseMatrix< std::complex<float> >::SSOR< std::complex<double> >(Vector< std::complex<double> > &, const  std::complex<float> ) const;
 template void SparseMatrix< std::complex<float> >::PSOR< std::complex<double> >(Vector< std::complex<double> > &,
 const std::vector<size_type> &,
 const std::vector<size_type> &,
 const  std::complex<float> ) const;
 template void SparseMatrix< std::complex<float> >::TPSOR< std::complex<double> >(Vector< std::complex<double> > &,
 const std::vector<size_type> &,
 const std::vector<size_type> &,
 const  std::complex<float> ) const;
 template void SparseMatrix< std::complex<float> >::Jacobi_step< std::complex<double> >(Vector< std::complex<double> > &,
 const Vector< std::complex<double> > &,
 const  std::complex<float> ) const;
 template void SparseMatrix< std::complex<float> >::SOR_step< std::complex<double> >(Vector< std::complex<double> > &,
 const Vector< std::complex<double> > &,
 const  std::complex<float> ) const;
 template void SparseMatrix< std::complex<float> >::TSOR_step< std::complex<double> >(Vector< std::complex<double> > &,
 const Vector< std::complex<double> > &,
 const  std::complex<float> ) const;
 template void SparseMatrix< std::complex<float> >::SSOR_step< std::complex<double> >(Vector< std::complex<double> > &,
 const Vector< std::complex<double> > &,
 const  std::complex<float> ) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(93))
template  std::complex<float>  SparseMatrix< std::complex<float> >::matrix_norm_square< std::complex<float> >(const Vector< std::complex<float> > &)
 const;

 template  std::complex<float>  SparseMatrix< std::complex<float> >::matrix_scalar_product< std::complex<float> >(const Vector< std::complex<float> > &,
 const Vector< std::complex<float> > &)
 const;

 template  std::complex<float>  SparseMatrix< std::complex<float> >::residual< std::complex<float> >(Vector< std::complex<float> > &,
 const Vector< std::complex<float> > &,
 const Vector< std::complex<float> > &) const;

 template void SparseMatrix< std::complex<float> >::precondition_SSOR< std::complex<float> >(
 Vector< std::complex<float> > &,
 const Vector< std::complex<float> > &,
 const  std::complex<float> ,
 const std::vector<std::size_t> &) const;

 template void SparseMatrix< std::complex<float> >::precondition_SOR< std::complex<float> >(Vector< std::complex<float> > &,
 const Vector< std::complex<float> > &,
 const  std::complex<float> ) const;

 template void SparseMatrix< std::complex<float> >::precondition_TSOR< std::complex<float> >(Vector< std::complex<float> > &,
 const Vector< std::complex<float> > &,
 const  std::complex<float> ) const;

 template void SparseMatrix< std::complex<float> >::precondition_Jacobi< std::complex<float> >(Vector< std::complex<float> > &,
 const Vector< std::complex<float> > &,
 const  std::complex<float> ) const;

 template void SparseMatrix< std::complex<float> >::SOR< std::complex<float> >(Vector< std::complex<float> > &, const  std::complex<float> ) const;
 template void SparseMatrix< std::complex<float> >::TSOR< std::complex<float> >(Vector< std::complex<float> > &, const  std::complex<float> ) const;
 template void SparseMatrix< std::complex<float> >::SSOR< std::complex<float> >(Vector< std::complex<float> > &, const  std::complex<float> ) const;
 template void SparseMatrix< std::complex<float> >::PSOR< std::complex<float> >(Vector< std::complex<float> > &,
 const std::vector<size_type> &,
 const std::vector<size_type> &,
 const  std::complex<float> ) const;
 template void SparseMatrix< std::complex<float> >::TPSOR< std::complex<float> >(Vector< std::complex<float> > &,
 const std::vector<size_type> &,
 const std::vector<size_type> &,
 const  std::complex<float> ) const;
 template void SparseMatrix< std::complex<float> >::Jacobi_step< std::complex<float> >(Vector< std::complex<float> > &,
 const Vector< std::complex<float> > &,
 const  std::complex<float> ) const;
 template void SparseMatrix< std::complex<float> >::SOR_step< std::complex<float> >(Vector< std::complex<float> > &,
 const Vector< std::complex<float> > &,
 const  std::complex<float> ) const;
 template void SparseMatrix< std::complex<float> >::TSOR_step< std::complex<float> >(Vector< std::complex<float> > &,
 const Vector< std::complex<float> > &,
 const  std::complex<float> ) const;
 template void SparseMatrix< std::complex<float> >::SSOR_step< std::complex<float> >(Vector< std::complex<float> > &,
 const Vector< std::complex<float> > &,
 const  std::complex<float> ) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(94))
template void SparseMatrix< std::complex<double> >::vmult( Vector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult( Vector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<double> >::vmult_add( Vector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult_add( Vector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(95))
template void SparseMatrix< std::complex<double> >::vmult( Vector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult( Vector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<double> >::vmult_add( Vector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult_add( Vector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(96))
template void SparseMatrix< std::complex<double> >::vmult( BlockVector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult( BlockVector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<double> >::vmult_add( BlockVector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult_add( BlockVector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(97))
template void SparseMatrix< std::complex<double> >::vmult( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<double> >::vmult_add( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult_add( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(98))
template void SparseMatrix< std::complex<double> >::vmult( Vector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult( Vector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<double> >::vmult_add( Vector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult_add( Vector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(99))
template void SparseMatrix< std::complex<double> >::vmult( Vector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult( Vector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<double> >::vmult_add( Vector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult_add( Vector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(100))
template void SparseMatrix< std::complex<double> >::vmult( BlockVector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult( BlockVector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<double> >::vmult_add( BlockVector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult_add( BlockVector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(101))
template void SparseMatrix< std::complex<double> >::vmult( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<double> >::vmult_add( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult_add( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(102))
template void SparseMatrix< std::complex<double> >::vmult( Vector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult( Vector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<double> >::vmult_add( Vector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult_add( Vector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(103))
template void SparseMatrix< std::complex<double> >::vmult( Vector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult( Vector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<double> >::vmult_add( Vector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult_add( Vector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(104))
template void SparseMatrix< std::complex<double> >::vmult( BlockVector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult( BlockVector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<double> >::vmult_add( BlockVector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult_add( BlockVector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(105))
template void SparseMatrix< std::complex<double> >::vmult( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<double> >::vmult_add( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult_add( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(106))
template void SparseMatrix< std::complex<double> >::vmult( Vector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult( Vector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<double> >::vmult_add( Vector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult_add( Vector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(107))
template void SparseMatrix< std::complex<double> >::vmult( Vector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult( Vector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<double> >::vmult_add( Vector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult_add( Vector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(108))
template void SparseMatrix< std::complex<double> >::vmult( BlockVector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult( BlockVector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<double> >::vmult_add( BlockVector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult_add( BlockVector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(109))
template void SparseMatrix< std::complex<double> >::vmult( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<double> >::vmult_add( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<double> >::Tvmult_add( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(110))
template void SparseMatrix< std::complex<float> >::vmult( Vector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult( Vector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<float> >::vmult_add( Vector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult_add( Vector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(111))
template void SparseMatrix< std::complex<float> >::vmult( Vector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult( Vector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<float> >::vmult_add( Vector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult_add( Vector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(112))
template void SparseMatrix< std::complex<float> >::vmult( BlockVector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult( BlockVector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<float> >::vmult_add( BlockVector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult_add( BlockVector < std::complex<double> > &, const  Vector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(113))
template void SparseMatrix< std::complex<float> >::vmult( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<float> >::vmult_add( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult_add( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(114))
template void SparseMatrix< std::complex<float> >::vmult( Vector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult( Vector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<float> >::vmult_add( Vector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult_add( Vector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(115))
template void SparseMatrix< std::complex<float> >::vmult( Vector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult( Vector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<float> >::vmult_add( Vector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult_add( Vector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(116))
template void SparseMatrix< std::complex<float> >::vmult( BlockVector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult( BlockVector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<float> >::vmult_add( BlockVector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult_add( BlockVector < std::complex<double> > &, const  Vector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(117))
template void SparseMatrix< std::complex<float> >::vmult( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<float> >::vmult_add( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult_add( BlockVector < std::complex<double> > &, const  BlockVector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(118))
template void SparseMatrix< std::complex<float> >::vmult( Vector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult( Vector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<float> >::vmult_add( Vector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult_add( Vector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(119))
template void SparseMatrix< std::complex<float> >::vmult( Vector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult( Vector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<float> >::vmult_add( Vector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult_add( Vector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(120))
template void SparseMatrix< std::complex<float> >::vmult( BlockVector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult( BlockVector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<float> >::vmult_add( BlockVector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult_add( BlockVector < std::complex<float> > &, const  Vector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(121))
template void SparseMatrix< std::complex<float> >::vmult( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<float> >::vmult_add( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult_add( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<double> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(122))
template void SparseMatrix< std::complex<float> >::vmult( Vector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult( Vector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<float> >::vmult_add( Vector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult_add( Vector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(123))
template void SparseMatrix< std::complex<float> >::vmult( Vector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult( Vector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<float> >::vmult_add( Vector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult_add( Vector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(124))
template void SparseMatrix< std::complex<float> >::vmult( BlockVector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult( BlockVector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<float> >::vmult_add( BlockVector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult_add( BlockVector < std::complex<float> > &, const  Vector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(125))
template void SparseMatrix< std::complex<float> >::vmult( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<float> >::vmult_add( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 template void SparseMatrix< std::complex<float> >::Tvmult_add( BlockVector < std::complex<float> > &, const  BlockVector < std::complex<float> > &) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(126))
template void SparseMatrix< std::complex<double> >::mmult(SparseMatrix< std::complex<double> > &,
 const SparseMatrix< std::complex<double> > &,
 const Vector< std::complex<double> > &,
 const bool) const;
 template void SparseMatrix< std::complex<double> >::Tmmult(SparseMatrix< std::complex<double> > &,
 const SparseMatrix< std::complex<double> > &,
 const Vector< std::complex<double> > &,
 const bool) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(127))
template void SparseMatrix< std::complex<double> >::mmult(SparseMatrix< std::complex<double> > &,
 const SparseMatrix< std::complex<float> > &,
 const Vector< std::complex<double> > &,
 const bool) const;
 template void SparseMatrix< std::complex<double> >::Tmmult(SparseMatrix< std::complex<double> > &,
 const SparseMatrix< std::complex<float> > &,
 const Vector< std::complex<double> > &,
 const bool) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(128))
template void SparseMatrix< std::complex<double> >::mmult(SparseMatrix< std::complex<float> > &,
 const SparseMatrix< std::complex<double> > &,
 const Vector< std::complex<double> > &,
 const bool) const;
 template void SparseMatrix< std::complex<double> >::Tmmult(SparseMatrix< std::complex<float> > &,
 const SparseMatrix< std::complex<double> > &,
 const Vector< std::complex<double> > &,
 const bool) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(129))
template void SparseMatrix< std::complex<double> >::mmult(SparseMatrix< std::complex<float> > &,
 const SparseMatrix< std::complex<float> > &,
 const Vector< std::complex<double> > &,
 const bool) const;
 template void SparseMatrix< std::complex<double> >::Tmmult(SparseMatrix< std::complex<float> > &,
 const SparseMatrix< std::complex<float> > &,
 const Vector< std::complex<double> > &,
 const bool) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(130))
template void SparseMatrix< std::complex<float> >::mmult(SparseMatrix< std::complex<double> > &,
 const SparseMatrix< std::complex<double> > &,
 const Vector< std::complex<float> > &,
 const bool) const;
 template void SparseMatrix< std::complex<float> >::Tmmult(SparseMatrix< std::complex<double> > &,
 const SparseMatrix< std::complex<double> > &,
 const Vector< std::complex<float> > &,
 const bool) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(131))
template void SparseMatrix< std::complex<float> >::mmult(SparseMatrix< std::complex<double> > &,
 const SparseMatrix< std::complex<float> > &,
 const Vector< std::complex<float> > &,
 const bool) const;
 template void SparseMatrix< std::complex<float> >::Tmmult(SparseMatrix< std::complex<double> > &,
 const SparseMatrix< std::complex<float> > &,
 const Vector< std::complex<float> > &,
 const bool) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(132))
template void SparseMatrix< std::complex<float> >::mmult(SparseMatrix< std::complex<float> > &,
 const SparseMatrix< std::complex<double> > &,
 const Vector< std::complex<float> > &,
 const bool) const;
 template void SparseMatrix< std::complex<float> >::Tmmult(SparseMatrix< std::complex<float> > &,
 const SparseMatrix< std::complex<double> > &,
 const Vector< std::complex<float> > &,
 const bool) const;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(133))
template void SparseMatrix< std::complex<float> >::mmult(SparseMatrix< std::complex<float> > &,
 const SparseMatrix< std::complex<float> > &,
 const Vector< std::complex<float> > &,
 const bool) const;
 template void SparseMatrix< std::complex<float> >::Tmmult(SparseMatrix< std::complex<float> > &,
 const SparseMatrix< std::complex<float> > &,
 const Vector< std::complex<float> > &,
 const bool) const;
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
