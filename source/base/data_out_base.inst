// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
#if  0  <=  1 
 template class DataOutInterface< 0 ,  1 >;
 template class DataOutReader< 0 ,  1 >;

 namespace DataOutBase
 {
 template struct Patch< 0 ,  1 >;

 template std::ostream &
 operator<<(
 std::ostream & out,
 const Patch< 0 ,  1 > &patch);

 template std::istream &
 operator>>(std::istream & in,
 Patch< 0 ,  1 > &patch);

 template void
 write_vtk(
 const std::vector<Patch< 0 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const VtkFlags &flags,
 std::ostream & out);

 template void
 write_vtu(
 const std::vector<Patch< 0 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const VtkFlags &flags,
 std::ostream & out);

 template void
 write_ucd(
 const std::vector<Patch< 0 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const UcdFlags &flags,
 std::ostream & out);

 template void
 write_dx(
 const std::vector<Patch< 0 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const DXFlags &flags,
 std::ostream & out);

 template void
 write_gnuplot(
 const std::vector<Patch< 0 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const GnuplotFlags &flags,
 std::ostream & out);

 template void
 write_povray(
 const std::vector<Patch< 0 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const PovrayFlags &flags,
 std::ostream & out);

 template void
 write_eps(
 const std::vector<Patch< 0 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const EpsFlags &flags,
 std::ostream & out);

 template void
 write_gmv(
 const std::vector<Patch< 0 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const GmvFlags &flags,
 std::ostream & out);

 template void
 write_tecplot(
 const std::vector<Patch< 0 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const TecplotFlags &flags,
 std::ostream & out);

 template void
 write_tecplot_binary(
 const std::vector<Patch< 0 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const TecplotFlags &flags,
 std::ostream & out);

# if  1  > 1
 template void
 write_svg(
 const std::vector<Patch< 0 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const SvgFlags &flags,
 std::ostream & out);
# endif
 template void
 write_deal_II_intermediate(
 const std::vector<Patch< 0 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const Deal_II_IntermediateFlags &flags,
 std::ostream & out);

 template void
 write_hdf5_parallel(
 const std::vector<Patch< 0 ,  1 >>
 & patches,
 const DataOutFilter &data_filter,
 const std::string & filename,
 const MPI_Comm & comm);

 template void
 write_filtered_data(
 const std::vector<Patch< 0 ,  1 >> &,
 const std::vector<std::string> &,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 &,
 DataOutBase::DataOutFilter &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
#if  0  <=  2 
 template class DataOutInterface< 0 ,  2 >;
 template class DataOutReader< 0 ,  2 >;

 namespace DataOutBase
 {
 template struct Patch< 0 ,  2 >;

 template std::ostream &
 operator<<(
 std::ostream & out,
 const Patch< 0 ,  2 > &patch);

 template std::istream &
 operator>>(std::istream & in,
 Patch< 0 ,  2 > &patch);

 template void
 write_vtk(
 const std::vector<Patch< 0 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const VtkFlags &flags,
 std::ostream & out);

 template void
 write_vtu(
 const std::vector<Patch< 0 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const VtkFlags &flags,
 std::ostream & out);

 template void
 write_ucd(
 const std::vector<Patch< 0 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const UcdFlags &flags,
 std::ostream & out);

 template void
 write_dx(
 const std::vector<Patch< 0 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const DXFlags &flags,
 std::ostream & out);

 template void
 write_gnuplot(
 const std::vector<Patch< 0 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const GnuplotFlags &flags,
 std::ostream & out);

 template void
 write_povray(
 const std::vector<Patch< 0 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const PovrayFlags &flags,
 std::ostream & out);

 template void
 write_eps(
 const std::vector<Patch< 0 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const EpsFlags &flags,
 std::ostream & out);

 template void
 write_gmv(
 const std::vector<Patch< 0 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const GmvFlags &flags,
 std::ostream & out);

 template void
 write_tecplot(
 const std::vector<Patch< 0 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const TecplotFlags &flags,
 std::ostream & out);

 template void
 write_tecplot_binary(
 const std::vector<Patch< 0 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const TecplotFlags &flags,
 std::ostream & out);

# if  2  > 1
 template void
 write_svg(
 const std::vector<Patch< 0 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const SvgFlags &flags,
 std::ostream & out);
# endif
 template void
 write_deal_II_intermediate(
 const std::vector<Patch< 0 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const Deal_II_IntermediateFlags &flags,
 std::ostream & out);

 template void
 write_hdf5_parallel(
 const std::vector<Patch< 0 ,  2 >>
 & patches,
 const DataOutFilter &data_filter,
 const std::string & filename,
 const MPI_Comm & comm);

 template void
 write_filtered_data(
 const std::vector<Patch< 0 ,  2 >> &,
 const std::vector<std::string> &,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 &,
 DataOutBase::DataOutFilter &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
#if  0  <=  3 
 template class DataOutInterface< 0 ,  3 >;
 template class DataOutReader< 0 ,  3 >;

 namespace DataOutBase
 {
 template struct Patch< 0 ,  3 >;

 template std::ostream &
 operator<<(
 std::ostream & out,
 const Patch< 0 ,  3 > &patch);

 template std::istream &
 operator>>(std::istream & in,
 Patch< 0 ,  3 > &patch);

 template void
 write_vtk(
 const std::vector<Patch< 0 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const VtkFlags &flags,
 std::ostream & out);

 template void
 write_vtu(
 const std::vector<Patch< 0 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const VtkFlags &flags,
 std::ostream & out);

 template void
 write_ucd(
 const std::vector<Patch< 0 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const UcdFlags &flags,
 std::ostream & out);

 template void
 write_dx(
 const std::vector<Patch< 0 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const DXFlags &flags,
 std::ostream & out);

 template void
 write_gnuplot(
 const std::vector<Patch< 0 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const GnuplotFlags &flags,
 std::ostream & out);

 template void
 write_povray(
 const std::vector<Patch< 0 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const PovrayFlags &flags,
 std::ostream & out);

 template void
 write_eps(
 const std::vector<Patch< 0 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const EpsFlags &flags,
 std::ostream & out);

 template void
 write_gmv(
 const std::vector<Patch< 0 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const GmvFlags &flags,
 std::ostream & out);

 template void
 write_tecplot(
 const std::vector<Patch< 0 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const TecplotFlags &flags,
 std::ostream & out);

 template void
 write_tecplot_binary(
 const std::vector<Patch< 0 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const TecplotFlags &flags,
 std::ostream & out);

# if  3  > 1
 template void
 write_svg(
 const std::vector<Patch< 0 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const SvgFlags &flags,
 std::ostream & out);
# endif
 template void
 write_deal_II_intermediate(
 const std::vector<Patch< 0 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const Deal_II_IntermediateFlags &flags,
 std::ostream & out);

 template void
 write_hdf5_parallel(
 const std::vector<Patch< 0 ,  3 >>
 & patches,
 const DataOutFilter &data_filter,
 const std::string & filename,
 const MPI_Comm & comm);

 template void
 write_filtered_data(
 const std::vector<Patch< 0 ,  3 >> &,
 const std::vector<std::string> &,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 &,
 DataOutBase::DataOutFilter &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
#if  1  <=  1 
 template class DataOutInterface< 1 ,  1 >;
 template class DataOutReader< 1 ,  1 >;

 namespace DataOutBase
 {
 template struct Patch< 1 ,  1 >;

 template std::ostream &
 operator<<(
 std::ostream & out,
 const Patch< 1 ,  1 > &patch);

 template std::istream &
 operator>>(std::istream & in,
 Patch< 1 ,  1 > &patch);

 template void
 write_vtk(
 const std::vector<Patch< 1 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const VtkFlags &flags,
 std::ostream & out);

 template void
 write_vtu(
 const std::vector<Patch< 1 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const VtkFlags &flags,
 std::ostream & out);

 template void
 write_ucd(
 const std::vector<Patch< 1 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const UcdFlags &flags,
 std::ostream & out);

 template void
 write_dx(
 const std::vector<Patch< 1 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const DXFlags &flags,
 std::ostream & out);

 template void
 write_gnuplot(
 const std::vector<Patch< 1 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const GnuplotFlags &flags,
 std::ostream & out);

 template void
 write_povray(
 const std::vector<Patch< 1 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const PovrayFlags &flags,
 std::ostream & out);

 template void
 write_eps(
 const std::vector<Patch< 1 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const EpsFlags &flags,
 std::ostream & out);

 template void
 write_gmv(
 const std::vector<Patch< 1 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const GmvFlags &flags,
 std::ostream & out);

 template void
 write_tecplot(
 const std::vector<Patch< 1 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const TecplotFlags &flags,
 std::ostream & out);

 template void
 write_tecplot_binary(
 const std::vector<Patch< 1 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const TecplotFlags &flags,
 std::ostream & out);

# if  1  > 1
 template void
 write_svg(
 const std::vector<Patch< 1 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const SvgFlags &flags,
 std::ostream & out);
# endif
 template void
 write_deal_II_intermediate(
 const std::vector<Patch< 1 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const Deal_II_IntermediateFlags &flags,
 std::ostream & out);

 template void
 write_hdf5_parallel(
 const std::vector<Patch< 1 ,  1 >>
 & patches,
 const DataOutFilter &data_filter,
 const std::string & filename,
 const MPI_Comm & comm);

 template void
 write_filtered_data(
 const std::vector<Patch< 1 ,  1 >> &,
 const std::vector<std::string> &,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 &,
 DataOutBase::DataOutFilter &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
#if  1  <=  2 
 template class DataOutInterface< 1 ,  2 >;
 template class DataOutReader< 1 ,  2 >;

 namespace DataOutBase
 {
 template struct Patch< 1 ,  2 >;

 template std::ostream &
 operator<<(
 std::ostream & out,
 const Patch< 1 ,  2 > &patch);

 template std::istream &
 operator>>(std::istream & in,
 Patch< 1 ,  2 > &patch);

 template void
 write_vtk(
 const std::vector<Patch< 1 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const VtkFlags &flags,
 std::ostream & out);

 template void
 write_vtu(
 const std::vector<Patch< 1 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const VtkFlags &flags,
 std::ostream & out);

 template void
 write_ucd(
 const std::vector<Patch< 1 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const UcdFlags &flags,
 std::ostream & out);

 template void
 write_dx(
 const std::vector<Patch< 1 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const DXFlags &flags,
 std::ostream & out);

 template void
 write_gnuplot(
 const std::vector<Patch< 1 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const GnuplotFlags &flags,
 std::ostream & out);

 template void
 write_povray(
 const std::vector<Patch< 1 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const PovrayFlags &flags,
 std::ostream & out);

 template void
 write_eps(
 const std::vector<Patch< 1 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const EpsFlags &flags,
 std::ostream & out);

 template void
 write_gmv(
 const std::vector<Patch< 1 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const GmvFlags &flags,
 std::ostream & out);

 template void
 write_tecplot(
 const std::vector<Patch< 1 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const TecplotFlags &flags,
 std::ostream & out);

 template void
 write_tecplot_binary(
 const std::vector<Patch< 1 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const TecplotFlags &flags,
 std::ostream & out);

# if  2  > 1
 template void
 write_svg(
 const std::vector<Patch< 1 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const SvgFlags &flags,
 std::ostream & out);
# endif
 template void
 write_deal_II_intermediate(
 const std::vector<Patch< 1 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const Deal_II_IntermediateFlags &flags,
 std::ostream & out);

 template void
 write_hdf5_parallel(
 const std::vector<Patch< 1 ,  2 >>
 & patches,
 const DataOutFilter &data_filter,
 const std::string & filename,
 const MPI_Comm & comm);

 template void
 write_filtered_data(
 const std::vector<Patch< 1 ,  2 >> &,
 const std::vector<std::string> &,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 &,
 DataOutBase::DataOutFilter &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
#if  1  <=  3 
 template class DataOutInterface< 1 ,  3 >;
 template class DataOutReader< 1 ,  3 >;

 namespace DataOutBase
 {
 template struct Patch< 1 ,  3 >;

 template std::ostream &
 operator<<(
 std::ostream & out,
 const Patch< 1 ,  3 > &patch);

 template std::istream &
 operator>>(std::istream & in,
 Patch< 1 ,  3 > &patch);

 template void
 write_vtk(
 const std::vector<Patch< 1 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const VtkFlags &flags,
 std::ostream & out);

 template void
 write_vtu(
 const std::vector<Patch< 1 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const VtkFlags &flags,
 std::ostream & out);

 template void
 write_ucd(
 const std::vector<Patch< 1 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const UcdFlags &flags,
 std::ostream & out);

 template void
 write_dx(
 const std::vector<Patch< 1 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const DXFlags &flags,
 std::ostream & out);

 template void
 write_gnuplot(
 const std::vector<Patch< 1 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const GnuplotFlags &flags,
 std::ostream & out);

 template void
 write_povray(
 const std::vector<Patch< 1 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const PovrayFlags &flags,
 std::ostream & out);

 template void
 write_eps(
 const std::vector<Patch< 1 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const EpsFlags &flags,
 std::ostream & out);

 template void
 write_gmv(
 const std::vector<Patch< 1 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const GmvFlags &flags,
 std::ostream & out);

 template void
 write_tecplot(
 const std::vector<Patch< 1 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const TecplotFlags &flags,
 std::ostream & out);

 template void
 write_tecplot_binary(
 const std::vector<Patch< 1 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const TecplotFlags &flags,
 std::ostream & out);

# if  3  > 1
 template void
 write_svg(
 const std::vector<Patch< 1 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const SvgFlags &flags,
 std::ostream & out);
# endif
 template void
 write_deal_II_intermediate(
 const std::vector<Patch< 1 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const Deal_II_IntermediateFlags &flags,
 std::ostream & out);

 template void
 write_hdf5_parallel(
 const std::vector<Patch< 1 ,  3 >>
 & patches,
 const DataOutFilter &data_filter,
 const std::string & filename,
 const MPI_Comm & comm);

 template void
 write_filtered_data(
 const std::vector<Patch< 1 ,  3 >> &,
 const std::vector<std::string> &,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 &,
 DataOutBase::DataOutFilter &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
#if  2  <=  1 
 template class DataOutInterface< 2 ,  1 >;
 template class DataOutReader< 2 ,  1 >;

 namespace DataOutBase
 {
 template struct Patch< 2 ,  1 >;

 template std::ostream &
 operator<<(
 std::ostream & out,
 const Patch< 2 ,  1 > &patch);

 template std::istream &
 operator>>(std::istream & in,
 Patch< 2 ,  1 > &patch);

 template void
 write_vtk(
 const std::vector<Patch< 2 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const VtkFlags &flags,
 std::ostream & out);

 template void
 write_vtu(
 const std::vector<Patch< 2 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const VtkFlags &flags,
 std::ostream & out);

 template void
 write_ucd(
 const std::vector<Patch< 2 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const UcdFlags &flags,
 std::ostream & out);

 template void
 write_dx(
 const std::vector<Patch< 2 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const DXFlags &flags,
 std::ostream & out);

 template void
 write_gnuplot(
 const std::vector<Patch< 2 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const GnuplotFlags &flags,
 std::ostream & out);

 template void
 write_povray(
 const std::vector<Patch< 2 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const PovrayFlags &flags,
 std::ostream & out);

 template void
 write_eps(
 const std::vector<Patch< 2 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const EpsFlags &flags,
 std::ostream & out);

 template void
 write_gmv(
 const std::vector<Patch< 2 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const GmvFlags &flags,
 std::ostream & out);

 template void
 write_tecplot(
 const std::vector<Patch< 2 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const TecplotFlags &flags,
 std::ostream & out);

 template void
 write_tecplot_binary(
 const std::vector<Patch< 2 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const TecplotFlags &flags,
 std::ostream & out);

# if  1  > 1
 template void
 write_svg(
 const std::vector<Patch< 2 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const SvgFlags &flags,
 std::ostream & out);
# endif
 template void
 write_deal_II_intermediate(
 const std::vector<Patch< 2 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const Deal_II_IntermediateFlags &flags,
 std::ostream & out);

 template void
 write_hdf5_parallel(
 const std::vector<Patch< 2 ,  1 >>
 & patches,
 const DataOutFilter &data_filter,
 const std::string & filename,
 const MPI_Comm & comm);

 template void
 write_filtered_data(
 const std::vector<Patch< 2 ,  1 >> &,
 const std::vector<std::string> &,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 &,
 DataOutBase::DataOutFilter &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
#if  2  <=  2 
 template class DataOutInterface< 2 ,  2 >;
 template class DataOutReader< 2 ,  2 >;

 namespace DataOutBase
 {
 template struct Patch< 2 ,  2 >;

 template std::ostream &
 operator<<(
 std::ostream & out,
 const Patch< 2 ,  2 > &patch);

 template std::istream &
 operator>>(std::istream & in,
 Patch< 2 ,  2 > &patch);

 template void
 write_vtk(
 const std::vector<Patch< 2 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const VtkFlags &flags,
 std::ostream & out);

 template void
 write_vtu(
 const std::vector<Patch< 2 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const VtkFlags &flags,
 std::ostream & out);

 template void
 write_ucd(
 const std::vector<Patch< 2 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const UcdFlags &flags,
 std::ostream & out);

 template void
 write_dx(
 const std::vector<Patch< 2 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const DXFlags &flags,
 std::ostream & out);

 template void
 write_gnuplot(
 const std::vector<Patch< 2 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const GnuplotFlags &flags,
 std::ostream & out);

 template void
 write_povray(
 const std::vector<Patch< 2 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const PovrayFlags &flags,
 std::ostream & out);

 template void
 write_eps(
 const std::vector<Patch< 2 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const EpsFlags &flags,
 std::ostream & out);

 template void
 write_gmv(
 const std::vector<Patch< 2 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const GmvFlags &flags,
 std::ostream & out);

 template void
 write_tecplot(
 const std::vector<Patch< 2 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const TecplotFlags &flags,
 std::ostream & out);

 template void
 write_tecplot_binary(
 const std::vector<Patch< 2 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const TecplotFlags &flags,
 std::ostream & out);

# if  2  > 1
 template void
 write_svg(
 const std::vector<Patch< 2 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const SvgFlags &flags,
 std::ostream & out);
# endif
 template void
 write_deal_II_intermediate(
 const std::vector<Patch< 2 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const Deal_II_IntermediateFlags &flags,
 std::ostream & out);

 template void
 write_hdf5_parallel(
 const std::vector<Patch< 2 ,  2 >>
 & patches,
 const DataOutFilter &data_filter,
 const std::string & filename,
 const MPI_Comm & comm);

 template void
 write_filtered_data(
 const std::vector<Patch< 2 ,  2 >> &,
 const std::vector<std::string> &,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 &,
 DataOutBase::DataOutFilter &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
#if  2  <=  3 
 template class DataOutInterface< 2 ,  3 >;
 template class DataOutReader< 2 ,  3 >;

 namespace DataOutBase
 {
 template struct Patch< 2 ,  3 >;

 template std::ostream &
 operator<<(
 std::ostream & out,
 const Patch< 2 ,  3 > &patch);

 template std::istream &
 operator>>(std::istream & in,
 Patch< 2 ,  3 > &patch);

 template void
 write_vtk(
 const std::vector<Patch< 2 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const VtkFlags &flags,
 std::ostream & out);

 template void
 write_vtu(
 const std::vector<Patch< 2 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const VtkFlags &flags,
 std::ostream & out);

 template void
 write_ucd(
 const std::vector<Patch< 2 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const UcdFlags &flags,
 std::ostream & out);

 template void
 write_dx(
 const std::vector<Patch< 2 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const DXFlags &flags,
 std::ostream & out);

 template void
 write_gnuplot(
 const std::vector<Patch< 2 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const GnuplotFlags &flags,
 std::ostream & out);

 template void
 write_povray(
 const std::vector<Patch< 2 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const PovrayFlags &flags,
 std::ostream & out);

 template void
 write_eps(
 const std::vector<Patch< 2 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const EpsFlags &flags,
 std::ostream & out);

 template void
 write_gmv(
 const std::vector<Patch< 2 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const GmvFlags &flags,
 std::ostream & out);

 template void
 write_tecplot(
 const std::vector<Patch< 2 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const TecplotFlags &flags,
 std::ostream & out);

 template void
 write_tecplot_binary(
 const std::vector<Patch< 2 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const TecplotFlags &flags,
 std::ostream & out);

# if  3  > 1
 template void
 write_svg(
 const std::vector<Patch< 2 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const SvgFlags &flags,
 std::ostream & out);
# endif
 template void
 write_deal_II_intermediate(
 const std::vector<Patch< 2 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const Deal_II_IntermediateFlags &flags,
 std::ostream & out);

 template void
 write_hdf5_parallel(
 const std::vector<Patch< 2 ,  3 >>
 & patches,
 const DataOutFilter &data_filter,
 const std::string & filename,
 const MPI_Comm & comm);

 template void
 write_filtered_data(
 const std::vector<Patch< 2 ,  3 >> &,
 const std::vector<std::string> &,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 &,
 DataOutBase::DataOutFilter &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
#if  3  <=  1 
 template class DataOutInterface< 3 ,  1 >;
 template class DataOutReader< 3 ,  1 >;

 namespace DataOutBase
 {
 template struct Patch< 3 ,  1 >;

 template std::ostream &
 operator<<(
 std::ostream & out,
 const Patch< 3 ,  1 > &patch);

 template std::istream &
 operator>>(std::istream & in,
 Patch< 3 ,  1 > &patch);

 template void
 write_vtk(
 const std::vector<Patch< 3 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const VtkFlags &flags,
 std::ostream & out);

 template void
 write_vtu(
 const std::vector<Patch< 3 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const VtkFlags &flags,
 std::ostream & out);

 template void
 write_ucd(
 const std::vector<Patch< 3 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const UcdFlags &flags,
 std::ostream & out);

 template void
 write_dx(
 const std::vector<Patch< 3 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const DXFlags &flags,
 std::ostream & out);

 template void
 write_gnuplot(
 const std::vector<Patch< 3 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const GnuplotFlags &flags,
 std::ostream & out);

 template void
 write_povray(
 const std::vector<Patch< 3 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const PovrayFlags &flags,
 std::ostream & out);

 template void
 write_eps(
 const std::vector<Patch< 3 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const EpsFlags &flags,
 std::ostream & out);

 template void
 write_gmv(
 const std::vector<Patch< 3 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const GmvFlags &flags,
 std::ostream & out);

 template void
 write_tecplot(
 const std::vector<Patch< 3 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const TecplotFlags &flags,
 std::ostream & out);

 template void
 write_tecplot_binary(
 const std::vector<Patch< 3 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const TecplotFlags &flags,
 std::ostream & out);

# if  1  > 1
 template void
 write_svg(
 const std::vector<Patch< 3 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const SvgFlags &flags,
 std::ostream & out);
# endif
 template void
 write_deal_II_intermediate(
 const std::vector<Patch< 3 ,  1 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const Deal_II_IntermediateFlags &flags,
 std::ostream & out);

 template void
 write_hdf5_parallel(
 const std::vector<Patch< 3 ,  1 >>
 & patches,
 const DataOutFilter &data_filter,
 const std::string & filename,
 const MPI_Comm & comm);

 template void
 write_filtered_data(
 const std::vector<Patch< 3 ,  1 >> &,
 const std::vector<std::string> &,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 &,
 DataOutBase::DataOutFilter &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
#if  3  <=  2 
 template class DataOutInterface< 3 ,  2 >;
 template class DataOutReader< 3 ,  2 >;

 namespace DataOutBase
 {
 template struct Patch< 3 ,  2 >;

 template std::ostream &
 operator<<(
 std::ostream & out,
 const Patch< 3 ,  2 > &patch);

 template std::istream &
 operator>>(std::istream & in,
 Patch< 3 ,  2 > &patch);

 template void
 write_vtk(
 const std::vector<Patch< 3 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const VtkFlags &flags,
 std::ostream & out);

 template void
 write_vtu(
 const std::vector<Patch< 3 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const VtkFlags &flags,
 std::ostream & out);

 template void
 write_ucd(
 const std::vector<Patch< 3 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const UcdFlags &flags,
 std::ostream & out);

 template void
 write_dx(
 const std::vector<Patch< 3 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const DXFlags &flags,
 std::ostream & out);

 template void
 write_gnuplot(
 const std::vector<Patch< 3 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const GnuplotFlags &flags,
 std::ostream & out);

 template void
 write_povray(
 const std::vector<Patch< 3 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const PovrayFlags &flags,
 std::ostream & out);

 template void
 write_eps(
 const std::vector<Patch< 3 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const EpsFlags &flags,
 std::ostream & out);

 template void
 write_gmv(
 const std::vector<Patch< 3 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const GmvFlags &flags,
 std::ostream & out);

 template void
 write_tecplot(
 const std::vector<Patch< 3 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const TecplotFlags &flags,
 std::ostream & out);

 template void
 write_tecplot_binary(
 const std::vector<Patch< 3 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const TecplotFlags &flags,
 std::ostream & out);

# if  2  > 1
 template void
 write_svg(
 const std::vector<Patch< 3 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const SvgFlags &flags,
 std::ostream & out);
# endif
 template void
 write_deal_II_intermediate(
 const std::vector<Patch< 3 ,  2 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const Deal_II_IntermediateFlags &flags,
 std::ostream & out);

 template void
 write_hdf5_parallel(
 const std::vector<Patch< 3 ,  2 >>
 & patches,
 const DataOutFilter &data_filter,
 const std::string & filename,
 const MPI_Comm & comm);

 template void
 write_filtered_data(
 const std::vector<Patch< 3 ,  2 >> &,
 const std::vector<std::string> &,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 &,
 DataOutBase::DataOutFilter &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
#if  3  <=  3 
 template class DataOutInterface< 3 ,  3 >;
 template class DataOutReader< 3 ,  3 >;

 namespace DataOutBase
 {
 template struct Patch< 3 ,  3 >;

 template std::ostream &
 operator<<(
 std::ostream & out,
 const Patch< 3 ,  3 > &patch);

 template std::istream &
 operator>>(std::istream & in,
 Patch< 3 ,  3 > &patch);

 template void
 write_vtk(
 const std::vector<Patch< 3 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const VtkFlags &flags,
 std::ostream & out);

 template void
 write_vtu(
 const std::vector<Patch< 3 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const VtkFlags &flags,
 std::ostream & out);

 template void
 write_ucd(
 const std::vector<Patch< 3 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const UcdFlags &flags,
 std::ostream & out);

 template void
 write_dx(
 const std::vector<Patch< 3 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const DXFlags &flags,
 std::ostream & out);

 template void
 write_gnuplot(
 const std::vector<Patch< 3 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const GnuplotFlags &flags,
 std::ostream & out);

 template void
 write_povray(
 const std::vector<Patch< 3 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const PovrayFlags &flags,
 std::ostream & out);

 template void
 write_eps(
 const std::vector<Patch< 3 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const EpsFlags &flags,
 std::ostream & out);

 template void
 write_gmv(
 const std::vector<Patch< 3 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const GmvFlags &flags,
 std::ostream & out);

 template void
 write_tecplot(
 const std::vector<Patch< 3 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const TecplotFlags &flags,
 std::ostream & out);

 template void
 write_tecplot_binary(
 const std::vector<Patch< 3 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const TecplotFlags &flags,
 std::ostream & out);

# if  3  > 1
 template void
 write_svg(
 const std::vector<Patch< 3 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const SvgFlags &flags,
 std::ostream & out);
# endif
 template void
 write_deal_II_intermediate(
 const std::vector<Patch< 3 ,  3 >>
 & patches,
 const std::vector<std::string> &data_names,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 & nonscalar_data_ranges,
 const Deal_II_IntermediateFlags &flags,
 std::ostream & out);

 template void
 write_hdf5_parallel(
 const std::vector<Patch< 3 ,  3 >>
 & patches,
 const DataOutFilter &data_filter,
 const std::string & filename,
 const MPI_Comm & comm);

 template void
 write_filtered_data(
 const std::vector<Patch< 3 ,  3 >> &,
 const std::vector<std::string> &,
 const std::vector<
 std::tuple<unsigned int,
 unsigned int,
 std::string,
 DataComponentInterpretation::DataComponentInterpretation>>
 &,
 DataOutBase::DataOutFilter &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(12))
template void
 DataOutInterface< 0 ,  1 >::set_flags(
 const DataOutBase:: DXFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(13))
template void
 DataOutInterface< 0 ,  1 >::set_flags(
 const DataOutBase:: UcdFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(14))
template void
 DataOutInterface< 0 ,  1 >::set_flags(
 const DataOutBase:: GnuplotFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(15))
template void
 DataOutInterface< 0 ,  1 >::set_flags(
 const DataOutBase:: PovrayFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(16))
template void
 DataOutInterface< 0 ,  1 >::set_flags(
 const DataOutBase:: EpsFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(17))
template void
 DataOutInterface< 0 ,  1 >::set_flags(
 const DataOutBase:: GmvFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(18))
template void
 DataOutInterface< 0 ,  1 >::set_flags(
 const DataOutBase:: TecplotFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(19))
template void
 DataOutInterface< 0 ,  1 >::set_flags(
 const DataOutBase:: VtkFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(20))
template void
 DataOutInterface< 0 ,  1 >::set_flags(
 const DataOutBase:: SvgFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(21))
template void
 DataOutInterface< 0 ,  1 >::set_flags(
 const DataOutBase:: Deal_II_IntermediateFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(22))
template void
 DataOutInterface< 0 ,  2 >::set_flags(
 const DataOutBase:: DXFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(23))
template void
 DataOutInterface< 0 ,  2 >::set_flags(
 const DataOutBase:: UcdFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(24))
template void
 DataOutInterface< 0 ,  2 >::set_flags(
 const DataOutBase:: GnuplotFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(25))
template void
 DataOutInterface< 0 ,  2 >::set_flags(
 const DataOutBase:: PovrayFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(26))
template void
 DataOutInterface< 0 ,  2 >::set_flags(
 const DataOutBase:: EpsFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(27))
template void
 DataOutInterface< 0 ,  2 >::set_flags(
 const DataOutBase:: GmvFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(28))
template void
 DataOutInterface< 0 ,  2 >::set_flags(
 const DataOutBase:: TecplotFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(29))
template void
 DataOutInterface< 0 ,  2 >::set_flags(
 const DataOutBase:: VtkFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(30))
template void
 DataOutInterface< 0 ,  2 >::set_flags(
 const DataOutBase:: SvgFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(31))
template void
 DataOutInterface< 0 ,  2 >::set_flags(
 const DataOutBase:: Deal_II_IntermediateFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(32))
template void
 DataOutInterface< 0 ,  3 >::set_flags(
 const DataOutBase:: DXFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(33))
template void
 DataOutInterface< 0 ,  3 >::set_flags(
 const DataOutBase:: UcdFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(34))
template void
 DataOutInterface< 0 ,  3 >::set_flags(
 const DataOutBase:: GnuplotFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(35))
template void
 DataOutInterface< 0 ,  3 >::set_flags(
 const DataOutBase:: PovrayFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(36))
template void
 DataOutInterface< 0 ,  3 >::set_flags(
 const DataOutBase:: EpsFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(37))
template void
 DataOutInterface< 0 ,  3 >::set_flags(
 const DataOutBase:: GmvFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(38))
template void
 DataOutInterface< 0 ,  3 >::set_flags(
 const DataOutBase:: TecplotFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(39))
template void
 DataOutInterface< 0 ,  3 >::set_flags(
 const DataOutBase:: VtkFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(40))
template void
 DataOutInterface< 0 ,  3 >::set_flags(
 const DataOutBase:: SvgFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(41))
template void
 DataOutInterface< 0 ,  3 >::set_flags(
 const DataOutBase:: Deal_II_IntermediateFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(42))
template void
 DataOutInterface< 1 ,  1 >::set_flags(
 const DataOutBase:: DXFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(43))
template void
 DataOutInterface< 1 ,  1 >::set_flags(
 const DataOutBase:: UcdFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(44))
template void
 DataOutInterface< 1 ,  1 >::set_flags(
 const DataOutBase:: GnuplotFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(45))
template void
 DataOutInterface< 1 ,  1 >::set_flags(
 const DataOutBase:: PovrayFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(46))
template void
 DataOutInterface< 1 ,  1 >::set_flags(
 const DataOutBase:: EpsFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(47))
template void
 DataOutInterface< 1 ,  1 >::set_flags(
 const DataOutBase:: GmvFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(48))
template void
 DataOutInterface< 1 ,  1 >::set_flags(
 const DataOutBase:: TecplotFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(49))
template void
 DataOutInterface< 1 ,  1 >::set_flags(
 const DataOutBase:: VtkFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(50))
template void
 DataOutInterface< 1 ,  1 >::set_flags(
 const DataOutBase:: SvgFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(51))
template void
 DataOutInterface< 1 ,  1 >::set_flags(
 const DataOutBase:: Deal_II_IntermediateFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(52))
template void
 DataOutInterface< 1 ,  2 >::set_flags(
 const DataOutBase:: DXFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(53))
template void
 DataOutInterface< 1 ,  2 >::set_flags(
 const DataOutBase:: UcdFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(54))
template void
 DataOutInterface< 1 ,  2 >::set_flags(
 const DataOutBase:: GnuplotFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(55))
template void
 DataOutInterface< 1 ,  2 >::set_flags(
 const DataOutBase:: PovrayFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(56))
template void
 DataOutInterface< 1 ,  2 >::set_flags(
 const DataOutBase:: EpsFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(57))
template void
 DataOutInterface< 1 ,  2 >::set_flags(
 const DataOutBase:: GmvFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(58))
template void
 DataOutInterface< 1 ,  2 >::set_flags(
 const DataOutBase:: TecplotFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(59))
template void
 DataOutInterface< 1 ,  2 >::set_flags(
 const DataOutBase:: VtkFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(60))
template void
 DataOutInterface< 1 ,  2 >::set_flags(
 const DataOutBase:: SvgFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(61))
template void
 DataOutInterface< 1 ,  2 >::set_flags(
 const DataOutBase:: Deal_II_IntermediateFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(62))
template void
 DataOutInterface< 1 ,  3 >::set_flags(
 const DataOutBase:: DXFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(63))
template void
 DataOutInterface< 1 ,  3 >::set_flags(
 const DataOutBase:: UcdFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(64))
template void
 DataOutInterface< 1 ,  3 >::set_flags(
 const DataOutBase:: GnuplotFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(65))
template void
 DataOutInterface< 1 ,  3 >::set_flags(
 const DataOutBase:: PovrayFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(66))
template void
 DataOutInterface< 1 ,  3 >::set_flags(
 const DataOutBase:: EpsFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(67))
template void
 DataOutInterface< 1 ,  3 >::set_flags(
 const DataOutBase:: GmvFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(68))
template void
 DataOutInterface< 1 ,  3 >::set_flags(
 const DataOutBase:: TecplotFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(69))
template void
 DataOutInterface< 1 ,  3 >::set_flags(
 const DataOutBase:: VtkFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(70))
template void
 DataOutInterface< 1 ,  3 >::set_flags(
 const DataOutBase:: SvgFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(71))
template void
 DataOutInterface< 1 ,  3 >::set_flags(
 const DataOutBase:: Deal_II_IntermediateFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(72))
template void
 DataOutInterface< 2 ,  1 >::set_flags(
 const DataOutBase:: DXFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(73))
template void
 DataOutInterface< 2 ,  1 >::set_flags(
 const DataOutBase:: UcdFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(74))
template void
 DataOutInterface< 2 ,  1 >::set_flags(
 const DataOutBase:: GnuplotFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(75))
template void
 DataOutInterface< 2 ,  1 >::set_flags(
 const DataOutBase:: PovrayFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(76))
template void
 DataOutInterface< 2 ,  1 >::set_flags(
 const DataOutBase:: EpsFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(77))
template void
 DataOutInterface< 2 ,  1 >::set_flags(
 const DataOutBase:: GmvFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(78))
template void
 DataOutInterface< 2 ,  1 >::set_flags(
 const DataOutBase:: TecplotFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(79))
template void
 DataOutInterface< 2 ,  1 >::set_flags(
 const DataOutBase:: VtkFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(80))
template void
 DataOutInterface< 2 ,  1 >::set_flags(
 const DataOutBase:: SvgFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(81))
template void
 DataOutInterface< 2 ,  1 >::set_flags(
 const DataOutBase:: Deal_II_IntermediateFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(82))
template void
 DataOutInterface< 2 ,  2 >::set_flags(
 const DataOutBase:: DXFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(83))
template void
 DataOutInterface< 2 ,  2 >::set_flags(
 const DataOutBase:: UcdFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(84))
template void
 DataOutInterface< 2 ,  2 >::set_flags(
 const DataOutBase:: GnuplotFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(85))
template void
 DataOutInterface< 2 ,  2 >::set_flags(
 const DataOutBase:: PovrayFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(86))
template void
 DataOutInterface< 2 ,  2 >::set_flags(
 const DataOutBase:: EpsFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(87))
template void
 DataOutInterface< 2 ,  2 >::set_flags(
 const DataOutBase:: GmvFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(88))
template void
 DataOutInterface< 2 ,  2 >::set_flags(
 const DataOutBase:: TecplotFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(89))
template void
 DataOutInterface< 2 ,  2 >::set_flags(
 const DataOutBase:: VtkFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(90))
template void
 DataOutInterface< 2 ,  2 >::set_flags(
 const DataOutBase:: SvgFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(91))
template void
 DataOutInterface< 2 ,  2 >::set_flags(
 const DataOutBase:: Deal_II_IntermediateFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(92))
template void
 DataOutInterface< 2 ,  3 >::set_flags(
 const DataOutBase:: DXFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(93))
template void
 DataOutInterface< 2 ,  3 >::set_flags(
 const DataOutBase:: UcdFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(94))
template void
 DataOutInterface< 2 ,  3 >::set_flags(
 const DataOutBase:: GnuplotFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(95))
template void
 DataOutInterface< 2 ,  3 >::set_flags(
 const DataOutBase:: PovrayFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(96))
template void
 DataOutInterface< 2 ,  3 >::set_flags(
 const DataOutBase:: EpsFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(97))
template void
 DataOutInterface< 2 ,  3 >::set_flags(
 const DataOutBase:: GmvFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(98))
template void
 DataOutInterface< 2 ,  3 >::set_flags(
 const DataOutBase:: TecplotFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(99))
template void
 DataOutInterface< 2 ,  3 >::set_flags(
 const DataOutBase:: VtkFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(100))
template void
 DataOutInterface< 2 ,  3 >::set_flags(
 const DataOutBase:: SvgFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(101))
template void
 DataOutInterface< 2 ,  3 >::set_flags(
 const DataOutBase:: Deal_II_IntermediateFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(102))
template void
 DataOutInterface< 3 ,  1 >::set_flags(
 const DataOutBase:: DXFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(103))
template void
 DataOutInterface< 3 ,  1 >::set_flags(
 const DataOutBase:: UcdFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(104))
template void
 DataOutInterface< 3 ,  1 >::set_flags(
 const DataOutBase:: GnuplotFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(105))
template void
 DataOutInterface< 3 ,  1 >::set_flags(
 const DataOutBase:: PovrayFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(106))
template void
 DataOutInterface< 3 ,  1 >::set_flags(
 const DataOutBase:: EpsFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(107))
template void
 DataOutInterface< 3 ,  1 >::set_flags(
 const DataOutBase:: GmvFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(108))
template void
 DataOutInterface< 3 ,  1 >::set_flags(
 const DataOutBase:: TecplotFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(109))
template void
 DataOutInterface< 3 ,  1 >::set_flags(
 const DataOutBase:: VtkFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(110))
template void
 DataOutInterface< 3 ,  1 >::set_flags(
 const DataOutBase:: SvgFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(111))
template void
 DataOutInterface< 3 ,  1 >::set_flags(
 const DataOutBase:: Deal_II_IntermediateFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(112))
template void
 DataOutInterface< 3 ,  2 >::set_flags(
 const DataOutBase:: DXFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(113))
template void
 DataOutInterface< 3 ,  2 >::set_flags(
 const DataOutBase:: UcdFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(114))
template void
 DataOutInterface< 3 ,  2 >::set_flags(
 const DataOutBase:: GnuplotFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(115))
template void
 DataOutInterface< 3 ,  2 >::set_flags(
 const DataOutBase:: PovrayFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(116))
template void
 DataOutInterface< 3 ,  2 >::set_flags(
 const DataOutBase:: EpsFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(117))
template void
 DataOutInterface< 3 ,  2 >::set_flags(
 const DataOutBase:: GmvFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(118))
template void
 DataOutInterface< 3 ,  2 >::set_flags(
 const DataOutBase:: TecplotFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(119))
template void
 DataOutInterface< 3 ,  2 >::set_flags(
 const DataOutBase:: VtkFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(120))
template void
 DataOutInterface< 3 ,  2 >::set_flags(
 const DataOutBase:: SvgFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(121))
template void
 DataOutInterface< 3 ,  2 >::set_flags(
 const DataOutBase:: Deal_II_IntermediateFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(122))
template void
 DataOutInterface< 3 ,  3 >::set_flags(
 const DataOutBase:: DXFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(123))
template void
 DataOutInterface< 3 ,  3 >::set_flags(
 const DataOutBase:: UcdFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(124))
template void
 DataOutInterface< 3 ,  3 >::set_flags(
 const DataOutBase:: GnuplotFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(125))
template void
 DataOutInterface< 3 ,  3 >::set_flags(
 const DataOutBase:: PovrayFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(126))
template void
 DataOutInterface< 3 ,  3 >::set_flags(
 const DataOutBase:: EpsFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(127))
template void
 DataOutInterface< 3 ,  3 >::set_flags(
 const DataOutBase:: GmvFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(128))
template void
 DataOutInterface< 3 ,  3 >::set_flags(
 const DataOutBase:: TecplotFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(129))
template void
 DataOutInterface< 3 ,  3 >::set_flags(
 const DataOutBase:: VtkFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(130))
template void
 DataOutInterface< 3 ,  3 >::set_flags(
 const DataOutBase:: SvgFlags  &flags);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(131))
template void
 DataOutInterface< 3 ,  3 >::set_flags(
 const DataOutBase:: Deal_II_IntermediateFlags  &flags);
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
