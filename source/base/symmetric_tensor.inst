// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
template class SymmetricTensor<2,  1 ,  double >;

 template class SymmetricTensor<4,  1 ,  double >;

 template std::array< double ,  1 > eigenvalues(
 const SymmetricTensor<2,  1 ,  double > &);

 template std::array<std::pair< double , Tensor<1,  1 ,  double >>,
 std::integral_constant<int,  1 >::value>
 eigenvectors(const SymmetricTensor<2,  1 ,  double > &,
 const SymmetricTensorEigenvectorMethod);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
template class SymmetricTensor<2,  1 ,  float >;

 template class SymmetricTensor<4,  1 ,  float >;

 template std::array< float ,  1 > eigenvalues(
 const SymmetricTensor<2,  1 ,  float > &);

 template std::array<std::pair< float , Tensor<1,  1 ,  float >>,
 std::integral_constant<int,  1 >::value>
 eigenvectors(const SymmetricTensor<2,  1 ,  float > &,
 const SymmetricTensorEigenvectorMethod);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
template class SymmetricTensor<2,  2 ,  double >;

 template class SymmetricTensor<4,  2 ,  double >;

 template std::array< double ,  2 > eigenvalues(
 const SymmetricTensor<2,  2 ,  double > &);

 template std::array<std::pair< double , Tensor<1,  2 ,  double >>,
 std::integral_constant<int,  2 >::value>
 eigenvectors(const SymmetricTensor<2,  2 ,  double > &,
 const SymmetricTensorEigenvectorMethod);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
template class SymmetricTensor<2,  2 ,  float >;

 template class SymmetricTensor<4,  2 ,  float >;

 template std::array< float ,  2 > eigenvalues(
 const SymmetricTensor<2,  2 ,  float > &);

 template std::array<std::pair< float , Tensor<1,  2 ,  float >>,
 std::integral_constant<int,  2 >::value>
 eigenvectors(const SymmetricTensor<2,  2 ,  float > &,
 const SymmetricTensorEigenvectorMethod);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
template class SymmetricTensor<2,  3 ,  double >;

 template class SymmetricTensor<4,  3 ,  double >;

 template std::array< double ,  3 > eigenvalues(
 const SymmetricTensor<2,  3 ,  double > &);

 template std::array<std::pair< double , Tensor<1,  3 ,  double >>,
 std::integral_constant<int,  3 >::value>
 eigenvectors(const SymmetricTensor<2,  3 ,  double > &,
 const SymmetricTensorEigenvectorMethod);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
template class SymmetricTensor<2,  3 ,  float >;

 template class SymmetricTensor<4,  3 ,  float >;

 template std::array< float ,  3 > eigenvalues(
 const SymmetricTensor<2,  3 ,  float > &);

 template std::array<std::pair< float , Tensor<1,  3 ,  float >>,
 std::integral_constant<int,  3 >::value>
 eigenvectors(const SymmetricTensor<2,  3 ,  float > &,
 const SymmetricTensorEigenvectorMethod);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
template class SymmetricTensor<2,  1 ,  std::complex<double> >;

 template class SymmetricTensor<4,  1 ,  std::complex<double> >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
template class SymmetricTensor<2,  1 ,  std::complex<float> >;

 template class SymmetricTensor<4,  1 ,  std::complex<float> >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
template class SymmetricTensor<2,  2 ,  std::complex<double> >;

 template class SymmetricTensor<4,  2 ,  std::complex<double> >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
template class SymmetricTensor<2,  2 ,  std::complex<float> >;

 template class SymmetricTensor<4,  2 ,  std::complex<float> >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
template class SymmetricTensor<2,  3 ,  std::complex<double> >;

 template class SymmetricTensor<4,  3 ,  std::complex<double> >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
template class SymmetricTensor<2,  3 ,  std::complex<float> >;

 template class SymmetricTensor<4,  3 ,  std::complex<float> >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(12))
template SymmetricTensor<4, 3,  double > invert(
 const SymmetricTensor<4, 3,  double > &t);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(13))
template SymmetricTensor<4, 3,  float > invert(
 const SymmetricTensor<4, 3,  float > &t);
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
