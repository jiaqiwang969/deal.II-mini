// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#ifndef DOXYGEN
#if (SPLIT_INSTANTIATIONS_CHECK(0))
template void sum< double >(const SparseMatrix< double > &,
 const MPI_Comm &,
 SparseMatrix< double > &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
template void sum< float >(const SparseMatrix< float > &,
 const MPI_Comm &,
 SparseMatrix< float > &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
template void sum<LAPACKFullMatrix< int >>(const LAPACKFullMatrix< int > &,
 const MPI_Comm &,
 LAPACKFullMatrix< int > &);

 template void sum<Vector< int >>(const Vector< int > &,
 const MPI_Comm &,
 Vector< int > &);

 template void sum<FullMatrix< int >>(const FullMatrix< int > &,
 const MPI_Comm &,
 FullMatrix< int > &);

 template void sum< int >(const ArrayView<const  int > &,
 const MPI_Comm &,
 const ArrayView< int > &);

 template  int  sum< int >(const  int  &, const MPI_Comm &);

 template void sum<std::vector< int >>(const std::vector< int > &,
 const MPI_Comm &,
 std::vector< int > &);

 template  int  max< int >(const  int  &, const MPI_Comm &);

 template void max<std::vector< int >>(const std::vector< int > &,
 const MPI_Comm &,
 std::vector< int > &);

 template void max< int >(const ArrayView<const  int > &,
 const MPI_Comm &,
 const ArrayView< int > &);

 template  int  min< int >(const  int  &, const MPI_Comm &);

 template void min<std::vector< int >>(const std::vector< int > &,
 const MPI_Comm &,
 std::vector< int > &);

 template void min< int >(const ArrayView<const  int > &,
 const MPI_Comm &,
 const ArrayView< int > &);

 template  int  reduce(const  int  & vec,
 const MPI_Comm & comm,
 const std::function< int (const  int  &, const  int  &)> &process,
 const unsigned int root_process);

 template std::vector< int > reduce(
 const std::vector< int > & vec,
 const MPI_Comm & comm,
 const std::function<std::vector< int >(const std::vector< int > &,
 const std::vector< int > &)> &process,
 const unsigned int root_process);

 template  int  all_reduce(
 const  int  & vec,
 const MPI_Comm & comm,
 const std::function< int (const  int  &, const  int  &)> &process);

 template std::vector< int > all_reduce(
 const std::vector< int > & vec,
 const MPI_Comm & comm,
 const std::function<std::vector< int >(const std::vector< int > &,
 const std::vector< int > &)> &process);

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 template void Utilities::MPI::internal::all_reduce< int >(
 const MPI_Op &,
 const ArrayView<const  int > &,
 const MPI_Comm &,
 const ArrayView< int > &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
template void sum<LAPACKFullMatrix< long int >>(const LAPACKFullMatrix< long int > &,
 const MPI_Comm &,
 LAPACKFullMatrix< long int > &);

 template void sum<Vector< long int >>(const Vector< long int > &,
 const MPI_Comm &,
 Vector< long int > &);

 template void sum<FullMatrix< long int >>(const FullMatrix< long int > &,
 const MPI_Comm &,
 FullMatrix< long int > &);

 template void sum< long int >(const ArrayView<const  long int > &,
 const MPI_Comm &,
 const ArrayView< long int > &);

 template  long int  sum< long int >(const  long int  &, const MPI_Comm &);

 template void sum<std::vector< long int >>(const std::vector< long int > &,
 const MPI_Comm &,
 std::vector< long int > &);

 template  long int  max< long int >(const  long int  &, const MPI_Comm &);

 template void max<std::vector< long int >>(const std::vector< long int > &,
 const MPI_Comm &,
 std::vector< long int > &);

 template void max< long int >(const ArrayView<const  long int > &,
 const MPI_Comm &,
 const ArrayView< long int > &);

 template  long int  min< long int >(const  long int  &, const MPI_Comm &);

 template void min<std::vector< long int >>(const std::vector< long int > &,
 const MPI_Comm &,
 std::vector< long int > &);

 template void min< long int >(const ArrayView<const  long int > &,
 const MPI_Comm &,
 const ArrayView< long int > &);

 template  long int  reduce(const  long int  & vec,
 const MPI_Comm & comm,
 const std::function< long int (const  long int  &, const  long int  &)> &process,
 const unsigned int root_process);

 template std::vector< long int > reduce(
 const std::vector< long int > & vec,
 const MPI_Comm & comm,
 const std::function<std::vector< long int >(const std::vector< long int > &,
 const std::vector< long int > &)> &process,
 const unsigned int root_process);

 template  long int  all_reduce(
 const  long int  & vec,
 const MPI_Comm & comm,
 const std::function< long int (const  long int  &, const  long int  &)> &process);

 template std::vector< long int > all_reduce(
 const std::vector< long int > & vec,
 const MPI_Comm & comm,
 const std::function<std::vector< long int >(const std::vector< long int > &,
 const std::vector< long int > &)> &process);

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 template void Utilities::MPI::internal::all_reduce< long int >(
 const MPI_Op &,
 const ArrayView<const  long int > &,
 const MPI_Comm &,
 const ArrayView< long int > &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
template void sum<LAPACKFullMatrix< unsigned int >>(const LAPACKFullMatrix< unsigned int > &,
 const MPI_Comm &,
 LAPACKFullMatrix< unsigned int > &);

 template void sum<Vector< unsigned int >>(const Vector< unsigned int > &,
 const MPI_Comm &,
 Vector< unsigned int > &);

 template void sum<FullMatrix< unsigned int >>(const FullMatrix< unsigned int > &,
 const MPI_Comm &,
 FullMatrix< unsigned int > &);

 template void sum< unsigned int >(const ArrayView<const  unsigned int > &,
 const MPI_Comm &,
 const ArrayView< unsigned int > &);

 template  unsigned int  sum< unsigned int >(const  unsigned int  &, const MPI_Comm &);

 template void sum<std::vector< unsigned int >>(const std::vector< unsigned int > &,
 const MPI_Comm &,
 std::vector< unsigned int > &);

 template  unsigned int  max< unsigned int >(const  unsigned int  &, const MPI_Comm &);

 template void max<std::vector< unsigned int >>(const std::vector< unsigned int > &,
 const MPI_Comm &,
 std::vector< unsigned int > &);

 template void max< unsigned int >(const ArrayView<const  unsigned int > &,
 const MPI_Comm &,
 const ArrayView< unsigned int > &);

 template  unsigned int  min< unsigned int >(const  unsigned int  &, const MPI_Comm &);

 template void min<std::vector< unsigned int >>(const std::vector< unsigned int > &,
 const MPI_Comm &,
 std::vector< unsigned int > &);

 template void min< unsigned int >(const ArrayView<const  unsigned int > &,
 const MPI_Comm &,
 const ArrayView< unsigned int > &);

 template  unsigned int  reduce(const  unsigned int  & vec,
 const MPI_Comm & comm,
 const std::function< unsigned int (const  unsigned int  &, const  unsigned int  &)> &process,
 const unsigned int root_process);

 template std::vector< unsigned int > reduce(
 const std::vector< unsigned int > & vec,
 const MPI_Comm & comm,
 const std::function<std::vector< unsigned int >(const std::vector< unsigned int > &,
 const std::vector< unsigned int > &)> &process,
 const unsigned int root_process);

 template  unsigned int  all_reduce(
 const  unsigned int  & vec,
 const MPI_Comm & comm,
 const std::function< unsigned int (const  unsigned int  &, const  unsigned int  &)> &process);

 template std::vector< unsigned int > all_reduce(
 const std::vector< unsigned int > & vec,
 const MPI_Comm & comm,
 const std::function<std::vector< unsigned int >(const std::vector< unsigned int > &,
 const std::vector< unsigned int > &)> &process);

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 template void Utilities::MPI::internal::all_reduce< unsigned int >(
 const MPI_Op &,
 const ArrayView<const  unsigned int > &,
 const MPI_Comm &,
 const ArrayView< unsigned int > &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
template void sum<LAPACKFullMatrix< unsigned long int >>(const LAPACKFullMatrix< unsigned long int > &,
 const MPI_Comm &,
 LAPACKFullMatrix< unsigned long int > &);

 template void sum<Vector< unsigned long int >>(const Vector< unsigned long int > &,
 const MPI_Comm &,
 Vector< unsigned long int > &);

 template void sum<FullMatrix< unsigned long int >>(const FullMatrix< unsigned long int > &,
 const MPI_Comm &,
 FullMatrix< unsigned long int > &);

 template void sum< unsigned long int >(const ArrayView<const  unsigned long int > &,
 const MPI_Comm &,
 const ArrayView< unsigned long int > &);

 template  unsigned long int  sum< unsigned long int >(const  unsigned long int  &, const MPI_Comm &);

 template void sum<std::vector< unsigned long int >>(const std::vector< unsigned long int > &,
 const MPI_Comm &,
 std::vector< unsigned long int > &);

 template  unsigned long int  max< unsigned long int >(const  unsigned long int  &, const MPI_Comm &);

 template void max<std::vector< unsigned long int >>(const std::vector< unsigned long int > &,
 const MPI_Comm &,
 std::vector< unsigned long int > &);

 template void max< unsigned long int >(const ArrayView<const  unsigned long int > &,
 const MPI_Comm &,
 const ArrayView< unsigned long int > &);

 template  unsigned long int  min< unsigned long int >(const  unsigned long int  &, const MPI_Comm &);

 template void min<std::vector< unsigned long int >>(const std::vector< unsigned long int > &,
 const MPI_Comm &,
 std::vector< unsigned long int > &);

 template void min< unsigned long int >(const ArrayView<const  unsigned long int > &,
 const MPI_Comm &,
 const ArrayView< unsigned long int > &);

 template  unsigned long int  reduce(const  unsigned long int  & vec,
 const MPI_Comm & comm,
 const std::function< unsigned long int (const  unsigned long int  &, const  unsigned long int  &)> &process,
 const unsigned int root_process);

 template std::vector< unsigned long int > reduce(
 const std::vector< unsigned long int > & vec,
 const MPI_Comm & comm,
 const std::function<std::vector< unsigned long int >(const std::vector< unsigned long int > &,
 const std::vector< unsigned long int > &)> &process,
 const unsigned int root_process);

 template  unsigned long int  all_reduce(
 const  unsigned long int  & vec,
 const MPI_Comm & comm,
 const std::function< unsigned long int (const  unsigned long int  &, const  unsigned long int  &)> &process);

 template std::vector< unsigned long int > all_reduce(
 const std::vector< unsigned long int > & vec,
 const MPI_Comm & comm,
 const std::function<std::vector< unsigned long int >(const std::vector< unsigned long int > &,
 const std::vector< unsigned long int > &)> &process);

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 template void Utilities::MPI::internal::all_reduce< unsigned long int >(
 const MPI_Op &,
 const ArrayView<const  unsigned long int > &,
 const MPI_Comm &,
 const ArrayView< unsigned long int > &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
template void sum<LAPACKFullMatrix< unsigned long long int >>(const LAPACKFullMatrix< unsigned long long int > &,
 const MPI_Comm &,
 LAPACKFullMatrix< unsigned long long int > &);

 template void sum<Vector< unsigned long long int >>(const Vector< unsigned long long int > &,
 const MPI_Comm &,
 Vector< unsigned long long int > &);

 template void sum<FullMatrix< unsigned long long int >>(const FullMatrix< unsigned long long int > &,
 const MPI_Comm &,
 FullMatrix< unsigned long long int > &);

 template void sum< unsigned long long int >(const ArrayView<const  unsigned long long int > &,
 const MPI_Comm &,
 const ArrayView< unsigned long long int > &);

 template  unsigned long long int  sum< unsigned long long int >(const  unsigned long long int  &, const MPI_Comm &);

 template void sum<std::vector< unsigned long long int >>(const std::vector< unsigned long long int > &,
 const MPI_Comm &,
 std::vector< unsigned long long int > &);

 template  unsigned long long int  max< unsigned long long int >(const  unsigned long long int  &, const MPI_Comm &);

 template void max<std::vector< unsigned long long int >>(const std::vector< unsigned long long int > &,
 const MPI_Comm &,
 std::vector< unsigned long long int > &);

 template void max< unsigned long long int >(const ArrayView<const  unsigned long long int > &,
 const MPI_Comm &,
 const ArrayView< unsigned long long int > &);

 template  unsigned long long int  min< unsigned long long int >(const  unsigned long long int  &, const MPI_Comm &);

 template void min<std::vector< unsigned long long int >>(const std::vector< unsigned long long int > &,
 const MPI_Comm &,
 std::vector< unsigned long long int > &);

 template void min< unsigned long long int >(const ArrayView<const  unsigned long long int > &,
 const MPI_Comm &,
 const ArrayView< unsigned long long int > &);

 template  unsigned long long int  reduce(const  unsigned long long int  & vec,
 const MPI_Comm & comm,
 const std::function< unsigned long long int (const  unsigned long long int  &, const  unsigned long long int  &)> &process,
 const unsigned int root_process);

 template std::vector< unsigned long long int > reduce(
 const std::vector< unsigned long long int > & vec,
 const MPI_Comm & comm,
 const std::function<std::vector< unsigned long long int >(const std::vector< unsigned long long int > &,
 const std::vector< unsigned long long int > &)> &process,
 const unsigned int root_process);

 template  unsigned long long int  all_reduce(
 const  unsigned long long int  & vec,
 const MPI_Comm & comm,
 const std::function< unsigned long long int (const  unsigned long long int  &, const  unsigned long long int  &)> &process);

 template std::vector< unsigned long long int > all_reduce(
 const std::vector< unsigned long long int > & vec,
 const MPI_Comm & comm,
 const std::function<std::vector< unsigned long long int >(const std::vector< unsigned long long int > &,
 const std::vector< unsigned long long int > &)> &process);

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 template void Utilities::MPI::internal::all_reduce< unsigned long long int >(
 const MPI_Op &,
 const ArrayView<const  unsigned long long int > &,
 const MPI_Comm &,
 const ArrayView< unsigned long long int > &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
template void sum<LAPACKFullMatrix< float >>(const LAPACKFullMatrix< float > &,
 const MPI_Comm &,
 LAPACKFullMatrix< float > &);

 template void sum<Vector< float >>(const Vector< float > &,
 const MPI_Comm &,
 Vector< float > &);

 template void sum<FullMatrix< float >>(const FullMatrix< float > &,
 const MPI_Comm &,
 FullMatrix< float > &);

 template void sum< float >(const ArrayView<const  float > &,
 const MPI_Comm &,
 const ArrayView< float > &);

 template  float  sum< float >(const  float  &, const MPI_Comm &);

 template void sum<std::vector< float >>(const std::vector< float > &,
 const MPI_Comm &,
 std::vector< float > &);

 template  float  max< float >(const  float  &, const MPI_Comm &);

 template void max<std::vector< float >>(const std::vector< float > &,
 const MPI_Comm &,
 std::vector< float > &);

 template void max< float >(const ArrayView<const  float > &,
 const MPI_Comm &,
 const ArrayView< float > &);

 template  float  min< float >(const  float  &, const MPI_Comm &);

 template void min<std::vector< float >>(const std::vector< float > &,
 const MPI_Comm &,
 std::vector< float > &);

 template void min< float >(const ArrayView<const  float > &,
 const MPI_Comm &,
 const ArrayView< float > &);

 template  float  reduce(const  float  & vec,
 const MPI_Comm & comm,
 const std::function< float (const  float  &, const  float  &)> &process,
 const unsigned int root_process);

 template std::vector< float > reduce(
 const std::vector< float > & vec,
 const MPI_Comm & comm,
 const std::function<std::vector< float >(const std::vector< float > &,
 const std::vector< float > &)> &process,
 const unsigned int root_process);

 template  float  all_reduce(
 const  float  & vec,
 const MPI_Comm & comm,
 const std::function< float (const  float  &, const  float  &)> &process);

 template std::vector< float > all_reduce(
 const std::vector< float > & vec,
 const MPI_Comm & comm,
 const std::function<std::vector< float >(const std::vector< float > &,
 const std::vector< float > &)> &process);

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 template void Utilities::MPI::internal::all_reduce< float >(
 const MPI_Op &,
 const ArrayView<const  float > &,
 const MPI_Comm &,
 const ArrayView< float > &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
template void sum<LAPACKFullMatrix< double >>(const LAPACKFullMatrix< double > &,
 const MPI_Comm &,
 LAPACKFullMatrix< double > &);

 template void sum<Vector< double >>(const Vector< double > &,
 const MPI_Comm &,
 Vector< double > &);

 template void sum<FullMatrix< double >>(const FullMatrix< double > &,
 const MPI_Comm &,
 FullMatrix< double > &);

 template void sum< double >(const ArrayView<const  double > &,
 const MPI_Comm &,
 const ArrayView< double > &);

 template  double  sum< double >(const  double  &, const MPI_Comm &);

 template void sum<std::vector< double >>(const std::vector< double > &,
 const MPI_Comm &,
 std::vector< double > &);

 template  double  max< double >(const  double  &, const MPI_Comm &);

 template void max<std::vector< double >>(const std::vector< double > &,
 const MPI_Comm &,
 std::vector< double > &);

 template void max< double >(const ArrayView<const  double > &,
 const MPI_Comm &,
 const ArrayView< double > &);

 template  double  min< double >(const  double  &, const MPI_Comm &);

 template void min<std::vector< double >>(const std::vector< double > &,
 const MPI_Comm &,
 std::vector< double > &);

 template void min< double >(const ArrayView<const  double > &,
 const MPI_Comm &,
 const ArrayView< double > &);

 template  double  reduce(const  double  & vec,
 const MPI_Comm & comm,
 const std::function< double (const  double  &, const  double  &)> &process,
 const unsigned int root_process);

 template std::vector< double > reduce(
 const std::vector< double > & vec,
 const MPI_Comm & comm,
 const std::function<std::vector< double >(const std::vector< double > &,
 const std::vector< double > &)> &process,
 const unsigned int root_process);

 template  double  all_reduce(
 const  double  & vec,
 const MPI_Comm & comm,
 const std::function< double (const  double  &, const  double  &)> &process);

 template std::vector< double > all_reduce(
 const std::vector< double > & vec,
 const MPI_Comm & comm,
 const std::function<std::vector< double >(const std::vector< double > &,
 const std::vector< double > &)> &process);

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 template void Utilities::MPI::internal::all_reduce< double >(
 const MPI_Op &,
 const ArrayView<const  double > &,
 const MPI_Comm &,
 const ArrayView< double > &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
template void sum<LAPACKFullMatrix< long double >>(const LAPACKFullMatrix< long double > &,
 const MPI_Comm &,
 LAPACKFullMatrix< long double > &);

 template void sum<Vector< long double >>(const Vector< long double > &,
 const MPI_Comm &,
 Vector< long double > &);

 template void sum<FullMatrix< long double >>(const FullMatrix< long double > &,
 const MPI_Comm &,
 FullMatrix< long double > &);

 template void sum< long double >(const ArrayView<const  long double > &,
 const MPI_Comm &,
 const ArrayView< long double > &);

 template  long double  sum< long double >(const  long double  &, const MPI_Comm &);

 template void sum<std::vector< long double >>(const std::vector< long double > &,
 const MPI_Comm &,
 std::vector< long double > &);

 template  long double  max< long double >(const  long double  &, const MPI_Comm &);

 template void max<std::vector< long double >>(const std::vector< long double > &,
 const MPI_Comm &,
 std::vector< long double > &);

 template void max< long double >(const ArrayView<const  long double > &,
 const MPI_Comm &,
 const ArrayView< long double > &);

 template  long double  min< long double >(const  long double  &, const MPI_Comm &);

 template void min<std::vector< long double >>(const std::vector< long double > &,
 const MPI_Comm &,
 std::vector< long double > &);

 template void min< long double >(const ArrayView<const  long double > &,
 const MPI_Comm &,
 const ArrayView< long double > &);

 template  long double  reduce(const  long double  & vec,
 const MPI_Comm & comm,
 const std::function< long double (const  long double  &, const  long double  &)> &process,
 const unsigned int root_process);

 template std::vector< long double > reduce(
 const std::vector< long double > & vec,
 const MPI_Comm & comm,
 const std::function<std::vector< long double >(const std::vector< long double > &,
 const std::vector< long double > &)> &process,
 const unsigned int root_process);

 template  long double  all_reduce(
 const  long double  & vec,
 const MPI_Comm & comm,
 const std::function< long double (const  long double  &, const  long double  &)> &process);

 template std::vector< long double > all_reduce(
 const std::vector< long double > & vec,
 const MPI_Comm & comm,
 const std::function<std::vector< long double >(const std::vector< long double > &,
 const std::vector< long double > &)> &process);

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 template void Utilities::MPI::internal::all_reduce< long double >(
 const MPI_Op &,
 const ArrayView<const  long double > &,
 const MPI_Comm &,
 const ArrayView< long double > &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
template void sum<LAPACKFullMatrix< std::complex<double> >>(const LAPACKFullMatrix< std::complex<double> > &,
 const MPI_Comm &,
 LAPACKFullMatrix< std::complex<double> > &);

 template void sum<Vector< std::complex<double> >>(const Vector< std::complex<double> > &,
 const MPI_Comm &,
 Vector< std::complex<double> > &);

 template void sum<FullMatrix< std::complex<double> >>(const FullMatrix< std::complex<double> > &,
 const MPI_Comm &,
 FullMatrix< std::complex<double> > &);

 template void sum< std::complex<double> >(const ArrayView<const  std::complex<double> > &,
 const MPI_Comm &,
 const ArrayView< std::complex<double> > &);

 template  std::complex<double>  sum< std::complex<double> >(const  std::complex<double>  &, const MPI_Comm &);

 template void sum<std::vector< std::complex<double> >>(const std::vector< std::complex<double> > &,
 const MPI_Comm &,
 std::vector< std::complex<double> > &);

 template  std::complex<double>  max< std::complex<double> >(const  std::complex<double>  &, const MPI_Comm &);

 template void max<std::vector< std::complex<double> >>(const std::vector< std::complex<double> > &,
 const MPI_Comm &,
 std::vector< std::complex<double> > &);

 template void max< std::complex<double> >(const ArrayView<const  std::complex<double> > &,
 const MPI_Comm &,
 const ArrayView< std::complex<double> > &);

 template  std::complex<double>  min< std::complex<double> >(const  std::complex<double>  &, const MPI_Comm &);

 template void min<std::vector< std::complex<double> >>(const std::vector< std::complex<double> > &,
 const MPI_Comm &,
 std::vector< std::complex<double> > &);

 template void min< std::complex<double> >(const ArrayView<const  std::complex<double> > &,
 const MPI_Comm &,
 const ArrayView< std::complex<double> > &);

 template  std::complex<double>  reduce(const  std::complex<double>  & vec,
 const MPI_Comm & comm,
 const std::function< std::complex<double> (const  std::complex<double>  &, const  std::complex<double>  &)> &process,
 const unsigned int root_process);

 template std::vector< std::complex<double> > reduce(
 const std::vector< std::complex<double> > & vec,
 const MPI_Comm & comm,
 const std::function<std::vector< std::complex<double> >(const std::vector< std::complex<double> > &,
 const std::vector< std::complex<double> > &)> &process,
 const unsigned int root_process);

 template  std::complex<double>  all_reduce(
 const  std::complex<double>  & vec,
 const MPI_Comm & comm,
 const std::function< std::complex<double> (const  std::complex<double>  &, const  std::complex<double>  &)> &process);

 template std::vector< std::complex<double> > all_reduce(
 const std::vector< std::complex<double> > & vec,
 const MPI_Comm & comm,
 const std::function<std::vector< std::complex<double> >(const std::vector< std::complex<double> > &,
 const std::vector< std::complex<double> > &)> &process);

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 template void Utilities::MPI::internal::all_reduce< std::complex<double> >(
 const MPI_Op &,
 const ArrayView<const  std::complex<double> > &,
 const MPI_Comm &,
 const ArrayView< std::complex<double> > &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
template void sum<LAPACKFullMatrix< std::complex<float> >>(const LAPACKFullMatrix< std::complex<float> > &,
 const MPI_Comm &,
 LAPACKFullMatrix< std::complex<float> > &);

 template void sum<Vector< std::complex<float> >>(const Vector< std::complex<float> > &,
 const MPI_Comm &,
 Vector< std::complex<float> > &);

 template void sum<FullMatrix< std::complex<float> >>(const FullMatrix< std::complex<float> > &,
 const MPI_Comm &,
 FullMatrix< std::complex<float> > &);

 template void sum< std::complex<float> >(const ArrayView<const  std::complex<float> > &,
 const MPI_Comm &,
 const ArrayView< std::complex<float> > &);

 template  std::complex<float>  sum< std::complex<float> >(const  std::complex<float>  &, const MPI_Comm &);

 template void sum<std::vector< std::complex<float> >>(const std::vector< std::complex<float> > &,
 const MPI_Comm &,
 std::vector< std::complex<float> > &);

 template  std::complex<float>  max< std::complex<float> >(const  std::complex<float>  &, const MPI_Comm &);

 template void max<std::vector< std::complex<float> >>(const std::vector< std::complex<float> > &,
 const MPI_Comm &,
 std::vector< std::complex<float> > &);

 template void max< std::complex<float> >(const ArrayView<const  std::complex<float> > &,
 const MPI_Comm &,
 const ArrayView< std::complex<float> > &);

 template  std::complex<float>  min< std::complex<float> >(const  std::complex<float>  &, const MPI_Comm &);

 template void min<std::vector< std::complex<float> >>(const std::vector< std::complex<float> > &,
 const MPI_Comm &,
 std::vector< std::complex<float> > &);

 template void min< std::complex<float> >(const ArrayView<const  std::complex<float> > &,
 const MPI_Comm &,
 const ArrayView< std::complex<float> > &);

 template  std::complex<float>  reduce(const  std::complex<float>  & vec,
 const MPI_Comm & comm,
 const std::function< std::complex<float> (const  std::complex<float>  &, const  std::complex<float>  &)> &process,
 const unsigned int root_process);

 template std::vector< std::complex<float> > reduce(
 const std::vector< std::complex<float> > & vec,
 const MPI_Comm & comm,
 const std::function<std::vector< std::complex<float> >(const std::vector< std::complex<float> > &,
 const std::vector< std::complex<float> > &)> &process,
 const unsigned int root_process);

 template  std::complex<float>  all_reduce(
 const  std::complex<float>  & vec,
 const MPI_Comm & comm,
 const std::function< std::complex<float> (const  std::complex<float>  &, const  std::complex<float>  &)> &process);

 template std::vector< std::complex<float> > all_reduce(
 const std::vector< std::complex<float> > & vec,
 const MPI_Comm & comm,
 const std::function<std::vector< std::complex<float> >(const std::vector< std::complex<float> > &,
 const std::vector< std::complex<float> > &)> &process);

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 template void Utilities::MPI::internal::all_reduce< std::complex<float> >(
 const MPI_Op &,
 const ArrayView<const  std::complex<float> > &,
 const MPI_Comm &,
 const ArrayView< std::complex<float> > &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(12))
template Tensor< 1 ,  1 ,  double > sum< 1 ,  1 ,  double >(
 const Tensor< 1 ,  1 ,  double > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(13))
template Tensor< 1 ,  2 ,  double > sum< 1 ,  2 ,  double >(
 const Tensor< 1 ,  2 ,  double > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(14))
template Tensor< 1 ,  3 ,  double > sum< 1 ,  3 ,  double >(
 const Tensor< 1 ,  3 ,  double > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(15))
template Tensor< 2 ,  1 ,  double > sum< 2 ,  1 ,  double >(
 const Tensor< 2 ,  1 ,  double > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(16))
template Tensor< 2 ,  2 ,  double > sum< 2 ,  2 ,  double >(
 const Tensor< 2 ,  2 ,  double > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(17))
template Tensor< 2 ,  3 ,  double > sum< 2 ,  3 ,  double >(
 const Tensor< 2 ,  3 ,  double > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(18))
template Tensor< 3 ,  1 ,  double > sum< 3 ,  1 ,  double >(
 const Tensor< 3 ,  1 ,  double > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(19))
template Tensor< 3 ,  2 ,  double > sum< 3 ,  2 ,  double >(
 const Tensor< 3 ,  2 ,  double > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(20))
template Tensor< 3 ,  3 ,  double > sum< 3 ,  3 ,  double >(
 const Tensor< 3 ,  3 ,  double > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(21))
template Tensor< 4 ,  1 ,  double > sum< 4 ,  1 ,  double >(
 const Tensor< 4 ,  1 ,  double > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(22))
template Tensor< 4 ,  2 ,  double > sum< 4 ,  2 ,  double >(
 const Tensor< 4 ,  2 ,  double > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(23))
template Tensor< 4 ,  3 ,  double > sum< 4 ,  3 ,  double >(
 const Tensor< 4 ,  3 ,  double > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(24))
template Tensor< 1 ,  1 ,  float > sum< 1 ,  1 ,  float >(
 const Tensor< 1 ,  1 ,  float > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(25))
template Tensor< 1 ,  2 ,  float > sum< 1 ,  2 ,  float >(
 const Tensor< 1 ,  2 ,  float > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(26))
template Tensor< 1 ,  3 ,  float > sum< 1 ,  3 ,  float >(
 const Tensor< 1 ,  3 ,  float > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(27))
template Tensor< 2 ,  1 ,  float > sum< 2 ,  1 ,  float >(
 const Tensor< 2 ,  1 ,  float > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(28))
template Tensor< 2 ,  2 ,  float > sum< 2 ,  2 ,  float >(
 const Tensor< 2 ,  2 ,  float > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(29))
template Tensor< 2 ,  3 ,  float > sum< 2 ,  3 ,  float >(
 const Tensor< 2 ,  3 ,  float > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(30))
template Tensor< 3 ,  1 ,  float > sum< 3 ,  1 ,  float >(
 const Tensor< 3 ,  1 ,  float > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(31))
template Tensor< 3 ,  2 ,  float > sum< 3 ,  2 ,  float >(
 const Tensor< 3 ,  2 ,  float > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(32))
template Tensor< 3 ,  3 ,  float > sum< 3 ,  3 ,  float >(
 const Tensor< 3 ,  3 ,  float > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(33))
template Tensor< 4 ,  1 ,  float > sum< 4 ,  1 ,  float >(
 const Tensor< 4 ,  1 ,  float > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(34))
template Tensor< 4 ,  2 ,  float > sum< 4 ,  2 ,  float >(
 const Tensor< 4 ,  2 ,  float > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(35))
template Tensor< 4 ,  3 ,  float > sum< 4 ,  3 ,  float >(
 const Tensor< 4 ,  3 ,  float > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(36))
template SymmetricTensor<2,  1 ,  double > sum<2,  1 ,  double >(
 const SymmetricTensor<2,  1 ,  double > &, const MPI_Comm &);

 template SymmetricTensor<4,  1 ,  double > sum<4,  1 ,  double >(
 const SymmetricTensor<4,  1 ,  double > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(37))
template SymmetricTensor<2,  2 ,  double > sum<2,  2 ,  double >(
 const SymmetricTensor<2,  2 ,  double > &, const MPI_Comm &);

 template SymmetricTensor<4,  2 ,  double > sum<4,  2 ,  double >(
 const SymmetricTensor<4,  2 ,  double > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(38))
template SymmetricTensor<2,  3 ,  double > sum<2,  3 ,  double >(
 const SymmetricTensor<2,  3 ,  double > &, const MPI_Comm &);

 template SymmetricTensor<4,  3 ,  double > sum<4,  3 ,  double >(
 const SymmetricTensor<4,  3 ,  double > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(39))
template SymmetricTensor<2,  1 ,  float > sum<2,  1 ,  float >(
 const SymmetricTensor<2,  1 ,  float > &, const MPI_Comm &);

 template SymmetricTensor<4,  1 ,  float > sum<4,  1 ,  float >(
 const SymmetricTensor<4,  1 ,  float > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(40))
template SymmetricTensor<2,  2 ,  float > sum<2,  2 ,  float >(
 const SymmetricTensor<2,  2 ,  float > &, const MPI_Comm &);

 template SymmetricTensor<4,  2 ,  float > sum<4,  2 ,  float >(
 const SymmetricTensor<4,  2 ,  float > &, const MPI_Comm &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(41))
template SymmetricTensor<2,  3 ,  float > sum<2,  3 ,  float >(
 const SymmetricTensor<2,  3 ,  float > &, const MPI_Comm &);

 template SymmetricTensor<4,  3 ,  float > sum<4,  3 ,  float >(
 const SymmetricTensor<4,  3 ,  float > &, const MPI_Comm &);
 
#endif
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
