// ---------------------------------------------------------------------
//
// Copyright (C) 2017 - 2019 by the deal.II authors
//
// This file is part of the deal.II library.
//
// The deal.II library is free software; you can use it, redistribute
// it, and/or modify it under the terms of the GNU Lesser General
// Public License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// The full text of the license can be found in the file LICENSE.md at
// the top level directory of deal.II.
//
// ---------------------------------------------------------------------



for (SCALAR : MPI_SCALARS)
  {
#ifdef DEAL_II_WITH_MPI
    template void Utilities::MPI::Partitioner::
      export_to_ghosted_array_start<SCALAR, dealii::MemorySpace::CUDA>(
        const unsigned int,
        const ArrayView<const SCALAR, MemorySpace::CUDA> &,
        const ArrayView<SCALAR, MemorySpace::CUDA> &,
        const ArrayView<SCALAR, MemorySpace::CUDA> &,
        std::vector<MPI_Request> &) const;

    template void Utilities::MPI::Partitioner::export_to_ghosted_array_finish<
      SCALAR,
      MemorySpace::CUDA>(const ArrayView<SCALAR, MemorySpace::CUDA> &,
                         std::vector<MPI_Request> &) const;

    template void Utilities::MPI::Partitioner::import_from_ghosted_array_start<
      SCALAR,
      MemorySpace::CUDA>(const VectorOperation::values,
                         const unsigned int,
                         const ArrayView<SCALAR, MemorySpace::CUDA> &,
                         const ArrayView<SCALAR, MemorySpace::CUDA> &,
                         std::vector<MPI_Request> &) const;

    template void Utilities::MPI::Partitioner::import_from_ghosted_array_finish<
      SCALAR,
      MemorySpace::CUDA>(const VectorOperation::values,
                         const ArrayView<const SCALAR, MemorySpace::CUDA> &,
                         const ArrayView<SCALAR, MemorySpace::CUDA> &,
                         const ArrayView<SCALAR, MemorySpace::CUDA> &,
                         std::vector<MPI_Request> &) const;
#endif
  }
