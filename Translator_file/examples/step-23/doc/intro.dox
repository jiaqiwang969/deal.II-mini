examples/step-23/doc/intro.dox

<a name="Intro"></a>

<h1>Introduction</h1>

 @dealiiVideoLecture{28} 

这是一系列教程程序中的第一个，它将最终涵盖 "真正的 "时间依赖问题，而不是步骤18中发现的略显奇怪的时间依赖形式或步骤21的DAE模型。特别是，这个程序介绍了有界域中的波浪方程。后来，第24步将考虑一个吸收边界条件的例子，以及 @ref
step_25 "第25步 "一种产生称为孤子的解的非线性波方程。

波浪方程的原型形式如下：找到满足以下条件的 $u(x,t), x\in\Omega, t\in[0,T]$ 。

@f{eqnarray*}
	\frac{\partial^2 u}{\partial t^2}


	-
	\Delta u &=& f
	\qquad
	\textrm{in}\ \Omega\times [0,T],
\\
	u(x,t) &=& g
	\qquad
	\textrm{on}\ \partial\Omega\times [0,T],
\\
	u(x,0) &=& u_0(x)
	\qquad
	\textrm{in}\ \Omega,
\\
	\frac{\partial u(x,0)}{\partial t} &=& u_1(x)
	\qquad
	\textrm{in}\ \Omega.


@f}

请注意，由于这是一个具有二阶时间导数的方程，我们需要提出两个初始条件，一个是值，一个是解的时间导数。

在物理上，该方程描述了弹性介质的运动。在二维空间中，我们可以考虑膜在受到力的作用下如何运动。上面的Dirichlet边界条件表明，膜被夹在边界的高度 $g(x,t)$ （这个高度可能也在移动&mdash；想想人们拿着毯子上下摇晃）。第一个初始条件等于膜的初始偏转，而第二个初始条件给出了其速度。例如，我们可以考虑用手指把膜推下去，然后在 $t=0$ 处让它离开（非零偏转但零初始速度），或者在 $t=0$ 处用锤子砸它（零偏转但非零速度）。这两种情况都会引起膜的运动。




<h3>Time discretization</h3>

<h4>Method of lines or Rothe's method?</h4>在数值分析界有一个长期的争论，即时间依赖方程的离散化是否应该首先离散时间变量，导致每个时间步长的静止PDE，然后用标准的有限元技术来解决（这被称为Rothe方法），或者是否应该首先离散空间变量，导致一个大型的常微分方程系统，然后用一个通常的ODE求解器来处理（这被称为线的方法）。

这两种方法都有优点和缺点。传统上，人们更倾向于线的方法，因为它允许使用非常发达的高阶ODE求解器，可用于由这种方法产生的相当刚性的ODE，包括步长控制和时间误差的估计。

另一方面，当使用高阶时间步长法时，罗特的方法变得很尴尬，因为这时人们必须写下一个PDE，将当前时间步长的解与前一个时间步长的解结合起来，而且可能还有更早的解，从而导致大量的条款。

由于这些原因，线条法在很长一段时间内都是人们的首选方法。然而，它有一个很大的缺点：如果我们先将空间变量离散化，导致一个大的ODE系统，我们必须一劳永逸地选择一个网格。如果我们愿意这样做，那么这就是一种合法的、可能是优越的方法。

另一方面，如果我们看的是波浪方程和其他许多与时间有关的问题，我们会发现，随着时间的推移，解的特征会发生变化。例如，对于波浪方程，我们可能有一个单一的波浪穿过域，在波浪的前后，解是平滑的，甚至是恒定的&mdash;自适应性对于这种情况确实很有用，但关键是我们需要细化网格的区域会随着时间步数的变化而变化!

如果我们打算这样做，即为每个时间步长（或一组时间步长）选择不同的网格，那么线段法就不再合适了：我们不是得到一个变量数等于有限元网格中未知数数量的ODE系统，而是未知数的数量一直在变化，这是标准ODE求解器肯定不准备处理的事实。另一方面，对于罗特方法，我们只是在每个时间步长得到一个PDE，我们可以选择独立于前一个时间步长所用的网格进行离散化；这种方法并非没有危险和困难，但至少是一个合理的、定义明确的程序。

由于所有这些原因，在本程序中，我们选择使用Rothe方法进行离散化，即我们首先在时间上进行离散化，然后在空间上离散化。我们实际上根本不会使用自适应网格，因为这涉及到大量的额外代码，但我们将在<a href="#Results">results section below</a>中对此作一些评论。




<h4>Rothe's method!</h4>

鉴于这些考虑，我们将这样做：让我们首先为这个二阶问题定义一个简单的时间步进方法，然后在第二步做空间离散化，即我们将遵循Rothe的方法。

对于第一步，让我们先绕一点路：为了离散化一个第二时间导数，我们可以直接离散化它，或者引入一个额外的变量，将系统转化为一阶系统。在许多情况下，这证明是等价的，但处理一阶系统往往更简单。为此，让我们引入

@f[
	v = \frac{\partial u}{\partial t},


@f]

并称这个变量为<i>velocity</i>，原因很明显。然后，我们可以将原来的波浪方程重新表述如下。

@f{eqnarray*}
	\frac{\partial u}{\partial t}


	-
	v
	&=& 0
	\qquad
	\textrm{in}\ \Omega\times [0,T],
\\
	\frac{\partial v}{\partial t}


	-
	\Delta u &=& f
	\qquad
	\textrm{in}\ \Omega\times [0,T],
\\
	u(x,t) &=& g
	\qquad
	\textrm{on}\ \partial\Omega\times [0,T],
\\
	u(x,0) &=& u_0(x)
	\qquad
	\textrm{in}\ \Omega,
\\
	v(x,0) &=& u_1(x)
	\qquad
	\textrm{in}\ \Omega.


@f}

这个公式的优点是它现在只包含两个变量的第一时间导数，对于它来说，写下时间步进方案很简单。请注意，我们起初没有 $v$ 的边界条件。然而，我们可以在边界上强制执行 $v=\frac{\partial
g}{\partial t}$ 。在数值例子中发现，这实际上是必要的：如果不这样做，解决方案看起来并不特别错误，但如果不执行这些边界条件，Crank-Nicolson方案并不保存能量。

有了这个公式，让我们引入以下时间离散化，其中上标 $n$ 表示一个时间步长， $k=t_n-t_{n-1}$ 是当前时间步长。

\f{eqnarray*}
  \frac{u^n - u^{n-1}}{k}


  - \left[\theta v^n + (1-\theta) v^{n-1}\right] &=& 0,
  \\
  \frac{v^n - v^{n-1}}{k}


  - \Delta\left[\theta u^n + (1-\theta) u^{n-1}\right]
  &=& \theta f^n + (1-\theta) f^{n-1}.
\f} 注意我们在这里引入了一个参数 $\theta$ 。例如，如果我们选择 $\theta=0$ ，第一个方程将简化为 $\frac{u^n - u^{n-1}}{k}  - v^{n-1} = 0$ ，这就是众所周知的正向或显式欧拉方法。另一方面，如果我们设定 $\theta=1$ ，那么我们将得到 $\frac{u^n - u^{n-1}}{k}  - v^n = 0$ ，这对应于后向或隐式欧拉方法。这两种方法都是一阶精确方法。它们实现起来很简单，但其实并不十分精确。

第三种情况是选择 $\theta=\frac 12$  。然后上面的第一个方程将变成 $\frac{u^n - u^{n-1}}{k}


- \frac 12 \left[v^n + v^{n-1}\right] = 0$  。这种方法被称为Crank-Nicolson方法，它的优点是二阶精确。此外，它还有一个很好的特性，即保留了溶液中的能量（从物理上讲，能量是膜中粒子的动能加上由于局部拉伸而存在的势能的总和；这个量在连续方程中是一个守恒量，但大多数时间步进方案在时间离散化后并不保留它）。由于 $v^n$ 也出现在 $u^n$ 的方程中，Crank-Nicolson方案也是隐式的。

在程序中，我们将把 $\theta$ 作为一个参数，这样就很容易发挥它的作用了。结果部分将显示一些比较不同方案的数字证据。

上面的方程（称为<i>semidiscretized</i>方程，因为我们只离散了时间，而没有离散空间），可以通过从第一个方程中消除 $v^n$ 和重新排列项来简化一下。然后我们得到

\f{eqnarray*}
  \left[ 1-k^2\theta^2\Delta \right] u^n &=&
  	 \left[ 1+k^2\theta(1-\theta)\Delta\right] u^{n-1} + k v^{n-1}
   	 + k^2\theta\left[\theta f^n + (1-\theta) f^{n-1}\right],\\
   v^n &=& v^{n-1} + k\Delta\left[ \theta u^n + (1-\theta) u^{n-1}\right]
   + k\left[\theta f^n + (1-\theta) f^{n-1}\right].
\f}在这种形式下，我们看到，如果我们得到了前一个时间段的解 $u^{n-1},v^{n-1}$ ，那么我们就可以分别求解变量 $u^n,v^n$ ，也就是一次一个。这很方便。此外，我们认识到第一个方程中的算子是正定的，而第二个方程看起来特别简单。




<h3>Space discretization</h3>

我们现在已经得出了将时间 $u^n(x)$ 的近似（半离散）解 $v^n(x)$ 及其时间导数 $t_n$ 与前一个时间步骤 $t_{n-1}$ 的解 $u^{n-1}(x),v^{n-1}(x)$ 相关的方程。下一步是使用通常的有限元方法将空间变量离散化。为此，我们将每个方程与一个测试函数相乘，在整个域上进行积分，并在必要时进行部分积分。这就导致了

\f{eqnarray*}
  (u^n,\varphi) + k^2\theta^2(\nabla u^n,\nabla \varphi) &=&
  (u^{n-1},\varphi) - k^2\theta(1-\theta)(\nabla u^{n-1},\nabla \varphi)
  +
  k(v^{n-1},\varphi)
  + k^2\theta
  \left[
  \theta (f^n,\varphi) + (1-\theta) (f^{n-1},\varphi)
  \right],
  \\
  (v^n,\varphi)
   &=&
   (v^{n-1},\varphi)


    -
    k\left[ \theta (\nabla u^n,\nabla\varphi) +
    (1-\theta) (\nabla u^{n-1},\nabla \varphi)\right]
  + k
  \left[
  \theta (f^n,\varphi) + (1-\theta) (f^{n-1},\varphi)
  \right].
\f}

然后习惯于近似 $u^n(x) \approx u^n_h(x) = \sum_i
U_i^n\phi_i^n(x)$  ，其中 $\phi_i^n(x)$  是用于离散化 $n$  -个时间步长的形状函数， $U_i^n$  是解决方案的未知结点值。同样地， $v^n(x) \approx
v^n_h(x) = \sum_i V_i^n\phi_i^n(x)$  。最后，我们有前一个时间步骤的解，  $u^{n-1}(x) \approx u^{n-1}_h(x) = \sum_i
U_i^{n-1}\phi_i^{n-1}(x)$  和  $v^{n-1}(x) \approx v^{n-1}_h(x) = \sum_i
V_i^{n-1}\phi_i^{n-1}(x)$  。请注意，由于在我们到达时间步骤 $n$ 时，前一个时间步骤的解已经被计算出来了，所以 $U^{n-1},V^{n-1}$ 是已知的。此外，注意上一步的解可能是在不同的网格上计算的，所以我们必须使用形状函数  $\phi^{n-1}_i(x)$  。

如果我们将这些扩展插入上述方程，并用本网的测试函数进行测试，我们得到以下线性系统。

\f{eqnarray*}
  (M^n + k^2\theta^2 A^n)U^n &=&
  M^{n,n-1}U^{n-1} - k^2\theta(1-\theta) A^{n,n-1}U^{n-1}
  +
  kM^{n,n-1}V^{n-1}
  + k^2\theta
  \left[
  \theta F^n + (1-\theta) F^{n-1}
  \right],
  \\
  M^nV^n
   &=&
   M^{n,n-1}V^{n-1}


    -
    k\left[ \theta A^n U^n +
    (1-\theta) A^{n,n-1} U^{n-1}\right]
   + k
  \left[
  \theta F^n + (1-\theta) F^{n-1}
  \right],
\f} 其中

@f{eqnarray*}
	M^n_{ij} &=& (\phi_i^n, \phi_j^n),
	\\
	A^n_{ij} &=& (\nabla\phi_i^n, \nabla\phi_j^n),
	\\
	M^{n,n-1}_{ij} &=& (\phi_i^n, \phi_j^{n-1}),
	\\
	A^{n,n-1}_{ij} &=& (\nabla\phi_i^n, \nabla\phi_j^{n-1}),
	\\
	F^n_{i} &=& (f^n,\phi_i^n),
	\\
	F^{n-1}_{i} &=& (f^{n-1},\phi_i^n).


@f}



如果我们解决这两个方程，我们可以将解决方案向前推进一步，并进入下一个时间步骤。

值得注意的是，如果我们在每个时间步长选择相同的网格（事实上我们将在下面的程序中这样做），那么我们在时间步长 $n$ 和 $n-1$ 上有相同的形状函数，即 $\phi^n_i=\phi_i^{n-1}=\phi_i$  。因此，我们得到  $M^n=M^{n,n-1}=M$  和  $A^n=A^{n,n-1}=A$  。另一方面，如果我们使用了不同的形状函数，那么我们将不得不计算包含定义在两个网格上的形状函数的积分。这是一个有些混乱的过程，我们在此省略，但在步骤28中会有一些详细的处理。

在这些条件下（即网格不发生变化），我们可以通过基本消除第二个线性系统的解来优化求解过程。我们将在 @ref step_25 "step-25 "程序的介绍中讨论这个问题。

<h3>Energy conservation</h3>

比较时间步进方案质量的一个方法是看数值近似是否保留了连续方程的守恒特性。对于波浪方程来说，自然要看的是能量。通过将波浪方程乘以 $u_t$ ，对 $\Omega$ 进行积分，并在必要时进行部分积分，我们发现

@f[
	\frac{d}{d t}
	\left[\frac 12 \int_\Omega \left(\frac{\partial u}{\partial
	t}\right)^2 + (\nabla u)^2 \; dx\right]
	=
	\int_\Omega f \frac{\partial u}{\partial t} \; dx
	+
	\int_{\partial\Omega} n\cdot\nabla u
	\frac{\partial g}{\partial t} \; dx.


@f]

因此，在没有体力和恒定边界值的情况下，我们得到的结果是

@f[
	E(t) = \frac 12 \int_\Omega \left(\frac{\partial u}{\partial
	t}\right)^2 + (\nabla u)^2 \; dx


@f]

是一个守恒量，即一个不随时间变化的量。我们将在每个时间步骤后计算这个量。很容易看出，如果我们用有限元近似值代替 $u$ ，用速度的有限元近似值代替 $\frac{\partial u}{\partial t}$ ，那么

@f[
	E(t_n) = \frac 12 \left<V^n, M^n V^n\right>
	+
	\frac 12 \left<U^n, A^n U^n\right>.


@f]

正如我们将在结果部分看到的，Crank-Nicolson方案确实保存了能量，而前向和后向Euler方案都没有。




<h3>Who are Courant, Friedrichs, and Lewy?</h3>

波浪方程的数值求解很麻烦，原因之一是显式时间离散化只有在时间步长足够小的情况下才稳定。特别是，它与空间网格宽度有耦合关系  $h$  。对于我们这里使用的最低阶离散化，其关系为

@f[
	k\le \frac hc


@f]

其中 $c$ 是波速，在我们对波浪方程的表述中，它已被归一。因此，除非我们使用带有 $\theta>0$ 的隐式方案，否则如果我们违反这一限制，我们的解在数值上是不稳定的。隐式方案在稳定性方面没有这个限制，但如果时间步长过大，它们就会变得不准确了。

这一条件是由库兰特、弗里德里希斯和卢伊首先认识到的；在1928年，远在计算机可用于数值计算之前！（这一结果出现在德语文章R.库兰特、K.弗里德里希斯和H.卢伊中。这个结果出现在德语文章R.Courant, K. Friedrichs and H. Lewy:<i>&Uuml;ber die partiellen
Differenzengleichungen der mathematischen Physik</i>, Mathematische Annalen, vol. 100, no. 1, pages 32-74, 1928.)这个关于时间步长的条件最常被称为<i>CFL</i>条件。直观地说，CFL条件说的是，时间步长不能大于一个波穿过一个单元的时间。

在程序中，我们将对正方形 $[-1,1]^2$ 均匀地细化七次，得到的网格尺寸为 $h=\frac 1{64}$  ，这就是我们设置的时间步长。我们在两个不同的地方分别设置时间步长和网格尺寸是很容易出错的：很容易再细化一次网格，却忘记同时调整时间步长。   @ref
step_24  "step-24 "显示了一个更好的方法来保持这些东西的同步。




<h3>The test case</h3>

尽管该程序具有处理非零初始和边界条件以及体力的所有钩子，但我们采取一个简单的案例，即领域是一个正方形 $[-1,1]^2$ ，并且

@f{eqnarray*}
	f &=& 0,
	\\
	u_0 &=& 0,
	\\
	u_1 &=& 0,
	\\
	g &=& \left\{\begin{matrix}\sin (4\pi t)
	&\qquad& \text{for }\ t\le \frac 12, x=-1, -\frac 13<y<\frac 13
	\\
	 0
	&&\text{otherwise}
	\end{matrix}
	\right.


@f}

这相当于一个最初处于静止状态、四周被夹住的膜，有人将夹住的边界的一部分上下挥动一次，从而将波射入领域。


