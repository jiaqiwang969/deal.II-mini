examples/step-41/doc/intro.dox

 <br> 

<i>This program was contributed by Jörg Frohne (University of Siegen,
Germany) while on a long-term visit to Texas A&amp;M University.
<br>
This material is based upon work partly supported by ThyssenKrupp Steel Europe.
</i>


<a name="Intro"></a>

<h3>Introduction</h3>

这个例子是基于二维的拉普拉斯方程，涉及的问题是，如果一个膜被一些外力偏转，但也被一个障碍物所限制，会发生什么。换句话说，想想一个弹性膜在边界处被夹在一个矩形框架上（我们选择 $\Omega =
\left[-1,1\right]^2$ ），由于重力作用而下垂。如果膜下有一个障碍物，阻止它达到平衡位置，如果重力是唯一存在的力，现在会发生什么？在目前的例子程序中，我们将考虑在膜下有一个楼梯的障碍物，重力推着膜。

这个问题通常被称为 "障碍问题"（也见<a
href="http://en.wikipedia.org/wiki/Obstacle_problem">this Wikipedia article</a>），它的结果是一个变分不等式，而不是变成弱形式的变分方程。下面我们将从经典的表述中推导出它，但在我们继续讨论数学问题之前，让我们展示一下我们在这个教程程序中要考虑的问题的解决方式，以获得一些我们应该期待的直觉。

 <table align="center" class="tutorial" cellspacing="3" cellpadding="3">
  <tr>
    <td align="center">
        <img src="https://www.dealii.org/images/steps/developer/step-41.displacement.png" alt="">
    </td>
    <td align="center">
        <img src="https://www.dealii.org/images/steps/developer/step-41.active-set.png" alt="">
    </td>
  </tr>
</table> 

在这里，在左边，我们看到膜的位移。下面的障碍物的形状是清晰可见的。在右边，我们叠加了膜的哪些部分与障碍物接触。我们以后会把这组点称为 "活动集"，以表明这里有一个不等式约束在活动。




<h3>Classical formulation</h3>

该问题的经典表述具有以下形式。

@f{align*}


 -\textrm{div}\ \sigma &\geq f & &\quad\text{in } \Omega,\\
 \sigma &= \nabla u & &\quad\text{in } \Omega,\\
 u(\mathbf x) &= 0 & &\quad\text{on }\partial\Omega,\\
(-\Delta u - f)(u - g) &= 0 & &\quad\text{in } \Omega,\\
 u(\mathbf x) &\geq g(\mathbf x) & &\quad\text{in } \Omega


@f}

与 $u\in H^2(\Omega)$  。    $u$  是一个标量值函数，表示膜的垂直位移。第一个方程被称为平衡条件，有一个区域密度的力  $f$  。这里，我们将考虑这个力是重力。第二个方程被称为胡克定律，即应力 $\sigma$ 与位移 $u$ 的梯度成正比（比例常数，通常用 $E$ 表示，这里被设定为1，但不失一般性；如果它是常数，它可以被放入右边的函数）。在边界，我们有零迪里希特条件。很明显，前两个方程可以结合起来，得到 $-\Delta u \ge f$  。

直观地说，重力是向下作用的，所以 $f(\mathbf x)$ 是一个负函数（我们在这个程序中选择 $f=-10$ ）。那么，第一个条件意味着作用在膜上的总力是重力加上一些正值：即障碍物在它们两个接触的地方对膜施加的向上的力。这个额外的力有多大？我们还不知道（我们也不知道它实际作用的 "位置"），但它必须是使膜不穿透障碍物的。

上面的第四个等式和最后一个不等式构成了障碍条件，它必须在整个领域的每一点都成立。这两个条件中的后者意味着膜必须在任何地方都高于障碍物 $g(\mathbf x)$ 。倒数第二个方程，通常被称为 "互补条件"，说的是在膜不与障碍物接触的地方（即那些 $\mathbf x$ 的地方 $u(\mathbf x) - g(\mathbf x) \neq 0$ ），那么 $-\Delta u=f$ 在这些地方；换句话说，没有额外的力作用在那里，如预期的那样。另一方面，在 $u=g$ 的地方，我们可以有 $-\Delta u-f
\neq 0$ ，也就是说，可以有额外的力（尽管不一定要有：膜有可能只是接触而不是压住障碍物）。




<h3>Derivation of the variational inequality</h3>

获得障碍物问题的变量表述的一个明显方法是考虑总势能。

@f{equation*}
 E(u) \dealcoloneq \dfrac{1}{2}\int\limits_{\Omega} \nabla u \cdot \nabla u - \int\limits_{\Omega} fu.


@f}

我们必须找到以下最小化问题的解决方案 $u\in G$ 。

@f{equation*}
 E(u)\leq E(v)\quad \forall v\in G,


@f}

与可接受位移的凸集。

@f{equation*}
 G \dealcoloneq \lbrace v\in V: v\geq g \text{ a.e. in } \Omega\rbrace,\quad V\dealcoloneq H^1_0(\Omega).


@f}

这组数据照顾到了上述第三和第五个条件（边界值和互补条件）。

现在考虑 $E$ 的最小化器 $u\in G$ 和任何其他函数 $v\in
G$  。那么函数

@f{equation*}
 F(\varepsilon) \dealcoloneq E(u+\varepsilon(v-u)),\quad\varepsilon\in\left[0,1\right],


@f}

在 $\varepsilon = 0$ 处取最小值（因为 $u$ 是能量函数 $E(\cdot)$ 的最小值），因此，对于 $v$ 的任何选择， $F'(0)\geq 0$ 。请注意， $u+\varepsilon(v-u) = (1-\varepsilon)u+\varepsilon v\in G$  因为 $G$  的凸性。如果我们计算 $F'(\varepsilon)\vert_{\varepsilon=0}$ ，就可以得到我们要寻找的变异公式。

<i>Find a function $u\in G$ with</i>

@f{equation*}
 \left(\nabla u, \nabla(v-u)\right) \geq \left(f,v-u\right) \quad \forall v\in G.


@f}



这是变分不等式的典型形式，不仅仅是 $v$ 出现在双线性形式中，实际上还有 $v-u$  。原因是这样的：如果 $u$ 不受约束，那么我们可以在 $G$ 中找到测试函数 $v$ ，从而使 $v-u$ 可以有任何符号。通过选择测试函数 $v_1,v_2$ 使 $v_1-u = -(v_2-u)$ ，可以看出，只有当两边事实上相等时，不等式才能对 $v_1$ 和 $v_2$ 都成立，也就是说，我们得到一个变异的相等。

另一方面，如果 $u=g$ ，那么 $G$ 只允许测试函数 $v$ ，所以实际上 $v-u\ge 0$  。这意味着我们不能像上面那样用 $v-u$ 和 $-(v-u)$ 来测试这个方程，所以我们不能再得出两边实际上相等的结论。因此，这就模仿了我们上面讨论互补性条件的方式。




<h3>Formulation as a saddle point problem</h3>

上面的变分不等式在工作中是很尴尬的。因此，我们想把它重新表述为一个等价的鞍点问题。我们引入拉格朗日乘子 $\lambda$ 和拉格朗日乘子 $K\subset V'$ 、 $V'$ 的凸锥 $V$ 、 $K \dealcoloneq \{\mu\in V': \langle\mu,v\rangle\geq 0,\quad \forall
v\in V, v \le 0 \}$ 的对偶空间，其中 $\langle\cdot,\cdot\rangle$ 表示 $V'$ 和 $V$  之间的对偶性。直观地说， $K$ 是所有 "非正函数 "的锥体，除了 $K\subset (H_0^1)'$ ，所以也包含了除正函数之外的其他对象。这就产生了。

<i>Find $u\in V$ and $\lambda\in K$ such that</i>

@f{align*}
 a(u,v) + b(v,\lambda) &= f(v),\quad &&v\in V\\
 b(u,\mu - \lambda) &\leq \langle g,\mu - \lambda\rangle,\quad&&\mu\in K,


@f}

<i>with</i>

@f{align*}
 a(u,v) &\dealcoloneq \left(\nabla u, \nabla v\right),\quad &&u,v\in V\\
 b(u,\mu) &\dealcoloneq \langle u,\mu\rangle,\quad &&u\in V,\quad\mu\in V'.


@f}

换句话说，我们可以把 $\lambda$ 看作是障碍物对膜施加的额外正力的负数。上面陈述的第二行中的不等式似乎只有错误的符号，因为我们在 $\lambda=0$ 的地方有 $\mu-\lambda<0$ ，鉴于 $K$ 的定义。

Glowinski, Lions and Tr&eacute;moli&egrave;res.中阐述了这个鞍点问题 $(u,\lambda)\in V\times K$ 的存在性和唯一性。Numerical Analysis of Variational Inequalities, North-Holland, 1981.




<h3>Active Set methods to solve the saddle point problem</h3>

有不同的方法来解决变量不等式。作为一种可能性，你可以把鞍点问题理解为一个带有不等式约束的凸二次方程序（QP）。

为了达到这个目的，让我们假设我们用相同的有限元空间来离散 $u$ 和 $\lambda$ ，例如通常的 $Q_k$ 空间。然后我们会得到方程

@f{eqnarray*}
 &A U + B\Lambda = F,&\\
 &[BU-G]_i \geq 0, \quad \Lambda_i \leq 0,\quad \Lambda_i[BU-G]_i = 0
\qquad \forall i.&


@f}

其中 $B$ 是所选有限元空间上的质量矩阵，上面的指数 $i$ 是针对位于域内部的自由度集合 $\cal S$ 中的所有自由度（我们在周边有迪里希条件）。然而，如果我们在组合产生这个质量矩阵的所有项时使用一个特殊的正交规则，即一个正交公式，其中正交点只位于定义了形状函数的插值点；因为除了一个形状函数外，所有的形状函数在这些位置都是零，所以我们得到一个对角线质量矩阵，具有

@f{align*}
  B_{ii} = \int_\Omega \varphi_i(\mathbf x)^2\ \textrm{d}x,
  \qquad
  B_{ij}=0 \ \text{for } i\neq j.


@f}

为了定义 $G$ ，我们使用与 $B$ 相同的技术。换句话说，我们定义

@f{align*}
  G_{i} = \int_\Omega g_h(x) \varphi_i(\mathbf x)\ \textrm{d}x,


@f}

其中 $g_h$ 是 $g$ 的一个合适的近似值。然后， $B_{ii}$ 和 $G_i$ 定义中的积分由梯形规则近似。有了这个，上面的方程可以重述为

@f{eqnarray*}
 &A U + B\Lambda = F,&\\
 &U_i-B_{ii}^{-1}G_i \ge 0, \quad \Lambda_i \leq 0,\quad \Lambda_i[U_i-B_{ii}^{-1}G_i] = 0
\qquad \forall i\in{\cal S}.&


@f}



现在我们为每个自由度 $i$ 定义函数

@f{equation*}
 C([BU]_i,\Lambda_i) \dealcoloneq -\Lambda_i + \min\lbrace 0, \Lambda_i + c([BU]_i - G_i) \rbrace,


@f}

在这个程序中，我们选择 $c>0$ 。这是一种惩罚参数，取决于问题本身，需要选择足够大的参数；例如，如果我们使用7个全局细化，使用当前程序对 $c = 1$ 没有收敛作用）。)

经过一番挠头，人们可以说服自己，上面的不等式可以等效地改写为

@f{equation*}
 C([BU]_i,\Lambda_i) = 0, \qquad \forall i\in{\cal S}.


@f}

我们在这里将使用的原始-双重主动集策略是一个迭代方案，它基于这个条件来预测下一个主动集和非主动集 $\mathcal{A}_k$ 和 $\mathcal{F}_k$ （即那些指数 $i$ 的互补集，对于这些指数 $U_i$ 要么等于要么不等于障碍物的值 $B^{-1}G$  ）。关于这种方法的更深入的处理，见Hintermueller, Ito, Kunisch:The primal-dual active set strategy as a semismooth newton method, SIAM J. OPTIM., 2003, Vol.13, No.3, pp.865-888.

<h3>The primal-dual active set algorithm</h3>

初级-二级主动集方法的算法工作原理如下（注： $B = B^T$  ）。

1.初始化  $\mathcal{A}_k$  和  $\mathcal{F}_k$  ，使  $\mathcal{S}=\mathcal{A}_k\cup\mathcal{F}_k$  和  $\mathcal{A}_k\cap\mathcal{F}_k=\emptyset$  并设置  $k=1$  。2.找出满足@f{align*}
  AU^k + B\Lambda^k &= F,\\
  [BU^k]_i &= G_i\quad&&\forall i\in\mathcal{A}_k,\\
  \Lambda_i^k &= 0\quad&&\forall i\in\mathcal{F}_k.
 @f}的原始-双数对 $(U^k,\Lambda^k)$ 。

请注意，第二个和第三个条件意味着正好 $|S|$ 个未知数是固定的，第一个条件产生了确定 $U$ 和 $\Lambda$ 所需的剩余 $|S|$ 个方程。3.3. 用@f{equation*}
 \begin{split}
  \mathcal{A}_{k+1} \dealcoloneq \lbrace i\in\mathcal{S}:\Lambda^k_i + c([BU^k]_i - G_i)< 0\rbrace,\\
  \mathcal{F}_{k+1} \dealcoloneq \lbrace i\in\mathcal{S}:\Lambda^k_i + c([BU^k]_i - G_i)\geq 0\rbrace.
 \end{split}
 @f}定义新的活动和非活动集。

如果 $\mathcal{A}_{k+1}=\mathcal{A}_k$ （然后，显然也是 $\mathcal{F}_{k+1}=\mathcal{F}_k$ ），则停止，否则设置 $k=k+1$ 并转到步骤（2）。

该方法被称为 "原始-双重"，因为它同时使用原始变量（位移 $U$ ）以及双重变量（拉格朗日乘数 $\Lambda$ ）来确定下一个活动集。

在本节的最后，让我们补充两点意见。首先，对于任何满足这些条件的原始-双重对 $(U^k,\Lambda^k)$ ，我们可以区分以下几种情况。

1.   $\Lambda^k_i + c([BU^k]_i - G_i) < 0$  (i active)。     <br>  然后是 $[BU^k]_i<G_i$ 和 $\Lambda^k_i=0$ （渗透）或 $\Lambda^k_i<0$ 和 $[BU^k]_i=G_i$ （压载）。2.   $\Lambda^k_i + c([BU^k]_i - G_i)\geq 0$  (i不活动)。     <br>  然后是 $[BU^k]_i\geq G_i$ 和 $\Lambda^k_i=0$ （无接触）或 $\Lambda^k_i\geq0$ 和 $[BU^k]_i=G_i$ （无压迫负荷）。

第二，上面的方法在直觉上似乎是正确的，也是有用的，但有点临时性的。然而，它可以通过以下方式简明地推导出来。为此，请注意，我们要解决的是非线性系统

@f{eqnarray*}
 &A U + B\Lambda = F,&\\
 &C([BU-G]_i, \Lambda_i) = 0,
\qquad \forall i.&


@f}

我们可以通过始终围绕前一个迭代进行线性化（即应用牛顿方法）来迭代解决，但为此我们需要对不可微分的函数 $C(\cdot,\cdot)$ 进行线性化。也就是说，它是可微的，事实上我们有

@f{equation*}
 \dfrac{\partial}{\partial U^k_i}C([BU^k]_i,\Lambda^k_i) = \begin{cases}
                                   cB_{ii},& \text{if}\ \Lambda^k_i + c([BU^k]_i - G_i)< 0\\
                                   0,& \text{if}\ \Lambda^k_i + c([BU^k]_i - G_i)\geq 0.
                                  \end{cases}


@f}



@f{equation*}
 \dfrac{\partial}{\partial\Lambda^k_i}C([BU^k]_i,\Lambda^k_i) = \begin{cases}
                                   0,& \text{if}\ \Lambda^k_i + c([BU^k]_i - G_i)< 0\\


                                   -1,& \text{if}\ \Lambda^k_i + c([BU^k]_i - G_i)\geq 0.
                                  \end{cases}


@f}

这表明一个半光滑的牛顿步骤，其形式为

@f{equation*}
 \begin{pmatrix}
 A_{\mathcal{F}_k\mathcal{F}_k} & A_{\mathcal{F}_k\mathcal{A}_k} & B_{\mathcal{F}_k} & 0\\
 A_{\mathcal{A}_k\mathcal{F}_k} & A_{\mathcal{A}_k\mathcal{A}_k} & 0 & B_{\mathcal{A}_k}\\
 0 & 0 & -Id_{\mathcal{F}_k} & 0\\
 0 & cB_{\mathcal{A}_k} & 0 & 0
\end{pmatrix}
\begin{pmatrix}
 \delta U^k_{\mathcal{F}_k}\\ \delta U^k_{\mathcal{A}_k}\\ \delta \Lambda^k_{\mathcal{F}_k}\\ \delta \Lambda^k_{\mathcal{A}_k}
\end{pmatrix}
=


-\begin{pmatrix}
 (AU^k + \Lambda^k - F)_{\mathcal{F}_k}\\ (AU^k + \Lambda^k - F)_{\mathcal{A}_k}\\ -\Lambda^k_{\mathcal{F}_k}\\ c(B_{\mathcal{A}_k} U^k - G)_{\mathcal{A}_k}
\end{pmatrix},


@f}

其中，我们将矩阵  $A,B$  以及向量以自然的方式分成行和列，其索引属于活动集  ${\mathcal{A}_k}$  或非活动集  ${\mathcal{F}_k}$  。

我们也可以通过设置 $\delta U^k \dealcoloneq
U^{k+1} - U^k$ 和 $\delta \Lambda^k \dealcoloneq \Lambda^{k+1} - \Lambda^k$ 并将所有已知项带到右手边来解决我们感兴趣的变量，而不是求解更新 $\delta U, \delta \Lambda$  。这就得到了

@f{equation*}
\begin{pmatrix}
 A_{\mathcal{F}_k\mathcal{F}_k} & A_{\mathcal{F}_k\mathcal{A}_k} & B_{\mathcal{F}_k} & 0\\
 A_{\mathcal{A}_k\mathcal{F}_k} & A_{\mathcal{A}_k\mathcal{A}_k} & 0 & B_{\mathcal{A}_k}\\
 0 & 0 & Id_{\mathcal{F}_k} & 0\\
 0 & B_{\mathcal{A}_k} & 0 & 0
\end{pmatrix}
\begin{pmatrix}
 U^k_{\mathcal{F}_k}\\ U^k_{\mathcal{A}_k}\\ \Lambda^k_{\mathcal{F}_k}\\ \Lambda^k_{\mathcal{A}_k}
\end{pmatrix}
=
\begin{pmatrix}
 F_{\mathcal{F}_k}\\ F_{\mathcal{A}_k}\\ 0\\ G_{\mathcal{A}_k}
\end{pmatrix}.


@f}

这些是上文描述基本算法时概述的方程式。

我们甚至可以进一步推动这一点。很容易看出，我们可以消除第三行和第三列，因为它意味着 $\Lambda_{\mathcal{F}_k} = 0$  。

@f{equation*}
\begin{pmatrix}
 A_{\mathcal{F}_k\mathcal{F}_k} & A_{\mathcal{F}_k\mathcal{A}_k} & 0\\
 A_{\mathcal{A}_k\mathcal{F}_k} & A_{\mathcal{A}_k\mathcal{A}_k} & B_{\mathcal{A}_k}\\
 0 & B_{\mathcal{A}_k} & 0
\end{pmatrix}
\begin{pmatrix}
 U^k_{\mathcal{F}_k}\\ U^k_{\mathcal{A}_k}\\ \Lambda^k_{\mathcal{A}_k}
\end{pmatrix}
=
\begin{pmatrix}
 F_{\mathcal{F}_k}\\ F_{\mathcal{A}_k}\\ G_{\mathcal{A}_k}
\end{pmatrix}.


@f}

这表明，事实上我们只需要解决位于活动集上的拉格朗日乘数。通过考虑第二行，我们将通过以下方式恢复全部拉格朗日乘数向量

@f{equation*}
 \Lambda^k_S = B^{-1}\left(f_{\mathcal{S}} - A_{\mathcal{S}}U^k_{\mathcal{S}}\right).


@f}

由于第三行和 $B_{\mathcal{A}_k}$ 是一个对角线矩阵的事实，我们能够直接计算出 $U^k_{\mathcal{A}_k}=B^{-1}_{\mathcal{A}_k}G_{\mathcal{A}_k}$ 。因此，我们也可以把线性系统写成如下。

@f{equation*}
\begin{pmatrix}
 A_{\mathcal{F}_k\mathcal{F}_k} & 0\\
 0 & Id_{\mathcal{A}_k} \\
\end{pmatrix}
\begin{pmatrix}
 U^k_{\mathcal{F}_k}\\ U^k_{\mathcal{A}_k}
\end{pmatrix}
=
\begin{pmatrix}
 F_{\mathcal{F}_k} - A_{\mathcal{F}_k\mathcal{A}_k}B^{-1}_{\mathcal{A}_k}G_{\mathcal{A}_k}
 \\
 B_{\mathcal{A}_k}^{-1}G_{\mathcal{A}_k}
\end{pmatrix}.


@f}

幸运的是，这种形式很容易得出：我们只需建立通常的拉普拉斯线性系统即可

@f{equation*}
\begin{pmatrix}
 A_{\mathcal{F}_k\mathcal{F}_k} & A_{\mathcal{F}_k\mathcal{A}_k} \\
 A_{\mathcal{A}_k\mathcal{F}_k} & A_{\mathcal{A}_k\mathcal{A}_k}
\end{pmatrix}
\begin{pmatrix}
 U^k_{\mathcal{F}_k}\\ U^k_{\mathcal{A}_k}
\end{pmatrix}
=
\begin{pmatrix}
 F_{\mathcal{F}_k}\\ F_{\mathcal{A}_k}
\end{pmatrix},


@f}

然后让AffineConstraints类消除所有受限自由度，即 $U^k_{\mathcal{A}_k}=B^{-1}_{\mathcal{A}_k}G_{\mathcal{A}_k}$ ，其方式与 $\mathcal{A}_k$ 中的自由度是Dirichlet数据一样。结果线性系统（上面的第二个到最后一个）是对称和正定的，我们用CG方法和Trilinos的AMG预处理程序来解决它。




<h3>Implementation</h3>

本教程与第4步很相似。程序的总体结构遵循步骤4，但略有不同。

- 我们需要两个新的方法，  <code>assemble_mass_matrix_diagonal</code>  和  <code>update_solution_and_constraints</code>  。

- 我们需要新的成员变量来表示我们这里的约束。

- 我们改变求解器的预处理程序。


如果你想了解目前的计划，你可能想阅读一下步骤4。


