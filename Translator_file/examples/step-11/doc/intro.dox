examples/step-11/doc/intro.dox

<a name="Intro"></a>

<h1>Introduction</h1>

我们要考虑的问题是只带诺伊曼边界条件的拉普拉斯问题的解决方案。

@f{eqnarray*}


  -\Delta u &=& f \qquad \mathrm{in}\ \Omega,
  \\
  \partial_n u &=& g \qquad \mathrm{on}\ \partial\Omega.


@f}

众所周知，如果这个问题要有一个解决方案，那么力需要满足兼容性条件

@f[
  \int_\Omega f\; dx + \int_{\partial\Omega} g\; ds = 0.


@f]

我们将考虑这样的特殊情况： $\Omega$ 是围绕原点的半径为1的圆，而 $f=-2$  ， $g=1$  。这种选择满足了兼容性条件。

兼容性条件允许上述方程的解，但它仍然保留了一个模糊性：因为只有解的导数出现在方程中，解只确定到一个常数。出于这个原因，我们必须为数字解提出另一个条件，以固定这个常数。

对于这一点，有多种可能性。<ol>  <li>  将离散化的一个节点固定为零或任何其他固定值。   这相当于一个附加条件  $u_h(x_0)=0$  。虽然这是常见的做法，但不一定是个好主意，因为我们知道拉普拉斯方程的解只在  $H^1$  中，这不允许定义点值，因为它不是连续函数的子集。因此，即使固定一个节点对离散函数来说是允许的，但对连续函数来说是不允许的，在数值解的这一点上，人们常常可以看到由此产生的错误尖峰。

 <li>  将域上的均值固定为零或任何其他值。这在连续水平上是允许的，因为 $H^1(\Omega)\subset L^1(\Omega)$ 由Sobolev不等式决定，因此在离散水平上也是允许的，因为我们那里只考虑 $H^1$ 的子集。

 <li>  将域的边界上的均值固定为零或任何其他值。这在连续水平上也是允许的，因为 $H^{1/2}(\partial\Omega)\subset L^1(\partial\Omega)$  ，同样由Sobolev的不等式。   </ol>  我们将选择最后一种可能性，因为我们想用它来演示另一种技术。

虽然这描述了要解决的问题，但我们仍然要弄清楚如何实现它。基本上，除了额外的均值约束，我们已经多次解决了这个问题，使用的是迪里希特边界值，我们只需要放弃对迪里希特边界节点的处理。高阶映射的使用也是相当琐碎的，我们会在使用它的各个地方进行解释；在几乎所有可以想象的情况下，你只会把描述映射的对象视为一个黑盒子，你不需要担心，因为它们的唯一用途似乎是被传递到库的深处，在那里函数知道如何处理它们（即在 <code>FEValues</code> 类及其后代）。

这个程序中的棘手之处在于对均值约束的使用。幸运的是，库中有一个知道如何处理这种约束的类，我们已经经常使用它了，没有提到它的通用性。请注意，如果我们假设边界节点沿边界的间隔是相等的，那么均值约束

@f[
  \int_{\partial \Omega} u(x) \; ds = 0


@f]

可写为

@f[
  \sum_{i\in\partial\Omega_h} u_i = 0,


@f]

其中总和应贯穿位于计算域边界上的所有自由度指数。让我们用 $i_0$ 表示边界上数字最小的指数（或任何其他方便选择的指数），那么这个约束也可以用以下方式表示

@f[
  u_{i_0} = \sum_{i\in\partial\Omega_h\backslash i_0} -u_i.


@f]

幸运的是，这正是AffineConstraints类所设计的约束形式。请注意，我们在之前的几个例子中使用了这个类来表示悬空节点的约束，它也有这种形式：在这里，中间的顶点应具有相邻顶点的平均值。一般来说，AffineConstraints类被设计用来处理以下形式的仿生约束

@f[
  CU = b


@f]

其中 $C$ 表示一个矩阵， $b$ 表示一个向量， $U$ 是节点值的向量。在这种情况下，由于 $C$ 代表一个同质约束， $b$ 是零向量。

在这个例子中，沿边界的平均值允许这样的表示， $C$ 是一个只有一行的矩阵（即只有一个约束条件）。在实现中，我们将创建一个AffineConstraints对象，添加一个参考第一个边界节点 $i_0$ 的约束（即给矩阵添加另一行），并插入所有其他节点贡献的权重，在这个例子中刚好是 $-1$  。

稍后，我们将使用这个对象来消除线性方程组中的第一个边界节点，将其还原为一个没有常数偏移值的解。实施过程中的一个问题是，这个节点的明确消除会导致矩阵中出现一些额外的元素，我们事先不知道这些元素的位置，也不知道矩阵的每一行中会有多少额外的条目。我们将展示我们如何使用一个中间对象来解决这个问题。

但现在开始实施解决这个问题的方案......


