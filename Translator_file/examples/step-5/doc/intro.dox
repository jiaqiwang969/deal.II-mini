examples/step-5/doc/intro.dox

<a name="Intro"></a>

<h1>Introduction</h1>

 @dealiiVideoLecture{14} 

这个例子并没有显示出革命性的新东西，但它显示了许多比以前的例子更小的改进，也显示了许多通常可以在有限元程序中发现的小东西。其中包括。   <ul>   <li>  在连续细化的网格上进行计算。至少在数学科学中，在一个层次的网格上计算解是很常见的，以便对解的精度有一个感觉；如果你在一个网格上只有一个解，你通常无法猜测解的精度。此外，deal.II被设计用来支持自适应算法，其中在连续细化的网格上的迭代求解是算法的核心。虽然在这个例子中没有使用自适应网格，但这里为它们奠定了基础。     <li>  在实际应用中，领域经常被自动网格生成器细分为三角形。为了使用它们，从文件中读取粗大的网格是很重要的。在这个例子中，我们将读取一个UCD（非结构化单元数据）格式的粗网格。当这个程序在2000年左右首次编写时，UCD格式是AVS Explorer所使用的--这个程序在当时被合理地广泛使用，但现在已经不再重要了。尽管如此，该文件格式仍然存在，并且仍然被一些程序所理解）。     <li>  有限元程序通常会使用大量的计算时间，所以有时需要进行一些优化。我们将展示其中的一些。     <li>  另一方面，有限元程序往往是相当复杂的，所以调试是一个重要方面。我们通过使用断言来支持安全编程，断言在调试模式下检查参数和%内部状态的有效性，但在优化模式下被删除。(  @dealiiVideoLectureSeeAlso{18})   <li>  关于数学方面，我们展示了如何支持椭圆算子中的可变系数，以及如何对线性方程组使用预处理迭代求解器。   </ul> 

这里要解决的方程式如下。

@f{align*}


  -\nabla \cdot a(\mathbf x) \nabla u(\mathbf x) &= 1 \qquad\qquad & \text{in}\ \Omega,
  \\
  u &= 0 \qquad\qquad & \text{on}\ \partial\Omega.


@f}

如果 $a(\mathbf x)$ 是一个恒定的系数，这就只是泊松方程了。然而，如果它确实是空间可变的，它就是一个更复杂的方程（通常被称为 "扩展泊松方程"）。根据变量 $u$ 所指的内容，它可以模拟各种情况，具有广泛的适用性。

- 如果 $u$ 是电动势，那么 $-a\nabla u$ 是介质中的电流，系数 $a$ 是介质在任何特定点的电导率。在这种情况下，方程的右侧将是电源密度，通常为零或由局部的、类似德尔塔的函数组成）。

- 如果 $u$ 是薄膜的垂直挠度，那么 $a$ 将是对局部刚度的测量。这就是让我们解释下面结果部分所显示的图像的解释。

由于拉普拉斯/泊松方程出现在如此多的场合中，因此除了上面列出的两种解释外，还有许多其他解释。

当组装这个方程的线性系统时，我们需要弱的形式，这里的内容如下。

@f{align*}
  (a \nabla \varphi, \nabla u) &= (\varphi, 1) \qquad \qquad \forall \varphi.


@f}

 <code>assemble_system</code> 函数中的实现紧随其后。


