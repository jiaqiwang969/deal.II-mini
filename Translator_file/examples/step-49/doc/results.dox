examples/step-49/doc/results.dox



<h1>Results</h1>

该程序产生一系列 <code>.vtu</code> 的三角形文件。这些方法已在上文讨论。




<h3>Next steps: Curved Cells</h3>

正如介绍中提到的，使用这里讨论的方法创建一个粗略的网格只是第一步。为了细化网格，Triangulation需要知道在边、面和单元格的中点上放置新的顶点。默认情况下，这些新的点会被放置在周围点的算术平均值上，但如果你需要的是粗略网格没有充分解决的弯曲边界，这并不是你想要的。例如，对于这个网格，中心孔应该是圆形的。

 <img src="https://www.dealii.org/images/steps/developer/step-49.grid-2a.png" alt="" height="200px"> 

如果你只是简单地细化它，三角测量类就不能知道你是想让孔变成圆形还是八角形。默认的做法是沿着现有的直线放置新的点。经过两个网格细化步骤后，这将产生以下的网格，这不是我们想要的。

 <img src="https://www.dealii.org/images/steps/developer/step-49.grid-2d-refined.png" alt="" height="200px"> 

需要发生的是，你告诉三角函数，你实际上是想使用一个弯曲的几何体。做到这一点的方法需要三个步骤。

- 创建一个描述所需几何图形的对象。这个对象将在细化三角图以获得新的点位置时被查询。如果在系统组装过程中使用了MappingQ或MappingQGeneric这样的高阶映射，它也将被用来计算形状函数值。   在deal.II中，Manifold类和继承自它的类（如PolarManifold和FlatManifold）执行这些计算。

- 通知Triangulation对象使用哪个Manifold类。默认情况下，Triangulation使用FlatManifold来进行所有的几何计算，它假定所有的单元格边缘都是直线，所有的四边形都是平的。你可以通过调用 Triangulation::set_manifold 函数将Manifold类附加到Triangulation上，该函数将 <code>manifold_id</code> 与Manifold对象关联。关于这方面的更多信息，请参见 @ref GlossManifoldIndicator "关于这个主题的词汇表条目"。

- 最后，你必须用正确的 <code>manifold_id</code> 标记单元和单元面。例如，你可以通过以下方式得到一个在直角坐标中带有弯曲单元的环形扇面（但在极坐标中是矩形）。   @code
  Triangulation<2> tria;
  GridGenerator::hyper_cube(tria);
  const auto cell = tria.begin_active();
  cell->vertex(2) = Point<2>(-0.5, 1.0);
  cell->vertex(3) = Point<2>(1.5, 1.0);
  tria.set_all_manifold_ids(42);
  tria.set_manifold(42, PolarManifold<2>(Point<2>(0.5, -1.0)));
  tria.refine_global(3);
  @endcode

  现在，当网格被细化时，所有的单元格分割计算都将在极坐标中进行。

GridGenerator命名空间中的所有函数，如果创建的网格中的某些单元应该是弯曲的，也会将正确的Manifold对象附加到所提供的Triangulation上：也就是说，对于这些函数，我们默认会得到正确的行为。然而，对于手工生成的网格，情况要有趣得多。

为了更详细地说明这个过程，让我们考虑一个由Yuhan Zhou创建的例子，作为2013年德克萨斯A&amp;M大学的一个学期项目的一部分。目标是生成（和使用）一个描述微观结构的电气设备的几何体。在一个CAD程序中，这个几何体看起来像这样。

 <img src="https://www.dealii.org/images/steps/developer/step-49.yuhan.1.png" alt=""> 

在下文中，我们将引导你完成为这个几何体创建网格的整个过程，包括通过展示可能出错的一些常见陷阱。

实现这一目标的第一步是创建一个粗略的网格，通过为每个截面创建一个2D粗略的网格，将它们挤压到第三个方向，然后将它们粘在一起。下面的代码使用之前描述的技术来完成这个工作。

@code
// Given a list of points and how vertices connect to cells, create a
// mesh. This is in the same way as we do in step 14.
void create_2d_grid(
  const std::vector<Point<2>> &vertices,
  const std::vector<
    std::array<unsigned int, GeometryInfo<2>::vertices_per_cell>>
    &               vertex_indices,
  Triangulation<2> &coarse_grid)
{
  std::vector<CellData<2>> cells(vertex_indices.size());
  for (unsigned int i = 0; i < cells.size(); ++i)
    {
      for (unsigned int j = 0; j < vertex_indices[i].size(); ++j)
        cells[i].vertices[j] = vertex_indices[i][j];
    }


  coarse_grid.create_triangulation(vertices, cells, SubCellData());
}



// Create a triangulation that covers the entire volume
void create_3d_grid(Triangulation<3> &triangulation)
{
  // Generate first cross section
  const std::vector<Point<2>> vertices_1{{-1.5, 0.},
                                         {-0.5, 0.},
                                         {0.5, 0.},
                                         {1.5, 0.},


                                         {-1.5, 1.5},
                                         {-0.5, 1.5},
                                         {0.5, 1.5},
                                         {1.5, 1.5},


                                         {-1.5, 3.},
                                         {-0.5, 3.},
                                         {0.5, 3.},
                                         {1.5, 3.},


                                         {-0.5, 3 + 0.5 * sqrt(3)},
                                         {0.5, 3 + 0.5 * sqrt(3)},


                                         {-0.75, 3 + 0.75 * sqrt(3)},
                                         {0.75, 3 + 0.75 * sqrt(3)}};


  const std::vector<std::array<unsigned int, GeometryInfo<2>::vertices_per_cell>>
    cell_vertices_1 = {{{0, 1, 4, 5}},
                       {{1, 2, 5, 6}},
                       {{3, 7, 2, 6}},
                       {{4, 5, 8, 9}},
                       {{5, 6, 9, 10}},
                       {{7, 11, 6, 10}},
                       {{8, 9, 14, 12}},
                       {{9, 10, 12, 13}},
                       {{11, 15, 10, 13}},
                       {{14, 12, 15, 13}}};


  // Copy vertices into a 2d triangulation
  Triangulation<2> triangulation_2d_1;
  create_2d_grid(vertices_1, cell_vertices_1, triangulation_2d_1);


  // Then extrude it into a 3d piece
  Triangulation<3> triangulation_3d_1;
  GridGenerator::extrude_triangulation(triangulation_2d_1,
                                       5,
                                       2.5,
                                       triangulation_3d_1);


  // Now do the same with the second volume
  const std::vector<Point<2>> vertices_2{{-2.5, 0.},
                                         {-1.5, 0.},
                                         {-0.5, 0.},
                                         {0.5, 0.},
                                         {1.5, 0.},
                                         {2.5, 0.},


                                         {-2.5, 1.5},
                                         {-1.5, 1.5},
                                         {-0.5, 1.5},
                                         {0.5, 1.5},
                                         {1.5, 1.5},
                                         {2.5, 1.5},


                                         {-2.5, 3.},
                                         {-1.5, 3.},
                                         {-0.5, 3.},
                                         {0.5, 3.},
                                         {1.5, 3.},
                                         {2.5, 3.},


                                         {-0.5, 3. + 0.5 * sqrt(3)},
                                         {0.5, 3. + 0.5 * sqrt(3)},


                                         {-0.75, 3. + 0.75 * sqrt(3)},
                                         {0.75, 3. + 0.75 * sqrt(3)},


                                         {-1.25, 3. + 1.25 * sqrt(3)},
                                         {1.25, 3. + 1.25 * sqrt(3)}};


  const std::vector<std::array<unsigned int, GeometryInfo<2>::vertices_per_cell>>
    cell_vertices_2 = {{{0, 1, 6, 7}},
                       {{1, 2, 7, 8}},
                       {{2, 3, 8, 9}},
                       {{4, 10, 3, 9}},
                       {{5, 11, 4, 10}},
                       {{6, 7, 12, 13}},
                       {{7, 8, 13, 14}},
                       {{8, 9, 14, 15}},
                       {{10, 16, 9, 15}},
                       {{11, 17, 10, 16}},
                       {{12, 13, 22, 20}},
                       {{13, 14, 20, 18}},
                       {{14, 15, 18, 19}},
                       {{16, 21, 15, 19}},
                       {{17, 23, 16, 21}},
                       {{20, 18, 21, 19}},
                       {{22, 20, 23, 21}}};


  Triangulation<2> triangulation_2d_2;
  create_2d_grid(vertices_2, cell_vertices_2, triangulation_2d_2);


  Triangulation<3> triangulation_3d_2;
  GridGenerator::extrude_triangulation(triangulation_2d_2,
                                       5,
                                       2.5,
                                       triangulation_3d_2);


  // Also shift this triangulation in the z-direction so that it matches the
  // end face of the first part
  GridTools::shift(Point<3>(0, 0, 2.5), triangulation_3d_2);


  // Now first merge these two pieces, then shift the first piece in
  // z-direction beyond the second, and merge the shifted piece with the two
  // previously merged one into the final one:
  Triangulation<3> triangulation_3d_tmp;
  GridGenerator::merge_triangulations(triangulation_3d_1,
                                      triangulation_3d_2,
                                      triangulation_3d_tmp);


  GridTools::shift(Point<3>(0, 0, 5), triangulation_3d_1);


  GridGenerator::merge_triangulations(triangulation_3d_tmp,
                                      triangulation_3d_1,
                                      triangulation);
}
@endcode



这就形成了以下的网格。

<img src="https://www.dealii.org/images/steps/developer/step-49.yuhan.8.png" alt="" width="400" height="355">

这个网格具有正确的一般形状，但是顶部的单元现在是多边形的：它们的边缘不再是沿着圆的，我们没有非常准确地表示原始几何形状。下一步是教给域的顶部部分，它应该是弯曲的。换句话说，所有在顶部边界单元上进行的计算都应该以圆柱坐标而不是笛卡尔坐标进行。我们可以通过创建一个CylindricalManifold对象并将其与上面的单元格相关联来做到这一点  $y = 3$  。这样，当我们细化上面的单元时，我们将沿着同心圆而不是直线来放置新的点。

在deal.II中，我们用继承自Manifold的类来描述所有的几何体。默认的几何图形是笛卡尔的，在FlatManifold类中实现。顾名思义，Manifold及其继承类提供了一种用微分几何的思想和术语来描述曲线和曲线单元的一般方法：例如，CylindricalManifold继承自ChartManifold，它通过回拉和前推来描述几何体。一般来说，人们应该认为Triangulation类描述了一个域的拓扑结构（当然，除了存储顶点的位置之外），而Manifold类描述了一个域的几何结构（例如，一对顶点是否位于圆弧或直线上）。Triangulation将通过对与该单元相关的Manifold进行计算来细化单元，而不管该单元是否在边界上。换句话说：Manifold类不需要任何关于Triangulation边界实际位置的信息：由Triangulation来查询正确的Manifold，以便对单元格进行计算。大多数的Manifold函数（例如， Manifold::get_intermediate_point) ）对域本身一无所知，只是假设给它的点是沿着测地线的。在这种情况下，在下面构建的CylindricalManifold中，测地线是沿正交于 $z$ 轴的圆弧，以直线 $(0, 3, z)$ 为中心。

由于领域的三个顶部部分都使用相同的测地线，我们将把所有中心在 $y = 3$ 线以上的单元格标记为圆柱形的性质。

@code
const Tensor<1, 3>           axis({0.0, 0.0, 1.0});
const Point<3>               axial_point(0, 3.0, 0.0);
const CylindricalManifold<3> cylinder(axis, axial_point);
const types::manifold_id     cylinder_id = 8;


Triangulation<3> triangulation;
create_3d_grid(triangulation);
triangulation.set_manifold(cylinder_id, cylinder);


for (auto &cell : triangulation.active_cell_iterators())
  if (cell->center()[1] >= 3.0)
    cell->set_all_manifold_ids(cylinder_id);


triangulation.refine_global(1);
@endcode



通过这段代码，我们得到一个看起来像这样的网格。

<img src="https://www.dealii.org/images/steps/developer/step-49.yuhan.9.png" alt="" width="400" height="355">

这一变化修复了边界，但产生了一个新的问题：与圆柱体轴线相邻的单元格严重扭曲。我们应该使用笛卡尔坐标对这些中心单元进行计算以避免这个问题。沿着中心线的单元格都有一个面接触到线 $(0, 3, z)$ ，所以，为了实现这一点，我们回去把这些单元格上的 <code>manifold_id</code> s改写为0（这是默认的）。

@code
const Tensor<1, 3>           axis({0.0, 0.0, 1.0});
const Point<3>               axial_point(0, 3.0, 0.0);
const CylindricalManifold<3> cylinder(axis, axial_point);
const types::manifold_id     cylinder_id = 8;


Triangulation<3> triangulation;
create_3d_grid(triangulation);
triangulation.set_manifold(cylinder_id, cylinder);


for (auto &cell : triangulation.active_cell_iterators())
  if (cell->center()[1] >= 3.0)
    cell->set_all_manifold_ids(cylinder_id);


for (const auto &cell : triangulation.active_cell_iterators())
  for (const auto &face : cell->face_iterators())
    {
      const Point<3> face_center = face->center();
      if (std::abs(face_center[0]) < 1.0e-5 &&
          std::abs(face_center[1] - 3.0) < 1.0e-5)
        cell->set_all_manifold_ids(numbers::flat_manifold_id);
    }


triangulation.refine_global(1);
@endcode



这给了我们以下的网格。

<img src="https://www.dealii.org/images/steps/developer/step-49.yuhan.10.png" alt="" width="400" height="355">

这给了我们一个很好的网格，每个圆心的单元仍然是笛卡尔的，而边界周围的单元是沿着圆的。如果我们再细化两次，我们可以真正看到边界拟合网格的良好细节。

<img src="https://www.dealii.org/images/steps/developer/step-49.yuhan.11.png" alt="" width="400" height="355">




<h3> Possibilities for extensions </h3>

<h4> Assigning different boundary ids </h4>

为本教程中描述的以某种形式生成的网格分配不同的边界ID，以应用不同的边界条件，通常是很有用的。

例如，你可能想对这个程序中第一个网格的右边边界应用不同的边界条件。要做到这一点，遍历单元格和它们的面，确定正确的面（例如使用`cell->center()`来查询单元格中心的坐标，就像我们在步骤1中做的那样，或者使用`cell->face(f)->get_boundary_id()`来查询该单元格第 $f$ 个面的当前边界指标）。然后你可以使用`cell->face(f)->set_boundary_id()`来设置边界指标为不同的内容。你可以回顾一下步骤1，看看网格的迭代是如何进行的。

<h4> Extracting a boundary mesh </h4>

在流形上的计算，就像在step-38中做的那样，需要一个嵌入到高维空间的曲面网格。虽然有些网格可以用GridGenerator命名空间来构建或者从文件中加载，但有时从体积网格中提取一个表面网格也是很有用的。

使用函数  GridGenerator::extract_boundary_mesh()  来提取网格的表面元素。在一个三维网格上使用这个函数（一个`三角网格<3,3>`，例如从`grid_4()`），这将返回一个`三角网格<2,3>`，你可以在步骤38中使用。  也可以尝试提取一个`三角网格<2,2>`的边界网格。


<!--

本教程可能的扩展。

- 用于收敛研究的非结构化网格数据库

- 如何删除或禁用网格内的一个单元格

-->


