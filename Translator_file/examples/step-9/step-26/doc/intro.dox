examples/step-26/doc/intro.dox

<a name="Intro"></a>

<h1>Introduction</h1>

 @dealiiVideoLecture{29,30}  （  @dealiiVideoLectureSeeAlso{31.7})  。


这个程序实现了热方程

@f{align*}
  \frac{\partial u(\mathbf x, t)}{\partial t}


  -
  \Delta u(\mathbf x, t)
  &=
  f(\mathbf x, t),
  \qquad\qquad &&
  \forall \mathbf x \in \Omega, t\in (0,T),
  \\
  u(\mathbf x, 0) &= u_0(\mathbf x) &&
  \forall \mathbf x \in \Omega, \\
  \\
  u(\mathbf x, t) &= g(\mathbf x,t) &&
  \forall \mathbf x \in \partial\Omega, t \in (0,T).


@f}

从某种意义上说，这个方程比我们在前面的程序步骤23、步骤24、步骤25中讨论的方程，即波浪方程要简单。这是由于热方程随着时间的推移使解变得平滑，因此在许多方面更宽容。例如，当使用隐式时间步长方法时，我们实际上可以采取大的时间步长，我们对通过每隔几步适应网格而引入的小干扰的麻烦较小，等等。

我们在这里的目标将是使用theta-scheme解决上述方程，该方程在时间上离散，使用以下方法，我们希望 $u^n(\mathbf x)$ 在某个时间 $t_n$ 近似 $u(\mathbf x, t_n)$  。

@f{align*}
  \frac{u^n(\mathbf x)-u^{n-1}(\mathbf x)}{k_n}


  -
  \left[
  (1-\theta)\Delta u^{n-1}(\mathbf x)
  +
  \theta\Delta u^n(\mathbf x)
  \right]
  &=
  \left[
  (1-\theta)f(\mathbf x, t_{n-1})
  +
  \theta f(\mathbf x, t_n)
  \right].


@f}

这里， $k_n=t_n-t_{n-1}$ 是时间步长。Theta-scheme概括了显式欧拉（  $\theta=0$  ）、隐式欧拉（  $\theta=1$  ）和Crank-Nicolson（  $\theta=\frac 12$  ）时间离散。由于后者具有最高的收敛顺序，我们将在下面的程序中选择 $\theta=\frac 12$ ，但要使这个参数的操作保持简单。如果你对玩更高阶的方法感兴趣，可以看一下步骤52）。

鉴于这种时间离散化，空间离散化会像往常一样发生，通过与测试函数相乘，通过部分积分，然后将一切限制在一个有限维的子空间。在与 $k_n$ 相乘之后，这就产生了以下一组完全离散的方程。

@f{align*}
  M U^n-MU^{n-1}
  +
  k_n \left[
  (1-\theta)A U^{n-1}
  +
  \theta A U^n
  \right]
  &=
  k_n
  \left[
  (1-\theta)F^{n-1}
  +
  \theta F^n
  \right],


@f}

其中 $M$ 是质量矩阵， $A$ 是将拉普拉斯离散化后的刚度矩阵。将所有已知的量带到右手边，就得到了我们在每一步都要解决的线性系统。

@f{align*}
  (M
  +
  k_n \theta A) U^n
  &=
  MU^{n-1}


  -
  k_n
  (1-\theta)A U^{n-1}
  +
  k_n
  \left[
  (1-\theta)F^{n-1}
  +
  \theta F^n
  \right].


@f}

左手边的线性系统是对称和正定的，所以我们用共轭梯度法解决它应该没有问题。

如果我们在初始时间有一组节点系数 $U^0$ ，我们可以开始上面的迭代。在这里，我们采取的是将初始值 $u_0(\mathbf x)$ 插值到用于第一个时间步长的网格上得到的那些。我们还需要选择一个时间步长；在这里我们只选择固定的时间步长，但显然先进的模拟器会希望自适应地选择它。我们将在<a href="#Results">results section
below</a>中简要地回到这个问题。




<h3> Adapting meshes for time dependent problems </h3>

在前面几个程序中求解波浪方程及其变体时，我们保持了固定的网格。就像静止方程一样，我们可以很好地说明这不是最聪明的方法，通过调整网格可以节省大量资金。然而，与静止的情况相比，还有很大的困难。让我们依次来看看这些困难。

 <ul>   <li>  <i>Time step size and minimal mesh size</i> 。对于静止的问题，一般的做法是 "将网格做得越细越好"。对于有奇点的问题，这往往会导致我们在角落或界面上得到许多细化层次的情况。第一个使用自适应网格的教程，第6步，已经是一个案例的要点。

  然而，对于时间相关问题，我们通常需要选择与网格大小相关的时间步长。对于显式时间离散，这是显而易见的，因为我们需要遵守一个CFL条件，将时间步长与最小的网格尺寸联系起来。对于隐式时间离散，不存在这样的硬性限制，但在实践中，如果我们使网格尺寸变小，我们仍然希望使时间步长变小，因为我们通常有 $\|e\| \le {\cal O}(k^p + h^q)$ 形式的误差估计，其中 $p,q$ 分别是时间和空间离散的收敛阶。我们只有减少这两个项，才能使误差变小。理想情况下，这样的估计会建议选择 $k \propto h^{q/p}$  。因为，至少对于非光滑解的问题来说，误差通常集中在网格尺寸最小的单元中，所以我们必须确实选择 $k \propto h_{\text{min}}^{q/p}$  ，使用<i>smallest</i>网格尺寸。

  其结果是，在一个地方进一步细化网格不仅意味着略微增加自由度数量的适度额外努力，而且由于时间步长较小，必须更频繁地求解<i>global</i>线性系统的更大努力。

  在实践中，我们通常通过承认我们不能使时间步长任意地小，因此也不能使局部网格尺寸任意地小来处理这个问题。相反，我们设置了一个最大的细化水平，当我们标记单元进行细化时，我们只是不细化那些子单元会超过这个最大的细化水平。

  还有一个类似的问题是，我们将选择一个右手边，在不同的时间在领域的不同部分开启。为了避免在突然需要更细的网格的地方，被太粗的网格弄得措手不及，我们还将在程序中强制执行<i>minimal</i>的网格细化水平。

    <li>  <i>Test functions from different meshes</i>。让我们再次考虑我们在上面写下的半离散方程。   @f{align*}
    \frac{u^n(\mathbf x)-u^{n-1}(\mathbf x)}{k_n}


    -
    \left[
    (1-\theta)\Delta u^{n-1}(\mathbf x)
    +
    \theta\Delta u^n(\mathbf x)
    \right]
    &=
    \left[
    (1-\theta)f(\mathbf x, t_{n-1})
    +
    \theta f(\mathbf x, t_n)
    \right].
  @f}

  我们在这里可以把 $u^{n-1}$ 视为数据，因为它可能已经被计算过了。现在，让我们替换掉@f{align*}
    u^n(\mathbf x)\approx u_h^n(\mathbf x)
    =
    \sum_j U^n \varphi_j(\mathbf x),
  @f}。

  与测试函数 $\varphi_i(\mathbf x)$ 相乘，并在必要时按部分整合。在如上所述的过程中，这将产生@f{align*}
    \sum_j
    (M
    +
    k_n \theta A)_{ij} U^n_j
    &=
    (\varphi_i, u_h^{n-1})


    -
    k_n
    (1-\theta)(\nabla \varphi_i, \nabla u_h^{n-1})
    +
    k_n
    \left[
    (1-\theta)F^{n-1}
    +
    \theta F^n
    \right].
  @f}。

  现在想象一下，我们在时间步骤  $n-1$  和  $n$  之间改变了网格。那么问题来了，我们在 $u_h^n$ 和 $u^{n-1}$ 中使用的基函数是不同的！这与右边的项有关。这与右手边的项有关，其中第一个项我们可以更清楚地写成（第二个项遵循同样的模式）@f{align*}
    (\varphi_i, u_h^{n-1})
    =
    (\varphi_i^n, u_h^{n-1})
    =
    \sum_{j=1}^{N_{n-1}}
    (\varphi_i^n, \varphi_j^{n-1}) U^{n-1}_j,
    \qquad\qquad
    i=1\ldots N_n.
  @f}

  如果在这两个时间步骤中使用的网格是相同的，那么 $(\varphi_i^n, \varphi_j^{n-1})$ 就会形成一个方形的质量矩阵 $M_{ij}$  。然而，如果网格不一样，那么一般来说，矩阵是矩形的。更糟的是，甚至很难计算这些积分，因为如果我们在时间步长 $n$ 的网格单元上循环，那么我们需要在这些单元的正交点上评估 $\varphi_j^{n-1}$ ，但它们不一定对应于时间步长 $n-1$ 的网格单元，而且 $\varphi_j^{n-1}$ 不是通过这些单元定义的；如果我们想通过对网格 $n-1$ 的单元积分计算这些积分当然也是一样。

  在任何情况下，我们必须面对的情况是，我们需要整合定义在两个不同网格上的形状函数。这是可以做到的，事实上在步骤28中也有演示，但这个过程最多只能用 "笨拙 "一词来形容。

  在实践中，人们通常不希望这样做。相反，我们在每次调整网格的时候，通过从旧的网格插值到新的网格来避免整个情况。换句话说，我们不是解决上面的方程，而是解决@f{align*}
    \sum_j
    (M
    +
    k_n \theta A)_{ij} U^n_j
    &=
    (\varphi_i, I_h^n u_h^{n-1})


    -
    k_n
    (1-\theta)(\nabla \varphi_i, \nabla I_h^n u_h^{n-1})
    +
    k_n
    \left[
    (1-\theta)F^{n-1}
    +
    \theta F^n
    \right],
  @f}的问题

  其中 $I_h^n$ 是对时间步骤 $n$ 中使用的有限元空间的内插算子。这不是最佳的方法，因为它除了时间和空间离散化之外还引入了一个额外的误差，但这是一个务实的方法，使得做时间适应网格是可行的。   </ul> 




<h3> What could possibly go wrong? Verifying whether the code is correct </h3>

在实现有限元代码时，通常有许多事情会出错。特别是对于时间相关问题，以下是常见的错误来源。

- 时间积分，例如把涉及当前和前一个时间步骤的条款前面的系数弄错了（例如，把一个系数 $\theta$ 混为 $1-\theta$ ）。

- 处理右侧，例如忘记了 $k_n$ 或 $\theta$ 的系数。

- 对边界值处理不当，例如再次忘记了 $k_n$ 或 $\theta$ 的系数，或忘记了不仅对右手边而且对系统矩阵应用非零边界值。

一个不太常见的问题是把初始条件弄错了，因为通常只要输出第一个时间步长就能看出它是错的。在任何情况下，为了验证代码的正确性，有一个测试协议是很有帮助的，它允许我们分别验证这些组件中的每一个。这意味着

- 用非零初始条件但零右手边和边界值测试代码，并验证时间演化是否正确。

- 然后用零初始条件和边界值但非零的右手边进行测试，再次确保正确性。

- 最后，用零初始条件和右手边但非零边界值进行测试。

这听起来很复杂，但幸运的是，对于像这里的无系数（或常数系数）的线性偏微分方程，有一个相当标准的协议，它基于以下观察：如果你选择一个正方形 $[0,1]^2$ 作为你的领域（或者，稍加修改，一个矩形），那么精确解可以写成

@f{align*}
  u(x,y,t) = a(t) \sin(n_x \pi x) \sin(n_y \pi y)


@f}

有整数常数 $n_x,n_y$ ），如果只有初始条件、右手边和边界值也都是 $\sin(n_x \pi x) \sin(n_y \pi y)$ 的形式。这是由于函数 $\sin(n_x \pi x) \sin(n_y \pi y)$ 是拉普拉斯算子的特征函数，允许我们以分析方式计算时间因子 $a(t)$ 等东西，并因此与我们的数值结果进行比较。

作为一个例子，让我们考虑我们有 $u_0(x,y)=\sin(n_x \pi x) \sin(n_x \pi y)$ 和 $f(x,y,t)=0$ 的情况。通过上面对 $u(x,y,t)$ 的形式的主张（ansatz），我们可以得到

@f{align*}
  \left(\frac{\partial}{\partial t} -\Delta\right)
  u(x,y,t)
  &=
  \left(\frac{\partial}{\partial t} -\Delta\right)
  a(t) \sin(n_x \pi x) \sin(n_y \pi y)
  \\
  &=
  \left(a'(t) + (n_x^2+n_y^2)\pi^2 a(t) \right) \sin(n_x \pi x) \sin(n_y \pi y).


@f}

为了使其等于 $f(x,y,t)=0$ ，我们需要： 1.

@f{align*}
  a'(t) + (n_x^2+n_y^2)\pi^2 a(t) = 0


@f}

并由于初始条件， $a(0)=1$  。这个微分方程可以被整合，得到

@f{align*}
  a(t) = - e^{-(n_x^2+n_y^2)\pi^2 t}.


@f}

换句话说，如果初始条件是正弦的乘积，那么解的形状与正弦的乘积完全相同，它以已知的时间依赖性衰减到零。如果你有足够细的网格和足够小的时间步长，这一点是很容易测试的。

如果你把时间积分方案弄错了（例如，在各条款前面有错误的 $\theta$ 或 $k$ 的因子），通常会发生的情况是你没有得到正确的解的时间行为。仔细检查各种因素，直到你得到正确的行为。你可能还想验证一下，时间衰减率（例如，通过绘制固定点的解的值来确定）在你每次将时间步长或网格大小增加一倍或减少一半的时候，都不会增加。你知道这不是对边界条件或右手边的处理，因为这些都是零。

如果你已经如此验证了时间积分器的正确性，那么就拿右手边非零但初始条件为零的情况来说。   $u_0(x,y)=0$  和  $f(x,y,t)=\sin(n_x \pi x) \sin(n_x \pi y)$  。再来看看。

@f{align*}
  \left(\frac{\partial}{\partial t} -\Delta\right)
  u(x,y,t)
  &=
  \left(\frac{\partial}{\partial t} -\Delta\right)
  a(t) \sin(n_x \pi x) \sin(n_y \pi y)
  \\
  &=
  \left(a'(t) + (n_x^2+n_y^2)\pi^2 a(t) \right) \sin(n_x \pi x) \sin(n_y \pi y),


@f}

而要使其等于 $f(x,y,t)$ ，我们需要的是

@f{align*}
  a'(t) + (n_x^2+n_y^2)\pi^2 a(t) = 1


@f}

并由于初始条件， $a(0)=0$  。对这个方程进行时间积分，可以得到

@f{align*}
  a(t) = \frac{1}{(n_x^2+n_y^2)\pi^2} \left[ 1 - e^{-(n_x^2+n_y^2)\pi^2 t} \right].


@f}



同样，如果你在右手边的条款前面有 $\theta$ 或 $k$ 的错误因子，你将不会得到正确的解的时间行为，或者它将收敛到 $\frac{1}{(n_x^2+n_y^2)\pi^2}$ 以外的最大值。

一旦我们验证了使用这个方案的时间积分和右手处理是正确的，我们就可以继续验证我们的边界值是否正确，使用非常类似的方法。




<h3> The testcase </h3>

在一个简单的域上用一个简单的右手边求解热方程，几乎总是导致解非常无聊，因为它们很快就变得非常光滑，然后就不再有什么变化。相反，我们在这里用零迪里希特边界值和零初始条件在L形域上求解方程，但作为右手边我们选择

@f{align*}
  f(\mathbf x, t)
  =
  \left\{
  \begin{array}{ll}
    \chi_1(\mathbf x)
    & \text{if \(0\le t \le 0.2\tau\) or \(\tau\le t \le 1.2\tau\) or \(2\tau\le t
    \le 2.2\tau\), etc}
    \\
    \chi_2(\mathbf x)
    & \text{if \(0.5\le t \le 0.7\tau\) or \(1.5\tau\le t \le 1.7\tau\) or \(2.5\tau\le t
    \le 2.7\tau\), etc}
    \\
    0
    & \text{otherwise}
  \end{array}
  \right.


@f}

在这里。

@f{align*}
  \chi_1(\mathbf x) &=
  \left\{
  \begin{array}{ll}
    1
    & \text{if \(x>0.5\) and \(y>-0.5\)}
    \\
    0
    & \text{otherwise}
  \end{array}
  \right.
  \\
  \chi_2(\mathbf x) &=
  \left\{
  \begin{array}{ll}
    1
    & \text{if \(x>-0.5\) and \(y>0.5\)}
    \\
    0
    & \text{otherwise}
  \end{array}
  \right.


@f}

换句话说，在每一个长度为 $\tau$ 的周期中，右手边首先在域1中闪烁，然后完全关闭，然后在域2中打开，然后再次完全关闭。通过<a href="#Results">results
section</a>中显示的解决方案的小动画，这种模式可能是最好的观察。

如果你把热方程解释为寻找导电固体的空间和时间可变的温度分布，那么上面的测试案例相当于一个L形体，我们把边界保持在零温度，并在领域的两个部分交替加热。在加热的同时，这些地方的温度会上升，之后温度会扩散并再次减弱。这些初始条件的意义在于，它们为我们提供了一个在时间上（当源打开和关闭时）以及时间上（在再入角以及源作用区域的边缘和角落）都有奇点的解决方案。


