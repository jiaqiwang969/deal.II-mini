examples/step-66/doc/intro.dox

 <br> 

<i>
This program was contributed by Fabian Castelli.


A version of this code was presented and discussed in
@cite castelli2021numerical
G.F. Castelli: Numerical Investigation of Cahn-Hilliard-Type Phase-Field
Models for Battery Active Particles, PhD thesis, Karlsruhe Institute of
Technology (KIT), 2021. (To be published)


Fabian Castelli acknowledges financial support by the German Research
Foundation (DFG) through the Research Training Group 2218 SiMET -- Simulation
of mechano-electro-thermal processes in lithium-ion batteries, project number
281041241.


Finally Fabian Castelli would like to thank Timo Heister for the encouragement
and advice in writing this tutorial.
</i>


<a name="Intro"></a>

<h1>Introduction</h1>

本教程程序的目的是演示如何在无矩阵框架内使用牛顿方法解决一个非线性问题。本教程结合了在步骤15、步骤16、步骤37、步骤48和其他中已经介绍的几种技术。




<h3>Problem formulation</h3>在单位圆 $\Omega = \bigl\{ x \in \mathbb{R}^2 : \|x\| \leq 1 \bigr\}$ 上，我们考虑以下非线性椭圆边界值问题，受制于同质狄里奇边界条件。找到一个函数 $u\colon\Omega\to\mathbb{R}$ ，使其成立。

@f{align*}


    - \Delta u &= \exp(u) & \quad & \text{in } \Omega,\\
             u &= 0       & \quad & \text{on } \partial\Omega.


@f}

这个问题也被称为 <i>Gelfand problem</i> ，是燃烧理论问题的一个典型例子，例如见  @cite bebernes1989mathematical  。




<h3>Discretization with finite elements</h3> 像往常一样，我们首先推导出这个问题的弱式公式，用一个光滑的测试函数 $v\colon\Omega\to\mathbb{R}$ 乘以边界条件，在域 $\Omega$ 上积分。通过部分积分，并将右边的项放到左边，就得到了弱式计算。找到一个函数 $u\colon\Omega\to\mathbb{R}$ ，使其对所有测试函数 $v$ 都成立。

@f{align*}{
 \int_\Omega \nabla v \cdot \nabla u \,\mathrm{d}x


 -
 \int_\Omega v \exp(u) \,\mathrm{d}x
 =
 0.


@f}



选择拉格朗日有限元空间 $V_h \dealcoloneq
\bigl\{ v \in C(\overline{\Omega}) : v|_Q \in \mathbb{Q}_p \text{ for all }
Q \in \mathcal{T}_h \bigr\} \cap H_0^1(\Omega)$ ，它直接包含了同质Dirichlet边界条件，我们可以定义一个基 $\{\varphi_i\}_{i=1,\dots,N}$ ，因此只需用这些基函数进行测试。因此离散的问题如下。找到 $u_h\in V_h$ ，使得对所有 $i=1,\dots,N$ 都成立。

@f{align*}{
 F(u_h)
 \dealcoloneq
 \int_\Omega \nabla \varphi_i \cdot \nabla u_h \,\mathrm{d}x


 -
 \int_\Omega \varphi_i \exp(u_h) \,\mathrm{d}x \stackrel{!}{=} 0.


@f}

由于每个有限元函数是基函数 $\{\varphi_i\}_{i=1,\dots,N}$ 的线性组合，我们可以通过 $\mathbb{R}^N$ 中由每个自由度（DOF）中的未知值组成的向量来确定有限元解决方案。因此，我们定义非线性函数 $F\colon\mathbb{R}^N\to\mathbb{R}^N$ 代表离散非线性问题。

为了解决这个非线性问题，我们使用牛顿方法。因此，给定一个初始猜测 $u_h^0\in V_h$ ，它已经满足了Dirichlet边界条件，我们通过连续应用以下方案确定一连串的牛顿步骤 $\bigl( u_h^n \bigr)_n$ 。

@f{align*}{
 &\text{Solve for } s_h^n\in V_h: \quad & F'(u_h^n)[s_h^n] &= -F(u_h^n),\\
 &\text{Update: }                       & u_h^{n+1} &= u_h^n + s_h^n.


@f}

因此，在每个牛顿步骤中，我们必须解决一个线性问题  $A\,x = b$  ，其中系统矩阵  $A$  由雅各布  $F'(u_h^n)[\,\cdot\,]\colon\mathbb{R}^N\to\mathbb{R}^N$  表示，右手  $b$  由负残差  $-F(u_h^n)$  表示。在这种情况下，解向量 $x$ 是 $n$ 的第1个牛顿步骤的牛顿更新。注意，我们假设初始猜测 $u_h^0$ ，它已经满足了问题公式中的迪里希特边界条件（事实上这也可能是一个不均匀的迪里希特边界条件），因此牛顿更新 $s_h$ 满足一个均匀的迪里希特条件。

到目前为止，我们只测试了基函数，然而，我们也可以将 $V_h$ 的任何函数表示为基函数的线性组合。在数学上，这意味着 $V_h$ 的每个元素都可以通过表示公式与向量 $U\in\mathbb{R}^N$ 相识别。   $u_h = \sum_{i=1}^N U_i \varphi_i$  .因此，利用这一点我们可以给出离散雅各布和残差的表达式。

@f{align*}{
 A_{i,j} = \bigl( F'(u_h^n) \bigr)_{i,j}
 &=
 \int_\Omega \nabla\varphi_i \cdot \nabla \varphi_j \,\mathrm{d} x


 -
 \int_\Omega \varphi_i \, \exp( u_h ) \varphi_j \,\mathrm{d} x,\\
 b_{i} = \bigl( F(u_h^n) \bigr)_{i}
 &=
 \int_\Omega \nabla\varphi_i \cdot \nabla u_h^n \,\mathrm{d} x


 -
 \int_\Omega \varphi_i \, \exp( u_h^n ) \,\mathrm{d} x.


@f}

与第15步相比，我们也可以形成与问题的强表述相对应的非线性函数的Frech{'e}t导数，并在之后将其离散化。然而，最终我们会得到相同的离散方程组。




<h3>Numerical linear algebra</h3> 注意，系统矩阵，实际上是Jacobian，如何取决于前一个牛顿步骤  $A = F'(u^n)$  。因此，我们需要告诉计算系统矩阵的函数关于最后一个牛顿步骤的解决方案。在一个经典的 <code>assemble_system()</code> 函数的实现中，我们将通过使用成员函数 FEValuesBase::get_function_values() 和 FEValuesBase::get_function_gradients(). 从装配过程中的最后一个牛顿步骤中收集这些信息，然后 <code>assemble_system()</code> 函数看起来像。

@code
template <int dim>
void GelfandProblem<dim>::assemble_system()
{
  system_matrix = 0;
  system_rhs    = 0;


  const QGauss<dim> quadrature_formula(fe.degree + 1);
  FEValues<dim>     fe_values(fe,
                          quadrature_formula,
                          update_values | update_gradients | update_JxW_values);


  const unsigned int n_q_points    = fe_values.n_quadrature_points;
  const unsigned int dofs_per_cell = fe_values.dofs_per_cell;


  FullMatrix<double>                   cell_matrix(dofs_per_cell);
  Vector<double>                       cell_rhs(dofs_per_cell);
  std::vector<types::global_dof_index> local_dof_indices(dofs_per_cell);


  std::vector<Tensor<1, dim>> newton_step_gradients(n_q_points);
  std::vector<double>         newton_step_values(n_q_points);



  for (const auto &cell : dof_handler.active_cell_iterators())
    {
      cell_matrix = 0.0;
      cell_rhs    = 0.0;


      fe_values.reinit(cell);


      fe_values.get_function_values(solution, newton_step_values);
      fe_values.get_function_gradients(solution, newton_step_gradients);


      for (unsigned int q = 0; q < n_q_points; ++q)
        {
          const double nonlinearity = std::exp(newton_step_values[q]);
          const double dx           = fe_values.JxW(q);


          for (unsigned int i = 0; i < dofs_per_cell; ++i)
            {
              const double         phi_i      = fe_values.shape_value(i, q);
              const Tensor<1, dim> grad_phi_i = fe_values.shape_grad(i, q);


              for (unsigned int j = 0; j < dofs_per_cell; ++j)
                {
                  const double         phi_j      = fe_values.shape_value(j, q);
                  const Tensor<1, dim> grad_phi_j = fe_values.shape_grad(j, q);


                  cell_matrix(i, j) +=
                    (grad_phi_i * grad_phi_j - phi_i * nonlinearity * phi_j) *
                    dx;
                }


              cell_rhs(i) += (-grad_phi_i * newton_step_gradients[q] +
                              phi_i * newton_step_values[q]) *
                             dx;
            }
        }


      cell->get_dof_indices(local_dof_indices);


      constraints.distribute_local_to_global(
        cell_matrix, cell_rhs, local_dof_indices, system_matrix, system_rhs);
    }
}
@endcode



由于我们想在不存储矩阵的情况下解决这个问题，我们需要在使用之前告诉无矩阵算子这些信息。因此在派生类 <code>JacobianOperator</code> 中，我们将实现一个名为 <code>evaluate_newton_step</code> 的函数，它将在使用矩阵-向量实现之前处理最后一个牛顿步骤的信息。此外，我们想对线性求解器使用几何多网格（GMG）预处理，所以为了应用多级算子，我们需要将最后一个牛顿步骤也传递给这些算子。这是一项棘手的任务，因为包含最后一个牛顿步骤的向量必须被插值到三角形的所有层面。在代码中，这项任务将由函数 MGTransferMatrixFree::interpolate_to_mg(). 完成。注意，与之前的案例有一个根本的区别，即我们设置并使用了一个几何多网格预处理程序，我们可以重复使用MGTransferMatrixFree对象来计算所有牛顿步。所以我们在这里可以通过定义一个类变量，使用已经设置好的MGTransferMatrixFree对象 <code>mg_transfer</code> ，并在 <code>setup_system()</code> 函数中初始化，从而节省一些工作。

@code
template <int dim, int fe_degree>
void GelfandProblem<dim, fe_degree>::compute_update()
{
  TimerOutput::Scope t(computing_timer, "compute update");


  solution.update_ghost_values();


  system_matrix.evaluate_newton_step(solution);


  mg_transfer.interpolate_to_mg(dof_handler, mg_solution, solution);



  // Set up options for the multilevel preconditioner
  // ...


  for (unsigned int level = 0; level < triangulation.n_global_levels(); ++level)
    {
      mg_matrices[level].evaluate_newton_step(mg_solution[level]);
    }


  // Define the actual preconditioner
  // ...


  // Solve the linear system
  // ...
}
@endcode



评估非线性的函数与评估系数函数的步骤37的函数 <code>evaluate_coefficient</code> 的工作方式基本相同。我们的想法是使用一个FEEvaluation对象来评估牛顿步骤，并将所有单元和所有正交点的表达式存储在一个表中。

@code
template <int dim, int fe_degree, typename number>
void JacobianOperator<dim, fe_degree, number>::evaluate_newton_step(
  const LinearAlgebra::distributed::Vector<number> &newton_step)
{
  const unsigned int n_cells = this->data->n_cell_batches();


  FEEvaluation<dim, fe_degree, fe_degree + 1, 1, number> phi(*this->data);


  nonlinear_values.reinit(n_cells, phi.n_q_points);


  for (unsigned int cell = 0; cell < n_cells; ++cell)
    {
      phi.reinit(cell);
      phi.read_dof_values_plain(newton_step);
      phi.evaluate(EvaluationFlags::values);


      for (unsigned int q = 0; q < phi.n_q_points; ++q)
        {
          nonlinear_values(cell, q) = std::exp(phi.get_value(q));
        }
    }
}
@endcode






<h3>Triangulation</h3> 正如在步骤37中所说，如果我们选择高阶有限元空间，无矩阵方法会变得更有效率。由于我们想在 $d$ 维的单位球上解决问题，最好有一个适当的边界近似来克服收敛问题。出于这个原因，我们使用MappingQGeneric类的等参数方法来恢复平滑边界以及内单元的映射。此外，为了得到一个好的三角形，我们使用了TransfiniteInterpolationManifold。


