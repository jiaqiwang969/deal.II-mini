examples/step-16/doc/intro.dox

 <br> 

<i> Note: A variant called step-16b of this tutorial exists, that uses
MeshWorker and LocalIntegrators instead of assembling matrices manually as it
is done in this tutorial.
</i>

<a name="Intro"></a>

<h1>Introduction</h1>


这个例子展示了deal.II中多级函数的基本用法。它几乎解决了与步骤6中使用的相同的问题，但展示了使用多网格作为预处理程序时必须提供的东西。特别是，这要求我们定义一个层次结构，提供从一个层次到下一个层次以及返回的转移算子，并在每个层次上提供拉普拉斯算子的表示。

为了使微分方程系统和块状预处理程序具有足够的灵活性，在启动多级方法之前必须创建一些不同的对象，尽管大部分需要做的事情都是由deal.II本身提供。这些对象是

  - 网格之间的对象处理转移；我们使用MGTransferPrebuilt类来处理这个问题，它几乎完成了库内的所有工作。

  - 解算器的最粗层次；在这里，我们使用MGCoarseGridHouseholder。

  - 所有其他级别的平滑器，在我们的例子中，这将是使用SOR作为基本方法的 mg::SmootherRelaxation 类。

  - 和 mg::Matrix, 一个具有特殊水平乘法的类，也就是说，我们基本上每个网格水平存储一个矩阵并允许与之相乘。

这些对象中的大多数只需要在实际求解线性系统的函数中使用。在这里，这些对象被组合到一个多网格类型的对象中，其中包含V型循环的实现，它又被预设条件器PreconditionMG使用，准备插入LAC库的线性求解器中。

这里实现的自适应细化网格的多网格方法遵循 @ref mg_paper "多网格论文 "中的大纲，该论文在deal.II中描述了底层实现，也介绍了很多术语。首先，我们必须区分层次网格，即与粗网格有相同细化距离的单元，以及由层次中的活动单元组成的叶子网格（在较早的工作中，我们将其称为全局网格，但这个术语被过度使用）。最重要的是，叶子网格与最细层次上的层次网格不完全相同。下面的图片显示了我们认为的 "层次网"。

<p align="center">  @image html "multigrid.png" ""   </p>  。

这个网格中的精细层次只包括定义在精细单元上的自由度，但不延伸到领域中未被精细化的那部分。虽然这保证了整体的努力增长为 ${\cal O}(N)$ 的最佳多网格复杂度所必需的，但它导致了在定义平滑的地方和对定义在各个层次上的算子提出什么边界条件时的问题，如果层次边界不是外部边界。这些问题将在上面引用的文章中详细讨论。

<h3>The testcase</h3>

我们在这里解决的问题与第6步类似，主要有两个不同点：第一，多网格预处理程序，显然。我们还改变了系数的不连续性，使局部装配器看起来不会比必要的更复杂。


