examples/step-15/doc/intro.dox

 <br> 

<i>
This program grew out of a student project by Sven Wetterauer at the
University of Heidelberg, Germany. Most of the work for this program
is by him.
</i> <br>  。


<a name="Intro"></a>

<h1>Introduction</h1>

<h3>Foreword</h3>

这个程序涉及到一个非线性椭圆偏微分方程的例子，即[最小表面方程](https://en.wikipedia.org/wiki/Minimal_surface)。你可以想象这个方程的解来描述一个肥皂膜所跨越的表面，这个肥皂膜被一个封闭的金属环所包围。我们想象金属丝不只是一个平面的环，实际上是弯曲的。肥皂膜的表面张力将使该表面变成最小表面。最小表面方程的解描述了这个形状，电线的垂直位移是一个边界条件。为了简单起见，我们在此假定表面可以写成图形 $u=u(x,y)$ ，尽管很明显，构建这样的情况并不难，即钢丝弯曲的方式使得表面只能局部构建成图形，而不能整体构建。

因为这个方程是非线性的，所以我们不能直接解决它。相反，我们必须使用牛顿的方法来迭代计算解决方案。

 @dealiiVideoLecture{31.5,31.55,31.6}  （  @dealiiVideoLectureSeeAlso{31.65,31.7})  ）。




<h3>Classical formulation</h3>

在经典的意义上，该问题以如下形式给出。


  @f{align*}


    -\nabla \cdot \left( \frac{1}{\sqrt{1+|\nabla u|^{2}}}\nabla u \right) &= 0 \qquad
    \qquad &&\textrm{in} ~ \Omega
    \\
    u&=g \qquad\qquad &&\textrm{on} ~ \partial \Omega.
  @f}



 $\Omega$ 是我们将导线的位置投影到 $x-y$ 空间得到的域。在这个例子中，我们选择 $\Omega$ 作为单位盘。

如上所述，我们用牛顿方法解决这个方程，在这个方法中，我们从 $(n-1)$ 个方程计算出 $n$ 个近似解，并使用阻尼参数 $\alpha^n$ 来获得更好的全局收敛行为。   @f{align*}
    F'(u^{n},\delta u^{n})&=- F(u^{n})
    \\
    u^{n+1}&=u^{n}+\alpha^n \delta u^{n}
  @f}

与@f[
    F(u) \dealcoloneq -\nabla \cdot \left( \frac{1}{\sqrt{1+|\nabla u|^{2}}}\nabla u \right)
  @f]

而 $F'(u,\delta u)$ 是F在 $\delta u$ 方向的导数。

@f[
  F'(u,\delta u)=\lim \limits_{\epsilon \rightarrow 0}{\frac{F(u+\epsilon \delta u)-
  F(u)}{\epsilon}}.


@f]



通过寻找 $F'(u,\delta u)$ 是什么，我们发现我们必须在每一个牛顿步骤中解决一个线性椭圆PDE， $\delta u^n$ 是的解。

  @f[


  - \nabla \cdot \left( \frac{1}{\left(1+|\nabla u^{n}|^{2}\right)^{\frac{1}{2}}}\nabla
  \delta u^{n} \right) +
  \nabla \cdot \left( \frac{\nabla u^{n} \cdot
  \nabla \delta u^{n}}{\left(1+|\nabla u^{n}|^{2}\right)^{\frac{3}{2}}} \nabla u^{n}
  \right)  =


  -\left( - \nabla \cdot \left( \frac{1}{\left(1+|\nabla u^{n}|^{2}\right)^{\frac{1}{2}}}
  \nabla u^{n} \right) \right)
  @f]



为了解决最小表面方程，我们必须重复解决这个方程，每一个牛顿步骤一次。为了解决这个问题，我们必须看一下这个问题的边界条件。假设 $u^{n}$ 已经有了正确的边界值，那么牛顿更新 $\delta u^{n}$ 的边界条件应该为零，这样才能在加入两者之后有正确的边界条件。  在第一个牛顿步骤中，我们从解 $u^{0}\equiv 0$ 开始，牛顿更新仍然要向解 $u^{1}$ 传递正确的边界条件。


综上所述，我们必须在第一步用边界条件 $\delta
u^{0}=g$ 解决上述PDE，并在接下来的所有步骤中用 $\delta u^{n}=0$ 解决。

 @note  在某种意义上，人们可能会说，如果程序已经实现了 $F(u)$ ，那么还必须实现 $F'(u,\delta)$ 就是重复的。像往常一样，重复会诱发错误，我们希望能避免它。虽然我们在这个程序中没有探讨这个问题，但我们将在下面的<a
  href="#extensions">Possibilities for extensions</a>部分的结尾处，特别是在步骤72中再来讨论这个问题。




<h3>Weak formulation of the problem</h3>

从上面的强表述开始，我们通过将PDE的两边都乘以一个检验函数 $\varphi$ 并对两边进行部分积分，得到弱表述。   @f[
  \left( \nabla \varphi , \frac{1}{\left(1+|\nabla u^{n}|^{2}\right)^{\frac{1}{2}}}\nabla
  \delta u^{n} \right)-\left(\nabla \varphi ,\frac{\nabla u^{n} \cdot \nabla
  \delta u^{n}}{\left(1+|\nabla u^{n}|^{2}\right)^{\frac{3}{2}}}\nabla u^{n}  \right)
  = -\left(\nabla \varphi , \frac{1}{\left(1+|\nabla u^{n}|^{2}\right)^{\frac{1}{2}}} \nabla u^{n}
   \right).
  @f]

这里的解 $\delta u^{n}$ 是 $H^{1}(\Omega)$ 中的一个函数，受制于上面讨论的边界条件。将这一空间还原为具有基数 $\left\{
\varphi_{0},\dots , \varphi_{N-1}\right\}$ 的有限维空间，我们可以写出该解。

@f[
  \delta u^{n}=\sum_{j=0}^{N-1} \delta U_{j} \varphi_{j}.


@f]



使用基函数作为测试函数并定义 $a_{n} \dealcoloneq \frac{1}
{\sqrt{1+|\nabla u^{n}|^{2}}}$ ，我们可以重写弱的表述。

@f[
  \sum_{j=0}^{N-1}\left[ \left( \nabla \varphi_{i} , a_{n} \nabla \varphi_{j} \right) -
  \left(\nabla u^{n}\cdot \nabla \varphi_{i} , a_{n}^{3} \nabla u^{n} \cdot \nabla
  \varphi_{j} \right) \right] \cdot \delta U_{j}=-\left( \nabla \varphi_{i} , a_{n}
  \nabla u^{n}\right) \qquad \forall i=0,\dots ,N-1,


@f]



其中解  $\delta u^{n}$  是由系数  $\delta U^{n}_{j}$  给出的。这个线性方程组可以改写为。

@f[
  A^{n}\; \delta U^{n}=b^{n},


@f]



其中，矩阵 $A^{n}$ 的条目由以下方式给出。

@f[
  A^{n}_{ij} \dealcoloneq \left( \nabla \varphi_{i} , a_{n} \nabla \varphi_{j} \right) -
  \left(\nabla u^{n}\cdot \nabla \varphi_{i} , a_{n}^{3} \nabla u^{n} \cdot \nabla
  \varphi_{j} \right),


@f]



而右手边 $b^{n}$ 由以下公式给出。

@f[
  b^{n}_{i} \dealcoloneq -\left( \nabla \varphi_{i} , a_{n} \nabla u^{n}\right).


@f]






<h3> Questions about the appropriate solver </h3>

与上述牛顿步骤相对应的矩阵可以重新表述，以更好地显示其结构。稍微重写一下，我们可以得到它的形式是

@f[
  A_{ij}
  =
  \left(
    \nabla \varphi_i,
    B
    \nabla \varphi_j
  \right),


@f]

其中矩阵 $B$ （在 $d$ 空间维度中的大小为 $d \times d$ ）由以下表达式给出。

@f[
  B
  =
  a_n \left\{
   \mathbf I


   -
   a_n^2 [\nabla u_n] \otimes [\nabla u_n]
  \right\}
  =
  a_n \left\{
   \mathbf I


   -
  \frac{\nabla u_n}{\sqrt{1+|\nabla u^{n}|^{2}}} \otimes
  \frac{\nabla u_n}{\sqrt{1+|\nabla u^{n}|^{2}}}
  \right\}.


@f]

从这个表达式来看，显然 $B$ 是对称的，所以 $A$ 也是对称的。另一方面， $B$ 也是正定的，这使 $A$ 也具有同样的属性。这可以通过注意到向量 $v_1 =
\frac{\nabla u^n}{|\nabla u^n|}$ 是 $B$ 的特征向量，其特征值为 $\lambda_1=a_n \left(1-\frac{|\nabla u^n|^2}{1+|\nabla u^n|^2}\right) > 0$ ，而所有与 $v_1$ 相互垂直的向量 $v_2\ldots v_d$ 都是特征向量，其特征值为 $a_n$  。由于所有的特征值都是正的， $B$ 是正定的， $A$ 也是正定的。因此我们可以使用CG方法来解决牛顿步骤。矩阵 $A$ 是对称和正定的这一事实不应该令人惊讶。它是由取一个能量函数的导数而产生的算子的结果：最小表面方程只是最小化了一些非二次能量。因此，牛顿矩阵，作为标量能量的二阶导数矩阵，必须是对称的，因为与 $i$ th和 $j$ th自由度有关的导数显然应该相减。同样，如果能量函数是凸的，那么第二导数的矩阵必须是正定的，上面的直接计算只是重申了这一点。)

然而，值得注意的是，在 $\nabla u$ 变大的问题上，正定性会退化。换句话说，如果我们简单地将所有边界值乘以2，那么一阶 $u$ 和 $\nabla u$ 也将被乘以2，但结果是 $B$ 的最小特征值将变小，矩阵将变得更加涣散。更具体地说，对于 $|\nabla u^n|\rightarrow\infty$ ，我们有 $\lambda_1 \propto a_n \frac{1}{|\nabla u^n|^2}$ 而 $\lambda_2\ldots \lambda_d=a_n$ ；因此， $B$ 的条件数，也就是 $A$ 的条件数的一个乘法因子，会像 ${\cal O}(|\nabla u^n|^2)$ 那样增长）。用目前的程序很容易验证，确实将目前程序中使用的边界值乘以越来越大的数值，导致问题最终不再能用我们这里使用的简单预设条件的CG方法解决。




<h3> Choice of step length and globalization </h3>

如上所述，牛顿方法的工作原理是计算一个方向 $\delta u^n$ ，然后以一个步长 $0 < \alpha^n \le 1$ 执行更新 $u^{n+1} = u^{n}+\alpha^n
\delta u^{n}$  。一个常见的现象是，对于强非线性模型，如果我们总是选择 $\alpha^n=1$ ，牛顿方法就不会收敛，除非我们从一个足够接近非线性问题的解 $u$ 的初始猜测 $u^0$ 开始。在实践中，我们并不总是有这样的初始猜测，因此采取完整的牛顿步骤（即使用 $\alpha=1$ ）往往是行不通的。

因此，一个常见的策略是，当迭代 $u^n$ 离解 $u$ 还很远时，在前几步使用较小的步长，随着我们越来越接近，使用较大的 $\alpha^n$ 值，直到最后我们可以开始使用全步 $\alpha^n=1$ ，因为我们已经足够接近解。当然，问题是如何选择 $\alpha^n$ 。基本上有两种广泛使用的方法：直线搜索和信任区域方法。

在这个程序中，我们总是简单地选择步长等于0.1。这确保了在手头的测试案例中，我们确实得到了收敛，尽管很明显，由于没有最终恢复到全步长，我们放弃了使牛顿方法如此吸引人的快速、二次收敛性。很明显，如果这个程序是为了解决更多的现实问题，我们最终必须解决这个问题。我们将在<a href="#Results">results section</a>中对这个问题进行更多的评论，并在第77步中使用一个更好的方法。




<h3> Summary of the algorithm and testcase </h3>

总的来说，我们这里的程序在许多方面与step-6并无不同。主类的布局基本上是相同的。另一方面， <code>run()</code> 函数中的驱动算法是不同的，工作原理如下。<ol>  <li>  从函数 $u^{0}\equiv 0$ 开始，以这样的方式修改它，使 $u^0$ 的值沿边界等于正确的边界值 $g$ （这发生在 <code>MinimalSurfaceProblem::set_boundary_values</code> ）。设 $n=0$  .   </li> 

 <li>  通过解决 $A^{n}\;\delta
  U^{n}=b^{n}$ 系统和 $\delta u^{n}=0$ 上的边界条件，计算牛顿更新。   </li> 

 <li>  计算一个步长  $\alpha^n$  。在这个程序中，我们总是设置  $\alpha^n=0.1$  。为了便于以后的扩展，这发生在一个自己的函数中，即 <code>MinimalSurfaceProblem::determine_step_length</code>  中。 (总是选择 $\alpha^n=0.1$ 的策略当然不是最优的--我们应该选择一个对给定搜索方向有效的步长--但这需要做一些工作来实现。最后，我们把这类事情留给外部软件包：step-77就是这样做的）。)   </li> 

 <li>  解的新近似值由  $u^{n+1}=u^{n}+\alpha^n \delta u^{n}$  给出。   </li> 

 <li>  如果 $n$ 是5的倍数，则细化网格，将解 $u^{n+1}$ 转移到新的网格中，并设置 $u^{n+1}$ 的值，以便沿边界有 $u^{n+1}|_{\partial\Gamma}=g$ （同样在 <code>MinimalSurfaceProblem::set_boundary_values</code> ）。请注意，这并不是自动保证的，即使在网格细化之前我们已经有了 $u^{n+1}|_{\partial\Gamma}=g$ ，因为网格细化会在网格中增加新的节点，当我们把旧的解决方案带到新的网格时，必须把旧的解决方案插值到新的节点。我们通过插值选择的数值可能接近于精确的边界条件，但一般来说，并不是正确的数值。   </li> 

 <li>  设置 $n\leftarrow n+1$ 并转到步骤2。   </li>   </ol> 。

我们解决的测试案例选择如下。我们寻求在单位盘 $\Omega=\{\mathbf x: \|\mathbf
x\|<1\}\subset {\mathbb R}^2$ 上找到最小曲面的解决方案，其中曲面沿边界达到 $u(x,y)|{\partial\Omega} = g(x,y) \dealcoloneq \sin(2 \pi (x+y))$ 的数值。


