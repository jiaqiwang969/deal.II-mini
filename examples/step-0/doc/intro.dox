<a name="Intro"></a>


<h1> About the tutorial </h1>
deal.II 文档包含丰富的学习文档，但对于刚刚接触C++的初学者来说，要想深入理解和改写底层框架着实难度巨大。其一个重要的原因是，deal.II 的底层是基于范型编程的思想。

因此，在进入正式的step-1学习之前，有必要了解一些C++的基础知识。因此，该教程取名叫做step-0。
这是仅仅是个人学习STL、boost和deal.II的学习笔记，希望尽快加强自身编程能力，同时也希望能够分享和帮助到更多热爱deal.IId 小伙伴。

基本构想包含几大块，随着学习的深入，在今后将逐步完善:
- STL源码剖析: 包括配置器、迭代器、仿函数、容器、算法、配接器，这六大组建的核心代码学习。 参考：侯捷的STL源码解析和Alinshans/MyTinySTL 。
- Boost程序库探秘: 参考Björn Karlsson的An Introduction to Boost。
- Deal.II程序库探秘: 参考deal.II documentation。
- 分别对应的测试库及案例库。





<h1>Introduction</h1>

<h2> STL源码剖析 </h2>
<h3> 配置器 </h3>

包括了 allocator 和 constructor，分别定义在 allocator.h 和 construct.h 中。
allocator 负责空间的配置与回收，定义了一个类 mystl::alloc 用于管理内存，定义在 alloc.h 。
constructor 负责对象的构造与析构，对应两个全局函数： construct 和 destroy。


<h3> 迭代器 </h3>
iterator，连接着容器与算法，是一种泛型指针，定义在 iterator.h 中。每个容器都附带专属的迭代器，是一种重载了 operator*，operator->，operator++，operator-- 等操作的模板类。

<h3> 仿函数  </h3>
仿函数，现在称为函数对象，定义在 functional.h 中。

<h3> 容器 </h3>

<p align="center">
   <div class="img" align="center">
      <img src="https://cdn.mathpix.com/snip/images/VWnS4G3Buu7-aBCwOZaxoTbCSQzMkpxnY6fOhoNyo28.original.fullsize.png"
           alt = ""
           width="500">
    </div>
</p>

- vector（向量）
- list（双向链表）
- deque（双端队列）
- map/multimap（映射）
- set/multiset（集合）
- unordered_map/unordered_multimap（无序映射）
- unordered_set/unordered_multiset（无序集合）
- basic_string （字符序列）

<h3> 算法 </h3>
- 基本算法（14个） 定义在 algobase.h
- 数值算法（5个） 定义在 numeric.h
- set 算法（4个） 定义在 set_algo.h
- heap 算法（4个） 定义在 heap_algo.h
- 其它算法（54个） 定义在 algo.h

<h3> 配接器 </h3>
<h4> container adapters </h4>
 - stack (栈)
 - queue (队列)
 - priority_queue (优先队列)

<h4> iterator adapters </h4>
 - reverse_iterator: reverse_iterator 是一种反向迭代器，重载了 operator*，operator->，operator++，operator--，operator+，operator-，operator+=，operatpr-=，operator[] 等操作，变前进为后退，后退为前进。



<h2> 算法的复杂度测试 </h2>

目前常见的 Big-oh 有下列几种情形：
1. $\mathrm{O}(1)$ 或 $\mathrm{O}(\mathrm{c}):$ 称为常数时间(constant time)
2. $\mathrm{O}(\mathrm{n}):$ 称为线性时间(linear time)
3. $\mathrm{O}\left(\log _{2} \mathrm{n}\right):$ 称为次线性时间(sub-linear time)
4. $\mathrm{O}\left(\mathrm{n}^{2}\right):$ 称为平方时间(quadratic time)
5. $\mathrm{O}\left(\mathrm{n}^{3}\right):$ 称为立方时间(cubic time)
6. $\mathrm{O}\left(2^{\mathrm{n}}\right):$ 称为指数时间( exponential time)
7. $\mathrm{O}\left(\mathrm{n} \log _{2} \mathrm{n}\right):$ 介于线性及二次方成长的中间之行为模式

<h2> 前闭后开区间 </h2>

<p align="center">
   <div class="img" align="center">
      <img src="https://cdn.mathpix.com/snip/images/Y9HfA8GCq7DoSNmAm5Zt_AGWW97aswKhdgOWuXvi3tk.original.fullsize.png"
           alt = ""
           width="500">
    </div>
</p>


迭代器是一种范化的指针，类似指针做for循环的操作。
@code
      Contatiner<T> c;
      ...
      Container<T>::interator ite = c.begin();
      for (; ite != c.end(); ++ite)
        ...
@endcode

对应，这是老版本的deal.II 8.3.0, 所用到的迭代器的for-loop。
@code
  for (unsigned int step=0; step<5; ++step)
    {
      Triangulation<2>::active_cell_iterator
      cell = triangulation.begin_active(),
      endc = triangulation.end();
      for (; cell!=endc; ++cell)
        {
          for (unsigned int v=0;
               v < GeometryInfo<2>::vertices_per_cell;
               ++v)
            {
              const double distance_from_center
                = center.distance (cell->vertex(v));
              if (std::fabs(distance_from_center - inner_radius) < 1e-10)
                {
                  cell->set_refine_flag ();
                  break;
                }
            }
        }
      triangulation.execute_coarsening_and_refinement ();
    }

@endcode


C++-11后，增加了一种叫range-base statement的写法，引入了  `auto`。
@code
      Contatiner<T> c;
      ...
      Container<T>::interator ite = c.begin();
      for (auto element : c)
        ...
@endcode
对应，新版本的deal.II里面的操作：
@code
  for (unsigned int step=0; step<5; ++step)
    {
      for (auto cell: triangulation.active_cell_iterators())
        {
          for (unsigned int v=0;
               v < GeometryInfo<2>::vertices_per_cell;
               ++v)
            {
              const double distance_from_center
                = center.distance (cell->vertex(v));
              if (std::fabs(distance_from_center - inner_radius) < 1e-10)
                {
                  cell->set_refine_flag ();
                  break;
                }
            }
        }
      triangulation.execute_coarsening_and_refinement ();
    }
@endcode






<h1>  三者联系 </h1>
为何学习deal.II会扯上学习STL和boost? 首先，让我们来看看他们之间的联系：

